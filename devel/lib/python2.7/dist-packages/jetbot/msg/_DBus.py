# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jetbot/DBus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import jetbot.msg

class DBus(genpy.Message):
  _md5sum = "8afdad0d004f8088d4c832bf9a170a35"
  _type = "jetbot/DBus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Rcp rcp
Hcp hcp
================================================================================
MSG: jetbot/Rcp
uint16 ch1
uint16 ch2
uint16 ch3
uint16 ch4
uint8 sw1
uint8 sw2
================================================================================
MSG: jetbot/Hcp
int16 mouse_speed_x
int16 mouse_speed_y
int16 mouse_speed_z
uint8 mouse_button_left
uint8 mouse_button_right
uint16 key
uint16 res"""
  __slots__ = ['rcp','hcp']
  _slot_types = ['jetbot/Rcp','jetbot/Hcp']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rcp,hcp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DBus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rcp is None:
        self.rcp = jetbot.msg.Rcp()
      if self.hcp is None:
        self.hcp = jetbot.msg.Hcp()
    else:
      self.rcp = jetbot.msg.Rcp()
      self.hcp = jetbot.msg.Hcp()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4H2B3h2B2H().pack(_x.rcp.ch1, _x.rcp.ch2, _x.rcp.ch3, _x.rcp.ch4, _x.rcp.sw1, _x.rcp.sw2, _x.hcp.mouse_speed_x, _x.hcp.mouse_speed_y, _x.hcp.mouse_speed_z, _x.hcp.mouse_button_left, _x.hcp.mouse_button_right, _x.hcp.key, _x.hcp.res))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.rcp is None:
        self.rcp = jetbot.msg.Rcp()
      if self.hcp is None:
        self.hcp = jetbot.msg.Hcp()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.rcp.ch1, _x.rcp.ch2, _x.rcp.ch3, _x.rcp.ch4, _x.rcp.sw1, _x.rcp.sw2, _x.hcp.mouse_speed_x, _x.hcp.mouse_speed_y, _x.hcp.mouse_speed_z, _x.hcp.mouse_button_left, _x.hcp.mouse_button_right, _x.hcp.key, _x.hcp.res,) = _get_struct_4H2B3h2B2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4H2B3h2B2H().pack(_x.rcp.ch1, _x.rcp.ch2, _x.rcp.ch3, _x.rcp.ch4, _x.rcp.sw1, _x.rcp.sw2, _x.hcp.mouse_speed_x, _x.hcp.mouse_speed_y, _x.hcp.mouse_speed_z, _x.hcp.mouse_button_left, _x.hcp.mouse_button_right, _x.hcp.key, _x.hcp.res))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.rcp is None:
        self.rcp = jetbot.msg.Rcp()
      if self.hcp is None:
        self.hcp = jetbot.msg.Hcp()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.rcp.ch1, _x.rcp.ch2, _x.rcp.ch3, _x.rcp.ch4, _x.rcp.sw1, _x.rcp.sw2, _x.hcp.mouse_speed_x, _x.hcp.mouse_speed_y, _x.hcp.mouse_speed_z, _x.hcp.mouse_button_left, _x.hcp.mouse_button_right, _x.hcp.key, _x.hcp.res,) = _get_struct_4H2B3h2B2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H2B3h2B2H = None
def _get_struct_4H2B3h2B2H():
    global _struct_4H2B3h2B2H
    if _struct_4H2B3h2B2H is None:
        _struct_4H2B3h2B2H = struct.Struct("<4H2B3h2B2H")
    return _struct_4H2B3h2B2H
