// Generated by gencpp from file jetbot/CBus.msg
// DO NOT EDIT!


#ifndef JETBOT_MESSAGE_CBUS_H
#define JETBOT_MESSAGE_CBUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jetbot/ChassisState.h>
#include <jetbot/ChassisState.h>
#include <jetbot/PantiltState.h>
#include <jetbot/PantiltState.h>

namespace jetbot
{
template <class ContainerAllocator>
struct CBus_
{
  typedef CBus_<ContainerAllocator> Type;

  CBus_()
    : frame_id(0)
    , fs(0)
    , cp()
    , cv()
    , gp()
    , gv()  {
    }
  CBus_(const ContainerAllocator& _alloc)
    : frame_id(0)
    , fs(0)
    , cp(_alloc)
    , cv(_alloc)
    , gp(_alloc)
    , gv(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_id_type;
  _frame_id_type frame_id;

   typedef uint32_t _fs_type;
  _fs_type fs;

   typedef  ::jetbot::ChassisState_<ContainerAllocator>  _cp_type;
  _cp_type cp;

   typedef  ::jetbot::ChassisState_<ContainerAllocator>  _cv_type;
  _cv_type cv;

   typedef  ::jetbot::PantiltState_<ContainerAllocator>  _gp_type;
  _gp_type gp;

   typedef  ::jetbot::PantiltState_<ContainerAllocator>  _gv_type;
  _gv_type gv;




  typedef boost::shared_ptr< ::jetbot::CBus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetbot::CBus_<ContainerAllocator> const> ConstPtr;

}; // struct CBus_

typedef ::jetbot::CBus_<std::allocator<void> > CBus;

typedef boost::shared_ptr< ::jetbot::CBus > CBusPtr;
typedef boost::shared_ptr< ::jetbot::CBus const> CBusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetbot::CBus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetbot::CBus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jetbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'jetbot': ['/home/bj/workspace/ros/car_ros/src/jetbot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jetbot::CBus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetbot::CBus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot::CBus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot::CBus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot::CBus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot::CBus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetbot::CBus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9efec3ad9b0e585f766ffbfebbe2a46";
  }

  static const char* value(const ::jetbot::CBus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9efec3ad9b0e585ULL;
  static const uint64_t static_value2 = 0xf766ffbfebbe2a46ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetbot::CBus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetbot/CBus";
  }

  static const char* value(const ::jetbot::CBus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetbot::CBus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 frame_id\n\
uint32 fs\n\
ChassisState cp\n\
ChassisState cv\n\
PantiltState gp\n\
PantiltState gv\n\
================================================================================\n\
MSG: jetbot/ChassisState\n\
int32 x\n\
int32 y\n\
int32 z\n\
================================================================================\n\
MSG: jetbot/PantiltState\n\
int16 p\n\
int16 t\n\
";
  }

  static const char* value(const ::jetbot::CBus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetbot::CBus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.fs);
      stream.next(m.cp);
      stream.next(m.cv);
      stream.next(m.gp);
      stream.next(m.gv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CBus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetbot::CBus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetbot::CBus_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "fs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fs);
    s << indent << "cp: ";
    s << std::endl;
    Printer< ::jetbot::ChassisState_<ContainerAllocator> >::stream(s, indent + "  ", v.cp);
    s << indent << "cv: ";
    s << std::endl;
    Printer< ::jetbot::ChassisState_<ContainerAllocator> >::stream(s, indent + "  ", v.cv);
    s << indent << "gp: ";
    s << std::endl;
    Printer< ::jetbot::PantiltState_<ContainerAllocator> >::stream(s, indent + "  ", v.gp);
    s << indent << "gv: ";
    s << std::endl;
    Printer< ::jetbot::PantiltState_<ContainerAllocator> >::stream(s, indent + "  ", v.gv);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETBOT_MESSAGE_CBUS_H
