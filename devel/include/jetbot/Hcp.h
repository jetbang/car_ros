// Generated by gencpp from file jetbot/Hcp.msg
// DO NOT EDIT!


#ifndef JETBOT_MESSAGE_HCP_H
#define JETBOT_MESSAGE_HCP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetbot
{
template <class ContainerAllocator>
struct Hcp_
{
  typedef Hcp_<ContainerAllocator> Type;

  Hcp_()
    : mouse_speed_x(0)
    , mouse_speed_y(0)
    , mouse_speed_z(0)
    , mouse_button_left(0)
    , mouse_button_right(0)
    , key(0)
    , res(0)  {
    }
  Hcp_(const ContainerAllocator& _alloc)
    : mouse_speed_x(0)
    , mouse_speed_y(0)
    , mouse_speed_z(0)
    , mouse_button_left(0)
    , mouse_button_right(0)
    , key(0)
    , res(0)  {
  (void)_alloc;
    }



   typedef int16_t _mouse_speed_x_type;
  _mouse_speed_x_type mouse_speed_x;

   typedef int16_t _mouse_speed_y_type;
  _mouse_speed_y_type mouse_speed_y;

   typedef int16_t _mouse_speed_z_type;
  _mouse_speed_z_type mouse_speed_z;

   typedef uint8_t _mouse_button_left_type;
  _mouse_button_left_type mouse_button_left;

   typedef uint8_t _mouse_button_right_type;
  _mouse_button_right_type mouse_button_right;

   typedef uint16_t _key_type;
  _key_type key;

   typedef uint16_t _res_type;
  _res_type res;




  typedef boost::shared_ptr< ::jetbot::Hcp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetbot::Hcp_<ContainerAllocator> const> ConstPtr;

}; // struct Hcp_

typedef ::jetbot::Hcp_<std::allocator<void> > Hcp;

typedef boost::shared_ptr< ::jetbot::Hcp > HcpPtr;
typedef boost::shared_ptr< ::jetbot::Hcp const> HcpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetbot::Hcp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetbot::Hcp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jetbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'jetbot': ['/home/bj/workspace/ros/car_ros/src/jetbot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jetbot::Hcp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetbot::Hcp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot::Hcp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot::Hcp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot::Hcp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot::Hcp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetbot::Hcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b43018bb32e264090ccdd50096e77265";
  }

  static const char* value(const ::jetbot::Hcp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb43018bb32e26409ULL;
  static const uint64_t static_value2 = 0x0ccdd50096e77265ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetbot::Hcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetbot/Hcp";
  }

  static const char* value(const ::jetbot::Hcp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetbot::Hcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 mouse_speed_x\n\
int16 mouse_speed_y\n\
int16 mouse_speed_z\n\
uint8 mouse_button_left\n\
uint8 mouse_button_right\n\
uint16 key\n\
uint16 res\n\
";
  }

  static const char* value(const ::jetbot::Hcp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetbot::Hcp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mouse_speed_x);
      stream.next(m.mouse_speed_y);
      stream.next(m.mouse_speed_z);
      stream.next(m.mouse_button_left);
      stream.next(m.mouse_button_right);
      stream.next(m.key);
      stream.next(m.res);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hcp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetbot::Hcp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetbot::Hcp_<ContainerAllocator>& v)
  {
    s << indent << "mouse_speed_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mouse_speed_x);
    s << indent << "mouse_speed_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mouse_speed_y);
    s << indent << "mouse_speed_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mouse_speed_z);
    s << indent << "mouse_button_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mouse_button_left);
    s << indent << "mouse_button_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mouse_button_right);
    s << indent << "key: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.key);
    s << indent << "res: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.res);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETBOT_MESSAGE_HCP_H
