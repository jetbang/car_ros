// Generated by gencpp from file kylinbot_core/UWB.msg
// DO NOT EDIT!


#ifndef KYLINBOT_CORE_MESSAGE_UWB_H
#define KYLINBOT_CORE_MESSAGE_UWB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kylinbot_core
{
template <class ContainerAllocator>
struct UWB_
{
  typedef UWB_<ContainerAllocator> Type;

  UWB_()
    : frame_id(0)
    , flag(0)
    , x(0)
    , y(0)
    , z(0)
    , compass(0)  {
    }
  UWB_(const ContainerAllocator& _alloc)
    : frame_id(0)
    , flag(0)
    , x(0)
    , y(0)
    , z(0)
    , compass(0)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_id_type;
  _frame_id_type frame_id;

   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef uint32_t _x_type;
  _x_type x;

   typedef uint32_t _y_type;
  _y_type y;

   typedef uint32_t _z_type;
  _z_type z;

   typedef uint32_t _compass_type;
  _compass_type compass;




  typedef boost::shared_ptr< ::kylinbot_core::UWB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kylinbot_core::UWB_<ContainerAllocator> const> ConstPtr;

}; // struct UWB_

typedef ::kylinbot_core::UWB_<std::allocator<void> > UWB;

typedef boost::shared_ptr< ::kylinbot_core::UWB > UWBPtr;
typedef boost::shared_ptr< ::kylinbot_core::UWB const> UWBConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kylinbot_core::UWB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kylinbot_core::UWB_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kylinbot_core

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'kylinbot_core': ['/home/bj/workspace/ros/auto_car_bak/src/kylinbot_core/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kylinbot_core::UWB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kylinbot_core::UWB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kylinbot_core::UWB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kylinbot_core::UWB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kylinbot_core::UWB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kylinbot_core::UWB_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kylinbot_core::UWB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0115180ac606d3696e6ac0f96b6651c8";
  }

  static const char* value(const ::kylinbot_core::UWB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0115180ac606d369ULL;
  static const uint64_t static_value2 = 0x6e6ac0f96b6651c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::kylinbot_core::UWB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kylinbot_core/UWB";
  }

  static const char* value(const ::kylinbot_core::UWB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kylinbot_core::UWB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 frame_id\n\
uint8 flag\n\
uint32 x\n\
uint32 y\n\
uint32 z\n\
uint32 compass\n\
";
  }

  static const char* value(const ::kylinbot_core::UWB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kylinbot_core::UWB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.flag);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.compass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UWB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kylinbot_core::UWB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kylinbot_core::UWB_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.z);
    s << indent << "compass: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.compass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KYLINBOT_CORE_MESSAGE_UWB_H
