!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.html	src/doc/html/navtreeindex0.js	/^".html":[0,0,0],$/;"	p	class:NAVTREEINDEX0
0	src/doc/html/search/searchdata.js	/^  0: "All",$/;"	p	class:indexSectionLabels
0	src/doc/html/search/searchdata.js	/^  0: "_acdfghilprstvwxy",$/;"	p	class:indexSectionsWithContent
0	src/doc/html/search/searchdata.js	/^  0: "all",$/;"	p	class:indexSectionNames
1	src/doc/html/search/searchdata.js	/^  1: "Classes",$/;"	p	class:indexSectionLabels
1	src/doc/html/search/searchdata.js	/^  1: "_acdlprstv",$/;"	p	class:indexSectionsWithContent
1	src/doc/html/search/searchdata.js	/^  1: "classes",$/;"	p	class:indexSectionNames
2	src/doc/html/search/searchdata.js	/^  2: "Functions",$/;"	p	class:indexSectionLabels
2	src/doc/html/search/searchdata.js	/^  2: "acdfghiprstw",$/;"	p	class:indexSectionsWithContent
2	src/doc/html/search/searchdata.js	/^  2: "functions",$/;"	p	class:indexSectionNames
3	src/doc/html/search/searchdata.js	/^  3: "Variables"$/;"	p	class:indexSectionLabels
3	src/doc/html/search/searchdata.js	/^  3: "tvxy"$/;"	p	class:indexSectionsWithContent
3	src/doc/html/search/searchdata.js	/^  3: "variables"$/;"	p	class:indexSectionNames
<SetGoal-request>	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defclass <SetGoal-request> (roslisp-msg-protocol:ros-message)$/;"	f
<SetGoal-request>	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defclass <SetGoal-request> (roslisp-msg-protocol:ros-message)$/;"	f
<SetGoal-response>	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defclass <SetGoal-response> (roslisp-msg-protocol:ros-message)$/;"	f
<SetGoal-response>	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defclass <SetGoal-response> (roslisp-msg-protocol:ros-message)$/;"	f
<armor_msg>	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defclass <armor_msg> (roslisp-msg-protocol:ros-message)$/;"	f
<car_speed>	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defclass <car_speed> (roslisp-msg-protocol:ros-message)$/;"	f
<car_speed>	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defclass <car_speed> (roslisp-msg-protocol:ros-message)$/;"	f
<car_speed>	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defclass <car_speed> (roslisp-msg-protocol:ros-message)$/;"	f
<serial_data>	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defclass <serial_data> (roslisp-msg-protocol:ros-message)$/;"	f
<serial_data>	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defclass <serial_data> (roslisp-msg-protocol:ros-message)$/;"	f
<serial_data>	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defclass <serial_data> (roslisp-msg-protocol:ros-message)$/;"	f
<transformed_scan>	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defclass <transformed_scan> (roslisp-msg-protocol:ros-message)$/;"	f
A	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^  scoped_ptr<BlockSparseMatrix> A;$/;"	m	class:ceres::internal::BlockJacobiPreconditionerTest	file:
A	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Matcher<T> A() { return MakeMatcher(new internal::AnyMatcherImpl<T>()); }$/;"	f	namespace:testing
A	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^  scoped_ptr<SparseMatrix> A;$/;"	m	struct:ceres::internal::LinearLeastSquaresProblem
A	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  scoped_ptr<BlockSparseMatrix> A;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
A	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  scoped_ptr<BlockSparseMatrix> A;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
AATranspose	ceres-solver/internal/ceres/suitesparse.h	/^  cholmod_sparse* AATranspose(cholmod_sparse* A) {$/;"	f	class:ceres::internal::SuiteSparse
ABTAINED_GOAL_STATE	logical_core/src/logical_core.cpp	/^    ABTAINED_GOAL_STATE,$/;"	e	enum:CarState	file:
ABTAINED_GOAL_STATE	src/logical_core/src/logical_core.h	/^  ABTAINED_GOAL_STATE,$/;"	e	enum:CarState
ACTION	ceres-solver/internal/ceres/gmock/gmock.h	3632;"	d
ACTION_P	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_P(ReturnPointee, pointer) { return *pointer; }$/;"	f	namespace:testing
ACTION_P	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_P(Throw, exception) { throw exception; }$/;"	f	namespace:testing
ACTION_P	ceres-solver/internal/ceres/gmock/gmock.h	3677;"	d
ACTION_P10	ceres-solver/internal/ceres/gmock/gmock.h	4309;"	d
ACTION_P2	ceres-solver/internal/ceres/gmock/gmock.h	3727;"	d
ACTION_P3	ceres-solver/internal/ceres/gmock/gmock.h	3782;"	d
ACTION_P4	ceres-solver/internal/ceres/gmock/gmock.h	3840;"	d
ACTION_P5	ceres-solver/internal/ceres/gmock/gmock.h	3907;"	d
ACTION_P6	ceres-solver/internal/ceres/gmock/gmock.h	3977;"	d
ACTION_P7	ceres-solver/internal/ceres/gmock/gmock.h	4050;"	d
ACTION_P8	ceres-solver/internal/ceres/gmock/gmock.h	4131;"	d
ACTION_P9	ceres-solver/internal/ceres/gmock/gmock.h	4218;"	d
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(DeleteArg,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(InvokeArgument,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(ReturnArg,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(ReturnNew,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(SaveArg,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(SaveArgPointee,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(SetArgReferee,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	/^ACTION_TEMPLATE(SetArrayArgument,$/;"	f	namespace:testing
ACTION_TEMPLATE	ceres-solver/internal/ceres/gmock/gmock.h	3568;"	d
ADD_FAILURE	ceres-solver/internal/ceres/gtest/gtest.h	20417;"	d
ADD_FAILURE_AT	ceres-solver/internal/ceres/gtest/gtest.h	20421;"	d
ANLS_SCAN_H	src/vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	2;"	d
ANS_DEV_ERR	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^        ANS_DEV_ERR = -2,$/;"	e	enum:rp::hal::serial_rxtx::__anon55
ANS_OK	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^        ANS_OK      = 0,$/;"	e	enum:rp::hal::serial_rxtx::__anon55
ANS_TIMEOUT	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^        ANS_TIMEOUT = -1,$/;"	e	enum:rp::hal::serial_rxtx::__anon55
APPEND_BUNDLING_INTRINSICS	ceres-solver/examples/libmv_bundle_adjuster.cc	553;"	d	file:
APPEND_DISTORTION_COEFFICIENT	ceres-solver/examples/libmv_bundle_adjuster.cc	582;"	d	file:
APPEND_DISTORTION_COEFFICIENT	ceres-solver/examples/libmv_bundle_adjuster.cc	595;"	d	file:
APP_ABI	ceres-solver/jni/Application.mk	/^APP_ABI := armeabi-v7a$/;"	m
APP_BUILD_SCRIPT	ceres-solver/jni/Application.mk	/^APP_BUILD_SCRIPT := $(call my-dir)\/Android.mk$/;"	m
APP_OPTIM	ceres-solver/jni/Application.mk	/^APP_OPTIM := release$/;"	m
APP_PROJECT_PATH	ceres-solver/jni/Application.mk	/^APP_PROJECT_PATH := $(call my-dir)$/;"	m
APP_STL	ceres-solver/jni/Application.mk	/^APP_STL := c++_static$/;"	m
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
ARMIJO	ceres-solver/include/ceres/types.h	/^  ARMIJO,$/;"	e	enum:ceres::LineSearchType
ASSERT_ANY_THROW	ceres-solver/internal/ceres/gtest/gtest.h	20462;"	d
ASSERT_DEATH	ceres-solver/internal/ceres/gtest/gtest.h	9479;"	d
ASSERT_DEATH_IF_SUPPORTED	ceres-solver/internal/ceres/gtest/gtest.h	9583;"	d
ASSERT_DEATH_IF_SUPPORTED	ceres-solver/internal/ceres/gtest/gtest.h	9588;"	d
ASSERT_DEBUG_DEATH	ceres-solver/internal/ceres/gtest/gtest.h	9561;"	d
ASSERT_DEBUG_DEATH	ceres-solver/internal/ceres/gtest/gtest.h	9569;"	d
ASSERT_DOUBLE_EQ	ceres-solver/internal/ceres/gtest/gtest.h	21005;"	d
ASSERT_EQ	ceres-solver/internal/ceres/gtest/gtest.h	20922;"	d
ASSERT_EXIT	ceres-solver/internal/ceres/gtest/gtest.h	9468;"	d
ASSERT_FALSE	ceres-solver/internal/ceres/gtest/gtest.h	20477;"	d
ASSERT_FLOAT_EQ	ceres-solver/internal/ceres/gtest/gtest.h	21001;"	d
ASSERT_GE	ceres-solver/internal/ceres/gtest/gtest.h	20938;"	d
ASSERT_GT	ceres-solver/internal/ceres/gtest/gtest.h	20942;"	d
ASSERT_HRESULT_FAILED	ceres-solver/internal/ceres/gtest/gtest.h	21050;"	d
ASSERT_HRESULT_SUCCEEDED	ceres-solver/internal/ceres/gtest/gtest.h	21044;"	d
ASSERT_LE	ceres-solver/internal/ceres/gtest/gtest.h	20930;"	d
ASSERT_LT	ceres-solver/internal/ceres/gtest/gtest.h	20934;"	d
ASSERT_NE	ceres-solver/internal/ceres/gtest/gtest.h	20926;"	d
ASSERT_NEAR	ceres-solver/internal/ceres/gtest/gtest.h	21013;"	d
ASSERT_NO_FATAL_FAILURE	ceres-solver/internal/ceres/gtest/gtest.h	21065;"	d
ASSERT_NO_THROW	ceres-solver/internal/ceres/gtest/gtest.h	20460;"	d
ASSERT_PRED1	ceres-solver/internal/ceres/gtest/gtest.h	20601;"	d
ASSERT_PRED2	ceres-solver/internal/ceres/gtest/gtest.h	20649;"	d
ASSERT_PRED3	ceres-solver/internal/ceres/gtest/gtest.h	20704;"	d
ASSERT_PRED4	ceres-solver/internal/ceres/gtest/gtest.h	20766;"	d
ASSERT_PRED5	ceres-solver/internal/ceres/gtest/gtest.h	20835;"	d
ASSERT_PRED_FORMAT1	ceres-solver/internal/ceres/gtest/gtest.h	20599;"	d
ASSERT_PRED_FORMAT2	ceres-solver/internal/ceres/gtest/gtest.h	20647;"	d
ASSERT_PRED_FORMAT3	ceres-solver/internal/ceres/gtest/gtest.h	20702;"	d
ASSERT_PRED_FORMAT4	ceres-solver/internal/ceres/gtest/gtest.h	20764;"	d
ASSERT_PRED_FORMAT5	ceres-solver/internal/ceres/gtest/gtest.h	20833;"	d
ASSERT_STRCASEEQ	ceres-solver/internal/ceres/gtest/gtest.h	20974;"	d
ASSERT_STRCASENE	ceres-solver/internal/ceres/gtest/gtest.h	20976;"	d
ASSERT_STREQ	ceres-solver/internal/ceres/gtest/gtest.h	20970;"	d
ASSERT_STRNE	ceres-solver/internal/ceres/gtest/gtest.h	20972;"	d
ASSERT_THAT	ceres-solver/internal/ceres/gmock/gmock.h	9207;"	d
ASSERT_THROW	ceres-solver/internal/ceres/gtest/gtest.h	20458;"	d
ASSERT_TRUE	ceres-solver/internal/ceres/gtest/gtest.h	20474;"	d
AVX	ceres-solver/include/ceres/jet.h	/^      AVX = true,$/;"	e	enum:Eigen::NumTraits::Div::__anon46
A_	ceres-solver/include/ceres/normal_prior.h	/^  Matrix A_;$/;"	m	class:ceres::NormalPrior
A_	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^  scoped_ptr<BlockSparseMatrix> A_;$/;"	m	class:ceres::internal::BlockSparseMatrixTest	file:
A_	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  const LinearOperator& A_;$/;"	m	class:ceres::internal::CgnrLinearOperator
A_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  scoped_ptr<PartitionedMatrixViewBase> A_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
A_	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  scoped_ptr<BlockSparseMatrix> A_;$/;"	m	class:ceres::internal::ImplicitSchurComplementTest	file:
A_	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  scoped_ptr<BlockSparseMatrix> A_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolverTest	file:
A_	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^  scoped_ptr<SparseMatrix> A_;$/;"	m	class:ceres::internal::PartitionedMatrixViewTest	file:
A_	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^  scoped_ptr<TripletSparseMatrix> A_;$/;"	m	class:ceres::internal::UnsymmetricLinearSolverTest	file:
Abort	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Abort() {$/;"	f	namespace:testing::internal::posix
Abort	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void DeathTestImpl::Abort(AbortReason reason) {$/;"	f	class:testing::internal::DeathTestImpl
AbortReason	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
AbortingIterationCallback	ceres-solver/internal/ceres/minimizer_test.cc	/^class AbortingIterationCallback : public IterationCallback {$/;"	c	namespace:ceres::internal	file:
AbsPos	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^struct AbsPos$/;"	s
AbstractSocketWriter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  class AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener	file:
Action	ceres-solver/internal/ceres/gmock/gmock.h	/^  Action() : impl_(NULL) {}$/;"	f	class:testing::Action
Action	ceres-solver/internal/ceres/gmock/gmock.h	/^  Action(const Action& action) : impl_(action.impl_) {}$/;"	f	class:testing::Action
Action	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Action(ActionInterface<F>* impl) : impl_(impl) {}$/;"	f	class:testing::Action
Action	ceres-solver/internal/ceres/gmock/gmock.h	/^Action<To>::Action(const Action<From>& from)$/;"	f	class:testing::Action
Action	ceres-solver/internal/ceres/gmock/gmock.h	/^class Action {$/;"	c	namespace:testing
ActionAdaptor	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ActionAdaptor(const Action<F2>& from) : impl_(from.impl_) {}$/;"	f	class:testing::internal::ActionAdaptor
ActionAdaptor	ceres-solver/internal/ceres/gmock/gmock.h	/^class ActionAdaptor : public ActionInterface<F1> {$/;"	c	namespace:testing::internal
ActionHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class ActionHelper {$/;"	c	namespace:testing::internal
ActionInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^  ActionInterface() {}$/;"	f	class:testing::ActionInterface
ActionInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^class ActionInterface {$/;"	c	namespace:testing
ActionResultHolder	ceres-solver/internal/ceres/gmock/gmock.h	/^  ActionResultHolder() {}$/;"	f	class:testing::internal::ActionResultHolder
ActionResultHolder	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ActionResultHolder(Wrapper result)$/;"	f	class:testing::internal::ActionResultHolder
ActionResultHolder	ceres-solver/internal/ceres/gmock/gmock.h	/^class ActionResultHolder : public UntypedActionResultHolderBase {$/;"	c	namespace:testing::internal
ActionResultHolder	ceres-solver/internal/ceres/gmock/gmock.h	/^class ActionResultHolder<void> : public UntypedActionResultHolderBase {$/;"	c	namespace:testing::internal
Activate	src/doc/html/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
AddArgument	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void AddArgument(const char* argument) {$/;"	f	class:testing::internal::Arguments
AddArguments	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void AddArguments(const ::std::vector<Str>& arguments) {$/;"	f	class:testing::internal::Arguments
AddComplexRootPair	ceres-solver/internal/ceres/polynomial_test.cc	/^Vector AddComplexRootPair(const Vector& poly, double real, double imag) {$/;"	f	namespace:ceres::internal::__anon7
AddCost	ceres-solver/include/ceres/jet.h	/^    AddCost = 1,$/;"	e	enum:Eigen::NumTraits::__anon45
AddDiagonalAndInvert	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^void ImplicitSchurComplement::AddDiagonalAndInvert($/;"	f	class:ceres::internal::ImplicitSchurComplement
AddEdge	ceres-solver/internal/ceres/graph.h	/^  void AddEdge(const Vertex& vertex1, const Vertex& vertex2) {$/;"	f	class:ceres::internal::Graph
AddEdge	ceres-solver/internal/ceres/graph.h	/^  void AddEdge(const Vertex& vertex1, const Vertex& vertex2) {$/;"	f	class:ceres::internal::WeightedGraph
AddEdge	ceres-solver/internal/ceres/graph.h	/^  void AddEdge(const Vertex& vertex1, const Vertex& vertex2, double weight) {$/;"	f	class:ceres::internal::WeightedGraph
AddElementToGroup	ceres-solver/include/ceres/ordered_groups.h	/^  bool AddElementToGroup(const T element, const int group) {$/;"	f	class:ceres::OrderedGroups
AddEnvironment	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Environment* UnitTest::AddEnvironment(Environment* env) {$/;"	f	class:testing::UnitTest
AddEvent	ceres-solver/internal/ceres/wall_time.cc	/^void EventLogger::AddEvent(const std::string& event_name) {$/;"	f	class:ceres::internal::EventLogger
AddExpectation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Sequence::AddExpectation(const Expectation& expectation) const {$/;"	f	class:testing::Sequence
AddGlobalTestEnvironment	ceres-solver/internal/ceres/gtest/gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddLogSink	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^inline void AddLogSink(LogSink *sink) {$/;"	f	namespace:google
AddParameter	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  void AddParameter(const Matrix& residual_J_param) {$/;"	f	class:ceres::internal::LinearCostFunction
AddParameterBlock	ceres-solver/include/ceres/dynamic_cost_function.h	/^  virtual void AddParameterBlock(int size) {$/;"	f	class:ceres::DynamicCostFunction
AddParameterBlock	ceres-solver/internal/ceres/problem.cc	/^void Problem::AddParameterBlock(double* values, int size) {$/;"	f	class:ceres::Problem
AddParameterBlock	ceres-solver/internal/ceres/problem.cc	/^void Problem::AddParameterBlock(double* values,$/;"	f	class:ceres::Problem
AddParameterBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::AddParameterBlock($/;"	f	class:ceres::internal::ProblemImpl
AddParameterBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::AddParameterBlock(double* values, int size) {$/;"	f	class:ceres::internal::ProblemImpl
AddRandomBlock	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void AddRandomBlock(const int num_rows,$/;"	f	namespace:ceres::internal::__anon33
AddRealRoot	ceres-solver/internal/ceres/polynomial_test.cc	/^Vector AddRealRoot(const Vector& poly, double root) {$/;"	f	namespace:ceres::internal::__anon7
AddRef	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddRef	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddReference	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddReference	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddResidualBlock	ceres-solver/internal/ceres/parameter_block.h	/^  void AddResidualBlock(ResidualBlock* residual_block) {$/;"	f	class:ceres::internal::ParameterBlock
AddResidualBlock	ceres-solver/internal/ceres/problem.cc	/^ResidualBlockId Problem::AddResidualBlock($/;"	f	class:ceres::Problem
AddResidualBlock	ceres-solver/internal/ceres/problem_impl.cc	/^ResidualBlock* ProblemImpl::AddResidualBlock($/;"	f	class:ceres::internal::ProblemImpl
AddTestCaseInstantiation	ceres-solver/internal/ceres/gtest/gtest.h	/^  int AddTestCaseInstantiation(const string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddTestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void AddTestInfo(Test::SetUpTestCaseFunc set_up_tc,$/;"	f	class:testing::internal::UnitTestImpl
AddTestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestCase::AddTestInfo(TestInfo * test_info) {$/;"	f	class:testing::TestCase
AddTestName	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestCasePState
AddTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::TestResult
AddTestPattern	ceres-solver/internal/ceres/gtest/gtest.h	/^  void AddTestPattern(const char* test_case_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddVertex	ceres-solver/internal/ceres/graph.h	/^  void AddVertex(const Vertex& vertex) {$/;"	f	class:ceres::internal::Graph
AddVertex	ceres-solver/internal/ceres/graph.h	/^  void AddVertex(const Vertex& vertex) {$/;"	f	class:ceres::internal::WeightedGraph
AddVertex	ceres-solver/internal/ceres/graph.h	/^  void AddVertex(const Vertex& vertex, double weight) {$/;"	f	class:ceres::internal::WeightedGraph
AdlTag	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AdlTag {};$/;"	s	namespace:testing::internal::invoke_argument
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Advance	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
After	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& After(const ExpectationSet& s) {$/;"	f	class:testing::internal::TypedExpectation
After	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& After(const ExpectationSet& s1, const ExpectationSet& s2) {$/;"	f	class:testing::internal::TypedExpectation
After	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& After(const ExpectationSet& s1, const ExpectationSet& s2,$/;"	f	class:testing::internal::TypedExpectation
AlignType	ceres-solver/include/ceres/internal/manual_constructor.h	/^template<int alignment, int size> struct AlignType { };$/;"	s	namespace:ceres::internal
AlignType	ceres-solver/include/ceres/internal/manual_constructor.h	/^template<int size> struct AlignType<0, size> { typedef char result[size]; };$/;"	s	namespace:ceres::internal
AllArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^inline InnerMatcher AllArgs(const InnerMatcher& matcher) { return matcher; }$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3, M4 m4) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10) {$/;"	f	namespace:testing
AllOf	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::AllOfMatcher<Args...> AllOf(const Args&... matchers) {$/;"	f	namespace:testing
AllOfResult1	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult1 {$/;"	s	namespace:testing::internal
AllOfResult10	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult10 {$/;"	s	namespace:testing::internal
AllOfResult2	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult2 {$/;"	s	namespace:testing::internal
AllOfResult3	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult3 {$/;"	s	namespace:testing::internal
AllOfResult4	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult4 {$/;"	s	namespace:testing::internal
AllOfResult5	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult5 {$/;"	s	namespace:testing::internal
AllOfResult6	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult6 {$/;"	s	namespace:testing::internal
AllOfResult7	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult7 {$/;"	s	namespace:testing::internal
AllOfResult8	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult8 {$/;"	s	namespace:testing::internal
AllOfResult9	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AllOfResult9 {$/;"	s	namespace:testing::internal
AllTripletsWithinBounds	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^bool TripletSparseMatrix::AllTripletsWithinBounds() const {$/;"	f	class:ceres::internal::TripletSparseMatrix
AllocateMemory	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::AllocateMemory() {$/;"	f	class:ceres::internal::TripletSparseMatrix
AlmostEquals	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlternateLinearSolverAndPreconditionerForSchurTypeLinearSolver	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^void AlternateLinearSolverAndPreconditionerForSchurTypeLinearSolver($/;"	f	namespace:ceres::internal::__anon31
AlwaysFalse	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AlwaysTrue	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool AlwaysTrue() {$/;"	f	namespace:testing::internal
An	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Matcher<T> An() { return A<T>(); }$/;"	f	namespace:testing
AnalyzeCholesky	ceres-solver/internal/ceres/cxsparse.cc	/^cs_dis* CXSparse::AnalyzeCholesky(cs_di* A) {$/;"	f	class:ceres::internal::CXSparse
AnalyzeCholesky	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_factor* SuiteSparse::AnalyzeCholesky(cholmod_sparse* A,$/;"	f	class:ceres::internal::SuiteSparse
AnalyzeCholeskyWithNaturalOrdering	ceres-solver/internal/ceres/cxsparse.cc	/^cs_dis* CXSparse::AnalyzeCholeskyWithNaturalOrdering(cs_di* A) {$/;"	f	class:ceres::internal::CXSparse
AnalyzeCholeskyWithNaturalOrdering	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_factor* SuiteSparse::AnalyzeCholeskyWithNaturalOrdering($/;"	f	class:ceres::internal::SuiteSparse
AnalyzeCholeskyWithUserOrdering	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_factor* SuiteSparse::AnalyzeCholeskyWithUserOrdering($/;"	f	class:ceres::internal::SuiteSparse
AnalyzeElements	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatchMatrix AnalyzeElements(ElementIter elem_first, ElementIter elem_last,$/;"	f	class:testing::internal::UnorderedElementsAreMatcherImpl
AngleAxisAndCenterToCamera	ceres-solver/examples/bal_problem.cc	/^void BALProblem::AngleAxisAndCenterToCamera(const double* angle_axis,$/;"	f	class:ceres::examples::BALProblem
AngleAxisRotatePoint	ceres-solver/include/ceres/rotation.h	/^void AngleAxisRotatePoint(const T angle_axis[3], const T pt[3], T result[3]) {$/;"	f	namespace:ceres
AngleAxisToQuaternion	ceres-solver/include/ceres/rotation.h	/^inline void AngleAxisToQuaternion(const T* angle_axis, T* quaternion) {$/;"	f	namespace:ceres
AngleAxisToRotationMatrix	ceres-solver/include/ceres/rotation.h	/^inline void AngleAxisToRotationMatrix(const T* angle_axis, T* R) {$/;"	f	namespace:ceres
AngleAxisToRotationMatrix	ceres-solver/include/ceres/rotation.h	/^void AngleAxisToRotationMatrix($/;"	f	namespace:ceres
AngleLocalParameterization	ceres-solver/examples/slam/pose_graph_2d/angle_local_parameterization.h	/^class AngleLocalParameterization {$/;"	c	namespace:ceres::examples
AnsiToUtf16	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^LPCWSTR String::AnsiToUtf16(const char* ansi) {$/;"	f	class:testing::internal::String
AnyEq	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyEq {$/;"	s	namespace:testing::internal
AnyGe	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyGe {$/;"	s	namespace:testing::internal
AnyGt	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyGt {$/;"	s	namespace:testing::internal
AnyLe	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyLe {$/;"	s	namespace:testing::internal
AnyLt	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyLt {$/;"	s	namespace:testing::internal
AnyMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class AnyMatcherImpl : public MatcherInterface<T> {$/;"	c	namespace:testing::internal
AnyNe	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyNe {$/;"	s	namespace:testing::internal
AnyNumber	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ Cardinality AnyNumber() { return AtLeast(0); }$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3, M4 m4) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10) {$/;"	f	namespace:testing
AnyOf	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::AnyOfMatcher<Args...> AnyOf(const Args&... matchers) {$/;"	f	namespace:testing
AnyOfResult1	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult1 {$/;"	s	namespace:testing::internal
AnyOfResult10	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult10 {$/;"	s	namespace:testing::internal
AnyOfResult2	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult2 {$/;"	s	namespace:testing::internal
AnyOfResult3	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult3 {$/;"	s	namespace:testing::internal
AnyOfResult4	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult4 {$/;"	s	namespace:testing::internal
AnyOfResult5	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult5 {$/;"	s	namespace:testing::internal
AnyOfResult6	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult6 {$/;"	s	namespace:testing::internal
AnyOfResult7	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult7 {$/;"	s	namespace:testing::internal
AnyOfResult8	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult8 {$/;"	s	namespace:testing::internal
AnyOfResult9	ceres-solver/internal/ceres/gmock/gmock.h	/^struct AnyOfResult9 {$/;"	s	namespace:testing::internal
AnythingMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class AnythingMatcher {$/;"	c	namespace:testing::internal
Append	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestEventListeners::Append(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Append	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestEventRepeater::Append(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
Append	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestPartResultArray::Append(const TestPartResult& result) {$/;"	f	class:testing::TestPartResultArray
AppendArrayToString	ceres-solver/internal/ceres/array_utils.cc	/^void AppendArrayToString(const int size, const double* x, string* result) {$/;"	f	namespace:ceres::internal
AppendCols	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::AppendCols(const TripletSparseMatrix& B) {$/;"	f	class:ceres::internal::TripletSparseMatrix
AppendDiagonal	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::AppendDiagonal(double *d) {$/;"	f	class:ceres::internal::DenseSparseMatrix
AppendMessage	ceres-solver/internal/ceres/gtest/gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AppendRows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::AppendRows(const CompressedRowSparseMatrix& m) {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
AppendRows	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::AppendRows(const TripletSparseMatrix& B) {$/;"	f	class:ceres::internal::TripletSparseMatrix
AppendUserMessage	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string AppendUserMessage(const std::string& gtest_msg,$/;"	f	namespace:testing::internal
ApplyOrdering	ceres-solver/internal/ceres/reorder_program.cc	/^bool ApplyOrdering(const ProblemImpl::ParameterMap& parameter_map,$/;"	f	namespace:ceres::internal
ApplyRadialDistortionCameraIntrinsics	ceres-solver/examples/libmv_bundle_adjuster.cc	/^inline void ApplyRadialDistortionCameraIntrinsics(const T &focal_length_x,$/;"	f	namespace:__anon38
ApproximateMinimumDegreeOrdering	ceres-solver/internal/ceres/cxsparse.cc	/^void CXSparse::ApproximateMinimumDegreeOrdering(cs_di* A, int* ordering) {$/;"	f	class:ceres::internal::CXSparse
ApproximateMinimumDegreeOrdering	ceres-solver/internal/ceres/suitesparse.cc	/^bool SuiteSparse::ApproximateMinimumDegreeOrdering(cholmod_sparse* matrix,$/;"	f	class:ceres::internal::SuiteSparse
ArctanLoss	ceres-solver/include/ceres/loss_function.h	/^  explicit ArctanLoss(double a) : a_(a), b_(1 \/ (a * a)) { }$/;"	f	class:ceres::ArctanLoss
ArctanLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT ArctanLoss : public LossFunction {$/;"	c	namespace:ceres
ArgTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef ::testing::tuple<T, Second> ArgTuple;$/;"	t	class:testing::internal::BoundSecondMatcher::Impl
Args	ceres-solver/internal/ceres/gmock/gmock.h	/^Args(const InnerMatcher& matcher) {$/;"	f	namespace:testing
ArgsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ArgsMatcher(const InnerMatcher& inner_matcher)$/;"	f	class:testing::internal::ArgsMatcher
ArgsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class ArgsMatcher {$/;"	c	namespace:testing::internal
ArgsMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ArgsMatcherImpl(const InnerMatcher& inner_matcher)$/;"	f	class:testing::internal::ArgsMatcherImpl
ArgsMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class ArgsMatcherImpl : public MatcherInterface<ArgsTuple> {$/;"	c	namespace:testing::internal
Argument1	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A1 Argument1;$/;"	t	struct:testing::internal::Function
Argument10	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A10 Argument10;$/;"	t	struct:testing::internal::Function
Argument2	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A2 Argument2;$/;"	t	struct:testing::internal::Function
Argument3	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A3 Argument3;$/;"	t	struct:testing::internal::Function
Argument4	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A4 Argument4;$/;"	t	struct:testing::internal::Function
Argument5	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A5 Argument5;$/;"	t	struct:testing::internal::Function
Argument6	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A6 Argument6;$/;"	t	struct:testing::internal::Function
Argument7	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A7 Argument7;$/;"	t	struct:testing::internal::Function
Argument8	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A8 Argument8;$/;"	t	struct:testing::internal::Function
Argument9	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef A9 Argument9;$/;"	t	struct:testing::internal::Function
ArgumentMatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^      ArgumentMatcherTuple;$/;"	t	class:testing::internal::MockSpec
ArgumentMatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::ArgumentMatcherTuple ArgumentMatcherTuple;$/;"	t	class:testing::internal::FunctionMockerBase
ArgumentMatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::ArgumentMatcherTuple ArgumentMatcherTuple;$/;"	t	class:testing::internal::OnCallSpec
ArgumentMatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::ArgumentMatcherTuple ArgumentMatcherTuple;$/;"	t	class:testing::internal::TypedExpectation
ArgumentMatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^      A10> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::DoBothAction::Impl
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::ReturnAction::Impl
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::ReturnRefAction::Impl
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::ReturnRefOfCopyAction::Impl
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::WithArgsAction::Impl
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename internal::Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::PolymorphicAction::MonomorphicImpl
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename internal::Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::IgnoreResultAction::Impl
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2, A3, A4, A5, A6, A7> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2, A3, A4, A5, A6> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2, A3, A4, A5> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2, A3, A4> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2, A3> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1, A2> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<A1> ArgumentTuple;$/;"	t	struct:testing::internal::Function
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::FunctionMockerBase
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::OnCallSpec
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::TypedExpectation
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F1>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::ActionAdaptor
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::Action
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::ActionInterface
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::FunctionMocker
ArgumentTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F>::ArgumentTuple ArgumentTuple;$/;"	t	class:testing::internal::MockSpec
Arguments	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  Arguments() {$/;"	f	class:testing::internal::Arguments
Arguments	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class Arguments {$/;"	c	namespace:testing::internal	file:
Argv	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  char* const* Argv() {$/;"	f	class:testing::internal::Arguments
ArmijoLineSearch	ceres-solver/internal/ceres/line_search.cc	/^ArmijoLineSearch::ArmijoLineSearch(const LineSearch::Options& options)$/;"	f	class:ceres::internal::ArmijoLineSearch
ArmijoLineSearch	ceres-solver/internal/ceres/line_search.h	/^class ArmijoLineSearch : public LineSearch {$/;"	c	namespace:ceres::internal
ArrayAsVector	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {$/;"	f	namespace:testing
ArrayAwareFind	ceres-solver/internal/ceres/gtest/gtest.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	ceres-solver/internal/ceres/gtest/gtest.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R()> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2, A3)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2, A3, A4)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2, A3, A4, A5)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2, A3, A4, A5, A6)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2, A3, A4, A5, A6, A7)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2, A3, A4, A5, A6, A7, A8)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AsStdFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  std::function<R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)> AsStdFunction() {$/;"	f	class:testing::MockFunction
AssertHeld	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Mutex::AssertHeld() {$/;"	f	class:testing::internal::Mutex
AssertHeld	ceres-solver/internal/ceres/gtest/gtest.h	/^  void AssertHeld() const {$/;"	f	class:std::tr1::MutexBase
AssertHeld	ceres-solver/internal/ceres/gtest/gtest.h	/^  void AssertHeld() const {}$/;"	f	class:std::tr1::Mutex
AssertHeld	ceres-solver/internal/ceres/mutex.h	/^  inline void AssertHeld() {}$/;"	f	class:ceres::internal::Mutex
AssertHelper	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertHelper::AssertHelper(TestPartResult::Type type,$/;"	f	class:testing::internal::AssertHelper
AssertHelper	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelperData	ceres-solver/internal/ceres/gtest/gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertLossFunctionIsValid	ceres-solver/internal/ceres/loss_function_test.cc	/^void AssertLossFunctionIsValid(const LossFunction& loss, double s) {$/;"	f	namespace:ceres::internal::__anon11
AssertPred1Helper	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred2Helper	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred3Helper	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred4Helper	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred5Helper	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f	namespace:testing
AssertSpecProperty	ceres-solver/internal/ceres/gmock/gmock.h	/^  void AssertSpecProperty(bool property, const string& failure_message) const {$/;"	f	class:testing::internal::ExpectationBase
AssertSpecProperty	ceres-solver/internal/ceres/gmock/gmock.h	/^  void AssertSpecProperty(bool property, const string& failure_message) const {$/;"	f	class:testing::internal::UntypedOnCallSpecBase
AssertTypeEq	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AssertTypeEq<T, T> {$/;"	s	namespace:testing::internal
AssertionFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult AssertionFailure() {$/;"	f	namespace:testing
AssertionFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult AssertionFailure(const Message& message) {$/;"	f	namespace:testing
AssertionResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult::AssertionResult(const AssertionResult& other)$/;"	f	class:testing::AssertionResult
AssertionResult	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit AssertionResult($/;"	f	class:testing::AssertionResult
AssertionResult	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AssertionSuccess	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult AssertionSuccess() {$/;"	f	namespace:testing
Assign	ceres-solver/internal/ceres/gmock/gmock.h	/^PolymorphicAction<internal::AssignAction<T1, T2> > Assign(T1* ptr, T2 val) {$/;"	f	namespace:testing
AssignAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  AssignAction(T1* ptr, T2 value) : ptr_(ptr), value_(value) {}$/;"	f	class:testing::internal::AssignAction
AssignAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class AssignAction {$/;"	c	namespace:testing::internal
AssumeRole	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^DeathTest::TestRole ExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::ExecDeathTest
AssumeRole	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^DeathTest::TestRole NoExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::NoExecDeathTest
AssumeRole	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^DeathTest::TestRole WindowsDeathTest::AssumeRole() {$/;"	f	class:testing::internal::WindowsDeathTest
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
AtEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
AtLeast	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }$/;"	f	namespace:testing
AtMost	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }$/;"	f	namespace:testing
AtomMatchesChar	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {$/;"	f	namespace:testing::internal
AutoDiff	ceres-solver/include/ceres/internal/autodiff.h	/^struct AutoDiff {$/;"	s	namespace:ceres::internal
AutoDiffCostFunction	ceres-solver/include/ceres/autodiff_cost_function.h	/^  AutoDiffCostFunction(CostFunctor* functor, int num_residuals)$/;"	f	class:ceres::AutoDiffCostFunction
AutoDiffCostFunction	ceres-solver/include/ceres/autodiff_cost_function.h	/^  explicit AutoDiffCostFunction(CostFunctor* functor)$/;"	f	class:ceres::AutoDiffCostFunction
AutoDiffCostFunction	ceres-solver/include/ceres/autodiff_cost_function.h	/^class AutoDiffCostFunction : public SizedCostFunction<kNumResiduals,$/;"	c	namespace:ceres
AutoDiffLocalParameterization	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  AutoDiffLocalParameterization() :$/;"	f	class:ceres::AutoDiffLocalParameterization
AutoDiffLocalParameterization	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  explicit AutoDiffLocalParameterization(Functor* functor) :$/;"	f	class:ceres::AutoDiffLocalParameterization
AutoDiffLocalParameterization	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^class AutoDiffLocalParameterization : public LocalParameterization {$/;"	c	namespace:ceres
AutoDrive	logical_core/src/logical_core.cpp	/^enum AutoDrive$/;"	g	file:
AutoHandle	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AutoHandle::AutoHandle()$/;"	f	class:testing::internal::AutoHandle
AutoHandle	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AutoHandle::AutoHandle(Handle handle)$/;"	f	class:testing::internal::AutoHandle
AutoHandle	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ AutoHandle {$/;"	c	namespace:std::tr1
AutoLocker	src/rplidar_ros/sdk/src/hal/locker.h	/^    AutoLocker(Locker &l): _binded(l)$/;"	f	class:rp::hal::AutoLocker
AutoLocker	src/rplidar_ros/sdk/src/hal/locker.h	/^class AutoLocker$/;"	c	namespace:rp::hal
BALProblem	ceres-solver/examples/bal_problem.cc	/^BALProblem::BALProblem(const std::string& filename, bool use_quaternions) {$/;"	f	class:ceres::examples::BALProblem
BALProblem	ceres-solver/examples/bal_problem.h	/^class BALProblem {$/;"	c	namespace:ceres::examples
BALProblem	ceres-solver/examples/simple_bundle_adjuster.cc	/^class BALProblem {$/;"	c	file:
BAUD_CONV	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	300;"	d	file:
BAUD_CONV	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	301;"	d	file:
BEGIN_MGH_PROBLEM	ceres-solver/examples/more_garbow_hillstrom.cc	535;"	d	file:
BEGIN_MGH_PROBLEM	ceres-solver/examples/more_garbow_hillstrom.cc	81;"	d	file:
BEGIN_STATIC_CODE	src/rplidar_ros/sdk/src/arch/win32/timer.cpp	/^BEGIN_STATIC_CODE(timer_cailb)$/;"	f	namespace:rp::arch
BEGIN_STATIC_CODE	src/rplidar_ros/sdk/src/hal/util.h	59;"	d
BFGS	ceres-solver/include/ceres/types.h	/^  BFGS,$/;"	e	enum:ceres::LineSearchDirectionType
BFGS	ceres-solver/internal/ceres/line_search_direction.cc	/^  BFGS(const int num_parameters,$/;"	f	class:ceres::internal::BFGS
BFGS	ceres-solver/internal/ceres/line_search_direction.cc	/^class BFGS : public LineSearchDirection {$/;"	c	namespace:ceres::internal	file:
BISECTION	ceres-solver/include/ceres/types.h	/^  BISECTION,$/;"	e	enum:ceres::LineSearchInterpolationType
BLAS	ceres-solver/internal/ceres/blas.h	/^class BLAS {$/;"	c	namespace:ceres::internal
BUNDLE_FOCAL_LENGTH	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_FOCAL_LENGTH = 1,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_NO_CONSTRAINTS	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_NO_CONSTRAINTS = 0,$/;"	e	enum:__anon38::BundleConstraints	file:
BUNDLE_NO_INTRINSICS	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_NO_INTRINSICS = 0,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_NO_TRANSLATION	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_NO_TRANSLATION = 1,$/;"	e	enum:__anon38::BundleConstraints	file:
BUNDLE_PRINCIPAL_POINT	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_PRINCIPAL_POINT = 2,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_RADIAL	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_RADIAL = 12,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_RADIAL_K1	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_RADIAL_K1 = 4,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_RADIAL_K2	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_RADIAL_K2 = 8,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_TANGENTIAL	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_TANGENTIAL = 48,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_TANGENTIAL_P1	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_TANGENTIAL_P1 = 16,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUNDLE_TANGENTIAL_P2	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  BUNDLE_TANGENTIAL_P2 = 32,$/;"	e	enum:__anon38::BundleIntrinsics	file:
BUSY_STATE	src/logical_core/src/logical_core.h	/^  BUSY_STATE,$/;"	e	enum:CarState
B_	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^  scoped_ptr<TripletSparseMatrix> B_;$/;"	m	class:ceres::internal::BlockSparseMatrixTest	file:
BackSubstitute	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^void ImplicitSchurComplement::BackSubstitute(const double* x, double* y) {$/;"	f	class:ceres::internal::ImplicitSchurComplement
BackSubstitute	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^BackSubstitute(const BlockSparseMatrix* A,$/;"	f	class:ceres::internal::SchurEliminator
BadJacobianCostFunction	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^class BadJacobianCostFunction: public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
BadLocalParameterization	ceres-solver/internal/ceres/parameter_block_test.cc	/^  BadLocalParameterization()$/;"	f	class:ceres::internal::BadLocalParameterization
BadLocalParameterization	ceres-solver/internal/ceres/parameter_block_test.cc	/^class BadLocalParameterization : public LocalParameterization {$/;"	c	namespace:ceres::internal	file:
BadResidualCostFunction	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^class BadResidualCostFunction: public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
BadTestTerm	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  BadTestTerm(int arity, int const* dim) : arity_(arity) {$/;"	f	class:ceres::internal::BadTestTerm
BadTestTerm	ceres-solver/internal/ceres/gradient_checker_test.cc	/^class BadTestTerm : public CostFunction {$/;"	c	namespace:ceres::internal	file:
BalanceCompanionMatrix	ceres-solver/internal/ceres/polynomial.cc	/^void BalanceCompanionMatrix(Matrix* companion_matrix_ptr) {$/;"	f	namespace:ceres::internal::__anon3
Base	ceres-solver/internal/ceres/evaluator_test.cc	/^  typedef SizedCostFunction<kNumResiduals, N0, N1, N2> Base;$/;"	t	class:ceres::internal::ParameterIgnoringCostFunction	file:
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
BaseGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
BasicNarrowIoManip	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::RangeGenerator
Begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
BeginEndDistanceIs	ceres-solver/internal/ceres/gmock/gmock.h	/^BeginEndDistanceIs(const DistanceMatcher& distance_matcher) {$/;"	f	namespace:testing
BeginEndDistanceIsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit BeginEndDistanceIsMatcher(const DistanceMatcher& distance_matcher)$/;"	f	class:testing::internal::BeginEndDistanceIsMatcher
BeginEndDistanceIsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class BeginEndDistanceIsMatcher {$/;"	c	namespace:testing::internal
BesselJ0	ceres-solver/include/ceres/jet.h	/^Jet<T, N> BesselJ0(const Jet<T, N>& f) {$/;"	f	namespace:ceres
BesselJ0	ceres-solver/include/ceres/jet.h	/^inline double BesselJ0(double x) {$/;"	f	namespace:ceres
BesselJ1	ceres-solver/include/ceres/jet.h	/^Jet<T, N> BesselJ1(const Jet<T, N>& f) {$/;"	f	namespace:ceres
BesselJ1	ceres-solver/include/ceres/jet.h	/^inline double BesselJ1(double x) {$/;"	f	namespace:ceres
BesselJn	ceres-solver/include/ceres/jet.h	/^Jet<T, N> BesselJn(int n, const Jet<T, N>& f) {$/;"	f	namespace:ceres
BesselJn	ceres-solver/include/ceres/jet.h	/^inline double BesselJn(int n, double x) {$/;"	f	namespace:ceres
Between	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ Cardinality Between(int min, int max) {$/;"	f	namespace:testing
BetweenCardinalityImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  BetweenCardinalityImpl(int min, int max)$/;"	f	class:testing::__anon28::BetweenCardinalityImpl
BetweenCardinalityImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class BetweenCardinalityImpl : public CardinalityInterface {$/;"	c	namespace:testing::__anon28	file:
BiCubicInterpolator	ceres-solver/include/ceres/cubic_interpolation.h	/^  explicit BiCubicInterpolator(const Grid& grid)$/;"	f	class:ceres::BiCubicInterpolator
BiCubicInterpolator	ceres-solver/include/ceres/cubic_interpolation.h	/^class BiCubicInterpolator {$/;"	c	namespace:ceres
BiCubicInterpolatorTest	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^class BiCubicInterpolatorTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
BiggestInt	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:std::tr1
BiggestInt	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef long long BiggestInt;  \/\/ NOLINT$/;"	t	namespace:std::tr1
BinaryCostFunction	ceres-solver/internal/ceres/covariance_test.cc	/^  BinaryCostFunction(const int num_residuals,$/;"	f	class:ceres::internal::BinaryCostFunction
BinaryCostFunction	ceres-solver/internal/ceres/covariance_test.cc	/^class BinaryCostFunction: public CostFunction {$/;"	c	namespace:ceres::internal	file:
BinaryCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  BinaryCostFunction(int num_residuals,$/;"	f	class:ceres::internal::BinaryCostFunction
BinaryCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^class BinaryCostFunction: public CostFunction {$/;"	c	namespace:ceres::internal	file:
BinaryCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^  BinaryCostFunction(int num_residuals,$/;"	f	class:ceres::internal::BinaryCostFunction
BinaryCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^class BinaryCostFunction: public CostFunction {$/;"	c	namespace:ceres::internal	file:
BinaryCostFunction	ceres-solver/internal/ceres/program_test.cc	/^class BinaryCostFunction : public MockCostFunctionBase<2, 1, 1, 0> {};$/;"	c	namespace:ceres::internal	file:
BinaryCostFunction	ceres-solver/internal/ceres/reorder_program_test.cc	/^class BinaryCostFunction : public MockCostFunctionBase<2, 1, 1, 0> {};$/;"	c	namespace:ceres::internal	file:
BinaryScalarCost	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^  explicit BinaryScalarCost(double a): a_(a) {}$/;"	f	class:ceres::internal::BinaryScalarCost
BinaryScalarCost	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^class BinaryScalarCost {$/;"	c	namespace:ceres::internal	file:
Bind	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
Bits	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
Block	ceres-solver/internal/ceres/block_structure.h	/^  Block() : size(-1), position(-1) {}$/;"	f	struct:ceres::internal::Block
Block	ceres-solver/internal/ceres/block_structure.h	/^  Block(int size_, int position_) : size(size_), position(position_) {}$/;"	f	struct:ceres::internal::Block
Block	ceres-solver/internal/ceres/block_structure.h	/^struct Block {$/;"	s	namespace:ceres::internal
BlockAMDOrdering	ceres-solver/internal/ceres/suitesparse.cc	/^bool SuiteSparse::BlockAMDOrdering(const cholmod_sparse* A,$/;"	f	class:ceres::internal::SuiteSparse
BlockAnalyzeCholesky	ceres-solver/internal/ceres/cxsparse.cc	/^cs_dis* CXSparse::BlockAnalyzeCholesky(cs_di* A,$/;"	f	class:ceres::internal::CXSparse
BlockAnalyzeCholesky	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_factor* SuiteSparse::BlockAnalyzeCholesky($/;"	f	class:ceres::internal::SuiteSparse
BlockEvaluatePreparer	ceres-solver/internal/ceres/block_evaluate_preparer.h	/^class BlockEvaluatePreparer {$/;"	c	namespace:ceres::internal
BlockJacobiPreconditioner	ceres-solver/internal/ceres/block_jacobi_preconditioner.cc	/^BlockJacobiPreconditioner::BlockJacobiPreconditioner($/;"	f	class:ceres::internal::BlockJacobiPreconditioner
BlockJacobiPreconditioner	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	/^class BlockJacobiPreconditioner : public BlockSparseMatrixPreconditioner {$/;"	c	namespace:ceres::internal
BlockJacobiPreconditionerTest	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^class BlockJacobiPreconditionerTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
BlockJacobianWriter	ceres-solver/internal/ceres/block_jacobian_writer.cc	/^BlockJacobianWriter::BlockJacobianWriter(const Evaluator::Options& options,$/;"	f	class:ceres::internal::BlockJacobianWriter
BlockJacobianWriter	ceres-solver/internal/ceres/block_jacobian_writer.h	/^class BlockJacobianWriter {$/;"	c	namespace:ceres::internal
BlockOrderingToScalarOrdering	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.cc	/^void BlockOrderingToScalarOrdering(const vector<int>& blocks,$/;"	f	namespace:ceres::internal
BlockRandomAccessDenseMatrix	ceres-solver/internal/ceres/block_random_access_dense_matrix.cc	/^BlockRandomAccessDenseMatrix::BlockRandomAccessDenseMatrix($/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
BlockRandomAccessDenseMatrix	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^class BlockRandomAccessDenseMatrix : public BlockRandomAccessMatrix {$/;"	c	namespace:ceres::internal
BlockRandomAccessDiagonalMatrix	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^BlockRandomAccessDiagonalMatrix::BlockRandomAccessDiagonalMatrix($/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
BlockRandomAccessDiagonalMatrix	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^class BlockRandomAccessDiagonalMatrix : public BlockRandomAccessMatrix {$/;"	c	namespace:ceres::internal
BlockRandomAccessDiagonalMatrixAdapter	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  explicit BlockRandomAccessDiagonalMatrixAdapter($/;"	f	class:ceres::internal::__anon12::BlockRandomAccessDiagonalMatrixAdapter
BlockRandomAccessDiagonalMatrixAdapter	ceres-solver/internal/ceres/schur_complement_solver.cc	/^class BlockRandomAccessDiagonalMatrixAdapter : public LinearOperator {$/;"	c	namespace:ceres::internal::__anon12	file:
BlockRandomAccessDiagonalMatrixTest	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^class BlockRandomAccessDiagonalMatrixTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
BlockRandomAccessMatrix	ceres-solver/internal/ceres/block_random_access_matrix.h	/^class BlockRandomAccessMatrix {$/;"	c	namespace:ceres::internal
BlockRandomAccessSparseMatrix	ceres-solver/internal/ceres/block_random_access_sparse_matrix.cc	/^BlockRandomAccessSparseMatrix::BlockRandomAccessSparseMatrix($/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
BlockRandomAccessSparseMatrix	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^class BlockRandomAccessSparseMatrix : public BlockRandomAccessMatrix {$/;"	c	namespace:ceres::internal
BlockRandomAccessSparseMatrixAdapter	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  explicit BlockRandomAccessSparseMatrixAdapter($/;"	f	class:ceres::internal::__anon12::BlockRandomAccessSparseMatrixAdapter
BlockRandomAccessSparseMatrixAdapter	ceres-solver/internal/ceres/schur_complement_solver.cc	/^class BlockRandomAccessSparseMatrixAdapter : public LinearOperator {$/;"	c	namespace:ceres::internal::__anon12	file:
BlockRandomAccessSparseMatrixTest	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^class BlockRandomAccessSparseMatrixTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
BlockSize	ceres-solver/internal/ceres/block_structure.h	/^typedef int32 BlockSize;$/;"	t	namespace:ceres::internal
BlockSparseMatrix	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^BlockSparseMatrix::BlockSparseMatrix($/;"	f	class:ceres::internal::BlockSparseMatrix
BlockSparseMatrix	ceres-solver/internal/ceres/block_sparse_matrix.h	/^class BlockSparseMatrix : public SparseMatrix {$/;"	c	namespace:ceres::internal
BlockSparseMatrixPreconditioner	ceres-solver/internal/ceres/preconditioner.h	/^typedef TypedPreconditioner<BlockSparseMatrix>         BlockSparseMatrixPreconditioner;          \/\/ NOLINT$/;"	t	namespace:ceres::internal
BlockSparseMatrixSolver	ceres-solver/internal/ceres/linear_solver.h	/^typedef TypedLinearSolver<BlockSparseMatrix>         BlockSparseMatrixSolver;          \/\/ NOLINT$/;"	t	namespace:ceres::internal
BlockSparseMatrixTest	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^class BlockSparseMatrixTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Bool	ceres-solver/internal/ceres/gtest/gtest.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
BoolFromGTestEnv	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool BoolFromGTestEnv(const char* flag, bool default_value) {$/;"	f	namespace:testing::internal
BooleanConstant	ceres-solver/internal/ceres/gmock/gmock.h	/^struct BooleanConstant {};$/;"	s	namespace:testing::internal
BothOfMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  BothOfMatcher(Matcher1 matcher1, Matcher2 matcher2)$/;"	f	class:testing::internal::BothOfMatcher
BothOfMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class BothOfMatcher {$/;"	c	namespace:testing::internal
BothOfMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  BothOfMatcherImpl(const Matcher<T>& matcher1, const Matcher<T>& matcher2)$/;"	f	class:testing::internal::BothOfMatcherImpl
BothOfMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class BothOfMatcherImpl : public MatcherInterface<T> {$/;"	c	namespace:testing::internal
BoundSecondMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  BoundSecondMatcher(const Tuple2Matcher& tm, const Second& second)$/;"	f	class:testing::internal::BoundSecondMatcher
BoundSecondMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class BoundSecondMatcher {$/;"	c	namespace:testing::internal
BoundsMap	ceres-solver/internal/ceres/covariance_test.cc	/^  typedef map<const double*, pair<int, int> > BoundsMap;$/;"	t	class:ceres::internal::CovarianceTest	file:
BracketingPhase	ceres-solver/internal/ceres/line_search.cc	/^bool WolfeLineSearch::BracketingPhase($/;"	f	class:ceres::internal::WolfeLineSearch
Brain	logical_core/src/logical_core.cpp	/^    Brain() : ac("move_base", true),drive_mode(PATROL_MODE),car_state(IDLE_STATE)$/;"	f	class:Brain
Brain	logical_core/src/logical_core.cpp	/^class Brain$/;"	c	file:
BriefReport	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^string GradientProblemSolver::Summary::BriefReport() const {$/;"	f	class:ceres::GradientProblemSolver::Summary
BriefReport	ceres-solver/internal/ceres/solver.cc	/^string Solver::Summary::BriefReport() const {$/;"	f	class:ceres::Solver::Summary
BufferLayoutType	ceres-solver/internal/ceres/schur_eliminator.h	/^  typedef std::map<int, int> BufferLayoutType;$/;"	t	class:ceres::internal::SchurEliminator
BuildCompanionMatrix	ceres-solver/internal/ceres/polynomial.cc	/^void BuildCompanionMatrix(const Vector& polynomial,$/;"	f	namespace:ceres::internal::__anon3
BuildJacobianLayout	ceres-solver/internal/ceres/block_jacobian_writer.cc	/^void BuildJacobianLayout(const Program& program,$/;"	f	namespace:ceres::internal::__anon6
BuildList	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ListType BuildList(const Head& matcher, const Tail&... tail) {$/;"	f	struct:testing::internal::MatcherList
BuildList	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ListType BuildList(const Matcher1& matcher1,$/;"	f	struct:testing::internal::MatcherList
BuildOptimizationProblem	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d.cc	/^void BuildOptimizationProblem(const std::vector<Constraint2d>& constraints,$/;"	f	namespace:ceres::examples
BuildOptimizationProblem	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d.cc	/^void BuildOptimizationProblem(const VectorOfConstraints& constraints,$/;"	f	namespace:ceres::examples
BuildProblem	ceres-solver/examples/bundle_adjuster.cc	/^void BuildProblem(BALProblem* bal_problem, Problem* problem) {$/;"	f	namespace:ceres::examples
BuildProblem	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  void BuildProblem() {$/;"	f	class:ceres::internal::BundleAdjustmentProblem	file:
BuildResidualLayout	ceres-solver/internal/ceres/program_evaluator.h	/^  static void BuildResidualLayout(const Program& program,$/;"	f	class:ceres::internal::ProgramEvaluator
BuiltInDefaultValue	ceres-solver/internal/ceres/gmock/gmock.h	/^class BuiltInDefaultValue {$/;"	c	namespace:testing::internal
BuiltInDefaultValue	ceres-solver/internal/ceres/gmock/gmock.h	/^class BuiltInDefaultValue<T*> {$/;"	c	namespace:testing::internal
BuiltInDefaultValue	ceres-solver/internal/ceres/gmock/gmock.h	/^class BuiltInDefaultValue<const T> {$/;"	c	namespace:testing::internal
BuiltInDefaultValueGetter	ceres-solver/internal/ceres/gmock/gmock.h	/^struct BuiltInDefaultValueGetter {$/;"	s	namespace:testing::internal
BuiltInDefaultValueGetter	ceres-solver/internal/ceres/gmock/gmock.h	/^struct BuiltInDefaultValueGetter<T, false> {$/;"	s	namespace:testing::internal
BundleAdjustmentProblem	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  BundleAdjustmentProblem() {$/;"	f	class:ceres::internal::BundleAdjustmentProblem
BundleAdjustmentProblem	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^class BundleAdjustmentProblem {$/;"	c	namespace:ceres::internal	file:
BundleAdjustmentTest	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^typedef SystemTest<BundleAdjustmentProblem> BundleAdjustmentTest;$/;"	t	namespace:ceres::internal	file:
BundleConstraints	ceres-solver/examples/libmv_bundle_adjuster.cc	/^enum BundleConstraints {$/;"	g	namespace:__anon38	file:
BundleIntrinsics	ceres-solver/examples/libmv_bundle_adjuster.cc	/^enum BundleIntrinsics {$/;"	g	namespace:__anon38	file:
BundleIntrinsicsLogMessage	ceres-solver/examples/libmv_bundle_adjuster.cc	/^void BundleIntrinsicsLogMessage(const int bundle_intrinsics) {$/;"	f	namespace:__anon38
BundlerResidual	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^    BundlerResidual(double u, double v): u(u), v(v) {}$/;"	f	struct:ceres::internal::BundleAdjustmentProblem::BundlerResidual
BundlerResidual	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  struct BundlerResidual {$/;"	s	class:ceres::internal::BundleAdjustmentProblem	file:
ByMove	ceres-solver/internal/ceres/gmock/gmock.h	/^internal::ByMoveWrapper<R> ByMove(R x) {$/;"	f	namespace:testing
ByMoveWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ByMoveWrapper(T value) : payload(internal::move(value)) {}$/;"	f	struct:testing::internal::ByMoveWrapper
ByMoveWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^struct ByMoveWrapper {$/;"	s	namespace:testing::internal
ByRef	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::ReferenceWrapper<T> ByRef(T& l_value) {  \/\/ NOLINT$/;"	f	namespace:testing
ByRef	ceres-solver/internal/ceres/gtest/gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
ByRef	ceres-solver/internal/ceres/gtest/gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
CANONICAL_VIEWS	ceres-solver/include/ceres/types.h	/^  CANONICAL_VIEWS,$/;"	e	enum:ceres::VisibilityClusteringType
CASESTR	ceres-solver/internal/ceres/types.cc	337;"	d	file:
CASESTR	ceres-solver/internal/ceres/types.cc	41;"	d	file:
CATKIN_MARKER_FILE	build/catkin_generated/installspace/_setup_util.py	/^CATKIN_MARKER_FILE = '.catkin'$/;"	v
CATKIN_MARKER_FILE	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^CATKIN_MARKER_FILE = '.catkin'$/;"	v
CATKIN_MARKER_FILE	devel/_setup_util.py	/^CATKIN_MARKER_FILE = '.catkin'$/;"	v
CATKIN_PACKAGE_PREFIX	build/car_2d_nav/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/car_2d_nav/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/console/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/console/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/logical_core/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/logical_core/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/odometry/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/odometry/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/rplidar_ros/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/rplidar_ros/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/serial_comm/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/serial_comm/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/serial_communication/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/serial_communication/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/tf_tree/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/tf_tree/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/vision_unit/catkin_generated/pkg.develspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CATKIN_PACKAGE_PREFIX	build/vision_unit/catkin_generated/pkg.installspace.context.pc.py	/^CATKIN_PACKAGE_PREFIX = ""$/;"	v
CENTRAL	ceres-solver/include/ceres/types.h	/^  CENTRAL,$/;"	e	enum:ceres::NumericDiffMethodType
CERCES_INTERNAL_MINIGLOG_GLOG_LOGGING_H_	ceres-solver/internal/ceres/miniglog/glog/logging.h	93;"	d
CERES_ADD_PARAMETER_BLOCK	ceres-solver/include/ceres/sized_cost_function.h	74;"	d
CERES_ADD_PARAMETER_BLOCK	ceres-solver/include/ceres/sized_cost_function.h	86;"	d
CERES_ALIGNED_CHAR_ARRAY	ceres-solver/include/ceres/internal/manual_constructor.h	203;"	d
CERES_ALIGNED_CHAR_ARRAY	ceres-solver/include/ceres/internal/manual_constructor.h	59;"	d
CERES_ALIGNED_CHAR_ARRAY	ceres-solver/include/ceres/internal/manual_constructor.h	85;"	d
CERES_ALIGN_ATTRIBUTE	ceres-solver/include/ceres/internal/macros.h	163;"	d
CERES_ALIGN_ATTRIBUTE	ceres-solver/include/ceres/internal/macros.h	166;"	d
CERES_ALIGN_OF	ceres-solver/include/ceres/internal/macros.h	164;"	d
CERES_ALIGN_OF	ceres-solver/include/ceres/internal/macros.h	167;"	d
CERES_ALIGN_TYPE_TEMPLATE	ceres-solver/include/ceres/internal/manual_constructor.h	62;"	d
CERES_ALIGN_TYPE_TEMPLATE	ceres-solver/include/ceres/internal/manual_constructor.h	83;"	d
CERES_ARRAYSIZE	ceres-solver/include/ceres/internal/macros.h	138;"	d
CERES_CALL_GEMM	ceres-solver/internal/ceres/small_blas.h	376;"	d
CERES_CALL_GEMM	ceres-solver/internal/ceres/small_blas.h	86;"	d
CERES_COPY_PARAMETER_BLOCK	ceres-solver/include/ceres/numeric_diff_cost_function.h	255;"	d
CERES_COPY_PARAMETER_BLOCK	ceres-solver/include/ceres/numeric_diff_cost_function.h	271;"	d
CERES_DEFINE_JET_COMPARISON_OPERATOR	ceres-solver/include/ceres/jet.h	382;"	d
CERES_DEFINE_JET_COMPARISON_OPERATOR	ceres-solver/include/ceres/jet.h	401;"	d
CERES_DISALLOW_COPY_AND_ASSIGN	ceres-solver/include/ceres/internal/macros.h	52;"	d
CERES_DISALLOW_IMPLICIT_CONSTRUCTORS	ceres-solver/include/ceres/internal/macros.h	62;"	d
CERES_EIGEN_VERSION	ceres-solver/internal/ceres/solver_utils.cc	41;"	d	file:
CERES_EVALUATE_JACOBIAN_FOR_BLOCK	ceres-solver/include/ceres/numeric_diff_cost_function.h	273;"	d
CERES_EVALUATE_JACOBIAN_FOR_BLOCK	ceres-solver/include/ceres/numeric_diff_cost_function.h	306;"	d
CERES_EXAMPLES_BAL_PROBLEM_H_	ceres-solver/examples/bal_problem.h	38;"	d
CERES_EXAMPLES_FIELDS_OF_EXPERTS_H_	ceres-solver/examples/fields_of_experts.h	45;"	d
CERES_EXAMPLES_PGM_IMAGE_H_	ceres-solver/examples/pgm_image.h	34;"	d
CERES_EXAMPLES_POSE_GRAPH_2D_ANGLE_LOCAL_PARAMETERIZATION_H_	ceres-solver/examples/slam/pose_graph_2d/angle_local_parameterization.h	32;"	d
CERES_EXAMPLES_POSE_GRAPH_2D_NORMALIZE_ANGLE_H_	ceres-solver/examples/slam/pose_graph_2d/normalize_angle.h	32;"	d
CERES_EXAMPLES_POSE_GRAPH_2D_POSE_GRAPH_2D_ERROR_TERM_H_	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	34;"	d
CERES_EXAMPLES_POSE_GRAPH_2D_TYPES_H_	ceres-solver/examples/slam/pose_graph_2d/types.h	36;"	d
CERES_EXAMPLES_RANDOM_H_	ceres-solver/examples/random.h	32;"	d
CERES_EXAMPLES_SNAVELY_REPROJECTION_ERROR_H_	ceres-solver/examples/snavely_reprojection_error.h	42;"	d
CERES_EXPORT	ceres-solver/include/ceres/internal/port.h	91;"	d
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	/^CERES_GEMM_BEGIN(MatrixMatrixMultiply) {$/;"	f	namespace:ceres::internal
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	/^CERES_GEMM_BEGIN(MatrixMatrixMultiplyEigen) {$/;"	f	namespace:ceres::internal
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	/^CERES_GEMM_BEGIN(MatrixMatrixMultiplyNaive) {$/;"	f	namespace:ceres::internal
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	/^CERES_GEMM_BEGIN(MatrixTransposeMatrixMultiply) {$/;"	f	namespace:ceres::internal
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	/^CERES_GEMM_BEGIN(MatrixTransposeMatrixMultiplyEigen) {$/;"	f	namespace:ceres::internal
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	/^CERES_GEMM_BEGIN(MatrixTransposeMatrixMultiplyNaive) {$/;"	f	namespace:ceres::internal
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	373;"	d
CERES_GEMM_BEGIN	ceres-solver/internal/ceres/small_blas.h	47;"	d
CERES_GEMM_EIGEN_HEADER	ceres-solver/internal/ceres/small_blas.h	374;"	d
CERES_GEMM_EIGEN_HEADER	ceres-solver/internal/ceres/small_blas.h	79;"	d
CERES_GEMM_NAIVE_HEADER	ceres-solver/internal/ceres/small_blas.h	375;"	d
CERES_GEMM_NAIVE_HEADER	ceres-solver/internal/ceres/small_blas.h	61;"	d
CERES_HASH_NAMESPACE_END	ceres-solver/internal/ceres/collections_port.h	47;"	d
CERES_HASH_NAMESPACE_END	ceres-solver/internal/ceres/collections_port.h	54;"	d
CERES_HASH_NAMESPACE_END	ceres-solver/internal/ceres/collections_port.h	61;"	d
CERES_HASH_NAMESPACE_START	ceres-solver/internal/ceres/collections_port.h	46;"	d
CERES_HASH_NAMESPACE_START	ceres-solver/internal/ceres/collections_port.h	53;"	d
CERES_HASH_NAMESPACE_START	ceres-solver/internal/ceres/collections_port.h	60;"	d
CERES_HAVE_PTHREAD	ceres-solver/ceres-bin/config/ceres/internal/config.h	72;"	d
CERES_HAVE_RWLOCK	ceres-solver/ceres-bin/config/ceres/internal/config.h	73;"	d
CERES_INCLUDE_PATHS	ceres-solver/jni/Android.mk	/^CERES_INCLUDE_PATHS := $(CERES_EXTRA_INCLUDES)$/;"	m
CERES_INTERNAL_ARRAY_UTILS_H_	ceres-solver/internal/ceres/array_utils.h	44;"	d
CERES_INTERNAL_BLAS_H_	ceres-solver/internal/ceres/blas.h	34;"	d
CERES_INTERNAL_BLOCK_EVALUATE_PREPARER_H_	ceres-solver/internal/ceres/block_evaluate_preparer.h	37;"	d
CERES_INTERNAL_BLOCK_JACOBIAN_WRITER_H_	ceres-solver/internal/ceres/block_jacobian_writer.h	39;"	d
CERES_INTERNAL_BLOCK_JACOBI_PRECONDITIONER_H_	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	32;"	d
CERES_INTERNAL_BLOCK_RANDOM_ACCESS_DENSE_MATRIX_H_	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	32;"	d
CERES_INTERNAL_BLOCK_RANDOM_ACCESS_DIAGONAL_MATRIX_H_	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	32;"	d
CERES_INTERNAL_BLOCK_RANDOM_ACCESS_MATRIX_H_	ceres-solver/internal/ceres/block_random_access_matrix.h	34;"	d
CERES_INTERNAL_BLOCK_RANDOM_ACCESS_SPARSE_MATRIX_H_	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	32;"	d
CERES_INTERNAL_BLOCK_SPARSE_MATRIX_H_	ceres-solver/internal/ceres/block_sparse_matrix.h	35;"	d
CERES_INTERNAL_BLOCK_STRUCTURE_H_	ceres-solver/internal/ceres/block_structure.h	39;"	d
CERES_INTERNAL_CALLBACKS_H_	ceres-solver/internal/ceres/callbacks.h	32;"	d
CERES_INTERNAL_CANONICAL_VIEWS_CLUSTERING_H_	ceres-solver/internal/ceres/canonical_views_clustering.h	42;"	d
CERES_INTERNAL_CASTS_H_	ceres-solver/internal/ceres/casts.h	32;"	d
CERES_INTERNAL_CGNR_LINEAR_OPERATOR_H_	ceres-solver/internal/ceres/cgnr_linear_operator.h	32;"	d
CERES_INTERNAL_CGNR_SOLVER_H_	ceres-solver/internal/ceres/cgnr_solver.h	32;"	d
CERES_INTERNAL_COLLECTIONS_PORT_H_	ceres-solver/internal/ceres/collections_port.h	34;"	d
CERES_INTERNAL_COMPRESSED_COL_SPARSE_MATRIX_UTILS_H_	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.h	32;"	d
CERES_INTERNAL_COMPRESSED_ROW_JACOBIAN_WRITER_H_	ceres-solver/internal/ceres/compressed_row_jacobian_writer.h	34;"	d
CERES_INTERNAL_COMPRESSED_ROW_SPARSE_MATRIX_H_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	32;"	d
CERES_INTERNAL_CONJUGATE_GRADIENTS_SOLVER_H_	ceres-solver/internal/ceres/conjugate_gradients_solver.h	35;"	d
CERES_INTERNAL_COORDINATE_DESCENT_MINIMIZER_H_	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	32;"	d
CERES_INTERNAL_CORRECTOR_H_	ceres-solver/internal/ceres/corrector.h	36;"	d
CERES_INTERNAL_COVARIANCE_IMPL_H_	ceres-solver/internal/ceres/covariance_impl.h	32;"	d
CERES_INTERNAL_CXSPARSE_H_	ceres-solver/internal/ceres/cxsparse.h	32;"	d
CERES_INTERNAL_DENSE_JACOBIAN_WRITER_H_	ceres-solver/internal/ceres/dense_jacobian_writer.h	34;"	d
CERES_INTERNAL_DENSE_NORMAL_CHOLESKY_SOLVER_H_	ceres-solver/internal/ceres/dense_normal_cholesky_solver.h	35;"	d
CERES_INTERNAL_DENSE_QR_SOLVER_H_	ceres-solver/internal/ceres/dense_qr_solver.h	33;"	d
CERES_INTERNAL_DENSE_SPARSE_MATRIX_H_	ceres-solver/internal/ceres/dense_sparse_matrix.h	34;"	d
CERES_INTERNAL_DETECT_STRUCTURE_H_	ceres-solver/internal/ceres/detect_structure.h	32;"	d
CERES_INTERNAL_DOGLEG_STRATEGY_H_	ceres-solver/internal/ceres/dogleg_strategy.h	32;"	d
CERES_INTERNAL_DYNAMIC_COMPRESED_ROW_FINALIZER_H_	ceres-solver/internal/ceres/dynamic_compressed_row_finalizer.h	32;"	d
CERES_INTERNAL_DYNAMIC_COMPRESSED_ROW_JACOBIAN_WRITER_H_	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.h	35;"	d
CERES_INTERNAL_DYNAMIC_COMPRESSED_ROW_SPARSE_MATRIX_H_	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h	42;"	d
CERES_INTERNAL_DYNAMIC_SPARSE_NORMAL_CHOLESKY_SOLVER_H_	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.h	35;"	d
CERES_INTERNAL_EIGEN_H_	ceres-solver/include/ceres/internal/eigen.h	32;"	d
CERES_INTERNAL_EVALUATOR_H_	ceres-solver/internal/ceres/evaluator.h	33;"	d
CERES_INTERNAL_EXECUTION_SUMMARY_H_	ceres-solver/internal/ceres/execution_summary.h	32;"	d
CERES_INTERNAL_FILE_H_	ceres-solver/internal/ceres/file.h	34;"	d
CERES_INTERNAL_GRADIENT_CHECKING_COST_FUNCTION_H_	ceres-solver/internal/ceres/gradient_checking_cost_function.h	33;"	d
CERES_INTERNAL_GRADIENT_PROBLEM_EVALUATOR_H_	ceres-solver/internal/ceres/gradient_problem_evaluator.h	32;"	d
CERES_INTERNAL_GRAPH_ALGORITHMS_H_	ceres-solver/internal/ceres/graph_algorithms.h	34;"	d
CERES_INTERNAL_GRAPH_H_	ceres-solver/internal/ceres/graph.h	32;"	d
CERES_INTERNAL_IMPLICIT_SCHUR_COMPLEMENT_H_	ceres-solver/internal/ceres/implicit_schur_complement.h	35;"	d
CERES_INTERNAL_INTEGRAL_TYPES_H_	ceres-solver/internal/ceres/integral_types.h	35;"	d
CERES_INTERNAL_INVERT_PSD_MATRIX_H_	ceres-solver/internal/ceres/invert_psd_matrix.h	32;"	d
CERES_INTERNAL_IS_CLOSE_H_	ceres-solver/internal/ceres/is_close.h	34;"	d
CERES_INTERNAL_ITERATIVE_SCHUR_COMPLEMENT_SOLVER_H_	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	32;"	d
CERES_INTERNAL_LAPACK_H_	ceres-solver/internal/ceres/lapack.h	32;"	d
CERES_INTERNAL_LEVENBERG_MARQUARDT_STRATEGY_H_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	32;"	d
CERES_INTERNAL_LINEAR_LEAST_SQUARES_PROBLEMS_H_	ceres-solver/internal/ceres/linear_least_squares_problems.h	32;"	d
CERES_INTERNAL_LINEAR_OPERATOR_H_	ceres-solver/internal/ceres/linear_operator.h	34;"	d
CERES_INTERNAL_LINEAR_SOLVER_H_	ceres-solver/internal/ceres/linear_solver.h	35;"	d
CERES_INTERNAL_LINE_SEARCH_DIRECTION_H_	ceres-solver/internal/ceres/line_search_direction.h	32;"	d
CERES_INTERNAL_LINE_SEARCH_H_	ceres-solver/internal/ceres/line_search.h	34;"	d
CERES_INTERNAL_LINE_SEARCH_MINIMIZER_H_	ceres-solver/internal/ceres/line_search_minimizer.h	32;"	d
CERES_INTERNAL_LINE_SEARCH_PREPROCESSOR_H_	ceres-solver/internal/ceres/line_search_preprocessor.h	32;"	d
CERES_INTERNAL_LOW_RANK_INVERSE_HESSIAN_H_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	35;"	d
CERES_INTERNAL_MAP_UTIL_H_	ceres-solver/internal/ceres/map_util.h	34;"	d
CERES_INTERNAL_MINIMIZER_H_	ceres-solver/internal/ceres/minimizer.h	32;"	d
CERES_INTERNAL_MUTEX_H_	ceres-solver/internal/ceres/mutex.h	96;"	d
CERES_INTERNAL_NUMERIC_DIFF_TEST_UTILS_H_	ceres-solver/internal/ceres/numeric_diff_test_utils.h	32;"	d
CERES_INTERNAL_PARAMETER_BLOCK_H_	ceres-solver/internal/ceres/parameter_block.h	32;"	d
CERES_INTERNAL_PARAMETER_BLOCK_ORDERING_H_	ceres-solver/internal/ceres/parameter_block_ordering.h	32;"	d
CERES_INTERNAL_PARTITIONED_MATRIX_VIEW_H_	ceres-solver/internal/ceres/partitioned_matrix_view.h	37;"	d
CERES_INTERNAL_POLYNOMIAL_SOLVER_H_	ceres-solver/internal/ceres/polynomial.h	33;"	d
CERES_INTERNAL_PRECONDITIONER_H_	ceres-solver/internal/ceres/preconditioner.h	32;"	d
CERES_INTERNAL_PREPROCESSOR_H_	ceres-solver/internal/ceres/preprocessor.h	32;"	d
CERES_INTERNAL_PROGRAM_EVALUATOR_H_	ceres-solver/internal/ceres/program_evaluator.h	80;"	d
CERES_INTERNAL_PROGRAM_H_	ceres-solver/internal/ceres/program.h	32;"	d
CERES_INTERNAL_RANDOM_H_	ceres-solver/internal/ceres/random.h	33;"	d
CERES_INTERNAL_REORDER_PROGRAM_H_	ceres-solver/internal/ceres/reorder_program.h	32;"	d
CERES_INTERNAL_RESIDUAL_BLOCK_H_	ceres-solver/internal/ceres/residual_block.h	35;"	d
CERES_INTERNAL_RESIDUAL_BLOCK_UTILS_H_	ceres-solver/internal/ceres/residual_block_utils.h	44;"	d
CERES_INTERNAL_SCHUR_COMPLEMENT_SOLVER_H_	ceres-solver/internal/ceres/schur_complement_solver.h	32;"	d
CERES_INTERNAL_SCHUR_ELIMINATOR_H_	ceres-solver/internal/ceres/schur_eliminator.h	32;"	d
CERES_INTERNAL_SCHUR_ELIMINATOR_IMPL_H_	ceres-solver/internal/ceres/schur_eliminator_impl.h	35;"	d
CERES_INTERNAL_SCHUR_JACOBI_PRECONDITIONER_H_	ceres-solver/internal/ceres/schur_jacobi_preconditioner.h	39;"	d
CERES_INTERNAL_SCHUR_TEMPLATES_H_	ceres-solver/internal/ceres/schur_templates.h	33;"	d
CERES_INTERNAL_SCRATCH_EVALUATE_PREPARER_H_	ceres-solver/internal/ceres/scratch_evaluate_preparer.h	36;"	d
CERES_INTERNAL_SINGLE_LINKAGE_CLUSTERING_H_	ceres-solver/internal/ceres/single_linkage_clustering.h	32;"	d
CERES_INTERNAL_SMALL_BLAS_H_	ceres-solver/internal/ceres/small_blas.h	36;"	d
CERES_INTERNAL_SPARSE_MATRIX_H_	ceres-solver/internal/ceres/sparse_matrix.h	34;"	d
CERES_INTERNAL_SPARSE_NORMAL_CHOLESKY_SOLVER_H_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	35;"	d
CERES_INTERNAL_SPLIT_H_	ceres-solver/internal/ceres/split.h	32;"	d
CERES_INTERNAL_STL_UTIL_H_	ceres-solver/internal/ceres/stl_util.h	32;"	d
CERES_INTERNAL_STRINGPRINTF_H_	ceres-solver/internal/ceres/stringprintf.h	39;"	d
CERES_INTERNAL_SUITESPARSE_H_	ceres-solver/internal/ceres/suitesparse.h	34;"	d
CERES_INTERNAL_TEST_UTIL_H_	ceres-solver/internal/ceres/test_util.h	40;"	d
CERES_INTERNAL_TRIPLET_SPARSE_MATRIX_H_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	32;"	d
CERES_INTERNAL_TRUST_REGION_MINIMIZER_H_	ceres-solver/internal/ceres/trust_region_minimizer.h	32;"	d
CERES_INTERNAL_TRUST_REGION_PREPROCESSOR_H_	ceres-solver/internal/ceres/trust_region_preprocessor.h	32;"	d
CERES_INTERNAL_TRUST_REGION_STEP_EVALUATOR_H_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	32;"	d
CERES_INTERNAL_TRUST_REGION_STRATEGY_H_	ceres-solver/internal/ceres/trust_region_strategy.h	32;"	d
CERES_INTERNAL_VISIBILITY_BASED_PRECONDITIONER_H_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	49;"	d
CERES_INTERNAL_VISIBILITY_H_	ceres-solver/internal/ceres/visibility.h	36;"	d
CERES_INTERNAL_WALL_TIME_H_	ceres-solver/internal/ceres/wall_time.h	32;"	d
CERES_INTSIZE	ceres-solver/internal/ceres/integral_types.h	50;"	d
CERES_INTSIZE	ceres-solver/internal/ceres/integral_types.h	77;"	d
CERES_JET_ALIGN_BYTES	ceres-solver/include/ceres/jet.h	264;"	d
CERES_JET_ALIGN_BYTES	ceres-solver/include/ceres/jet.h	267;"	d
CERES_JET_ALIGN_BYTES	ceres-solver/include/ceres/jet.h	274;"	d
CERES_MAKE_1ST_ORDER_PERTURBATION	ceres-solver/include/ceres/internal/autodiff.h	269;"	d
CERES_MAKE_1ST_ORDER_PERTURBATION	ceres-solver/include/ceres/internal/autodiff.h	286;"	d
CERES_MUST_USE_RESULT	ceres-solver/include/ceres/internal/macros.h	150;"	d
CERES_MUST_USE_RESULT	ceres-solver/include/ceres/internal/macros.h	152;"	d
CERES_NO_CAMD	ceres-solver/internal/ceres/suitesparse.h	61;"	d
CERES_PRINTF_ATTRIBUTE	ceres-solver/internal/ceres/stringprintf.h	57;"	d
CERES_PRINTF_ATTRIBUTE	ceres-solver/internal/ceres/stringprintf.h	84;"	d
CERES_PUBLIC_AUTODIFF_COST_FUNCTION_H_	ceres-solver/include/ceres/autodiff_cost_function.h	130;"	d
CERES_PUBLIC_AUTODIFF_LOCAL_PARAMETERIZATION_H_	ceres-solver/include/ceres/autodiff_local_parameterization.h	34;"	d
CERES_PUBLIC_CERES_H_	ceres-solver/include/ceres/ceres.h	35;"	d
CERES_PUBLIC_CONDITIONED_COST_FUNCTION_H_	ceres-solver/include/ceres/conditioned_cost_function.h	35;"	d
CERES_PUBLIC_COST_FUNCTION_H_	ceres-solver/include/ceres/cost_function.h	45;"	d
CERES_PUBLIC_COST_FUNCTION_TO_FUNCTOR_H_	ceres-solver/include/ceres/cost_function_to_functor.h	88;"	d
CERES_PUBLIC_COVARIANCE_H_	ceres-solver/include/ceres/covariance.h	32;"	d
CERES_PUBLIC_CRS_MATRIX_H_	ceres-solver/include/ceres/crs_matrix.h	32;"	d
CERES_PUBLIC_CUBIC_INTERPOLATION_H_	ceres-solver/include/ceres/cubic_interpolation.h	32;"	d
CERES_PUBLIC_C_API_H_	ceres-solver/include/ceres/c_api.h	39;"	d
CERES_PUBLIC_DYNAMIC_AUTODIFF_COST_FUNCTION_H_	ceres-solver/include/ceres/dynamic_autodiff_cost_function.h	33;"	d
CERES_PUBLIC_DYNAMIC_COST_FUNCTION_H_	ceres-solver/include/ceres/dynamic_cost_function.h	32;"	d
CERES_PUBLIC_DYNAMIC_COST_FUNCTION_TO_FUNCTOR_H_	ceres-solver/include/ceres/dynamic_cost_function_to_functor.h	33;"	d
CERES_PUBLIC_DYNAMIC_NUMERIC_DIFF_COST_FUNCTION_H_	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	35;"	d
CERES_PUBLIC_FPCLASSIFY_H_	ceres-solver/include/ceres/fpclassify.h	38;"	d
CERES_PUBLIC_GRADIENT_CHECKER_H_	ceres-solver/include/ceres/gradient_checker.h	35;"	d
CERES_PUBLIC_GRADIENT_PROBLEM_H_	ceres-solver/include/ceres/gradient_problem.h	32;"	d
CERES_PUBLIC_GRADIENT_PROBLEM_SOLVER_H_	ceres-solver/include/ceres/gradient_problem_solver.h	32;"	d
CERES_PUBLIC_HOUSEHOLDER_VECTOR_H_	ceres-solver/internal/ceres/householder_vector.h	32;"	d
CERES_PUBLIC_INTERNAL_AUTODIFF_H_	ceres-solver/include/ceres/internal/autodiff.h	141;"	d
CERES_PUBLIC_INTERNAL_CONFIG_H_	ceres-solver/ceres-bin/config/ceres/internal/config.h	42;"	d
CERES_PUBLIC_INTERNAL_CONFIG_H_	ceres-solver/config/ceres/internal/config.h	45;"	d
CERES_PUBLIC_INTERNAL_FIXED_ARRAY_H_	ceres-solver/include/ceres/internal/fixed_array.h	33;"	d
CERES_PUBLIC_INTERNAL_MACROS_H_	ceres-solver/include/ceres/internal/macros.h	37;"	d
CERES_PUBLIC_INTERNAL_MANUAL_CONSTRUCTOR_H_	ceres-solver/include/ceres/internal/manual_constructor.h	41;"	d
CERES_PUBLIC_INTERNAL_NUMERIC_DIFF_H_	ceres-solver/include/ceres/internal/numeric_diff.h	36;"	d
CERES_PUBLIC_INTERNAL_PORT_H_	ceres-solver/include/ceres/internal/port.h	32;"	d
CERES_PUBLIC_INTERNAL_SCOPED_PTR_H_	ceres-solver/include/ceres/internal/scoped_ptr.h	36;"	d
CERES_PUBLIC_INTERNAL_VARIADIC_EVALUATE_H_	ceres-solver/include/ceres/internal/variadic_evaluate.h	33;"	d
CERES_PUBLIC_ITERATION_CALLBACK_H_	ceres-solver/include/ceres/iteration_callback.h	36;"	d
CERES_PUBLIC_JET_H_	ceres-solver/include/ceres/jet.h	157;"	d
CERES_PUBLIC_LOCAL_PARAMETERIZATION_H_	ceres-solver/include/ceres/local_parameterization.h	33;"	d
CERES_PUBLIC_LOSS_FUNCTION_H_	ceres-solver/include/ceres/loss_function.h	76;"	d
CERES_PUBLIC_NORMAL_PRIOR_H_	ceres-solver/include/ceres/normal_prior.h	35;"	d
CERES_PUBLIC_NUMERIC_DIFF_COST_FUNCTION_H_	ceres-solver/include/ceres/numeric_diff_cost_function.h	162;"	d
CERES_PUBLIC_NUMERIC_DIFF_OPTIONS_H_	ceres-solver/include/ceres/numeric_diff_options.h	33;"	d
CERES_PUBLIC_ORDERED_GROUPS_H_	ceres-solver/include/ceres/ordered_groups.h	32;"	d
CERES_PUBLIC_PROBLEM_H_	ceres-solver/include/ceres/problem.h	35;"	d
CERES_PUBLIC_PROBLEM_IMPL_H_	ceres-solver/internal/ceres/problem_impl.h	40;"	d
CERES_PUBLIC_ROTATION_H_	ceres-solver/include/ceres/rotation.h	46;"	d
CERES_PUBLIC_SIZED_COST_FUNCTION_H_	ceres-solver/include/ceres/sized_cost_function.h	39;"	d
CERES_PUBLIC_SOLVER_H_	ceres-solver/include/ceres/solver.h	32;"	d
CERES_PUBLIC_TYPES_H_	ceres-solver/include/ceres/types.h	38;"	d
CERES_PUBLIC_VERSION_H_	ceres-solver/include/ceres/version.h	32;"	d
CERES_SAFE_PTHREAD	ceres-solver/internal/ceres/mutex.h	229;"	d
CERES_SAFE_PTHREAD	ceres-solver/internal/ceres/mutex.h	247;"	d
CERES_SAFE_PTHREAD	ceres-solver/internal/ceres/mutex.h	251;"	d
CERES_SAFE_PTHREAD	ceres-solver/internal/ceres/mutex.h	268;"	d
CERES_SCANF_ATTRIBUTE	ceres-solver/internal/ceres/stringprintf.h	59;"	d
CERES_SRC_PATH	ceres-solver/jni/Android.mk	/^CERES_SRC_PATH := ..\/internal\/ceres$/;"	m
CERES_TAKE_1ST_ORDER_PERTURBATION	ceres-solver/include/ceres/internal/autodiff.h	296;"	d
CERES_TAKE_1ST_ORDER_PERTURBATION	ceres-solver/include/ceres/internal/autodiff.h	316;"	d
CERES_TEST_FILL_BLOCK	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	141;"	d	file:
CERES_TEST_FILL_BLOCK	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	152;"	d	file:
CERES_TEST_SRCDIR_SUFFIX	ceres-solver/internal/ceres/test_util.cc	50;"	d	file:
CERES_TO_STRING	ceres-solver/include/ceres/version.h	41;"	d
CERES_TO_STRING_HELPER	ceres-solver/include/ceres/version.h	40;"	d
CERES_TR1_MEMORY_HEADER	ceres-solver/ceres-bin/config/ceres/internal/config.h	83;"	d
CERES_TR1_SHARED_PTR	ceres-solver/ceres-bin/config/ceres/internal/config.h	86;"	d
CERES_TR1_UNORDERED_MAP	ceres-solver/ceres-bin/config/ceres/internal/config.h	79;"	d
CERES_USE_OPENMP	ceres-solver/ceres-bin/config/ceres/internal/config.h	69;"	d
CERES_VERSION_MAJOR	ceres-solver/include/ceres/version.h	34;"	d
CERES_VERSION_MINOR	ceres-solver/include/ceres/version.h	35;"	d
CERES_VERSION_REVISION	ceres-solver/include/ceres/version.h	36;"	d
CERES_VERSION_STRING	ceres-solver/include/ceres/version.h	44;"	d
CERES_WARNINGS_DISABLED	ceres-solver/include/ceres/internal/disable_warnings.h	34;"	d
CERES_WARNINGS_DISABLED	ceres-solver/include/ceres/internal/reenable_warnings.h	32;"	d
CERES_WIN32_LEAN_AND_MEAN	ceres-solver/internal/ceres/mutex.h	103;"	d
CGNR	ceres-solver/include/ceres/types.h	/^  CGNR$/;"	e	enum:ceres::LinearSolverType
CHECK	ceres-solver/internal/ceres/miniglog/glog/logging.h	341;"	d
CHECK_EQ	ceres-solver/internal/ceres/miniglog/glog/logging.h	362;"	d
CHECK_GE	ceres-solver/internal/ceres/miniglog/glog/logging.h	366;"	d
CHECK_GT	ceres-solver/internal/ceres/miniglog/glog/logging.h	367;"	d
CHECK_LE	ceres-solver/internal/ceres/miniglog/glog/logging.h	364;"	d
CHECK_LT	ceres-solver/internal/ceres/miniglog/glog/logging.h	365;"	d
CHECK_NE	ceres-solver/internal/ceres/miniglog/glog/logging.h	363;"	d
CHECK_NOTNULL	ceres-solver/internal/ceres/miniglog/glog/logging.h	410;"	d
CHECK_OP	ceres-solver/internal/ceres/miniglog/glog/logging.h	358;"	d
CLASS_THREAD	src/rplidar_ros/sdk/src/hal/thread.h	38;"	d
CLUSTER_JACOBI	ceres-solver/include/ceres/types.h	/^  CLUSTER_JACOBI,$/;"	e	enum:ceres::PreconditionerType
CLUSTER_TRIDIAGONAL	ceres-solver/include/ceres/types.h	/^  CLUSTER_TRIDIAGONAL$/;"	e	enum:ceres::PreconditionerType
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/car_2d_nav/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/console/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/gtest/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/logical_core/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/odometry/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/rplidar_ros/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/serial_comm/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/serial_communication/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/tf_tree/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	build/vision_unit/Makefile	/^CMAKE_BINARY_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/build$/;"	m
CMAKE_BINARY_DIR	ceres-solver/ceres-bin/Makefile	/^CMAKE_BINARY_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver\/ceres-bin$/;"	m
CMAKE_BINARY_DIR	ceres-solver/ceres-bin/examples/Makefile	/^CMAKE_BINARY_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver\/ceres-bin$/;"	m
CMAKE_BINARY_DIR	ceres-solver/ceres-bin/examples/sampled_function/Makefile	/^CMAKE_BINARY_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver\/ceres-bin$/;"	m
CMAKE_BINARY_DIR	ceres-solver/ceres-bin/examples/slam/Makefile	/^CMAKE_BINARY_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver\/ceres-bin$/;"	m
CMAKE_BINARY_DIR	ceres-solver/ceres-bin/examples/slam/pose_graph_2d/Makefile	/^CMAKE_BINARY_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver\/ceres-bin$/;"	m
CMAKE_BINARY_DIR	ceres-solver/ceres-bin/examples/slam/pose_graph_3d/Makefile	/^CMAKE_BINARY_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver\/ceres-bin$/;"	m
CMAKE_BINARY_DIR	ceres-solver/ceres-bin/internal/ceres/Makefile	/^CMAKE_BINARY_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver\/ceres-bin$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/car_2d_nav/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/console/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/gtest/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/logical_core/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/odometry/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/rplidar_ros/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/serial_comm/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/serial_communication/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/tf_tree/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/vision_unit/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	ceres-solver/ceres-bin/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	ceres-solver/ceres-bin/examples/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	ceres-solver/ceres-bin/examples/sampled_function/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	ceres-solver/ceres-bin/examples/slam/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	ceres-solver/ceres-bin/examples/slam/pose_graph_2d/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	ceres-solver/ceres-bin/examples/slam/pose_graph_3d/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	ceres-solver/ceres-bin/internal/ceres/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_PREFIX_PATH	build/catkin_generated/installspace/_setup_util.py	/^        CMAKE_PREFIX_PATH = '\/home\/ubuntu\/dji_beta\/auto_car\/devel;\/opt\/ros\/kinetic'.split(';')$/;"	v
CMAKE_PREFIX_PATH	build/catkin_generated/installspace/_setup_util.py	/^        CMAKE_PREFIX_PATH = os.pathsep.join(CMAKE_PREFIX_PATH)$/;"	v
CMAKE_PREFIX_PATH	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^        CMAKE_PREFIX_PATH = '\/home\/ubuntu\/dji_beta\/auto_car\/devel;\/opt\/ros\/kinetic'.split(';')$/;"	v
CMAKE_PREFIX_PATH	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^        CMAKE_PREFIX_PATH = os.pathsep.join(CMAKE_PREFIX_PATH)$/;"	v
CMAKE_PREFIX_PATH	devel/_setup_util.py	/^        CMAKE_PREFIX_PATH = '\/home\/ubuntu\/dji_beta\/auto_car\/devel;\/opt\/ros\/kinetic'.split(';')$/;"	v
CMAKE_PREFIX_PATH	devel/_setup_util.py	/^        CMAKE_PREFIX_PATH = os.pathsep.join(CMAKE_PREFIX_PATH)$/;"	v
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/car_2d_nav/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/console/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/gtest/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/logical_core/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/odometry/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/rplidar_ros/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/serial_comm/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/serial_communication/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/tf_tree/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	build/vision_unit/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ubuntu\/dji_beta\/auto_car\/src$/;"	m
CMAKE_SOURCE_DIR	ceres-solver/ceres-bin/Makefile	/^CMAKE_SOURCE_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver$/;"	m
CMAKE_SOURCE_DIR	ceres-solver/ceres-bin/examples/Makefile	/^CMAKE_SOURCE_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver$/;"	m
CMAKE_SOURCE_DIR	ceres-solver/ceres-bin/examples/sampled_function/Makefile	/^CMAKE_SOURCE_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver$/;"	m
CMAKE_SOURCE_DIR	ceres-solver/ceres-bin/examples/slam/Makefile	/^CMAKE_SOURCE_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver$/;"	m
CMAKE_SOURCE_DIR	ceres-solver/ceres-bin/examples/slam/pose_graph_2d/Makefile	/^CMAKE_SOURCE_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver$/;"	m
CMAKE_SOURCE_DIR	ceres-solver/ceres-bin/examples/slam/pose_graph_3d/Makefile	/^CMAKE_SOURCE_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver$/;"	m
CMAKE_SOURCE_DIR	ceres-solver/ceres-bin/internal/ceres/Makefile	/^CMAKE_SOURCE_DIR = \/home\/dji\/dji_beta\/auto_car\/ceres-solver$/;"	m
COLOR_DEFAULT	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  COLOR_DEFAULT,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_GREEN	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  COLOR_GREEN,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_RED	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  COLOR_RED,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_YELLOW	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  COLOR_YELLOW$/;"	e	enum:testing::internal::GTestColor	file:
COL_BLOCK1	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	836;"	d	file:
COL_BLOCK1	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	889;"	d	file:
COL_BLOCK2	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	837;"	d	file:
COL_BLOCK2	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	890;"	d	file:
COMMCTRL_H	src/serial_communication/src/commCtrl.h	2;"	d
COMMREAD_H	src/serial_comm/include/comm_read.h	2;"	d
COMM_WRITE_H	src/serial_comm/include/comm_write.h	2;"	d
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_TWEAK	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_TWEAK	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CONSOLE	ceres-solver/include/ceres/types.h	/^  CONSOLE,$/;"	e	enum:ceres::DumpFormatType
CONSOLE_MESSAGE_SERIAL_DATA_H	devel/include/console/serial_data.h	6;"	d
CONSTRAINED_SOLVE	ceres-solver/examples/more_garbow_hillstrom.cc	644;"	d	file:
CONVERGENCE	ceres-solver/include/ceres/types.h	/^  CONVERGENCE,$/;"	e	enum:ceres::TerminationType
COPY_OPTION	ceres-solver/internal/ceres/gradient_problem_solver.cc	55;"	d	file:
COPY_OPTION	ceres-solver/internal/ceres/gradient_problem_solver.cc	82;"	d	file:
CRSMatrix	ceres-solver/include/ceres/crs_matrix.h	/^  CRSMatrix() : num_rows(0), num_cols(0) {}$/;"	f	struct:ceres::CRSMatrix
CRSMatrix	ceres-solver/include/ceres/crs_matrix.h	/^struct CERES_EXPORT CRSMatrix {$/;"	s	namespace:ceres
CRSToDenseMatrix	ceres-solver/internal/ceres/problem_test.cc	/^void CRSToDenseMatrix(const CRSMatrix& input, Matrix* output) {$/;"	f	namespace:ceres::internal
CStringEquals	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool String::CStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CTRL_SERIAL_COMM_MESSAGE_CAR_SPEED_H	devel/include/ctrl_serial_comm/car_speed.h	6;"	d
CTRL_SERIAL_COMM_MESSAGE_SERIAL_DATA_H	devel/include/ctrl_serial_comm/serial_data.h	6;"	d
CUBIC	ceres-solver/include/ceres/types.h	/^  CUBIC$/;"	e	enum:ceres::LineSearchInterpolationType
CXSparse	ceres-solver/internal/ceres/cxsparse.cc	/^CXSparse::CXSparse() : scratch_(NULL), scratch_size_(0) {$/;"	f	class:ceres::internal::CXSparse
CXSparse	ceres-solver/internal/ceres/cxsparse.h	/^class CXSparse {$/;"	c	namespace:ceres::internal
CX_SPARSE	ceres-solver/include/ceres/types.h	/^  CX_SPARSE,$/;"	e	enum:ceres::SparseLinearAlgebraLibraryType
CalculateEndIndex	ceres-solver/internal/ceres/gtest/gtest.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
CalculateOptimalEdits	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::vector<EditType> CalculateOptimalEdits($/;"	f	namespace:testing::internal::edit_distance
CalculateOptimalEdits	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,$/;"	f	namespace:testing::internal::edit_distance
CalculateReserveForVector	ceres-solver/internal/ceres/split.cc	/^static int CalculateReserveForVector(const string& full, const char* delim) {$/;"	f	namespace:ceres::internal
Call	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^  static bool Call(const Functor& functor, T const *const *input, T* output) {$/;"	f	struct:ceres::internal::VariadicEvaluate
CallReaction	ceres-solver/internal/ceres/gmock/gmock.h	/^enum CallReaction {$/;"	g	namespace:testing::internal
CallStatistics	ceres-solver/internal/ceres/evaluator.h	/^  virtual std::map<std::string, int> CallStatistics() const {$/;"	f	class:ceres::internal::Evaluator
CallStatistics	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual std::map<std::string, int> CallStatistics() const {$/;"	f	class:ceres::internal::GradientProblemEvaluator
CallStatistics	ceres-solver/internal/ceres/linear_solver.h	/^  virtual std::map<std::string, int> CallStatistics() const {$/;"	f	class:ceres::internal::LinearSolver
CallStatistics	ceres-solver/internal/ceres/linear_solver.h	/^  virtual std::map<std::string, int> CallStatistics() const {$/;"	f	class:ceres::internal::TypedLinearSolver
CallStatistics	ceres-solver/internal/ceres/program_evaluator.h	/^  virtual std::map<std::string, int> CallStatistics() const {$/;"	f	class:ceres::internal::ProgramEvaluator
CallableStorageType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename CallableTraits<Callable>::StorageType CallableStorageType;$/;"	t	class:testing::internal::ResultOfMatcher
CallableTraits	ceres-solver/internal/ceres/gmock/gmock.h	/^struct CallableTraits {$/;"	s	namespace:testing::internal
CallableTraits	ceres-solver/internal/ceres/gmock/gmock.h	/^struct CallableTraits<ResType(*)(ArgType)> {$/;"	s	namespace:testing::internal
CallbackCostFunction	ceres-solver/internal/ceres/c_api.cc	/^  CallbackCostFunction(ceres_cost_function_t cost_function,$/;"	f	class:CallbackCostFunction
CallbackCostFunction	ceres-solver/internal/ceres/c_api.cc	/^class CallbackCostFunction : public ceres::CostFunction {$/;"	c	file:
CallbackLossFunction	ceres-solver/internal/ceres/c_api.cc	/^  explicit CallbackLossFunction(ceres_loss_function_t loss_function,$/;"	f	class:CallbackLossFunction
CallbackLossFunction	ceres-solver/internal/ceres/c_api.cc	/^class CallbackLossFunction : public ceres::LossFunction {$/;"	c	file:
CallbackReturnType	ceres-solver/include/ceres/types.h	/^enum CallbackReturnType {$/;"	g	namespace:ceres
CameraForImage	ceres-solver/examples/libmv_bundle_adjuster.cc	/^EuclideanCamera *CameraForImage(vector<EuclideanCamera> *all_cameras,$/;"	f	namespace:__anon38
CameraForImage	ceres-solver/examples/libmv_bundle_adjuster.cc	/^const EuclideanCamera *CameraForImage($/;"	f	namespace:__anon38
CameraToAngleAxisAndCenter	ceres-solver/examples/bal_problem.cc	/^void BALProblem::CameraToAngleAxisAndCenter(const double* camera,$/;"	f	class:ceres::examples::BALProblem
CanonicalViewsClustering	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^  CanonicalViewsClustering() {}$/;"	f	class:ceres::internal::CanonicalViewsClustering
CanonicalViewsClustering	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^class CanonicalViewsClustering {$/;"	c	namespace:ceres::internal	file:
CanonicalViewsClusteringOptions	ceres-solver/internal/ceres/canonical_views_clustering.h	/^  CanonicalViewsClusteringOptions()$/;"	f	struct:ceres::internal::CanonicalViewsClusteringOptions
CanonicalViewsClusteringOptions	ceres-solver/internal/ceres/canonical_views_clustering.h	/^struct CanonicalViewsClusteringOptions {$/;"	s	namespace:ceres::internal
CanonicalViewsTest	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^class CanonicalViewsTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
CaptureStderr	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void CaptureStderr() {$/;"	f	namespace:testing::internal
CaptureStdout	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void CaptureStdout() {$/;"	f	namespace:testing::internal
CaptureStream	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void CaptureStream(int fd, const char* stream_name, CapturedStream** stream) {$/;"	f	namespace:testing::internal
CapturedStream	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {$/;"	f	class:testing::internal::CapturedStream
CapturedStream	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class CapturedStream {$/;"	c	namespace:testing::internal	file:
CarState	logical_core/src/logical_core.cpp	/^enum CarState$/;"	g	file:
CarState	src/logical_core/src/logical_core.h	/^enum CarState$/;"	g
Cardinality	ceres-solver/internal/ceres/gmock/gmock.h	/^  Cardinality() {}$/;"	f	class:testing::Cardinality
Cardinality	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Cardinality(const CardinalityInterface* impl) : impl_(impl) {}$/;"	f	class:testing::Cardinality
Cardinality	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Cardinality {$/;"	c	namespace:testing
CardinalityInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^class CardinalityInterface {$/;"	c	namespace:testing
CartesianProductGenerator10	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator10(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator10
CartesianProductGenerator10	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator10$/;"	c	namespace:testing::internal
CartesianProductGenerator2	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator2(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator2
CartesianProductGenerator2	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator2$/;"	c	namespace:testing::internal
CartesianProductGenerator3	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator3(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator3
CartesianProductGenerator3	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator3$/;"	c	namespace:testing::internal
CartesianProductGenerator4	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator4(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator4
CartesianProductGenerator4	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator4$/;"	c	namespace:testing::internal
CartesianProductGenerator5	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator5(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator5
CartesianProductGenerator5	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator5$/;"	c	namespace:testing::internal
CartesianProductGenerator6	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator6(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator6
CartesianProductGenerator6	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator6$/;"	c	namespace:testing::internal
CartesianProductGenerator7	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator7(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator7
CartesianProductGenerator7	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator7$/;"	c	namespace:testing::internal
CartesianProductGenerator8	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator8(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator8
CartesianProductGenerator8	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator8$/;"	c	namespace:testing::internal
CartesianProductGenerator9	ceres-solver/internal/ceres/gtest/gtest.h	/^  CartesianProductGenerator9(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator9
CartesianProductGenerator9	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductGenerator9$/;"	c	namespace:testing::internal
CartesianProductHolder10	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder10(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder10
CartesianProductHolder10	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder10 {$/;"	c	namespace:testing::internal
CartesianProductHolder2	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder2(const Generator1& g1, const Generator2& g2)$/;"	f	class:testing::internal::CartesianProductHolder2
CartesianProductHolder2	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder2 {$/;"	c	namespace:testing::internal
CartesianProductHolder3	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder3(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder3
CartesianProductHolder3	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder3 {$/;"	c	namespace:testing::internal
CartesianProductHolder4	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder4(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder4
CartesianProductHolder4	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder4 {$/;"	c	namespace:testing::internal
CartesianProductHolder5	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder5(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder5
CartesianProductHolder5	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder5 {$/;"	c	namespace:testing::internal
CartesianProductHolder6	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder6(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder6
CartesianProductHolder6	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder6 {$/;"	c	namespace:testing::internal
CartesianProductHolder7	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder7(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder7
CartesianProductHolder7	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder7 {$/;"	c	namespace:testing::internal
CartesianProductHolder8	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder8(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder8
CartesianProductHolder8	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder8 {$/;"	c	namespace:testing::internal
CartesianProductHolder9	ceres-solver/internal/ceres/gtest/gtest.h	/^CartesianProductHolder9(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder9
CartesianProductHolder9	ceres-solver/internal/ceres/gtest/gtest.h	/^class CartesianProductHolder9 {$/;"	c	namespace:testing::internal
CaseInsensitiveCStringEquals	ceres-solver/internal/ceres/gmock/gmock.h	/^inline bool CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {$/;"	f	namespace:testing::internal
CaseInsensitiveCStringEquals	ceres-solver/internal/ceres/gmock/gmock.h	/^inline bool CaseInsensitiveCStringEquals(const wchar_t* lhs,$/;"	f	namespace:testing::internal
CaseInsensitiveCStringEquals	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CaseInsensitiveStringEquals	ceres-solver/internal/ceres/gmock/gmock.h	/^bool CaseInsensitiveStringEquals(const StringType& s1,$/;"	f	namespace:testing::internal
CaseInsensitiveWideCStringEquals	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,$/;"	f	class:testing::internal::String
Cast	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Matcher<T> Cast(const M& polymorphic_matcher_or_value) {$/;"	f	class:testing::internal::MatcherCastImpl
Cast	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Matcher<T> Cast(const Matcher<T>& matcher) { return matcher; }$/;"	f	class:testing::internal::MatcherCastImpl
Cast	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Matcher<T> Cast(const Matcher<U>& source_matcher) {$/;"	f	class:testing::internal::MatcherCastImpl
Cast	ceres-solver/internal/ceres/gmock/gmock.h	/^  static inline Matcher<T> Cast(const M& polymorphic_matcher_or_value) {$/;"	f	class:testing::SafeMatcherCastImpl
Cast	ceres-solver/internal/ceres/gmock/gmock.h	/^  static inline Matcher<T> Cast(const Matcher<U>& matcher) {$/;"	f	class:testing::SafeMatcherCastImpl
CastAndAppendTransform	ceres-solver/internal/ceres/gmock/gmock.h	/^struct CastAndAppendTransform {$/;"	s	namespace:testing::internal
CastImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Matcher<T> CastImpl(const M& polymorphic_matcher_or_value,$/;"	f	class:testing::internal::MatcherCastImpl
CastImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Matcher<T> CastImpl(const M& value, BooleanConstant<false>) {$/;"	f	class:testing::internal::MatcherCastImpl
CauchyLoss	ceres-solver/include/ceres/loss_function.h	/^  explicit CauchyLoss(double a) : b_(a * a), c_(1 \/ b_) { }$/;"	f	class:ceres::CauchyLoss
CauchyLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT CauchyLoss : public LossFunction {$/;"	c	namespace:ceres
Cell	ceres-solver/internal/ceres/block_structure.h	/^  Cell() : block_id(-1), position(-1) {}$/;"	f	struct:ceres::internal::Cell
Cell	ceres-solver/internal/ceres/block_structure.h	/^  Cell(int block_id_, int position_)$/;"	f	struct:ceres::internal::Cell
Cell	ceres-solver/internal/ceres/block_structure.h	/^struct Cell {$/;"	s	namespace:ceres::internal
CellInfo	ceres-solver/internal/ceres/block_random_access_matrix.h	/^  CellInfo()$/;"	f	struct:ceres::internal::CellInfo
CellInfo	ceres-solver/internal/ceres/block_random_access_matrix.h	/^  explicit CellInfo(double* ptr)$/;"	f	struct:ceres::internal::CellInfo
CellInfo	ceres-solver/internal/ceres/block_random_access_matrix.h	/^struct CellInfo {$/;"	s	namespace:ceres::internal
CellLessThan	ceres-solver/internal/ceres/block_structure.cc	/^bool CellLessThan(const Cell& lhs, const Cell& rhs) {$/;"	f	namespace:ceres::internal
CeresMutexLock	ceres-solver/internal/ceres/mutex.h	/^  explicit CeresMutexLock(Mutex *mu) : mu_(mu) { mu_->Lock(); }$/;"	f	class:ceres::internal::CeresMutexLock
CeresMutexLock	ceres-solver/internal/ceres/mutex.h	/^class CeresMutexLock {$/;"	c	namespace:ceres::internal
CeresMutexLock	ceres-solver/internal/ceres/mutex.h	319;"	d
CeresReaderMutexLock	ceres-solver/internal/ceres/mutex.h	/^  explicit CeresReaderMutexLock(Mutex *mu) : mu_(mu) { mu_->ReaderLock(); }$/;"	f	class:ceres::internal::CeresReaderMutexLock
CeresReaderMutexLock	ceres-solver/internal/ceres/mutex.h	/^class CeresReaderMutexLock {$/;"	c	namespace:ceres::internal
CeresReaderMutexLock	ceres-solver/internal/ceres/mutex.h	321;"	d
CeresWriterMutexLock	ceres-solver/internal/ceres/mutex.h	/^  explicit CeresWriterMutexLock(Mutex *mu) : mu_(mu) { mu_->WriterLock(); }$/;"	f	class:ceres::internal::CeresWriterMutexLock
CeresWriterMutexLock	ceres-solver/internal/ceres/mutex.h	/^class CeresWriterMutexLock {$/;"	c	namespace:ceres::internal
CeresWriterMutexLock	ceres-solver/internal/ceres/mutex.h	323;"	d
CgnrLinearOperator	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  CgnrLinearOperator(const LinearOperator& A, const double *D)$/;"	f	class:ceres::internal::CgnrLinearOperator
CgnrLinearOperator	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^class CgnrLinearOperator : public LinearOperator {$/;"	c	namespace:ceres::internal
CgnrSolver	ceres-solver/internal/ceres/cgnr_solver.cc	/^CgnrSolver::CgnrSolver(const LinearSolver::Options& options)$/;"	f	class:ceres::internal::CgnrSolver
CgnrSolver	ceres-solver/internal/ceres/cgnr_solver.h	/^class CgnrSolver : public BlockSparseMatrixSolver {$/;"	c	namespace:ceres::internal
ChDir	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:std::tr1::posix
ChangeNumThreadsIfNeeded	ceres-solver/internal/ceres/preprocessor.cc	/^void ChangeNumThreadsIfNeeded(Solver::Options* options) {$/;"	f	namespace:ceres::internal
CharFormat	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum CharFormat {$/;"	g	namespace:testing::internal	file:
CheckAllEvaluationCombinations	ceres-solver/internal/ceres/evaluator_test.cc	/^  void CheckAllEvaluationCombinations(const ExpectedEvaluation &expected) {$/;"	f	struct:ceres::internal::EvaluatorTest
CheckAllEvaluationCombinations	ceres-solver/internal/ceres/problem_test.cc	/^  void CheckAllEvaluationCombinations(const Problem::EvaluateOptions& options,$/;"	f	class:ceres::internal::ProblemEvaluateTest
CheckDimensions	ceres-solver/internal/ceres/gradient_checker_test.cc	/^void CheckDimensions(const GradientChecker::ProbeResults& results,$/;"	f	namespace:ceres::internal
CheckEvaluation	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^void CheckEvaluation(const CostFunction& cost_function, bool is_good) {$/;"	f	namespace:ceres::internal
CheckForDuplicates	ceres-solver/internal/ceres/covariance_impl.cc	/^template <typename T> void CheckForDuplicates(vector<T> blocks) {$/;"	f	namespace:ceres::internal
CheckForNoAliasing	ceres-solver/internal/ceres/problem_impl.cc	/^void CheckForNoAliasing(double* existing_block,$/;"	f	namespace:ceres::internal::__anon13
CheckIntPairToLong	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^  void CheckIntPairToLong(int a, int b) {$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrixTest
CheckIsValid	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void CheckIsValid(Functor \/* functor *\/) {}$/;"	f	struct:testing::internal::CallableTraits
CheckIsValid	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void CheckIsValid(ResType(*f)(ArgType)) {$/;"	f	struct:testing::internal::CallableTraits
CheckLongToIntPair	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^  void CheckLongToIntPair() {$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrixTest
CheckNotNull	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^T& CheckNotNull(const char *file, int line, const char *names, T& t) {$/;"	f
CheckNotNull	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^T* CheckNotNull(const char *file, int line, const char *names, T* t) {$/;"	f
CheckNotNullCommon	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^T& CheckNotNullCommon(const char *file, int line, const char *names, T& t) {$/;"	f
CheckRotationMatrixToAngleAxisRoundTrip	ceres-solver/internal/ceres/rotation_test.cc	/^void CheckRotationMatrixToAngleAxisRoundTrip(const double theta,$/;"	f	namespace:ceres::internal
CheckedDowncastToActualType	ceres-solver/internal/ceres/gtest/gtest.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:std::tr1
Cholesky	ceres-solver/internal/ceres/suitesparse.cc	/^LinearSolverTerminationType SuiteSparse::Cholesky(cholmod_sparse* A,$/;"	f	class:ceres::internal::SuiteSparse
ChopLowBits	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline UInt32 ChopLowBits(UInt32* bits, int n) {$/;"	f	namespace:testing::internal
Chunk	ceres-solver/internal/ceres/schur_eliminator.h	/^    Chunk() : size(0) {}$/;"	f	struct:ceres::internal::SchurEliminator::Chunk
Chunk	ceres-solver/internal/ceres/schur_eliminator.h	/^  struct Chunk {$/;"	s	class:ceres::internal::SchurEliminator
ChunkDiagonalBlockAndGradient	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^ChunkDiagonalBlockAndGradient($/;"	f	class:ceres::internal::SchurEliminator
ChunkOuterProduct	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^ChunkOuterProduct(const CompressedRowBlockStructure* bs,$/;"	f	class:ceres::internal::SchurEliminator
ClassUniqueToAlwaysTrue	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class ClassUniqueToAlwaysTrue {};$/;"	c	namespace:testing::internal::__anon24	file:
Clause	ceres-solver/internal/ceres/gmock/gmock.h	/^  enum Clause {$/;"	g	class:testing::internal::ExpectationBase
Clause	ceres-solver/internal/ceres/gmock/gmock.h	/^  enum Clause {$/;"	g	class:testing::internal::UntypedOnCallSpecBase
Clear	ceres-solver/include/ceres/ordered_groups.h	/^  void Clear() {$/;"	f	class:ceres::OrderedGroups
Clear	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void Clear() {$/;"	f	class:testing::DefaultValue
Clear	ceres-solver/internal/ceres/gmock/gmock.h	/^  void Clear() { ss_.str(""); }$/;"	f	class:testing::StringMatchResultListener
Clear	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestResult::Clear() {$/;"	f	class:testing::TestResult
ClearAdHocTestResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void ClearAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearNonAdHocTestResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void ClearNonAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestCase::ClearResult() {$/;"	f	class:testing::TestCase
ClearRows	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.cc	/^void DynamicCompressedRowSparseMatrix::ClearRows(int row_start,$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrix
ClearTestCaseResult	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void ClearTestCaseResult(TestCase* test_case) {$/;"	f	class:testing::TestCase
ClearTestPartResults	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static void ClearTestPartResults(TestResult* test_result) {$/;"	f	class:testing::internal::TestResultAccessor
ClearTestPartResults	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestResult::ClearTestPartResults() {$/;"	f	class:testing::TestResult
ClearTestResult	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Clone	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Close	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:std::tr1::posix
CloseConnection	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    virtual void CloseConnection() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
CloseConnection	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    void CloseConnection() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter	file:
CloseResultsWindow	src/doc/html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	src/doc/html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
ClusterCameras	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::ClusterCameras($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
CmpHelperEQ	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult CmpHelperEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperEQ	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult CmpHelperEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperEQFailure	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult CmpHelperEQFailure(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperOpFailure	ceres-solver/internal/ceres/gtest/gtest.h	/^AssertionResult CmpHelperOpFailure(const char* expr1, const char* expr2,$/;"	f	namespace:testing::internal
CmpHelperSTRCASEEQ	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASENE	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult CmpHelperSTRCASENE(const char* s1_expression,$/;"	f	namespace:testing::internal
CmpHelperSTREQ	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult CmpHelperSTREQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRNE	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult CmpHelperSTRNE(const char* s1_expression,$/;"	f	namespace:testing::internal
CodeLocation	ceres-solver/internal/ceres/gtest/gtest.h	/^  CodeLocation(const string& a_file, int a_line) : file(a_file), line(a_line) {}$/;"	f	struct:testing::internal::CodeLocation
CodeLocation	ceres-solver/internal/ceres/gtest/gtest.h	/^struct CodeLocation {$/;"	s	namespace:testing::internal
CodePointToUtf8	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string CodePointToUtf8(UInt32 code_point) {$/;"	f	namespace:testing::internal
ColMajorMatrix	ceres-solver/include/ceres/internal/eigen.h	/^                      Eigen::ColMajor> ColMajorMatrix;$/;"	t	namespace:ceres
ColMajorMatrixRef	ceres-solver/include/ceres/internal/eigen.h	/^                   Eigen::Stride<Eigen::Dynamic, 1> > ColMajorMatrixRef;$/;"	t	namespace:ceres
ColoredPrintf	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ColoredPrintf(GTestColor color, const char* fmt, ...) {$/;"	f	namespace:testing::internal
ColumnMajorAdapter3x3	ceres-solver/include/ceres/rotation.h	/^MatrixAdapter<T, 1, 3> ColumnMajorAdapter3x3(T* pointer) {$/;"	f	namespace:ceres
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^    Generator10> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^    Generator4, Generator5, Generator6, Generator7, Generator8> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^    Generator4, Generator5, Generator6, Generator7> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^    Generator4, Generator5, Generator6> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^    Generator4, Generator5> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^    Generator4> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^    Generator9> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::CartesianProductHolder2<Generator1, Generator2> Combine($/;"	f	namespace:testing
Combine	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::CartesianProductHolder3<Generator1, Generator2, Generator3> Combine($/;"	f	namespace:testing
CommonOptionsAreValid	ceres-solver/internal/ceres/solver.cc	/^bool CommonOptionsAreValid(const Solver::Options& options, string* error) {$/;"	f	namespace:ceres::__anon15
Compare	ceres-solver/internal/ceres/gtest/gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	ceres-solver/internal/ceres/gtest/gtest.h	/^  static AssertionResult Compare(const char* lhs_expression,$/;"	f	class:testing::internal::EqHelper
CompareEulerToAngleAxis	ceres-solver/internal/ceres/rotation_test.cc	/^static void CompareEulerToAngleAxis(double aa[3], double ea[3]) {$/;"	f	namespace:ceres::internal
CompareEvaluations	ceres-solver/internal/ceres/evaluator_test_utils.cc	/^void CompareEvaluations(int expected_num_rows,$/;"	f	namespace:ceres::internal
CompareMatrices	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^void CompareMatrices(const SparseMatrix* a, const SparseMatrix* b) {$/;"	f	namespace:ceres::internal
CompareMatrices	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^void CompareMatrices(const SparseMatrix* a, const SparseMatrix* b) {$/;"	f	namespace:ceres::internal
ComparisonBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ComparisonBase(const Rhs& rhs) : rhs_(rhs) {}$/;"	f	class:testing::internal::ComparisonBase
ComparisonBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class ComparisonBase {$/;"	c	namespace:testing::internal
CompileAssertTypesEqual	ceres-solver/internal/ceres/gtest/gtest.h	/^struct CompileAssertTypesEqual<T, T> {$/;"	s	namespace:testing::internal
ComposedLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT ComposedLoss : public LossFunction {$/;"	c	namespace:ceres
ComposedLoss	ceres-solver/internal/ceres/loss_function.cc	/^ComposedLoss::ComposedLoss(const LossFunction* f, Ownership ownership_f,$/;"	f	class:ceres::ComposedLoss
CompressAndFillProgram	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix* CompressAndFillProgram($/;"	f	namespace:ceres::internal::__anon34
CompressedColumn	ceres-solver/internal/ceres/block_structure.h	/^typedef CompressedList CompressedColumn;$/;"	t	namespace:ceres::internal
CompressedColumnBlockStructure	ceres-solver/internal/ceres/block_structure.h	/^struct CompressedColumnBlockStructure {$/;"	s	namespace:ceres::internal
CompressedColumnScalarMatrixToBlockMatrix	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.cc	/^void CompressedColumnScalarMatrixToBlockMatrix($/;"	f	namespace:ceres::internal
CompressedList	ceres-solver/internal/ceres/block_structure.h	/^struct CompressedList {$/;"	s	namespace:ceres::internal
CompressedRow	ceres-solver/internal/ceres/block_structure.h	/^typedef CompressedList CompressedRow;$/;"	t	namespace:ceres::internal
CompressedRowBlockStructure	ceres-solver/internal/ceres/block_structure.h	/^struct CompressedRowBlockStructure {$/;"	s	namespace:ceres::internal
CompressedRowJacobianWriter	ceres-solver/internal/ceres/compressed_row_jacobian_writer.h	/^  CompressedRowJacobianWriter(Evaluator::Options \/* ignored *\/,$/;"	f	class:ceres::internal::CompressedRowJacobianWriter
CompressedRowJacobianWriter	ceres-solver/internal/ceres/compressed_row_jacobian_writer.h	/^class CompressedRowJacobianWriter {$/;"	c	namespace:ceres::internal
CompressedRowSparseMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix::CompressedRowSparseMatrix(const double* diagonal,$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
CompressedRowSparseMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix::CompressedRowSparseMatrix(int num_rows,$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
CompressedRowSparseMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^class CompressedRowSparseMatrix : public SparseMatrix {$/;"	c	namespace:ceres::internal
CompressedRowSparseMatrixPreconditioner	ceres-solver/internal/ceres/preconditioner.h	/^typedef TypedPreconditioner<CompressedRowSparseMatrix> CompressedRowSparseMatrixPreconditioner;  \/\/ NOLINT$/;"	t	namespace:ceres::internal
CompressedRowSparseMatrixSolver	ceres-solver/internal/ceres/linear_solver.h	/^typedef TypedLinearSolver<CompressedRowSparseMatrix> CompressedRowSparseMatrixSolver;  \/\/ NOLINT$/;"	t	namespace:ceres::internal
CompressedRowSparseMatrixTest	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^class CompressedRowSparseMatrixTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Compute	ceres-solver/internal/ceres/covariance.cc	/^bool Covariance::Compute($/;"	f	class:ceres::Covariance
Compute	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::Compute(const CovarianceBlocks& covariance_blocks,$/;"	f	class:ceres::internal::CovarianceImpl
Compute	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::Compute(const vector<const double*>& parameter_blocks,$/;"	f	class:ceres::internal::CovarianceImpl
Compute	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ElementMatcherPairs Compute() {$/;"	f	class:testing::internal::MaxBipartiteMatchState
ComputeAndCompare	ceres-solver/internal/ceres/covariance_test.cc	/^  void ComputeAndCompare($/;"	f	class:ceres::internal::LargeScaleCovarianceTest
ComputeAndCompareCovarianceBlocks	ceres-solver/internal/ceres/covariance_test.cc	/^  void ComputeAndCompareCovarianceBlocks(const Covariance::Options& options,$/;"	f	class:ceres::internal::CovarianceTest
ComputeAndCompareCovarianceBlocksInTangentOrAmbientSpace	ceres-solver/internal/ceres/covariance_test.cc	/^  void ComputeAndCompareCovarianceBlocksInTangentOrAmbientSpace($/;"	f	class:ceres::internal::CovarianceTest
ComputeAndCompareCovarianceBlocksInTangentSpace	ceres-solver/internal/ceres/covariance_test.cc	/^  void ComputeAndCompareCovarianceBlocksInTangentSpace($/;"	f	class:ceres::internal::CovarianceTest
ComputeAndCompareSolutions	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  void ComputeAndCompareSolutions($/;"	f	class:ceres::internal::SchurComplementSolverTest
ComputeAndValidateOrdering	ceres-solver/internal/ceres/reorder_program_test.cc	/^  void ComputeAndValidateOrdering($/;"	f	class:ceres::internal::ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest
ComputeBlockMultiplication	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void ComputeBlockMultiplication(const int row_block_size,$/;"	f	namespace:ceres::internal::__anon34
ComputeBlockPairsInPreconditioner	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::ComputeBlockPairsInPreconditioner($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
ComputeCandidatePointAndEvaluateCost	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^void TrustRegionMinimizer::ComputeCandidatePointAndEvaluateCost() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
ComputeCanonicalViewsClustering	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^void ComputeCanonicalViewsClustering($/;"	f	namespace:ceres::internal
ComputeCauchyPoint	ceres-solver/internal/ceres/dogleg_strategy.cc	/^void DoglegStrategy::ComputeCauchyPoint(SparseMatrix* jacobian) {$/;"	f	class:ceres::internal::DoglegStrategy
ComputeClusterJacobiSparsity	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::ComputeClusterJacobiSparsity($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
ComputeClusterMembership	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^void CanonicalViewsClustering::ComputeClusterMembership($/;"	f	class:ceres::internal::CanonicalViewsClustering
ComputeClusterTridiagonalSparsity	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::ComputeClusterTridiagonalSparsity($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
ComputeClusterVisibility	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::ComputeClusterVisibility($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
ComputeClustering	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^void CanonicalViewsClustering::ComputeClustering($/;"	f	class:ceres::internal::CanonicalViewsClustering
ComputeClustering	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^  void ComputeClustering() {$/;"	f	class:ceres::internal::CanonicalViewsTest
ComputeClusteringQualityDifference	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^double CanonicalViewsClustering::ComputeClusteringQualityDifference($/;"	f	class:ceres::internal::CanonicalViewsClustering
ComputeCovarianceSparsity	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::ComputeCovarianceSparsity($/;"	f	class:ceres::internal::CovarianceImpl
ComputeCovarianceValues	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::ComputeCovarianceValues() {$/;"	f	class:ceres::internal::CovarianceImpl
ComputeCovarianceValuesUsingDenseSVD	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::ComputeCovarianceValuesUsingDenseSVD() {$/;"	f	class:ceres::internal::CovarianceImpl
ComputeCovarianceValuesUsingEigenSparseQR	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::ComputeCovarianceValuesUsingEigenSparseQR() {$/;"	f	class:ceres::internal::CovarianceImpl
ComputeCovarianceValuesUsingSuiteSparseQR	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::ComputeCovarianceValuesUsingSuiteSparseQR() {$/;"	f	class:ceres::internal::CovarianceImpl
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
ComputeCurrentValue	ceres-solver/internal/ceres/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
ComputeGaussNewtonStep	ceres-solver/internal/ceres/dogleg_strategy.cc	/^LinearSolver::Summary DoglegStrategy::ComputeGaussNewtonStep($/;"	f	class:ceres::internal::DoglegStrategy
ComputeGradient	ceres-solver/internal/ceres/dogleg_strategy.cc	/^void DoglegStrategy::ComputeGradient($/;"	f	class:ceres::internal::DoglegStrategy
ComputeHouseholderVector	ceres-solver/internal/ceres/householder_vector.h	/^void ComputeHouseholderVector(const Eigen::Matrix<Scalar, Eigen::Dynamic, 1>& x,$/;"	f	namespace:ceres::internal
ComputeJacobian	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  virtual bool ComputeJacobian(const double* x, double* jacobian) const {$/;"	f	class:ceres::AutoDiffLocalParameterization
ComputeJacobian	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual bool ComputeJacobian(const double* x, double* jacobian) const {$/;"	f	class:ceres::internal::PolynomialParameterization
ComputeJacobian	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  virtual bool ComputeJacobian(const double* \/*x*\/, double* jacobian) const {$/;"	f	class:ceres::internal::MatrixParameterization
ComputeJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool EigenQuaternionParameterization::ComputeJacobian(const double* x,$/;"	f	class:ceres::EigenQuaternionParameterization
ComputeJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool HomogeneousVectorParameterization::ComputeJacobian($/;"	f	class:ceres::HomogeneousVectorParameterization
ComputeJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool IdentityParameterization::ComputeJacobian(const double* x,$/;"	f	class:ceres::IdentityParameterization
ComputeJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool ProductParameterization::ComputeJacobian(const double* x,$/;"	f	class:ceres::ProductParameterization
ComputeJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool QuaternionParameterization::ComputeJacobian(const double* x,$/;"	f	class:ceres::QuaternionParameterization
ComputeJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool SubsetParameterization::ComputeJacobian(const double* x,$/;"	f	class:ceres::SubsetParameterization
ComputeJacobian	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual bool ComputeJacobian(const double* x, double* jacobian) const {$/;"	f	class:ceres::internal::BadLocalParameterization
ComputeJacobian	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual bool ComputeJacobian(const double* x,$/;"	f	struct:ceres::internal::TestParameterization
ComputeOuterProduct	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::ComputeOuterProduct($/;"	f	class:ceres::internal::CompressedRowSparseMatrix
ComputeRecursiveIndependentSetOrdering	ceres-solver/internal/ceres/parameter_block_ordering.cc	/^void ComputeRecursiveIndependentSetOrdering(const Program& program,$/;"	f	namespace:ceres::internal
ComputeReferenceSolution	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  void ComputeReferenceSolution(const Vector& D) {$/;"	f	class:ceres::internal::SchurEliminatorTest
ComputeSchurOrdering	ceres-solver/internal/ceres/parameter_block_ordering.cc	/^int ComputeSchurOrdering(const Program& program,$/;"	f	namespace:ceres::internal
ComputeSingleLinkageClustering	ceres-solver/internal/ceres/single_linkage_clustering.cc	/^int ComputeSingleLinkageClustering($/;"	f	namespace:ceres::internal
ComputeStableSchurOrdering	ceres-solver/internal/ceres/parameter_block_ordering.cc	/^int ComputeStableSchurOrdering(const Program& program,$/;"	f	namespace:ceres::internal
ComputeStep	ceres-solver/internal/ceres/dogleg_strategy.cc	/^TrustRegionStrategy::Summary DoglegStrategy::ComputeStep($/;"	f	class:ceres::internal::DoglegStrategy
ComputeStep	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^TrustRegionStrategy::Summary LevenbergMarquardtStrategy::ComputeStep($/;"	f	class:ceres::internal::LevenbergMarquardtStrategy
ComputeSubspaceDoglegStep	ceres-solver/internal/ceres/dogleg_strategy.cc	/^void DoglegStrategy::ComputeSubspaceDoglegStep(double* dogleg) {$/;"	f	class:ceres::internal::DoglegStrategy
ComputeSubspaceModel	ceres-solver/internal/ceres/dogleg_strategy.cc	/^bool DoglegStrategy::ComputeSubspaceModel(SparseMatrix* jacobian) {$/;"	f	class:ceres::internal::DoglegStrategy
ComputeSubspaceStepFromRoot	ceres-solver/internal/ceres/dogleg_strategy.cc	/^DoglegStrategy::Vector2d DoglegStrategy::ComputeSubspaceStepFromRoot($/;"	f	class:ceres::internal::DoglegStrategy
ComputeTraditionalDoglegStep	ceres-solver/internal/ceres/dogleg_strategy.cc	/^void DoglegStrategy::ComputeTraditionalDoglegStep(double* dogleg) {$/;"	f	class:ceres::internal::DoglegStrategy
ComputeTrustRegionStep	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::ComputeTrustRegionStep() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
ComputeVisibility	ceres-solver/internal/ceres/visibility.cc	/^void ComputeVisibility(const CompressedRowBlockStructure& block_structure,$/;"	f	namespace:ceres::internal
ConcatPaths	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::ConcatPaths(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
ConditionedCostFunction	ceres-solver/include/ceres/conditioned_cost_function.h	/^class CERES_EXPORT ConditionedCostFunction : public CostFunction {$/;"	c	namespace:ceres
ConditionedCostFunction	ceres-solver/internal/ceres/conditioned_cost_function.cc	/^ConditionedCostFunction::ConditionedCostFunction($/;"	f	class:ceres::ConditionedCostFunction
ConfigureStreamingOutput	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::ConfigureStreamingOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConfigureXmlOutput	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::ConfigureXmlOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConjugateGradientsSolver	ceres-solver/internal/ceres/conjugate_gradients_solver.cc	/^ConjugateGradientsSolver::ConjugateGradientsSolver($/;"	f	class:ceres::internal::ConjugateGradientsSolver
ConjugateGradientsSolver	ceres-solver/internal/ceres/conjugate_gradients_solver.h	/^class ConjugateGradientsSolver : public LinearSolver {$/;"	c	namespace:ceres::internal
ConservativeLowerBound	ceres-solver/internal/ceres/gmock/gmock.h	/^  int ConservativeLowerBound() const { return impl_->ConservativeLowerBound(); }$/;"	f	class:testing::Cardinality
ConservativeLowerBound	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual int ConservativeLowerBound() const { return 0; }$/;"	f	class:testing::CardinalityInterface
ConservativeLowerBound	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual int ConservativeLowerBound() const { return min_; }$/;"	f	class:testing::__anon28::BetweenCardinalityImpl
ConservativeUpperBound	ceres-solver/internal/ceres/gmock/gmock.h	/^  int ConservativeUpperBound() const { return impl_->ConservativeUpperBound(); }$/;"	f	class:testing::Cardinality
ConservativeUpperBound	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual int ConservativeUpperBound() const { return INT_MAX; }$/;"	f	class:testing::CardinalityInterface
ConservativeUpperBound	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual int ConservativeUpperBound() const { return max_; }$/;"	f	class:testing::__anon28::BetweenCardinalityImpl
Const	ceres-solver/internal/ceres/gmock/gmock.h	/^inline const T& Const(const T& x) { return x; }$/;"	f	namespace:testing
ConstCharPtr	ceres-solver/internal/ceres/gtest/gtest.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	ceres-solver/internal/ceres/gtest/gtest.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
ConstColMajorMatrixRef	ceres-solver/include/ceres/internal/eigen.h	/^                   Eigen::Stride<Eigen::Dynamic, 1> > ConstColMajorMatrixRef;$/;"	t	namespace:ceres
ConstMatrixRef	ceres-solver/include/ceres/internal/eigen.h	/^  ConstMatrixRef;$/;"	t	struct:ceres::EigenTypes
ConstMatrixRef	ceres-solver/include/ceres/internal/eigen.h	/^typedef Eigen::Map<const Matrix> ConstMatrixRef;$/;"	t	namespace:ceres
ConstPtr	devel/include/console/serial_data.h	/^  typedef boost::shared_ptr< ::console::serial_data_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:console::serial_data_
ConstPtr	devel/include/ctrl_serial_comm/car_speed.h	/^  typedef boost::shared_ptr< ::ctrl_serial_comm::car_speed_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:ctrl_serial_comm::car_speed_
ConstPtr	devel/include/ctrl_serial_comm/serial_data.h	/^  typedef boost::shared_ptr< ::ctrl_serial_comm::serial_data_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:ctrl_serial_comm::serial_data_
ConstPtr	devel/include/logical_core/SetGoalRequest.h	/^  typedef boost::shared_ptr< ::logical_core::SetGoalRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:logical_core::SetGoalRequest_
ConstPtr	devel/include/logical_core/SetGoalResponse.h	/^  typedef boost::shared_ptr< ::logical_core::SetGoalResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:logical_core::SetGoalResponse_
ConstPtr	devel/include/odometry/car_speed.h	/^  typedef boost::shared_ptr< ::odometry::car_speed_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:odometry::car_speed_
ConstPtr	devel/include/serial_comm/car_speed.h	/^  typedef boost::shared_ptr< ::serial_comm::car_speed_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:serial_comm::car_speed_
ConstPtr	devel/include/serial_comm/serial_data.h	/^  typedef boost::shared_ptr< ::serial_comm::serial_data_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:serial_comm::serial_data_
ConstPtr	devel/include/vision_unit/SetGoalRequest.h	/^  typedef boost::shared_ptr< ::vision_unit::SetGoalRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:vision_unit::SetGoalRequest_
ConstPtr	devel/include/vision_unit/SetGoalResponse.h	/^  typedef boost::shared_ptr< ::vision_unit::SetGoalResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:vision_unit::SetGoalResponse_
ConstPtr	devel/include/vision_unit/armor_msg.h	/^  typedef boost::shared_ptr< ::vision_unit::armor_msg_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:vision_unit::armor_msg_
ConstPtr	devel/include/vision_unit/transformed_scan.h	/^  typedef boost::shared_ptr< ::vision_unit::transformed_scan_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:vision_unit::transformed_scan_
ConstReference	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const_reference ConstReference($/;"	f	class:testing::internal::StlContainerView
ConstReference	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const_reference ConstReference(const RawContainer& container) {$/;"	f	class:testing::internal::StlContainerView
ConstVectorRef	ceres-solver/examples/bal_problem.cc	/^typedef Eigen::Map<const Eigen::VectorXd> ConstVectorRef;$/;"	t	namespace:ceres::examples::__anon37	file:
ConstVectorRef	ceres-solver/include/ceres/internal/eigen.h	/^  ConstVectorRef;$/;"	t	struct:ceres::EigenTypes
ConstVectorRef	ceres-solver/include/ceres/internal/eigen.h	/^typedef Eigen::Map<const Vector> ConstVectorRef;$/;"	t	namespace:ceres
ConstantPolynomial	ceres-solver/internal/ceres/polynomial_test.cc	/^Vector ConstantPolynomial(double value) {$/;"	f	namespace:ceres::internal::__anon7
ConstrainedApproximateMinimumDegreeOrdering	ceres-solver/internal/ceres/suitesparse.cc	/^bool SuiteSparse::ConstrainedApproximateMinimumDegreeOrdering($/;"	f	class:ceres::internal::SuiteSparse
Constraint2d	ceres-solver/examples/slam/pose_graph_2d/types.h	/^struct Constraint2d {$/;"	s	namespace:ceres::examples
Constraint3d	ceres-solver/examples/slam/pose_graph_3d/types.h	/^struct Constraint3d {$/;"	s	namespace:ceres::examples
ContainerEq	ceres-solver/internal/ceres/gmock/gmock.h	/^    ContainerEq(const Container& rhs) {$/;"	f	namespace:testing
ContainerEqMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ContainerEqMatcher(const Container& expected)$/;"	f	class:testing::internal::ContainerEqMatcher
ContainerEqMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class ContainerEqMatcher {$/;"	c	namespace:testing::internal
ContainerType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
ContainerView	ceres-solver/internal/ceres/gmock/gmock.h	/^         GTEST_REMOVE_REFERENCE_AND_CONST_(Container)> ContainerView;$/;"	t	class:testing::internal::SizeIsMatcher::Impl
ContainerView	ceres-solver/internal/ceres/gmock/gmock.h	/^        GTEST_REMOVE_REFERENCE_AND_CONST_(Container)> ContainerView;$/;"	t	class:testing::internal::BeginEndDistanceIsMatcher::Impl
Contains	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::ContainsMatcher<M> Contains(M matcher) {$/;"	f	namespace:testing
ContainsKey	ceres-solver/internal/ceres/map_util.h	/^bool ContainsKey(const Collection& collection, const Key& key) {$/;"	f	namespace:ceres
ContainsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ContainsMatcher(M m) : inner_matcher_(m) {}$/;"	f	class:testing::internal::ContainsMatcher
ContainsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class ContainsMatcher {$/;"	c	namespace:testing::internal
ContainsMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ContainsMatcherImpl(InnerMatcher inner_matcher)$/;"	f	class:testing::internal::ContainsMatcherImpl
ContainsMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class ContainsMatcherImpl : public QuantifierMatcherImpl<Container> {$/;"	c	namespace:testing::internal
ContainsRegex	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex($/;"	f	namespace:testing
ConvertIdentifierNameToWords	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ string ConvertIdentifierNameToWords(const char* id_name) {$/;"	f	namespace:testing::internal
CoordinateDescentMinimizer	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	/^class CoordinateDescentMinimizer : public Minimizer {$/;"	c	namespace:ceres::internal
Copy	ceres-solver/internal/ceres/gmock/gmock.h	/^  static type Copy(const ::testing::tuple<ElementPointer, Size>& array) {$/;"	f	class:testing::internal::StlContainerView
Copy	ceres-solver/internal/ceres/gmock/gmock.h	/^  static type Copy(const RawContainer& container) { return container; }$/;"	f	class:testing::internal::StlContainerView
CopyArray	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	ceres-solver/internal/ceres/gtest/gtest.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CopyData	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::CopyData(const TripletSparseMatrix& orig) {$/;"	f	class:ceres::internal::TripletSparseMatrix
CopyElements	ceres-solver/internal/ceres/gmock/gmock.h	/^inline OutputIterator CopyElements(InputIterator first,$/;"	f	namespace:testing::internal
CopyParameterBlockStateToUserState	ceres-solver/internal/ceres/program.cc	/^void Program::CopyParameterBlockStateToUserState() {$/;"	f	class:ceres::internal::Program
CorrectJacobian	ceres-solver/internal/ceres/corrector.cc	/^void Corrector::CorrectJacobian(const int num_rows,$/;"	f	class:ceres::internal::Corrector
CorrectResiduals	ceres-solver/internal/ceres/corrector.cc	/^void Corrector::CorrectResiduals(const int num_rows, double* residuals) {$/;"	f	class:ceres::internal::Corrector
Corrector	ceres-solver/internal/ceres/corrector.cc	/^Corrector::Corrector(const double sq_norm, const double rho[3]) {$/;"	f	class:ceres::internal::Corrector
Corrector	ceres-solver/internal/ceres/corrector.h	/^class Corrector {$/;"	c	namespace:ceres::internal
Cost	ceres-solver/include/ceres/jet.h	/^      Cost = 3$/;"	e	enum:Eigen::NumTraits::Div::__anon46
CostFunction	ceres-solver/include/ceres/cost_function.h	/^  CostFunction() : num_residuals_(0) {}$/;"	f	class:ceres::CostFunction
CostFunction	ceres-solver/include/ceres/cost_function.h	/^class CERES_EXPORT CostFunction {$/;"	c	namespace:ceres
CostFunctionToFunctor	ceres-solver/include/ceres/cost_function_to_functor.h	/^  explicit CostFunctionToFunctor(CostFunction* cost_function)$/;"	f	class:ceres::CostFunctionToFunctor
CostFunctionToFunctor	ceres-solver/include/ceres/cost_function_to_functor.h	/^class CostFunctionToFunctor {$/;"	c	namespace:ceres
CostFunctor	ceres-solver/examples/helloworld.cc	/^struct CostFunctor {$/;"	s	file:
CostFunctor	ceres-solver/examples/helloworld_numeric_diff.cc	/^struct CostFunctor {$/;"	s	file:
CountIf	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline int CountIf(const Container& c, Predicate predicate) {$/;"	f	namespace:testing::internal
Covariance	ceres-solver/include/ceres/covariance.h	/^class CERES_EXPORT Covariance {$/;"	c	namespace:ceres
Covariance	ceres-solver/internal/ceres/covariance.cc	/^Covariance::Covariance(const Covariance::Options& options) {$/;"	f	class:ceres::Covariance
CovarianceAlgorithmType	ceres-solver/include/ceres/types.h	/^enum CovarianceAlgorithmType {$/;"	g	namespace:ceres
CovarianceAlgorithmTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* CovarianceAlgorithmTypeToString($/;"	f	namespace:ceres
CovarianceBlocks	ceres-solver/internal/ceres/covariance_impl.cc	/^typedef vector<pair<const double*, const double*> > CovarianceBlocks;$/;"	t	namespace:ceres::internal	file:
CovarianceImpl	ceres-solver/internal/ceres/covariance_impl.cc	/^CovarianceImpl::CovarianceImpl(const Covariance::Options& options)$/;"	f	class:ceres::internal::CovarianceImpl
CovarianceImpl	ceres-solver/internal/ceres/covariance_impl.h	/^class CovarianceImpl {$/;"	c	namespace:ceres::internal
CovarianceTest	ceres-solver/internal/ceres/covariance_test.cc	/^class CovarianceTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Create	ceres-solver/examples/ellipse_approximation.cc	/^  static ceres::CostFunction* Create(const double& sqrt_weight) {$/;"	f	struct:EuclideanDistanceFunctor
Create	ceres-solver/examples/ellipse_approximation.cc	/^  static ceres::CostFunction* Create(const int num_segments,$/;"	f	class:PointToLineSegmentContourCostFunction
Create	ceres-solver/examples/robot_pose_mle.cc	/^  static OdometryCostFunction* Create(const double odometry_value) {$/;"	f	struct:OdometryConstraint
Create	ceres-solver/examples/robot_pose_mle.cc	/^  static RangeCostFunction* Create(const int pose_index,$/;"	f	struct:RangeConstraint
Create	ceres-solver/examples/sampled_function/sampled_function.cc	/^  static CostFunction* Create($/;"	f	struct:InterpolatedCostFunctor
Create	ceres-solver/examples/simple_bundle_adjuster.cc	/^  static ceres::CostFunction* Create(const double observed_x,$/;"	f	struct:SnavelyReprojectionError
Create	ceres-solver/examples/slam/pose_graph_2d/angle_local_parameterization.h	/^  static ceres::LocalParameterization* Create() {$/;"	f	class:ceres::examples::AngleLocalParameterization
Create	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^  static ceres::CostFunction* Create(double x_ab, double y_ab,$/;"	f	class:ceres::examples::PoseGraph2dErrorTerm
Create	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^  static ceres::CostFunction* Create($/;"	f	class:ceres::examples::PoseGraph3dErrorTerm
Create	ceres-solver/examples/snavely_reprojection_error.h	/^  static ceres::CostFunction* Create(const double observed_x,$/;"	f	struct:ceres::examples::SnavelyReprojectionError
Create	ceres-solver/examples/snavely_reprojection_error.h	/^  static ceres::CostFunction* Create(const double observed_x,$/;"	f	struct:ceres::examples::SnavelyReprojectionErrorWithQuaternions
Create	ceres-solver/internal/ceres/evaluator.cc	/^Evaluator* Evaluator::Create(const Evaluator::Options& options,$/;"	f	class:ceres::internal::Evaluator
Create	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool DeathTest::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DeathTest
Create	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool DefaultDeathTestFactory::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DefaultDeathTestFactory
Create	ceres-solver/internal/ceres/line_search.cc	/^LineSearch* LineSearch::Create(const LineSearchType line_search_type,$/;"	f	class:ceres::internal::LineSearch
Create	ceres-solver/internal/ceres/line_search_direction.cc	/^LineSearchDirection::Create(const LineSearchDirection::Options& options) {$/;"	f	class:ceres::internal::LineSearchDirection
Create	ceres-solver/internal/ceres/linear_solver.cc	/^LinearSolver* LinearSolver::Create(const LinearSolver::Options& options) {$/;"	f	class:ceres::internal::LinearSolver
Create	ceres-solver/internal/ceres/minimizer.cc	/^Minimizer* Minimizer::Create(MinimizerType minimizer_type) {$/;"	f	class:ceres::internal::Minimizer
Create	ceres-solver/internal/ceres/partitioned_matrix_view.cc	/^PartitionedMatrixViewBase::Create(const LinearSolver::Options& options,$/;"	f	class:ceres::internal::PartitionedMatrixViewBase
Create	ceres-solver/internal/ceres/preprocessor.cc	/^Preprocessor* Preprocessor::Create(MinimizerType minimizer_type) {$/;"	f	class:ceres::internal::Preprocessor
Create	ceres-solver/internal/ceres/schur_eliminator.cc	/^SchurEliminatorBase::Create(const LinearSolver::Options& options) {$/;"	f	class:ceres::internal::SchurEliminatorBase
Create	ceres-solver/internal/ceres/scratch_evaluate_preparer.cc	/^ScratchEvaluatePreparer* ScratchEvaluatePreparer::Create($/;"	f	class:ceres::internal::ScratchEvaluatePreparer
Create	ceres-solver/internal/ceres/solver_test.cc	/^  static CostFunction* Create() {$/;"	f	struct:ceres::internal::Quadratic4DCostFunction
Create	ceres-solver/internal/ceres/solver_test.cc	/^  static CostFunction* Create() {$/;"	f	struct:ceres::internal::QuadraticCostFunctor
Create	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  static CostFunction* Create() {$/;"	f	struct:ceres::internal::ExpCostFunctor
Create	ceres-solver/internal/ceres/trust_region_strategy.cc	/^TrustRegionStrategy* TrustRegionStrategy::Create(const Options& options) {$/;"	f	class:ceres::internal::TrustRegionStrategy
CreateBlockDiagonalEtE	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^CreateBlockDiagonalEtE() const {$/;"	f	class:ceres::internal::PartitionedMatrixView
CreateBlockDiagonalFtF	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^CreateBlockDiagonalFtF() const {$/;"	f	class:ceres::internal::PartitionedMatrixView
CreateBlockDiagonalMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix* CompressedRowSparseMatrix::CreateBlockDiagonalMatrix($/;"	f	class:ceres::internal::CompressedRowSparseMatrix
CreateBlockDiagonalMatrixLayout	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^CreateBlockDiagonalMatrixLayout(int start_col_block, int end_col_block) const {$/;"	f	class:ceres::internal::PartitionedMatrixView
CreateBlockJacobian	ceres-solver/internal/ceres/reorder_program.cc	/^Eigen::SparseMatrix<int> CreateBlockJacobian($/;"	f	namespace:ceres::internal::__anon4
CreateClusterGraph	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^WeightedGraph<int>* VisibilityBasedPreconditioner::CreateClusterGraph($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
CreateCodePointFromUtf16SurrogatePair	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,$/;"	f	namespace:testing::internal
CreateDefaultLinearSolverOrdering	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^ParameterBlockOrdering* CreateDefaultLinearSolverOrdering($/;"	f	namespace:ceres::internal::__anon31
CreateDenseVector	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_dense* SuiteSparse::CreateDenseVector(const double* x,$/;"	f	class:ceres::internal::SuiteSparse
CreateDirectoriesRecursively	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool FilePath::CreateDirectoriesRecursively() const {$/;"	f	class:testing::internal::FilePath
CreateDriver	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^RPlidarDriver * RPlidarDriver::CreateDriver(_u32 drivertype)$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
CreateEvaluatePreparers	ceres-solver/internal/ceres/block_jacobian_writer.cc	/^BlockEvaluatePreparer* BlockJacobianWriter::CreateEvaluatePreparers($/;"	f	class:ceres::internal::BlockJacobianWriter
CreateEvaluatePreparers	ceres-solver/internal/ceres/compressed_row_jacobian_writer.h	/^  ScratchEvaluatePreparer* CreateEvaluatePreparers(int num_threads) {$/;"	f	class:ceres::internal::CompressedRowJacobianWriter
CreateEvaluatePreparers	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^  ScratchEvaluatePreparer* CreateEvaluatePreparers(int num_threads) {$/;"	f	class:ceres::internal::DenseJacobianWriter
CreateEvaluatePreparers	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.cc	/^DynamicCompressedRowJacobianWriter::CreateEvaluatePreparers(int num_threads) {$/;"	f	class:ceres::internal::DynamicCompressedRowJacobianWriter
CreateEvaluator	ceres-solver/internal/ceres/evaluator_test.cc	/^  Evaluator* CreateEvaluator(Program* program) {$/;"	f	struct:ceres::internal::EvaluatorTest
CreateEvaluatorScratch	ceres-solver/internal/ceres/program_evaluator.h	/^  static EvaluateScratch* CreateEvaluatorScratch(const Program& program,$/;"	f	class:ceres::internal::ProgramEvaluator
CreateFolder	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool FilePath::CreateFolder() const {$/;"	f	class:testing::internal::FilePath
CreateGradientCheckingCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^CostFunction* CreateGradientCheckingCostFunction($/;"	f	namespace:ceres::internal
CreateGradientCheckingProblemImpl	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^ProblemImpl* CreateGradientCheckingProblemImpl($/;"	f	namespace:ceres::internal
CreateHessianGraph	ceres-solver/internal/ceres/parameter_block_ordering.cc	/^Graph<ParameterBlock*>* CreateHessianGraph(const Program& program) {$/;"	f	namespace:ceres::internal
CreateJacobian	ceres-solver/internal/ceres/block_jacobian_writer.cc	/^SparseMatrix* BlockJacobianWriter::CreateJacobian() const {$/;"	f	class:ceres::internal::BlockJacobianWriter
CreateJacobian	ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc	/^SparseMatrix* CompressedRowJacobianWriter::CreateJacobian() const {$/;"	f	class:ceres::internal::CompressedRowJacobianWriter
CreateJacobian	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^  SparseMatrix* CreateJacobian() const {$/;"	f	class:ceres::internal::DenseJacobianWriter
CreateJacobian	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.cc	/^SparseMatrix* DynamicCompressedRowJacobianWriter::CreateJacobian() const {$/;"	f	class:ceres::internal::DynamicCompressedRowJacobianWriter
CreateJacobian	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual SparseMatrix* CreateJacobian() const { return NULL; }$/;"	f	class:ceres::internal::GradientProblemEvaluator
CreateJacobian	ceres-solver/internal/ceres/program_evaluator.h	/^  SparseMatrix* CreateJacobian() const {$/;"	f	class:ceres::internal::ProgramEvaluator
CreateJacobian	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  virtual SparseMatrix* CreateJacobian() const {$/;"	f	class:ceres::internal::PowellEvaluator2
CreateJacobianBlockSparsityTranspose	ceres-solver/internal/ceres/program.cc	/^TripletSparseMatrix* Program::CreateJacobianBlockSparsityTranspose() const {$/;"	f	class:ceres::internal::Program
CreateKey	ceres-solver/internal/ceres/gtest/gtest.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:std::tr1::ThreadLocal
CreateLinearLeastSquaresProblemFromId	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^LinearLeastSquaresProblem* CreateLinearLeastSquaresProblemFromId(int id) {$/;"	f	namespace:ceres::internal
CreateMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Matcher<T> CreateMatcher(const ListType& matchers) {$/;"	f	struct:testing::internal::MatcherList
CreateOrdering	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^ParameterBlockOrdering* CoordinateDescentMinimizer::CreateOrdering($/;"	f	class:ceres::internal::CoordinateDescentMinimizer
CreateOuterProductMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix* CreateOuterProductMatrix($/;"	f	namespace:ceres::internal::__anon34
CreateOuterProductMatrixAndProgram	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix::CreateOuterProductMatrixAndProgram($/;"	f	class:ceres::internal::CompressedRowSparseMatrix
CreateProblem	ceres-solver/examples/denoising.cc	/^void CreateProblem(const FieldsOfExperts& foe,$/;"	f	namespace:ceres::examples
CreateRandomMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix* CompressedRowSparseMatrix::CreateRandomMatrix($/;"	f	class:ceres::internal::CompressedRowSparseMatrix
CreateRandomMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix* TripletSparseMatrix::CreateRandomMatrix($/;"	f	class:ceres::internal::TripletSparseMatrix
CreateReducedProgram	ceres-solver/internal/ceres/program.cc	/^Program* Program::CreateReducedProgram($/;"	f	class:ceres::internal::Program
CreateRxTx	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateRxTx	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^    serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateRxTx	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateSchurComplementGraph	ceres-solver/internal/ceres/visibility.cc	/^WeightedGraph<int>* CreateSchurComplementGraph($/;"	f	namespace:ceres::internal
CreateSparseDiagonalMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix* TripletSparseMatrix::CreateSparseDiagonalMatrix($/;"	f	class:ceres::internal::TripletSparseMatrix
CreateSparseMatrix	ceres-solver/internal/ceres/cxsparse.cc	/^cs_di* CXSparse::CreateSparseMatrix(TripletSparseMatrix* tsm) {$/;"	f	class:ceres::internal::CXSparse
CreateSparseMatrix	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_sparse* SuiteSparse::CreateSparseMatrix(TripletSparseMatrix* A) {$/;"	f	class:ceres::internal::SuiteSparse
CreateSparseMatrixTranspose	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_sparse* SuiteSparse::CreateSparseMatrixTranspose($/;"	f	class:ceres::internal::SuiteSparse
CreateSparseMatrixTransposeView	ceres-solver/internal/ceres/cxsparse.cc	/^cs_di CXSparse::CreateSparseMatrixTransposeView(CompressedRowSparseMatrix* A) {$/;"	f	class:ceres::internal::CXSparse
CreateSparseMatrixTransposeView	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_sparse SuiteSparse::CreateSparseMatrixTransposeView($/;"	f	class:ceres::internal::SuiteSparse
CreateTest	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual Test* CreateTest() { return new TestClass; }$/;"	f	class:testing::internal::TestFactoryImpl
CreateTest	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual Test* CreateTest() {$/;"	f	class:testing::internal::ParameterizedTestFactory
CreateTestFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual TestFactoryBase* CreateTestFactory(ParamType parameter) {$/;"	f	class:testing::internal::TestMetaFactory
CreateThread	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static HANDLE CreateThread(Runnable* runnable,$/;"	f	class:testing::internal::__anon26::ThreadWithParamSupport
CreateUnifiedDiff	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string CreateUnifiedDiff(const std::vector<std::string>& left,$/;"	f	namespace:testing::internal::edit_distance
CrossProduct	ceres-solver/include/ceres/rotation.h	/^void CrossProduct(const T x[3], const T y[3], T x_cross_y[3]) {$/;"	f	namespace:ceres
CubicHermiteSpline	ceres-solver/include/ceres/cubic_interpolation.h	/^void CubicHermiteSpline(const Eigen::Matrix<double, kDataDimension, 1>& p0,$/;"	f	namespace:ceres
CubicInterpolator	ceres-solver/include/ceres/cubic_interpolation.h	/^  explicit CubicInterpolator(const Grid& grid)$/;"	f	class:ceres::CubicInterpolator
CubicInterpolator	ceres-solver/include/ceres/cubic_interpolation.h	/^class CubicInterpolator {$/;"	c	namespace:ceres
CubicInterpolatorTest	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^class CubicInterpolatorTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const T* Current() const { return &value_; }$/;"	f	class:testing::internal::RangeGenerator::Iterator
Current	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual const T* Current() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
CurrentOsStackTraceExceptTop	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {$/;"	f	class:testing::internal::UnitTestImpl
CurrentStackTrace	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^string OsStackTraceGetter::CurrentStackTrace(int \/*max_depth*\/,$/;"	f	class:testing::internal::OsStackTraceGetter
CurveCostFunction	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  CurveCostFunction(int num_vertices, double target_length)$/;"	f	class:ceres::internal::CurveCostFunction
CurveCostFunction	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^class CurveCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal	file:
D	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^  scoped_array<double> D;$/;"	m	class:ceres::internal::BlockJacobiPreconditionerTest	file:
D	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^  scoped_array<double> D;$/;"	m	struct:ceres::internal::LinearLeastSquaresProblem
D	ceres-solver/internal/ceres/linear_solver.h	/^    double * D;$/;"	m	struct:ceres::internal::LinearSolver::PerSolveOptions
D	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  scoped_array<double> D;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
D	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  scoped_array<double> D;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
DATA_DIMENSION	ceres-solver/include/ceres/cubic_interpolation.h	/^  enum { DATA_DIMENSION = kDataDimension };$/;"	e	enum:ceres::Grid1D::__anon42
DATA_DIMENSION	ceres-solver/include/ceres/cubic_interpolation.h	/^  enum { DATA_DIMENSION = kDataDimension };$/;"	e	enum:ceres::Grid2D::__anon43
DCHECK	ceres-solver/internal/ceres/miniglog/glog/logging.h	346;"	d
DCHECK	ceres-solver/internal/ceres/miniglog/glog/logging.h	350;"	d
DCHECK_EQ	ceres-solver/internal/ceres/miniglog/glog/logging.h	371;"	d
DCHECK_EQ	ceres-solver/internal/ceres/miniglog/glog/logging.h	379;"	d
DCHECK_GE	ceres-solver/internal/ceres/miniglog/glog/logging.h	375;"	d
DCHECK_GE	ceres-solver/internal/ceres/miniglog/glog/logging.h	383;"	d
DCHECK_GT	ceres-solver/internal/ceres/miniglog/glog/logging.h	376;"	d
DCHECK_GT	ceres-solver/internal/ceres/miniglog/glog/logging.h	384;"	d
DCHECK_LE	ceres-solver/internal/ceres/miniglog/glog/logging.h	373;"	d
DCHECK_LE	ceres-solver/internal/ceres/miniglog/glog/logging.h	381;"	d
DCHECK_LT	ceres-solver/internal/ceres/miniglog/glog/logging.h	374;"	d
DCHECK_LT	ceres-solver/internal/ceres/miniglog/glog/logging.h	382;"	d
DCHECK_NE	ceres-solver/internal/ceres/miniglog/glog/logging.h	372;"	d
DCHECK_NE	ceres-solver/internal/ceres/miniglog/glog/logging.h	380;"	d
DCHECK_NOTNULL	ceres-solver/internal/ceres/miniglog/glog/logging.h	415;"	d
DCHECK_NOTNULL	ceres-solver/internal/ceres/miniglog/glog/logging.h	419;"	d
DEC	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
DEC	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
DEC	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
DEC	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
DEFAULT_MOTOR_PWM	src/rplidar_ros/sdk/include/rplidar_cmd.h	77;"	d
DEFAULT_TIMEOUT	src/rplidar_ros/sdk/include/rplidar_driver.h	/^        DEFAULT_TIMEOUT = 2000, \/\/2000 ms$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon51
DEG2RAD	src/rplidar_ros/src/node.cpp	44;"	d	file:
DENSE_NORMAL_CHOLESKY	ceres-solver/include/ceres/types.h	/^  DENSE_NORMAL_CHOLESKY,$/;"	e	enum:ceres::LinearSolverType
DENSE_QR	ceres-solver/include/ceres/types.h	/^  DENSE_QR,$/;"	e	enum:ceres::LinearSolverType
DENSE_SCHUR	ceres-solver/include/ceres/types.h	/^  DENSE_SCHUR,$/;"	e	enum:ceres::LinearSolverType
DENSE_SVD	ceres-solver/include/ceres/types.h	/^  DENSE_SVD,$/;"	e	enum:ceres::CovarianceAlgorithmType
DETECT_FACTORY_H	src/vision_unit/include/vision_unit/detect_factory/detect_factory.h	2;"	d
DIED	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
DIMENSION	ceres-solver/include/ceres/jet.h	/^  enum { DIMENSION = N };$/;"	e	enum:ceres::Jet::__anon44
DLOG	ceres-solver/internal/ceres/miniglog/glog/logging.h	324;"	d
DLOG	ceres-solver/internal/ceres/miniglog/glog/logging.h	326;"	d
DOGLEG	ceres-solver/include/ceres/types.h	/^  DOGLEG$/;"	e	enum:ceres::TrustRegionStrategyType
DOMPopupSearchResults	src/doc/html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	src/doc/html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	src/doc/html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	src/doc/html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	src/doc/html/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	src/doc/html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	src/doc/html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
DO_NOT_TAKE_OWNERSHIP	ceres-solver/include/ceres/types.h	/^  DO_NOT_TAKE_OWNERSHIP,$/;"	e	enum:ceres::Ownership
DRIVER_TYPE_SERIALPORT	src/rplidar_ros/sdk/include/rplidar_driver.h	/^        DRIVER_TYPE_SERIALPORT = 0x0,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon52
DYNAMIC	ceres-solver/include/ceres/types.h	/^  DYNAMIC = -1$/;"	e	enum:ceres::DimensionType
D_	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  const double* D_;$/;"	m	class:ceres::internal::CgnrLinearOperator
D_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  const double* D_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
D_	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  scoped_array<double> D_;$/;"	m	class:ceres::internal::ImplicitSchurComplementTest	file:
D_	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  scoped_array<double> D_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolverTest	file:
D_	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^  scoped_array<double> D_;$/;"	m	class:ceres::internal::UnsymmetricLinearSolverTest	file:
DataType	devel/include/console/serial_data.h	/^struct DataType< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/ctrl_serial_comm/car_speed.h	/^struct DataType< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/ctrl_serial_comm/serial_data.h	/^struct DataType< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/logical_core/SetGoal.h	/^struct DataType< ::logical_core::SetGoal > {$/;"	s	namespace:ros::service_traits
DataType	devel/include/logical_core/SetGoal.h	/^struct DataType< ::logical_core::SetGoalRequest>$/;"	s	namespace:ros::service_traits
DataType	devel/include/logical_core/SetGoal.h	/^struct DataType< ::logical_core::SetGoalResponse>$/;"	s	namespace:ros::service_traits
DataType	devel/include/logical_core/SetGoalRequest.h	/^struct DataType< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/logical_core/SetGoalResponse.h	/^struct DataType< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/odometry/car_speed.h	/^struct DataType< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/serial_comm/car_speed.h	/^struct DataType< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/serial_comm/serial_data.h	/^struct DataType< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/vision_unit/SetGoal.h	/^struct DataType< ::vision_unit::SetGoal > {$/;"	s	namespace:ros::service_traits
DataType	devel/include/vision_unit/SetGoal.h	/^struct DataType< ::vision_unit::SetGoalRequest>$/;"	s	namespace:ros::service_traits
DataType	devel/include/vision_unit/SetGoal.h	/^struct DataType< ::vision_unit::SetGoalResponse>$/;"	s	namespace:ros::service_traits
DataType	devel/include/vision_unit/SetGoalRequest.h	/^struct DataType< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/vision_unit/SetGoalResponse.h	/^struct DataType< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/vision_unit/armor_msg.h	/^struct DataType< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	devel/include/vision_unit/transformed_scan.h	/^struct DataType< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^DeathTest::DeathTest() {$/;"	f	class:testing::internal::DeathTest
DeathTest	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTestAbort	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void DeathTestAbort(const std::string& message) {$/;"	f	namespace:testing::internal
DeathTestFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeathTestImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  DeathTestImpl(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::DeathTestImpl
DeathTestImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class DeathTestImpl : public DeathTest {$/;"	c	namespace:testing::internal	file:
DeathTestOutcome	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	g	namespace:testing::internal	file:
DeathTestThreadWarning	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string DeathTestThreadWarning(size_t thread_count) {$/;"	f	namespace:testing::internal
DebugString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^string MatchMatrix::DebugString() const {$/;"	f	class:testing::internal::MatchMatrix
DecayArray	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T, size_t N> struct DecayArray<T[N]> {$/;"	s	namespace:testing::internal
DecayArray	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct DecayArray { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
DecayArray	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct DecayArray<T[]> {$/;"	s	namespace:testing::internal
DefaultDeathTestFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultGlobalTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
DefaultGlobalTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class DefaultGlobalTestPartResultReporter$/;"	c	namespace:testing::internal	file:
DefaultParamName	ceres-solver/internal/ceres/gtest/gtest.h	/^std::string DefaultParamName(const TestParamInfo<ParamType>& info) {$/;"	f	namespace:testing::internal
DefaultPerThreadTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
DefaultPerThreadTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class DefaultPerThreadTestPartResultReporter$/;"	c	namespace:testing::internal	file:
DefaultPrintNonContainerTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void DefaultPrintTo(IsContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void DefaultPrintTo(IsNotContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultValue	ceres-solver/internal/ceres/gmock/gmock.h	/^class DefaultValue {$/;"	c	namespace:testing
DefaultValue	ceres-solver/internal/ceres/gmock/gmock.h	/^class DefaultValue<T&> {$/;"	c	namespace:testing
DefaultValue	ceres-solver/internal/ceres/gmock/gmock.h	/^class DefaultValue<void> {$/;"	c	namespace:testing
DefaultValueHolderFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^    DefaultValueHolderFactory() {}$/;"	f	class:std::tr1::ThreadLocal::DefaultValueHolderFactory
DefaultValueHolderFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^  class DefaultValueHolderFactory : public ValueHolderFactory {$/;"	c	class:std::tr1::ThreadLocal
Definition	devel/include/console/serial_data.h	/^struct Definition< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/ctrl_serial_comm/car_speed.h	/^struct Definition< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/ctrl_serial_comm/serial_data.h	/^struct Definition< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/logical_core/SetGoalRequest.h	/^struct Definition< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/logical_core/SetGoalResponse.h	/^struct Definition< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/odometry/car_speed.h	/^struct Definition< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/serial_comm/car_speed.h	/^struct Definition< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/serial_comm/serial_data.h	/^struct Definition< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/vision_unit/SetGoalRequest.h	/^struct Definition< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/vision_unit/SetGoalResponse.h	/^struct Definition< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/vision_unit/armor_msg.h	/^struct Definition< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	devel/include/vision_unit/transformed_scan.h	/^struct Definition< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Degree2MaximumSpanningForest	ceres-solver/internal/ceres/graph_algorithms.h	/^Degree2MaximumSpanningForest(const WeightedGraph<Vertex>& graph) {$/;"	f	namespace:ceres::internal
Delete	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void Delete(T* x) {$/;"	f	namespace:testing::internal
DeleteBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::DeleteBlock(ParameterBlock* parameter_block) {$/;"	f	class:ceres::internal::ProblemImpl
DeleteBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::DeleteBlock(ResidualBlock* residual_block) {$/;"	f	class:ceres::internal::ProblemImpl
DeleteBlockInVector	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::DeleteBlockInVector(vector<Block*>* mutable_blocks,$/;"	f	class:ceres::internal::ProblemImpl
DeleteRows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::DeleteRows(int delta_rows) {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
DeleteSelf_	ceres-solver/internal/ceres/gtest/gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	ceres-solver/internal/ceres/gtest/gtest.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:std::tr1
DenseJacobianWriter	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^  DenseJacobianWriter(Evaluator::Options \/* ignored *\/,$/;"	f	class:ceres::internal::DenseJacobianWriter
DenseJacobianWriter	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^class DenseJacobianWriter {$/;"	c	namespace:ceres::internal
DenseLinearAlgebraLibraryType	ceres-solver/include/ceres/types.h	/^enum DenseLinearAlgebraLibraryType {$/;"	g	namespace:ceres
DenseLinearAlgebraLibraryTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* DenseLinearAlgebraLibraryTypeToString($/;"	f	namespace:ceres
DenseNormalCholeskySolver	ceres-solver/internal/ceres/dense_normal_cholesky_solver.cc	/^DenseNormalCholeskySolver::DenseNormalCholeskySolver($/;"	f	class:ceres::internal::DenseNormalCholeskySolver
DenseNormalCholeskySolver	ceres-solver/internal/ceres/dense_normal_cholesky_solver.h	/^class DenseNormalCholeskySolver: public DenseSparseMatrixSolver {$/;"	c	namespace:ceres::internal
DenseQRSolver	ceres-solver/internal/ceres/dense_qr_solver.cc	/^DenseQRSolver::DenseQRSolver(const LinearSolver::Options& options)$/;"	f	class:ceres::internal::DenseQRSolver
DenseQRSolver	ceres-solver/internal/ceres/dense_qr_solver.h	/^class DenseQRSolver: public DenseSparseMatrixSolver {$/;"	c	namespace:ceres::internal
DenseSchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.h	/^  explicit DenseSchurComplementSolver(const LinearSolver::Options& options)$/;"	f	class:ceres::internal::DenseSchurComplementSolver
DenseSchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.h	/^class DenseSchurComplementSolver : public SchurComplementSolver {$/;"	c	namespace:ceres::internal
DenseSparseMatrix	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^DenseSparseMatrix::DenseSparseMatrix(const ColMajorMatrix& m)$/;"	f	class:ceres::internal::DenseSparseMatrix
DenseSparseMatrix	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^DenseSparseMatrix::DenseSparseMatrix(const TripletSparseMatrix& m)$/;"	f	class:ceres::internal::DenseSparseMatrix
DenseSparseMatrix	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^DenseSparseMatrix::DenseSparseMatrix(int num_rows, int num_cols)$/;"	f	class:ceres::internal::DenseSparseMatrix
DenseSparseMatrix	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^DenseSparseMatrix::DenseSparseMatrix(int num_rows,$/;"	f	class:ceres::internal::DenseSparseMatrix
DenseSparseMatrix	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^class DenseSparseMatrix : public SparseMatrix {$/;"	c	namespace:ceres::internal
DenseSparseMatrixSolver	ceres-solver/internal/ceres/linear_solver.h	/^typedef TypedLinearSolver<DenseSparseMatrix>         DenseSparseMatrixSolver;          \/\/ NOLINT$/;"	t	namespace:ceres::internal
DenseSparseMatrixTest	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^class DenseSparseMatrixTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "a pair where the first < the second"; }$/;"	f	class:testing::internal::Lt2Matcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "a pair where the first <= the second"; }$/;"	f	class:testing::internal::Le2Matcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "a pair where the first > the second"; }$/;"	f	class:testing::internal::Gt2Matcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "a pair where the first >= the second"; }$/;"	f	class:testing::internal::Ge2Matcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "an equal pair"; }$/;"	f	class:testing::internal::Eq2Matcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "an unequal pair"; }$/;"	f	class:testing::internal::Ne2Matcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "is <"; }$/;"	f	class:testing::internal::LtMatcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "is <="; }$/;"	f	class:testing::internal::LeMatcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "is >"; }$/;"	f	class:testing::internal::GtMatcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "is >="; }$/;"	f	class:testing::internal::GeMatcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "is equal to"; }$/;"	f	class:testing::internal::EqMatcher
Desc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* Desc() { return "isn't equal to"; }$/;"	f	class:testing::internal::NeMatcher
DescribeActualCallCountTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Cardinality::DescribeActualCallCountTo(int actual_call_count,$/;"	f	class:testing::Cardinality
DescribeDefaultActionTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeDefaultActionTo(const ArgumentTuple& args,$/;"	f	class:testing::internal::FunctionMockerBase
DescribeLocationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeLocationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ExpectationBase
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::BeginEndDistanceIsMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ComparisonBase::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::FloatingEqMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatcherCastImpl::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PairMatchBase::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PointeeMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PointwiseMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::RefMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ResultOfMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::SizeIsMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::WhenSortedByMatcher::Impl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::MatcherDescriberInterface
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::AnyMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ArgsMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::BothOfMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ContainsMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::EachMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::EitherOfMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ElementsAreMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::KeyMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::NotMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PairMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::UnorderedElementsAreMatcherImpl
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ContainerEqMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::EndsWithMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::FieldMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::HasSubstrMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::IsNullMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatcherBase
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatchesRegexMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::NotNullMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PropertyMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::StartsWithMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::StrEqualityMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::TrulyMatcher
DescribeNegationTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::WhenDynamicCastToMatcherBase
DescribeNegationToImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnorderedElementsAreMatcherImplBase::DescribeNegationToImpl($/;"	f	class:testing::internal::UnorderedElementsAreMatcherImplBase
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::BeginEndDistanceIsMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::BoundSecondMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ComparisonBase::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::FloatingEqMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatcherCastImpl::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PairMatchBase::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PointeeMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PointwiseMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::RefMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ResultOfMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::SizeIsMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::WhenSortedByMatcher::Impl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const { *os << "is anything"; }$/;"	f	class:testing::internal::AnyMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ArgsMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::BothOfMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ContainsMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::EachMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::EitherOfMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ElementsAreMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::KeyMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::NotMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PairMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::UnorderedElementsAreMatcherImpl
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const { *os << "is NULL"; }$/;"	f	class:testing::internal::IsNullMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const { *os << "isn't NULL"; }$/;"	f	class:testing::internal::NotNullMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const { impl_->DescribeTo(os); }$/;"	f	class:testing::Cardinality
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const { impl_->DescribeTo(os); }$/;"	f	class:testing::internal::MatcherBase
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::ContainerEqMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::EndsWithMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::FieldMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::HasSubstrMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatchesRegexMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::PropertyMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::StartsWithMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::StrEqualityMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::TrulyMatcher
DescribeTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::WhenDynamicCastToMatcherBase
DescribeTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void BetweenCardinalityImpl::DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::__anon28::BetweenCardinalityImpl
DescribeToHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^  void DescribeToHelper(bool expect_eq, ::std::ostream* os) const {$/;"	f	class:testing::internal::StrEqualityMatcher
DescribeToImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnorderedElementsAreMatcherImplBase::DescribeToImpl($/;"	f	class:testing::internal::UnorderedElementsAreMatcherImplBase
Destroy	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void Destroy() {$/;"	f	class:ceres::internal::ManualConstructor
DestructorCountingCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^  explicit DestructorCountingCostFunction(int *num_destructions)$/;"	f	class:ceres::internal::DestructorCountingCostFunction
DestructorCountingCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^class DestructorCountingCostFunction : public SizedCostFunction<3, 4, 5> {$/;"	c	namespace:ceres::internal	file:
DetectStructure	ceres-solver/internal/ceres/detect_structure.cc	/^void DetectStructure(const CompressedRowBlockStructure& bs,$/;"	f	namespace:ceres::internal
Differentiate	ceres-solver/include/ceres/internal/autodiff.h	/^  static bool Differentiate(const Functor& functor,$/;"	f	struct:ceres::internal::AutoDiff
DifferentiatePolynomial	ceres-solver/internal/ceres/polynomial.cc	/^Vector DifferentiatePolynomial(const Vector& polynomial) {$/;"	f	namespace:ceres::internal
DimensionType	ceres-solver/include/ceres/types.h	/^enum DimensionType {$/;"	g	namespace:ceres
DirectionInfinityNorm	ceres-solver/internal/ceres/line_search.cc	/^double LineSearchFunction::DirectionInfinityNorm() const {$/;"	f	class:ceres::internal::LineSearchFunction
DirectoryExists	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool FilePath::DirectoryExists() const {$/;"	f	class:testing::internal::FilePath
DisposeDriver	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^void RPlidarDriver::DisposeDriver(RPlidarDriver * drv)$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
DistanceBetweenSignAndMagnitudeNumbers	ceres-solver/internal/ceres/gtest/gtest.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
DistanceFromCircleCost	ceres-solver/examples/circle_fit.cc	/^  DistanceFromCircleCost(double xx, double yy) : xx_(xx), yy_(yy) {}$/;"	f	class:DistanceFromCircleCost
DistanceFromCircleCost	ceres-solver/examples/circle_fit.cc	/^class DistanceFromCircleCost {$/;"	c	file:
DistanceType	ceres-solver/internal/ceres/gmock/gmock.h	/^        DistanceType;$/;"	t	class:testing::internal::BeginEndDistanceIsMatcher::Impl
Div	ceres-solver/include/ceres/jet.h	/^  struct Div {$/;"	s	struct:Eigen::NumTraits
DoAll	ceres-solver/internal/ceres/gmock/gmock.h	/^DoAll(Action1 a1, Action2 a2) {$/;"	f	namespace:testing
DoAll	ceres-solver/internal/ceres/gmock/gmock.h	/^DoAll(Action1 a1, Action2 a2, Action3 a3) {$/;"	f	namespace:testing
DoAll	ceres-solver/internal/ceres/gmock/gmock.h	/^DoAll(Action1 a1, Action2 a2, Action3 a3, Action4 a4) {$/;"	f	namespace:testing
DoAll	ceres-solver/internal/ceres/gmock/gmock.h	/^DoAll(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5) {$/;"	f	namespace:testing
DoAll	ceres-solver/internal/ceres/gmock/gmock.h	/^DoAll(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6) {$/;"	f	namespace:testing
DoAll	ceres-solver/internal/ceres/gmock/gmock.h	/^DoAll(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6,$/;"	f	namespace:testing
DoBothAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  DoBothAction(Action1 action1, Action2 action2)$/;"	f	class:testing::internal::DoBothAction
DoBothAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class DoBothAction {$/;"	c	namespace:testing::internal
DoDefault	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::DoDefaultAction DoDefault() {$/;"	f	namespace:testing
DoDefaultAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class DoDefaultAction {$/;"	c	namespace:testing::internal
DoInnerIterationsIfNeeded	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^void TrustRegionMinimizer::DoInnerIterationsIfNeeded() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
DoLineSearch	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^void TrustRegionMinimizer::DoLineSearch(const Vector& x,$/;"	f	class:ceres::internal::TrustRegionMinimizer
DoSearch	ceres-solver/internal/ceres/line_search.cc	/^void ArmijoLineSearch::DoSearch(const double step_size_estimate,$/;"	f	class:ceres::internal::ArmijoLineSearch
DoSearch	ceres-solver/internal/ceres/line_search.cc	/^void WolfeLineSearch::DoSearch(const double step_size_estimate,$/;"	f	class:ceres::internal::WolfeLineSearch
DoglegStrategy	ceres-solver/internal/ceres/dogleg_strategy.cc	/^DoglegStrategy::DoglegStrategy(const TrustRegionStrategy::Options& options)$/;"	f	class:ceres::internal::DoglegStrategy
DoglegStrategy	ceres-solver/internal/ceres/dogleg_strategy.h	/^class DoglegStrategy : public TrustRegionStrategy {$/;"	c	namespace:ceres::internal
DoglegStrategyFixtureEllipse	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^class DoglegStrategyFixtureEllipse : public Fixture {$/;"	c	namespace:ceres::internal::__anon36	file:
DoglegStrategyFixtureValley	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^class DoglegStrategyFixtureValley : public Fixture {$/;"	c	namespace:ceres::internal::__anon36	file:
DoglegType	ceres-solver/include/ceres/types.h	/^enum DoglegType {$/;"	g	namespace:ceres
DoglegTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* DoglegTypeToString(DoglegType type) {$/;"	f	namespace:ceres
DotProduct	ceres-solver/include/ceres/rotation.h	/^T DotProduct(const T x[3], const T y[3]) {$/;"	f	namespace:ceres
Double	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
DoubleEq	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<double> DoubleEq(double rhs) {$/;"	f	namespace:testing
DoubleLE	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult DoubleLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
DoubleNear	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<double> DoubleNear($/;"	f	namespace:testing
DoubleNearPredFormat	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult DoubleNearPredFormat(const char* expr1,$/;"	f	namespace:testing::internal
DownCast_	ceres-solver/internal/ceres/gtest/gtest.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:std::tr1
DummyCostFunction	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^class DummyCostFunction : public SizedCostFunction<kNumResiduals, N1, N2, N3> {$/;"	c	namespace:ceres::internal	file:
DummyCostFunction	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^class DummyCostFunction: public SizedCostFunction<M, N1, N2, N3> {$/;"	c	namespace:ceres::internal	file:
DummyCostFunction	ceres-solver/internal/ceres/solver_test.cc	/^class DummyCostFunction : public SizedCostFunction<kNumResiduals, N1, N2, N3> {$/;"	c	namespace:ceres::internal	file:
DummyCostFunction	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^class DummyCostFunction : public SizedCostFunction<kNumResiduals, N1, N2, N3> {$/;"	c	namespace:ceres::internal	file:
DummyMatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^  DummyMatchResultListener() : MatchResultListener(NULL) {}$/;"	f	class:testing::internal::DummyMatchResultListener
DummyMatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^class DummyMatchResultListener : public MatchResultListener {$/;"	c	namespace:testing::internal
DumpFormatType	ceres-solver/include/ceres/types.h	/^enum DumpFormatType {$/;"	g	namespace:ceres
DumpLinearLeastSquaresProblem	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^bool DumpLinearLeastSquaresProblem(const string& filename_base,$/;"	f	namespace:ceres::internal
DumpLinearLeastSquaresProblemToConsole	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^bool DumpLinearLeastSquaresProblemToConsole(const SparseMatrix* A,$/;"	f	namespace:ceres::internal::__anon30
DumpLinearLeastSquaresProblemToTextFile	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^bool DumpLinearLeastSquaresProblemToTextFile(const string& filename_base,$/;"	f	namespace:ceres::internal::__anon30
DynamicAutoDiffCostFunction	ceres-solver/include/ceres/dynamic_autodiff_cost_function.h	/^  explicit DynamicAutoDiffCostFunction(CostFunctor* functor)$/;"	f	class:ceres::DynamicAutoDiffCostFunction
DynamicAutoDiffCostFunction	ceres-solver/include/ceres/dynamic_autodiff_cost_function.h	/^class DynamicAutoDiffCostFunction : public DynamicCostFunction {$/;"	c	namespace:ceres
DynamicCompressedRowJacobianFinalizer	ceres-solver/internal/ceres/dynamic_compressed_row_finalizer.h	/^struct DynamicCompressedRowJacobianFinalizer {$/;"	s	namespace:ceres::internal
DynamicCompressedRowJacobianWriter	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.h	/^  DynamicCompressedRowJacobianWriter(Evaluator::Options \/* ignored *\/,$/;"	f	class:ceres::internal::DynamicCompressedRowJacobianWriter
DynamicCompressedRowJacobianWriter	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.h	/^class DynamicCompressedRowJacobianWriter {$/;"	c	namespace:ceres::internal
DynamicCompressedRowSparseMatrix	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.cc	/^DynamicCompressedRowSparseMatrix::DynamicCompressedRowSparseMatrix($/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrix
DynamicCompressedRowSparseMatrix	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h	/^class DynamicCompressedRowSparseMatrix : public CompressedRowSparseMatrix {$/;"	c	namespace:ceres::internal
DynamicCompressedRowSparseMatrixTest	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^class DynamicCompressedRowSparseMatrixTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
DynamicCostFunction	ceres-solver/include/ceres/dynamic_cost_function.h	/^class CERES_EXPORT DynamicCostFunction : public CostFunction {$/;"	c	namespace:ceres
DynamicCostFunctionToFunctor	ceres-solver/include/ceres/dynamic_cost_function_to_functor.h	/^  explicit DynamicCostFunctionToFunctor(CostFunction* cost_function)$/;"	f	class:ceres::DynamicCostFunctionToFunctor
DynamicCostFunctionToFunctor	ceres-solver/include/ceres/dynamic_cost_function_to_functor.h	/^class DynamicCostFunctionToFunctor {$/;"	c	namespace:ceres
DynamicNumericDiffCostFunction	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  explicit DynamicNumericDiffCostFunction($/;"	f	class:ceres::DynamicNumericDiffCostFunction
DynamicNumericDiffCostFunction	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^class DynamicNumericDiffCostFunction : public DynamicCostFunction {$/;"	c	namespace:ceres
DynamicProblem	ceres-solver/internal/ceres/problem_test.cc	/^  DynamicProblem() {$/;"	f	struct:ceres::internal::DynamicProblem
DynamicProblem	ceres-solver/internal/ceres/problem_test.cc	/^struct DynamicProblem : public ::testing::TestWithParam<bool> {$/;"	s	namespace:ceres::internal	file:
DynamicSparseNormalCholeskySolver	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc	/^DynamicSparseNormalCholeskySolver::DynamicSparseNormalCholeskySolver($/;"	f	class:ceres::internal::DynamicSparseNormalCholeskySolver
DynamicSparseNormalCholeskySolver	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.h	/^class DynamicSparseNormalCholeskySolver$/;"	c	namespace:ceres::internal
DynamicTwoParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^class DynamicTwoParameterBlockFunctor {$/;"	c	namespace:ceres::internal	file:
EBlockRowOuterProduct	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^EBlockRowOuterProduct(const BlockSparseMatrix* A,$/;"	f	class:ceres::internal::SchurEliminator
EIGEN	ceres-solver/include/ceres/types.h	/^  EIGEN,$/;"	e	enum:ceres::DenseLinearAlgebraLibraryType
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	ceres-solver/internal/ceres/schur_eliminator_impl.h	46;"	d
EIGEN_PATH	ceres-solver/jni/Android.mk	/^EIGEN_PATH := $(EIGEN_PATH)$/;"	m
EIGEN_SPARSE	ceres-solver/include/ceres/types.h	/^  EIGEN_SPARSE,$/;"	e	enum:ceres::SparseLinearAlgebraLibraryType
END_MGH_PROBLEM	ceres-solver/examples/more_garbow_hillstrom.cc	/^END_MGH_PROBLEM;$/;"	m	namespace:ceres::examples	file:
END_MGH_PROBLEM	ceres-solver/examples/more_garbow_hillstrom.cc	124;"	d	file:
END_MGH_PROBLEM	ceres-solver/examples/more_garbow_hillstrom.cc	536;"	d	file:
END_STATIC_CODE	src/rplidar_ros/sdk/src/hal/util.h	65;"	d
ENV_VAR_SUBFOLDERS	build/catkin_generated/installspace/_setup_util.py	/^ENV_VAR_SUBFOLDERS = {$/;"	v
ENV_VAR_SUBFOLDERS	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^ENV_VAR_SUBFOLDERS = {$/;"	v
ENV_VAR_SUBFOLDERS	devel/_setup_util.py	/^ENV_VAR_SUBFOLDERS = {$/;"	v
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/car_2d_nav/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/console/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/gtest/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/logical_core/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/odometry/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/rplidar_ros/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/serial_comm/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/serial_communication/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/tf_tree/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/vision_unit/Makefile	/^EQUALS = =$/;"	m
EQUALS	ceres-solver/ceres-bin/Makefile	/^EQUALS = =$/;"	m
EQUALS	ceres-solver/ceres-bin/examples/Makefile	/^EQUALS = =$/;"	m
EQUALS	ceres-solver/ceres-bin/examples/sampled_function/Makefile	/^EQUALS = =$/;"	m
EQUALS	ceres-solver/ceres-bin/examples/slam/Makefile	/^EQUALS = =$/;"	m
EQUALS	ceres-solver/ceres-bin/examples/slam/pose_graph_2d/Makefile	/^EQUALS = =$/;"	m
EQUALS	ceres-solver/ceres-bin/examples/slam/pose_graph_3d/Makefile	/^EQUALS = =$/;"	m
EQUALS	ceres-solver/ceres-bin/internal/ceres/Makefile	/^EQUALS = =$/;"	m
ERROR	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int ERROR   = -2;$/;"	v
ERROR	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int ERROR   = ::ERROR;$/;"	m	namespace:google
EVENT_FAILED	src/rplidar_ros/sdk/src/hal/event.h	/^        EVENT_FAILED = 0,$/;"	e	enum:rp::hal::Event::__anon56
EVENT_OK	src/rplidar_ros/sdk/src/hal/event.h	/^        EVENT_OK = 1,$/;"	e	enum:rp::hal::Event::__anon56
EVENT_TIMEOUT	src/rplidar_ros/sdk/src/hal/event.h	/^        EVENT_TIMEOUT = -1,$/;"	e	enum:rp::hal::Event::__anon56
EXAMPLES_CERES_POSE_GRAPH_3D_ERROR_TERM_H_	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	32;"	d
EXAMPLES_CERES_READ_G2O_H_	ceres-solver/examples/slam/common/read_g2o.h	34;"	d
EXAMPLES_CERES_TYPES_H_	ceres-solver/examples/slam/pose_graph_3d/types.h	32;"	d
EXECUTE_TEST	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXPECT_ANY_THROW	ceres-solver/internal/ceres/gtest/gtest.h	20456;"	d
EXPECT_CALL	ceres-solver/internal/ceres/gmock/gmock.h	11023;"	d
EXPECT_DEATH	ceres-solver/internal/ceres/gtest/gtest.h	9484;"	d
EXPECT_DEATH_IF_SUPPORTED	ceres-solver/internal/ceres/gtest/gtest.h	9581;"	d
EXPECT_DEATH_IF_SUPPORTED	ceres-solver/internal/ceres/gtest/gtest.h	9586;"	d
EXPECT_DEBUG_DEATH	ceres-solver/internal/ceres/gtest/gtest.h	9558;"	d
EXPECT_DEBUG_DEATH	ceres-solver/internal/ceres/gtest/gtest.h	9566;"	d
EXPECT_DOUBLE_EQ	ceres-solver/internal/ceres/gtest/gtest.h	20997;"	d
EXPECT_EQ	ceres-solver/internal/ceres/gtest/gtest.h	20888;"	d
EXPECT_EXIT	ceres-solver/internal/ceres/gtest/gtest.h	9473;"	d
EXPECT_FALSE	ceres-solver/internal/ceres/gtest/gtest.h	20471;"	d
EXPECT_FATAL_FAILURE	ceres-solver/internal/ceres/gmock_gtest_all.cc	211;"	d	file:
EXPECT_FATAL_FAILURE_ON_ALL_THREADS	ceres-solver/internal/ceres/gmock_gtest_all.cc	228;"	d	file:
EXPECT_FLOAT_EQ	ceres-solver/internal/ceres/gtest/gtest.h	20993;"	d
EXPECT_GE	ceres-solver/internal/ceres/gtest/gtest.h	20898;"	d
EXPECT_GT	ceres-solver/internal/ceres/gtest/gtest.h	20900;"	d
EXPECT_HRESULT_FAILED	ceres-solver/internal/ceres/gtest/gtest.h	21047;"	d
EXPECT_HRESULT_SUCCEEDED	ceres-solver/internal/ceres/gtest/gtest.h	21041;"	d
EXPECT_LE	ceres-solver/internal/ceres/gtest/gtest.h	20894;"	d
EXPECT_LT	ceres-solver/internal/ceres/gtest/gtest.h	20896;"	d
EXPECT_NE	ceres-solver/internal/ceres/gtest/gtest.h	20892;"	d
EXPECT_NEAR	ceres-solver/internal/ceres/gtest/gtest.h	21009;"	d
EXPECT_NONFATAL_FAILURE	ceres-solver/internal/ceres/gmock_gtest_all.cc	277;"	d	file:
EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS	ceres-solver/internal/ceres/gmock_gtest_all.cc	291;"	d	file:
EXPECT_NO_FATAL_FAILURE	ceres-solver/internal/ceres/gtest/gtest.h	21067;"	d
EXPECT_NO_THROW	ceres-solver/internal/ceres/gtest/gtest.h	20454;"	d
EXPECT_PRED1	ceres-solver/internal/ceres/gtest/gtest.h	20597;"	d
EXPECT_PRED2	ceres-solver/internal/ceres/gtest/gtest.h	20645;"	d
EXPECT_PRED3	ceres-solver/internal/ceres/gtest/gtest.h	20700;"	d
EXPECT_PRED4	ceres-solver/internal/ceres/gtest/gtest.h	20762;"	d
EXPECT_PRED5	ceres-solver/internal/ceres/gtest/gtest.h	20831;"	d
EXPECT_PRED_FORMAT1	ceres-solver/internal/ceres/gtest/gtest.h	20595;"	d
EXPECT_PRED_FORMAT2	ceres-solver/internal/ceres/gtest/gtest.h	20643;"	d
EXPECT_PRED_FORMAT3	ceres-solver/internal/ceres/gtest/gtest.h	20698;"	d
EXPECT_PRED_FORMAT4	ceres-solver/internal/ceres/gtest/gtest.h	20760;"	d
EXPECT_PRED_FORMAT5	ceres-solver/internal/ceres/gtest/gtest.h	20829;"	d
EXPECT_STRCASEEQ	ceres-solver/internal/ceres/gtest/gtest.h	20965;"	d
EXPECT_STRCASENE	ceres-solver/internal/ceres/gtest/gtest.h	20967;"	d
EXPECT_STREQ	ceres-solver/internal/ceres/gtest/gtest.h	20961;"	d
EXPECT_STRNE	ceres-solver/internal/ceres/gtest/gtest.h	20963;"	d
EXPECT_THAT	ceres-solver/internal/ceres/gmock/gmock.h	9209;"	d
EXPECT_THROW	ceres-solver/internal/ceres/gtest/gtest.h	20452;"	d
EXPECT_TRUE	ceres-solver/internal/ceres/gtest/gtest.h	20468;"	d
Each	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::EachMatcher<M> Each(M matcher) {$/;"	f	namespace:testing
EachMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit EachMatcher(M m) : inner_matcher_(m) {}$/;"	f	class:testing::internal::EachMatcher
EachMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class EachMatcher {$/;"	c	namespace:testing::internal
EachMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit EachMatcherImpl(InnerMatcher inner_matcher)$/;"	f	class:testing::internal::EachMatcherImpl
EachMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class EachMatcherImpl : public QuantifierMatcherImpl<Container> {$/;"	c	namespace:testing::internal
EasyCostFunction	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class EasyCostFunction : public SizedCostFunction<3, 5, 5> {$/;"	c	namespace:ceres::internal
EasyFunctor	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class EasyFunctor {$/;"	c	namespace:ceres::internal
EdgeWeight	ceres-solver/internal/ceres/graph.h	/^  double EdgeWeight(const Vertex& vertex1, const Vertex& vertex2) const {$/;"	f	class:ceres::internal::WeightedGraph
EditType	ceres-solver/internal/ceres/gtest/gtest.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	g	namespace:testing::internal::edit_distance
Eigen	ceres-solver/include/ceres/jet.h	/^namespace Eigen {$/;"	n
EigenDouble	ceres-solver/examples/libmv_homography.cc	/^typedef Eigen::NumTraits<double> EigenDouble;$/;"	t	file:
EigenQuaternionParameterization	ceres-solver/include/ceres/local_parameterization.h	/^class CERES_EXPORT EigenQuaternionParameterization$/;"	c	namespace:ceres
EigenQuaternionPlus	ceres-solver/internal/ceres/local_parameterization_test.cc	/^struct EigenQuaternionPlus {$/;"	s	namespace:ceres::internal	file:
EigenTypes	ceres-solver/include/ceres/internal/eigen.h	/^struct EigenTypes {$/;"	s	namespace:ceres
EightParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct EightParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
EitherOfMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  EitherOfMatcher(Matcher1 matcher1, Matcher2 matcher2)$/;"	f	class:testing::internal::EitherOfMatcher
EitherOfMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class EitherOfMatcher {$/;"	c	namespace:testing::internal
EitherOfMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  EitherOfMatcherImpl(const Matcher<T>& matcher1, const Matcher<T>& matcher2)$/;"	f	class:testing::internal::EitherOfMatcherImpl
EitherOfMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class EitherOfMatcherImpl : public MatcherInterface<T> {$/;"	c	namespace:testing::internal
Element	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename StlContainer::value_type Element;$/;"	t	class:testing::internal::ElementsAreMatcherImpl
Element	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename StlContainer::value_type Element;$/;"	t	class:testing::internal::QuantifierMatcherImpl
Element	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename StlContainer::value_type Element;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImpl
ElementMatcherPair	ceres-solver/internal/ceres/gmock/gmock.h	/^typedef ::std::pair<size_t, size_t> ElementMatcherPair;$/;"	t	namespace:testing::internal
ElementMatcherPairs	ceres-solver/internal/ceres/gmock/gmock.h	/^typedef ::std::vector<ElementMatcherPair> ElementMatcherPairs;$/;"	t	namespace:testing::internal
Elements	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Message Elements(size_t count) {$/;"	f	class:testing::internal::ElementsAreMatcherImpl
Elements	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Message Elements(size_t n) {$/;"	f	class:testing::internal::UnorderedElementsAreMatcherImplBase
ElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAre() {$/;"	f	namespace:testing
ElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAre(const T1& e1) {$/;"	f	namespace:testing
ElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAre(const T1& e1, const T2& e2) {$/;"	f	namespace:testing
ElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAre(const T1& e1, const T2& e2, const T3& e3) {$/;"	f	namespace:testing
ElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4) {$/;"	f	namespace:testing
ElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,$/;"	f	namespace:testing
ElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAreArray(::std::initializer_list<T> xs) {$/;"	f	namespace:testing
ElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAreArray(Iter first, Iter last) {$/;"	f	namespace:testing
ElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^ElementsAreArray(const Container& container) {$/;"	f	namespace:testing
ElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::ElementsAreArrayMatcher<T> ElementsAreArray($/;"	f	namespace:testing
ElementsAreArrayMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  ElementsAreArrayMatcher(Iter first, Iter last) : matchers_(first, last) {}$/;"	f	class:testing::internal::ElementsAreArrayMatcher
ElementsAreArrayMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class ElementsAreArrayMatcher {$/;"	c	namespace:testing::internal
ElementsAreMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ElementsAreMatcher(const MatcherTuple& args) : matchers_(args) {}$/;"	f	class:testing::internal::ElementsAreMatcher
ElementsAreMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class ElementsAreMatcher {$/;"	c	namespace:testing::internal
ElementsAreMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  ElementsAreMatcherImpl(InputIter first, InputIter last) {$/;"	f	class:testing::internal::ElementsAreMatcherImpl
ElementsAreMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class ElementsAreMatcherImpl : public MatcherInterface<Container> {$/;"	c	namespace:testing::internal
Eliminate	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^Eliminate(const BlockSparseMatrix* A,$/;"	f	class:ceres::internal::SchurEliminator
EliminateSolveAndCompare	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  void EliminateSolveAndCompare(const VectorRef& diagonal,$/;"	f	class:ceres::internal::SchurEliminatorTest
EmptyTestEventListener	ceres-solver/internal/ceres/gtest/gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
EnableIf	ceres-solver/internal/ceres/gtest/gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
EnableResidualBlockDependencies	ceres-solver/internal/ceres/parameter_block.h	/^  void EnableResidualBlockDependencies() {$/;"	f	class:ceres::internal::ParameterBlock
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::RangeGenerator
End	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
EndianAwareFileReader	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  EndianAwareFileReader(void) : file_descriptor_(-1) {$/;"	f	class:__anon38::EndianAwareFileReader
EndianAwareFileReader	ceres-solver/examples/libmv_bundle_adjuster.cc	/^class EndianAwareFileReader {$/;"	c	namespace:__anon38	file:
EndsWith	ceres-solver/internal/ceres/gmock/gmock.h	/^    EndsWith(const internal::string& suffix) {$/;"	f	namespace:testing
EndsWith	ceres-solver/internal/ceres/gmock/gmock.h	/^    EndsWith(const internal::wstring& suffix) {$/;"	f	namespace:testing
EndsWithCaseInsensitive	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool String::EndsWithCaseInsensitive($/;"	f	class:testing::internal::String
EndsWithMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit EndsWithMatcher(const StringType& suffix) : suffix_(suffix) {}$/;"	f	class:testing::internal::EndsWithMatcher
EndsWithMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class EndsWithMatcher {$/;"	c	namespace:testing::internal
Environment	ceres-solver/internal/ceres/gtest/gtest.h	/^class Environment {$/;"	c	namespace:testing
Eq	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::Eq2Matcher Eq() { return internal::Eq2Matcher(); }$/;"	f	namespace:testing
Eq	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::EqMatcher<T> Eq(T x) { return internal::EqMatcher<T>(x); }$/;"	f	namespace:testing
Eq2Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class Eq2Matcher : public PairMatchBase<Eq2Matcher, AnyEq> {$/;"	c	namespace:testing::internal
EqFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult EqFailure(const char* lhs_expression,$/;"	f	namespace:testing::internal
EqHelper	ceres-solver/internal/ceres/gtest/gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqHelper	ceres-solver/internal/ceres/gtest/gtest.h	/^class EqHelper<true> {$/;"	c	namespace:testing::internal
EqMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit EqMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::EqMatcher
EqMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class EqMatcher : public ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq> {$/;"	c	namespace:testing::internal
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Equals	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
EscapeXml	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string XmlUnitTestResultPrinter::EscapeXml($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
EscapeXmlAttribute	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static std::string EscapeXmlAttribute(const std::string& str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EscapeXmlText	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static std::string EscapeXmlText(const char* str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EstimateHomography2DFromCorrespondences	ceres-solver/examples/libmv_homography.cc	/^bool EstimateHomography2DFromCorrespondences($/;"	f	namespace:__anon41
EstimateHomographyOptions	ceres-solver/examples/libmv_homography.cc	/^  EstimateHomographyOptions()$/;"	f	struct:__anon41::EstimateHomographyOptions
EstimateHomographyOptions	ceres-solver/examples/libmv_homography.cc	/^struct EstimateHomographyOptions {$/;"	s	namespace:__anon41	file:
EstimateWorkSizeForQR	ceres-solver/internal/ceres/lapack.cc	/^int LAPACK::EstimateWorkSizeForQR(int num_rows, int num_cols) {$/;"	f	class:ceres::internal::LAPACK
EuclideanBundleCommonIntrinsics	ceres-solver/examples/libmv_bundle_adjuster.cc	/^void EuclideanBundleCommonIntrinsics(const vector<Marker> &all_markers,$/;"	f	namespace:__anon38
EuclideanCamera	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  EuclideanCamera() : image(-1) {}$/;"	f	struct:__anon38::EuclideanCamera
EuclideanCamera	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  EuclideanCamera(const EuclideanCamera &c) : image(c.image), R(c.R), t(c.t) {}$/;"	f	struct:__anon38::EuclideanCamera
EuclideanCamera	ceres-solver/examples/libmv_bundle_adjuster.cc	/^struct EuclideanCamera {$/;"	s	namespace:__anon38	file:
EuclideanDistanceFunctor	ceres-solver/examples/ellipse_approximation.cc	/^  EuclideanDistanceFunctor(const double& sqrt_weight)$/;"	f	struct:EuclideanDistanceFunctor
EuclideanDistanceFunctor	ceres-solver/examples/ellipse_approximation.cc	/^struct EuclideanDistanceFunctor {$/;"	s	file:
EuclideanPoint	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  EuclideanPoint() : track(-1) {}$/;"	f	struct:__anon38::EuclideanPoint
EuclideanPoint	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  EuclideanPoint(const EuclideanPoint &p) : track(p.track), X(p.X) {}$/;"	f	struct:__anon38::EuclideanPoint
EuclideanPoint	ceres-solver/examples/libmv_bundle_adjuster.cc	/^struct EuclideanPoint {$/;"	s	namespace:__anon38	file:
EulerAnglesToRotationMatrix	ceres-solver/include/ceres/rotation.h	/^inline void EulerAnglesToRotationMatrix(const T* euler,$/;"	f	namespace:ceres
EulerAnglesToRotationMatrix	ceres-solver/include/ceres/rotation.h	/^void EulerAnglesToRotationMatrix($/;"	f	namespace:ceres
Evaluate	ceres-solver/examples/denoising.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::examples::QuadraticCostFunction
Evaluate	ceres-solver/examples/ellipse_approximation.cc	/^  virtual bool Evaluate(const double* const* x,$/;"	f	class:PointToLineSegmentContourCostFunction
Evaluate	ceres-solver/examples/fields_of_experts.cc	/^bool FieldsOfExpertsCost::Evaluate(double const* const* parameters,$/;"	f	class:ceres::examples::FieldsOfExpertsCost
Evaluate	ceres-solver/examples/fields_of_experts.cc	/^void FieldsOfExpertsLoss::Evaluate(double sq_norm, double rho[3]) const {$/;"	f	class:ceres::examples::FieldsOfExpertsLoss
Evaluate	ceres-solver/examples/helloworld_analytic_diff.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:QuadraticCostFunction
Evaluate	ceres-solver/examples/rosenbrock.cc	/^  virtual bool Evaluate(const double* parameters,$/;"	f	class:Rosenbrock
Evaluate	ceres-solver/include/ceres/autodiff_cost_function.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::AutoDiffCostFunction
Evaluate	ceres-solver/include/ceres/cubic_interpolation.h	/^  template<typename JetT> void Evaluate(const JetT& r,$/;"	f	class:ceres::BiCubicInterpolator
Evaluate	ceres-solver/include/ceres/cubic_interpolation.h	/^  template<typename JetT> void Evaluate(const JetT& x, JetT* f) const {$/;"	f	class:ceres::CubicInterpolator
Evaluate	ceres-solver/include/ceres/cubic_interpolation.h	/^  void Evaluate(const double& r, const double& c, double* f) const {$/;"	f	class:ceres::BiCubicInterpolator
Evaluate	ceres-solver/include/ceres/cubic_interpolation.h	/^  void Evaluate(const double& x, double* f) const {$/;"	f	class:ceres::CubicInterpolator
Evaluate	ceres-solver/include/ceres/cubic_interpolation.h	/^  void Evaluate(double r, double c,$/;"	f	class:ceres::BiCubicInterpolator
Evaluate	ceres-solver/include/ceres/cubic_interpolation.h	/^  void Evaluate(double x, double* f, double* dfdx) const {$/;"	f	class:ceres::CubicInterpolator
Evaluate	ceres-solver/include/ceres/dynamic_autodiff_cost_function.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::DynamicAutoDiffCostFunction
Evaluate	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::DynamicNumericDiffCostFunction
Evaluate	ceres-solver/include/ceres/loss_function.h	/^  virtual void Evaluate(double sq_norm, double out[3]) const {$/;"	f	class:ceres::LossFunctionWrapper
Evaluate	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::NumericDiffCostFunction
Evaluate	ceres-solver/internal/ceres/c_api.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:CallbackCostFunction
Evaluate	ceres-solver/internal/ceres/c_api.cc	/^  virtual void Evaluate(double sq_norm, double* rho) const {$/;"	f	class:CallbackLossFunction
Evaluate	ceres-solver/internal/ceres/conditioned_cost_function.cc	/^bool ConditionedCostFunction::Evaluate(double const* const* parameters,$/;"	f	class:ceres::ConditionedCostFunction
Evaluate	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::LinearCostFunction
Evaluate	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::BinaryCostFunction
Evaluate	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::UnaryCostFunction
Evaluate	ceres-solver/internal/ceres/evaluator.h	/^  bool Evaluate(const double* state,$/;"	f	class:ceres::internal::Evaluator
Evaluate	ceres-solver/internal/ceres/evaluator_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::ParameterIgnoringCostFunction
Evaluate	ceres-solver/internal/ceres/evaluator_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::ParameterSensitiveCostFunction
Evaluate	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::BadTestTerm
Evaluate	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::GoodTestTerm
Evaluate	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  virtual bool Evaluate(double const* const* parameter_ptrs,$/;"	f	class:ceres::internal::LinearCostFunction
Evaluate	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::__anon8::GradientCheckingCostFunction
Evaluate	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::TestTerm
Evaluate	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::BinaryCostFunction
Evaluate	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::TernaryCostFunction
Evaluate	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::UnaryCostFunction
Evaluate	ceres-solver/internal/ceres/gradient_problem.cc	/^bool GradientProblem::Evaluate(const double* parameters,$/;"	f	class:ceres::GradientProblem
Evaluate	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual bool Evaluate(const EvaluateOptions& evaluate_options,$/;"	f	class:ceres::internal::GradientProblemEvaluator
Evaluate	ceres-solver/internal/ceres/gradient_problem_solver_test.cc	/^  virtual bool Evaluate(const double* parameters,$/;"	f	class:ceres::internal::Rosenbrock
Evaluate	ceres-solver/internal/ceres/gradient_problem_test.cc	/^  virtual bool Evaluate(const double* parameters,$/;"	f	class:ceres::internal::QuadraticTestFunction
Evaluate	ceres-solver/internal/ceres/line_search.cc	/^bool LineSearchFunction::Evaluate(double x, double* f, double* g) {$/;"	f	class:ceres::internal::LineSearchFunction
Evaluate	ceres-solver/internal/ceres/line_search_minimizer.cc	/^bool Evaluate(Evaluator* evaluator,$/;"	f	namespace:ceres::internal::__anon17
Evaluate	ceres-solver/internal/ceres/line_search_minimizer_test.cc	/^  virtual bool Evaluate(const double* parameters,$/;"	f	class:ceres::internal::QuadraticFirstOrderFunction
Evaluate	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::DummyCostFunction
Evaluate	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::FailingCostFunction
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void ArctanLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::ArctanLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void CauchyLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::CauchyLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void ComposedLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::ComposedLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void HuberLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::HuberLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void ScaledLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::ScaledLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void SoftLOneLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::SoftLOneLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void TolerantLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::TolerantLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void TrivialLoss::Evaluate(double s, double rho[3]) const {$/;"	f	class:ceres::TrivialLoss
Evaluate	ceres-solver/internal/ceres/loss_function.cc	/^void TukeyLoss::Evaluate(double s, double* rho) const {$/;"	f	class:ceres::TukeyLoss
Evaluate	ceres-solver/internal/ceres/normal_prior.cc	/^bool NormalPrior::Evaluate(double const* const* parameters,$/;"	f	class:ceres::NormalPrior
Evaluate	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::SizeTestingCostFunction
Evaluate	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::EasyCostFunction
Evaluate	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::ExponentialCostFunction
Evaluate	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::RandomizedCostFunction
Evaluate	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::TranscendentalCostFunction
Evaluate	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::DummyCostFunction	file:
Evaluate	ceres-solver/internal/ceres/problem.cc	/^bool Problem::Evaluate(const EvaluateOptions& evaluate_options,$/;"	f	class:ceres::Problem
Evaluate	ceres-solver/internal/ceres/problem_impl.cc	/^bool ProblemImpl::Evaluate(const Problem::EvaluateOptions& evaluate_options,$/;"	f	class:ceres::internal::ProblemImpl
Evaluate	ceres-solver/internal/ceres/problem_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::BinaryCostFunction
Evaluate	ceres-solver/internal/ceres/problem_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::DestructorCountingCostFunction
Evaluate	ceres-solver/internal/ceres/problem_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::QuadraticCostFunction
Evaluate	ceres-solver/internal/ceres/problem_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::TernaryCostFunction
Evaluate	ceres-solver/internal/ceres/problem_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::UnaryCostFunction
Evaluate	ceres-solver/internal/ceres/program_evaluator.h	/^  bool Evaluate(const Evaluator::EvaluateOptions& evaluate_options,$/;"	f	class:ceres::internal::ProgramEvaluator
Evaluate	ceres-solver/internal/ceres/program_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::MockCostFunctionBase
Evaluate	ceres-solver/internal/ceres/program_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::NumParameterBlocksCostFunction
Evaluate	ceres-solver/internal/ceres/program_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::UnaryIdentityCostFunction
Evaluate	ceres-solver/internal/ceres/reorder_program_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::MockCostFunctionBase
Evaluate	ceres-solver/internal/ceres/residual_block.cc	/^bool ResidualBlock::Evaluate(const bool apply_loss_function,$/;"	f	class:ceres::internal::ResidualBlock
Evaluate	ceres-solver/internal/ceres/residual_block_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::LocallyParameterizedCostFunction
Evaluate	ceres-solver/internal/ceres/residual_block_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::TernaryCostFunction
Evaluate	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::BadJacobianCostFunction
Evaluate	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::BadResidualCostFunction
Evaluate	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::GoodCostFunction
Evaluate	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::NoJacobianUpdateCostFunction
Evaluate	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::NoResidualUpdateCostFunction
Evaluate	ceres-solver/internal/ceres/solver_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::DummyCostFunction
Evaluate	ceres-solver/internal/ceres/solver_test.cc	/^  virtual bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::UnaryIdentityCostFunction
Evaluate	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::CurveCostFunction
Evaluate	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  virtual bool Evaluate(const Evaluator::EvaluateOptions& evaluate_options,$/;"	f	class:ceres::internal::PowellEvaluator2
Evaluate	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::DummyCostFunction
Evaluate	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  bool Evaluate(double const* const* parameters,$/;"	f	class:ceres::internal::FailingCostFunction
EvaluateAndCompare	ceres-solver/internal/ceres/evaluator_test.cc	/^  void EvaluateAndCompare(ProblemImpl *problem,$/;"	f	struct:ceres::internal::EvaluatorTest
EvaluateAndCompare	ceres-solver/internal/ceres/problem_test.cc	/^  void EvaluateAndCompare(const Problem::EvaluateOptions& options,$/;"	f	class:ceres::internal::ProblemEvaluateTest
EvaluateCostFunction	ceres-solver/internal/ceres/gradient_checker.cc	/^bool EvaluateCostFunction($/;"	f	namespace:ceres::__anon16
EvaluateCostFunctor	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  bool EvaluateCostFunctor(double const* const* parameters,$/;"	f	class:ceres::DynamicNumericDiffCostFunction
EvaluateCostFunctorImpl	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  bool EvaluateCostFunctorImpl(const CostFunctor* functor,$/;"	f	class:ceres::DynamicNumericDiffCostFunction
EvaluateF	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  double EvaluateF(double r, double c) {$/;"	f	class:ceres::internal::BiCubicInterpolatorTest	file:
EvaluateGradientAndJacobian	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::EvaluateGradientAndJacobian() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
EvaluateImpl	ceres-solver/include/ceres/internal/numeric_diff.h	/^bool EvaluateImpl(const CostFunctor* functor,$/;"	f	namespace:ceres::internal
EvaluateJacobianColumn	ceres-solver/include/ceres/internal/numeric_diff.h	/^  static bool EvaluateJacobianColumn(const CostFunctor* functor,$/;"	f	struct:ceres::internal::NumericDiff
EvaluateJacobianForParameterBlock	ceres-solver/include/ceres/internal/numeric_diff.h	/^  static bool EvaluateJacobianForParameterBlock($/;"	f	struct:ceres::internal::NumericDiff
EvaluateOptions	ceres-solver/include/ceres/problem.h	/^    EvaluateOptions()$/;"	f	struct:ceres::Problem::EvaluateOptions
EvaluateOptions	ceres-solver/include/ceres/problem.h	/^  struct EvaluateOptions {$/;"	s	class:ceres::Problem
EvaluateOptions	ceres-solver/internal/ceres/evaluator.h	/^    EvaluateOptions()$/;"	f	struct:ceres::internal::Evaluator::EvaluateOptions
EvaluateOptions	ceres-solver/internal/ceres/evaluator.h	/^  struct EvaluateOptions {$/;"	s	class:ceres::internal::Evaluator
EvaluatePolynomial	ceres-solver/internal/ceres/polynomial.h	/^inline double EvaluatePolynomial(const Vector& polynomial, double x) {$/;"	f	namespace:ceres::internal
EvaluateRiddersJacobianColumn	ceres-solver/include/ceres/internal/numeric_diff.h	/^  static bool EvaluateRiddersJacobianColumn($/;"	f	struct:ceres::internal::NumericDiff
EvaluateScratch	ceres-solver/internal/ceres/program_evaluator.h	/^  struct EvaluateScratch {$/;"	s	class:ceres::internal::ProgramEvaluator
EvaluateSubspaceModel	ceres-solver/internal/ceres/dogleg_strategy.cc	/^double DoglegStrategy::EvaluateSubspaceModel(const Vector2d& x) const {$/;"	f	class:ceres::internal::DoglegStrategy
EvaluatedFdc	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  double EvaluatedFdc(double r, double c) {$/;"	f	class:ceres::internal::BiCubicInterpolatorTest	file:
EvaluatedFdr	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  double EvaluatedFdr(double r, double c) {$/;"	f	class:ceres::internal::BiCubicInterpolatorTest	file:
EvaluationToString	ceres-solver/internal/ceres/residual_block_utils.cc	/^string EvaluationToString(const ResidualBlock& block,$/;"	f	namespace:ceres::internal
Evaluator	ceres-solver/internal/ceres/evaluator.h	/^class Evaluator {$/;"	c	namespace:ceres::internal
EvaluatorTest	ceres-solver/internal/ceres/evaluator_test.cc	/^struct EvaluatorTest$/;"	s	namespace:ceres::internal	file:
EvaluatorTestOptions	ceres-solver/internal/ceres/evaluator_test.cc	/^  EvaluatorTestOptions(LinearSolverType linear_solver_type,$/;"	f	struct:ceres::internal::EvaluatorTestOptions
EvaluatorTestOptions	ceres-solver/internal/ceres/evaluator_test.cc	/^struct EvaluatorTestOptions {$/;"	s	namespace:ceres::internal	file:
Event	src/rplidar_ros/sdk/src/hal/event.h	/^    Event(bool isAutoReset = true, bool isSignal = false)$/;"	f	class:rp::hal::Event
Event	src/rplidar_ros/sdk/src/hal/event.h	/^class Event$/;"	c	namespace:rp::hal
EventForwardingEnabled	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool TestEventListeners::EventForwardingEnabled() const {$/;"	f	class:testing::TestEventListeners
EventLogger	ceres-solver/internal/ceres/wall_time.cc	/^EventLogger::EventLogger(const std::string& logger_name)$/;"	f	class:ceres::internal::EventLogger
EventLogger	ceres-solver/internal/ceres/wall_time.h	/^class EventLogger {$/;"	c	namespace:ceres::internal
Exactly	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ Cardinality Exactly(int n) { return Between(n, n); }$/;"	f	namespace:testing
ExcessiveArg	ceres-solver/internal/ceres/gmock/gmock.h	/^struct ExcessiveArg {};$/;"	s	namespace:testing::internal
ExecDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ExecDeathTest(const char* a_statement, const RE* a_regex,$/;"	f	class:testing::internal::ExecDeathTest
ExecDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class ExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
ExecDeathTestArgs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^struct ExecDeathTestArgs {$/;"	s	namespace:testing::internal	file:
ExecDeathTestChildMain	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static int ExecDeathTestChildMain(void* child_arg) {$/;"	f	namespace:testing::internal
ExecDeathTestSpawnChild	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {$/;"	f	namespace:testing::internal
ExecutionSummary	ceres-solver/internal/ceres/execution_summary.h	/^class ExecutionSummary {$/;"	c	namespace:ceres::internal
Exists	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool Exists() { return BuiltInDefaultValue<T>::Exists(); }$/;"	f	class:testing::internal::BuiltInDefaultValue
Exists	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool Exists() { return true; }$/;"	f	class:testing::DefaultValue
Exists	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool Exists() { return true; }$/;"	f	class:testing::internal::BuiltInDefaultValue
Exists	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool Exists() {$/;"	f	class:testing::DefaultValue
Exists	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool Exists() {$/;"	f	class:testing::internal::BuiltInDefaultValue
ExitSummary	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string ExitSummary(int exit_code) {$/;"	f	namespace:testing::internal
ExitedUnsuccessfully	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ExitedUnsuccessfully(int exit_status) {$/;"	f	namespace:testing::internal
ExitedWithCode	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {$/;"	f	class:testing::ExitedWithCode
ExitedWithCode	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
ExpCostFunctor	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^struct ExpCostFunctor {$/;"	s	namespace:ceres::internal	file:
ExpectArraysClose	ceres-solver/internal/ceres/test_util.cc	/^void ExpectArraysClose(int n,$/;"	f	namespace:ceres::internal
ExpectArraysCloseUptoScale	ceres-solver/internal/ceres/test_util.cc	/^void ExpectArraysCloseUptoScale(int n,$/;"	f	namespace:ceres::internal
ExpectClose	ceres-solver/internal/ceres/test_util.cc	/^bool ExpectClose(double x, double y, double max_abs_relative_difference) {$/;"	f	namespace:ceres::internal
ExpectCostFunctionEvaluationIsNearlyCorrect	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^void EasyFunctor::ExpectCostFunctionEvaluationIsNearlyCorrect($/;"	f	class:ceres::internal::EasyFunctor
ExpectCostFunctionEvaluationIsNearlyCorrect	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^void ExponentialFunctor::ExpectCostFunctionEvaluationIsNearlyCorrect($/;"	f	class:ceres::internal::ExponentialFunctor
ExpectCostFunctionEvaluationIsNearlyCorrect	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^void RandomizedFunctor::ExpectCostFunctionEvaluationIsNearlyCorrect($/;"	f	class:ceres::internal::RandomizedFunctor
ExpectCostFunctionEvaluationIsNearlyCorrect	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^void TranscendentalFunctor::ExpectCostFunctionEvaluationIsNearlyCorrect($/;"	f	class:ceres::internal::TranscendentalFunctor
ExpectCostFunctionsAreEqual	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^void ExpectCostFunctionsAreEqual(const CostFunction& cost_function,$/;"	f	namespace:ceres::internal
ExpectEmpty	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  void ExpectEmpty() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
ExpectEqualToCompressedRowSparseMatrixReference	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  void ExpectEqualToCompressedRowSparseMatrixReference() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
ExpectEqualToDenseReference	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  void ExpectEqualToDenseReference() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
ExpectJetArraysClose	ceres-solver/internal/ceres/rotation_test.cc	/^void ExpectJetArraysClose(const Jet<double, N> *x, const Jet<double, N> *y) {$/;"	f	namespace:ceres::internal
ExpectJetsClose	ceres-solver/internal/ceres/jet_test.cc	/^void ExpectJetsClose(const J &x, const J &y) {$/;"	f	namespace:ceres::internal
ExpectMatricesClose	ceres-solver/internal/ceres/gradient_checker_test.cc	/^void ExpectMatricesClose(Matrix p, Matrix q, double tolerance) {$/;"	f	namespace:ceres::internal
ExpectParameterBlockContains	ceres-solver/internal/ceres/problem_test.cc	/^  void ExpectParameterBlockContains(double* values) {$/;"	f	struct:ceres::internal::DynamicProblem
ExpectParameterBlockContains	ceres-solver/internal/ceres/problem_test.cc	/^  void ExpectParameterBlockContains(double* values,$/;"	f	struct:ceres::internal::DynamicProblem
ExpectParameterBlockContainsResidualBlock	ceres-solver/internal/ceres/problem_test.cc	/^  void ExpectParameterBlockContainsResidualBlock($/;"	f	struct:ceres::internal::DynamicProblem
ExpectProblemHasResidualBlocks	ceres-solver/internal/ceres/problem_test.cc	/^void ExpectProblemHasResidualBlocks($/;"	f	namespace:ceres::internal
ExpectSize	ceres-solver/internal/ceres/problem_test.cc	/^  void ExpectSize(double* values, int size) {$/;"	f	struct:ceres::internal::DynamicProblem
ExpectSpecProperty	ceres-solver/internal/ceres/gmock/gmock.h	/^  void ExpectSpecProperty(bool property, const string& failure_message) const {$/;"	f	class:testing::internal::ExpectationBase
ExpectSpecProperty	ceres-solver/internal/ceres/gmock/gmock.h	/^  void ExpectSpecProperty(bool property, const string& failure_message) const {$/;"	f	class:testing::internal::UntypedOnCallSpecBase
ExpectVectorContainsUnordered	ceres-solver/internal/ceres/problem_test.cc	/^void ExpectVectorContainsUnordered(const T* a, const vector<T>& b) {$/;"	f	namespace:ceres::internal
Expectation	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Expectation {$/;"	c	namespace:testing
Expectation	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Expectation::Expectation(internal::ExpectationBase& exp)  \/\/ NOLINT$/;"	f	class:testing::Expectation
Expectation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Expectation::Expectation($/;"	f	class:testing::Expectation
Expectation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Expectation::Expectation() {}$/;"	f	class:testing::Expectation
ExpectationBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ ExpectationBase {$/;"	c	namespace:testing::internal
ExpectationBase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ExpectationBase::ExpectationBase(const char* a_file,$/;"	f	class:testing::internal::ExpectationBase
ExpectationSet	ceres-solver/internal/ceres/gmock/gmock.h	/^  ExpectationSet() {}$/;"	f	class:testing::ExpectationSet
ExpectationSet	ceres-solver/internal/ceres/gmock/gmock.h	/^  ExpectationSet(const Expectation& e) {  \/\/ NOLINT$/;"	f	class:testing::ExpectationSet
ExpectationSet	ceres-solver/internal/ceres/gmock/gmock.h	/^  ExpectationSet(internal::ExpectationBase& exp) {  \/\/ NOLINT$/;"	f	class:testing::ExpectationSet
ExpectationSet	ceres-solver/internal/ceres/gmock/gmock.h	/^class ExpectationSet {$/;"	c	namespace:testing
ExpectedEvaluation	ceres-solver/internal/ceres/evaluator_test_utils.h	/^struct ExpectedEvaluation {$/;"	s	namespace:ceres::internal
ExplainMatchFailureTupleTo	ceres-solver/internal/ceres/gmock/gmock.h	/^void ExplainMatchFailureTupleTo(const MatcherTuple& matchers,$/;"	f	namespace:testing::internal
ExplainMatchFailuresTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void ExplainMatchFailuresTo(const MatcherTuple& \/* matchers *\/,$/;"	f	class:testing::internal::TuplePrefix
ExplainMatchFailuresTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void ExplainMatchFailuresTo(const MatcherTuple& matchers,$/;"	f	class:testing::internal::TuplePrefix
ExplainMatchResult	ceres-solver/internal/ceres/gmock/gmock.h	/^inline bool ExplainMatchResult($/;"	f	namespace:testing
ExplainMatchResultTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  void ExplainMatchResultTo(T x, ::std::ostream* os) const {$/;"	f	class:testing::internal::MatcherBase
ExplainSuccess	ceres-solver/internal/ceres/gmock/gmock.h	/^  void ExplainSuccess(const internal::string& first_explanation,$/;"	f	class:testing::internal::PairMatcherImpl
ExponentialCostFunction	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class ExponentialCostFunction : public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal
ExponentialFunctor	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class ExponentialFunctor {$/;"	c	namespace:ceres::internal
ExponentialResidual	ceres-solver/examples/curve_fitting.cc	/^  ExponentialResidual(double x, double y)$/;"	f	struct:ExponentialResidual
ExponentialResidual	ceres-solver/examples/curve_fitting.cc	/^struct ExponentialResidual {$/;"	s	file:
ExponentialResidual	ceres-solver/examples/robust_curve_fitting.cc	/^  ExponentialResidual(double x, double y)$/;"	f	struct:ExponentialResidual
ExponentialResidual	ceres-solver/examples/robust_curve_fitting.cc	/^struct ExponentialResidual {$/;"	s	file:
ExtractSummary	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string TestPartResult::ExtractSummary(const char* message) {$/;"	f	class:testing::TestPartResult
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F();$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3, A4);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3, A4, A5);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3, A4, A5, A6);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3, A4, A5, A6, A7);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3, A4, A5, A6, A7, A8);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3, A4, A5, A6, A7, A8, A9);$/;"	t	class:testing::internal::FunctionMocker
F	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R F(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);$/;"	t	class:testing::internal::FunctionMocker
F1	ceres-solver/examples/powell.cc	/^struct F1 {$/;"	s	file:
F1	ceres-solver/internal/ceres/system_test.cc	/^  class F1 {$/;"	c	class:ceres::internal::PowellsFunction	file:
F2	ceres-solver/examples/powell.cc	/^struct F2 {$/;"	s	file:
F2	ceres-solver/internal/ceres/system_test.cc	/^  class F2 {$/;"	c	class:ceres::internal::PowellsFunction	file:
F3	ceres-solver/examples/powell.cc	/^struct F3 {$/;"	s	file:
F3	ceres-solver/internal/ceres/system_test.cc	/^  class F3 {$/;"	c	class:ceres::internal::PowellsFunction	file:
F4	ceres-solver/examples/powell.cc	/^struct F4 {$/;"	s	file:
F4	ceres-solver/internal/ceres/system_test.cc	/^  class F4 {$/;"	c	class:ceres::internal::PowellsFunction	file:
FAIL	ceres-solver/internal/ceres/gtest/gtest.h	20431;"	d
FAILURE	ceres-solver/include/ceres/types.h	/^  FAILURE,$/;"	e	enum:ceres::TerminationType
FALSE	src/serial_communication/include/sysHeaders.h	19;"	d
FATAL	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int FATAL   = -3;$/;"	v
FATAL	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int FATAL   = ::FATAL;$/;"	m	namespace:google
FClose	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:std::tr1::posix
FDOpen	ceres-solver/internal/ceres/gtest/gtest.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:std::tr1::posix
FLETCHER_REEVES	ceres-solver/include/ceres/types.h	/^  FLETCHER_REEVES,$/;"	e	enum:ceres::NonlinearConjugateGradientType
FORWARD	ceres-solver/include/ceres/types.h	/^  FORWARD,$/;"	e	enum:ceres::NumericDiffMethodType
FOpen	ceres-solver/internal/ceres/gtest/gtest.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:std::tr1::posix
FRIEND_TEST	ceres-solver/internal/ceres/gtest/gtest.h	18234;"	d
FReopen	ceres-solver/internal/ceres/gtest/gtest.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:std::tr1::posix
Factorize	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^LinearSolverTerminationType VisibilityBasedPreconditioner::Factorize() {$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
FactoryFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef T (*FactoryFunction)();$/;"	t	class:testing::DefaultValue
FactoryValueProducer	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit FactoryValueProducer(FactoryFunction factory)$/;"	f	class:testing::DefaultValue::FactoryValueProducer
FactoryValueProducer	ceres-solver/internal/ceres/gmock/gmock.h	/^  class FactoryValueProducer : public ValueProducer {$/;"	c	class:testing::DefaultValue
FailFromInternalError	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void FailFromInternalError(int fd) {$/;"	f	namespace:testing::internal
Failed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool Failed() const {$/;"	f	class:testing::internal::UnitTestImpl
Failed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool TestResult::Failed() const {$/;"	f	class:testing::TestResult
Failed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool UnitTest::Failed() const { return impl()->Failed(); }$/;"	f	class:testing::UnitTest
Failed	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestCase
FailingCostFunction	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^class FailingCostFunction : public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
FailingCostFunction	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^class FailingCostFunction : public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
FakeIterationCallback	ceres-solver/internal/ceres/minimizer_test.cc	/^class FakeIterationCallback : public IterationCallback {$/;"	c	namespace:ceres::internal	file:
Field	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::FieldMatcher<Class, FieldType> > Field($/;"	f	namespace:testing
FieldMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  FieldMatcher(FieldType Class::*field,$/;"	f	class:testing::internal::FieldMatcher
FieldMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class FieldMatcher {$/;"	c	namespace:testing::internal
FieldsOfExperts	ceres-solver/examples/fields_of_experts.cc	/^FieldsOfExperts::FieldsOfExperts()$/;"	f	class:ceres::examples::FieldsOfExperts
FieldsOfExperts	ceres-solver/examples/fields_of_experts.h	/^class FieldsOfExperts {$/;"	c	namespace:ceres::examples
FieldsOfExpertsCost	ceres-solver/examples/fields_of_experts.cc	/^FieldsOfExpertsCost::FieldsOfExpertsCost(const std::vector<double>& filter)$/;"	f	class:ceres::examples::FieldsOfExpertsCost
FieldsOfExpertsCost	ceres-solver/examples/fields_of_experts.h	/^class FieldsOfExpertsCost : public ceres::CostFunction {$/;"	c	namespace:ceres::examples
FieldsOfExpertsLoss	ceres-solver/examples/fields_of_experts.h	/^  explicit FieldsOfExpertsLoss(double alpha) : alpha_(alpha) { }$/;"	f	class:ceres::examples::FieldsOfExpertsLoss
FieldsOfExpertsLoss	ceres-solver/examples/fields_of_experts.h	/^class FieldsOfExpertsLoss : public ceres::LossFunction {$/;"	c	namespace:ceres::examples
FileNo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:std::tr1::posix
FileNo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:std::tr1::posix
FileOrDirectoryExists	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool FilePath::FileOrDirectoryExists() const {$/;"	f	class:testing::internal::FilePath
FilePath	ceres-solver/internal/ceres/gtest/gtest.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	ceres-solver/internal/ceres/gtest/gtest.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit FilePath(const std::string& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
FillBlock	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^int FillBlock(const vector<int>& row_blocks,$/;"	f	namespace:ceres::internal
FilterMatchesTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool UnitTestOptions::FilterMatchesTest(const std::string &test_case_name,$/;"	f	class:testing::internal::UnitTestOptions
FilterTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {$/;"	f	class:testing::internal::UnitTestImpl
Finalize	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.cc	/^void DynamicCompressedRowSparseMatrix::Finalize(int num_additional_elements) {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrix
Finalize	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  void Finalize() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
FinalizeIterationAndCheckIfMinimizerCanContinue	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::FinalizeIterationAndCheckIfMinimizerCanContinue() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
FindChildElement	src/doc/html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
FindConnectedComponent	ceres-solver/internal/ceres/graph_algorithms.h	/^Vertex FindConnectedComponent(const Vertex& vertex,$/;"	f	namespace:ceres::internal
FindInterpolatingPolynomial	ceres-solver/internal/ceres/polynomial.cc	/^Vector FindInterpolatingPolynomial(const vector<FunctionSample>& samples) {$/;"	f	namespace:ceres::internal
FindInvalidValue	ceres-solver/internal/ceres/array_utils.cc	/^int FindInvalidValue(const int size, const double* x) {$/;"	f	namespace:ceres::internal
FindLastPathSeparator	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* FilePath::FindLastPathSeparator() const {$/;"	f	class:testing::internal::FilePath
FindLinearPolynomialRoots	ceres-solver/internal/ceres/polynomial.cc	/^void FindLinearPolynomialRoots(const Vector& polynomial,$/;"	f	namespace:ceres::internal::__anon3
FindMaxBipartiteMatching	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FindMaxBipartiteMatching(const MatchMatrix& g) {$/;"	f	namespace:testing::internal
FindMinimumOnTrustRegionBoundary	ceres-solver/internal/ceres/dogleg_strategy.cc	/^bool DoglegStrategy::FindMinimumOnTrustRegionBoundary(Vector2d* minimum) const {$/;"	f	class:ceres::internal::DoglegStrategy
FindOnCallSpec	ceres-solver/internal/ceres/gmock/gmock.h	/^  const OnCallSpec<F>* FindOnCallSpec($/;"	f	class:testing::internal::FunctionMockerBase
FindOrDie	ceres-solver/internal/ceres/map_util.h	/^FindOrDie(const Collection& collection,$/;"	f	namespace:ceres
FindOrNull	ceres-solver/internal/ceres/map_util.h	/^FindOrNull(Collection& collection,  \/\/ NOLINT$/;"	f	namespace:ceres
FindPairing	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ bool FindPairing(const MatchMatrix& matrix,$/;"	f	namespace:testing::internal
FindPolynomialRoots	ceres-solver/internal/ceres/polynomial.cc	/^bool FindPolynomialRoots(const Vector& polynomial_in,$/;"	f	namespace:ceres::internal
FindQuadraticPolynomialRoots	ceres-solver/internal/ceres/polynomial.cc	/^void FindQuadraticPolynomialRoots(const Vector& polynomial,$/;"	f	namespace:ceres::internal::__anon3
FindValidViews	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^void CanonicalViewsClustering::FindValidViews($/;"	f	class:ceres::internal::CanonicalViewsClustering
FindWithDefault	ceres-solver/internal/ceres/map_util.h	/^FindWithDefault(const Collection& collection,$/;"	f	namespace:ceres
FirstOrderFunction	ceres-solver/include/ceres/gradient_problem.h	/^class CERES_EXPORT FirstOrderFunction {$/;"	c	namespace:ceres
FirstType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename RawPairType::first_type FirstType;$/;"	t	class:testing::internal::PairMatcherImpl
FiveParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct FiveParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
FixedArray	ceres-solver/include/ceres/internal/fixed_array.h	/^class FixedArray {$/;"	c	namespace:ceres::internal
FixedArray	ceres-solver/include/ceres/internal/fixed_array.h	/^inline FixedArray<T, S>::FixedArray(typename FixedArray<T, S>::size_type n)$/;"	f	class:ceres::internal::FixedArray
FixedValueProducer	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit FixedValueProducer(T value) : value_(value) {}$/;"	f	class:testing::DefaultValue::FixedValueProducer
FixedValueProducer	ceres-solver/internal/ceres/gmock/gmock.h	/^  class FixedValueProducer : public ValueProducer {$/;"	c	class:testing::DefaultValue
Fixture	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^class Fixture : public testing::Test {$/;"	c	namespace:ceres::internal::__anon36	file:
FlagToEnvVar	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string FlagToEnvVar(const char* flag) {$/;"	f	namespace:testing::internal
FlattenMembershipMap	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::FlattenMembershipMap($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
Float	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
FloatEq	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<float> FloatEq(float rhs) {$/;"	f	namespace:testing
FloatLE	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult FloatLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
FloatNear	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<float> FloatNear($/;"	f	namespace:testing
FloatingEqMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  FloatingEqMatcher(FloatType expected, bool nan_eq_nan) :$/;"	f	class:testing::internal::FloatingEqMatcher
FloatingEqMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  FloatingEqMatcher(FloatType expected, bool nan_eq_nan,$/;"	f	class:testing::internal::FloatingEqMatcher
FloatingEqMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class FloatingEqMatcher {$/;"	c	namespace:testing::internal
FloatingPoint	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	ceres-solver/internal/ceres/gtest/gtest.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointLE	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult FloatingPointLE(const char* expr1,$/;"	f	namespace:testing::internal
FloatingPointUnion	ceres-solver/internal/ceres/gtest/gtest.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FlushEdits	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void FlushEdits() {$/;"	f	class:testing::internal::edit_distance::__anon19::Hunk	file:
FlushInfoLog	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void FlushInfoLog() { fflush(NULL); }$/;"	f	namespace:std::tr1
ForEach	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ForEach(const Container& c, Functor functor) {$/;"	f	namespace:testing::internal
ForeBack	src/serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
ForestToClusterPairs	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::ForestToClusterPairs($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
ForkingDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ForkingDeathTest::ForkingDeathTest(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::ForkingDeathTest
ForkingDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class ForkingDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
Format	ceres-solver/internal/ceres/gtest/gtest.h	/^  static ::std::string Format(const ToPrint& value) {$/;"	f	class:testing::internal::FormatForComparison
Format	ceres-solver/internal/ceres/gtest/gtest.h	/^  static ::std::string Format(const ToPrint* value) {$/;"	f	class:testing::internal::FormatForComparison
FormatBool	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  string FormatBool(bool value) { return value ? "1" : "0"; }$/;"	f	class:testing::internal::StreamingListener	file:
FormatByte	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string String::FormatByte(unsigned char value) {$/;"	f	class:testing::internal::String
FormatCompilerIndependentFileLocation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ ::std::string FormatCompilerIndependentFileLocation($/;"	f	namespace:testing::internal
FormatCountableNoun	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string FormatCountableNoun(int count,$/;"	f	namespace:testing
FormatCxxExceptionMessage	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string FormatCxxExceptionMessage(const char* description,$/;"	f	namespace:testing::internal
FormatDeathTestOutput	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static ::std::string FormatDeathTestOutput(const ::std::string& output) {$/;"	f	namespace:testing::internal
FormatEpochTimeInMillisAsIso8601	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatFileLocation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {$/;"	f	namespace:testing::internal
FormatForComparison	ceres-solver/internal/ceres/gtest/gtest.h	/^class FormatForComparison {$/;"	c	namespace:testing::internal
FormatForComparison	ceres-solver/internal/ceres/gtest/gtest.h	/^class FormatForComparison<ToPrint[N], OtherOperand> {$/;"	c	namespace:testing::internal
FormatForComparisonFailureMessage	ceres-solver/internal/ceres/gtest/gtest.h	/^std::string FormatForComparisonFailureMessage($/;"	f	namespace:testing::internal
FormatHexInt	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string String::FormatHexInt(int value) {$/;"	f	class:testing::internal::String
FormatIntWidth2	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string String::FormatIntWidth2(int value) {$/;"	f	class:testing::internal::String
FormatMatcherDescription	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ string FormatMatcherDescription(bool negation,$/;"	f	namespace:testing::internal
FormatRegexSyntaxError	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string FormatRegexSyntaxError(const char* regex, int index) {$/;"	f	namespace:testing::internal
FormatSehExceptionMessage	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string* FormatSehExceptionMessage(DWORD exception_code,$/;"	f	namespace:testing
FormatTestCaseCount	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string FormatTestCaseCount(int test_case_count) {$/;"	f	namespace:testing
FormatTestCount	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string FormatTestCount(int test_count) {$/;"	f	namespace:testing
FormatTimeInMillisAsSeconds	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatTimes	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline internal::string FormatTimes(int n) {$/;"	f	namespace:testing::__anon28
FormatWordList	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string FormatWordList(const std::vector<std::string>& words) {$/;"	f	namespace:testing
FourParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct FourParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
Free	ceres-solver/internal/ceres/cxsparse.cc	/^void CXSparse::Free(cs_di* sparse_matrix) {$/;"	f	class:ceres::internal::CXSparse
Free	ceres-solver/internal/ceres/cxsparse.cc	/^void CXSparse::Free(cs_dis* symbolic_factorization) {$/;"	f	class:ceres::internal::CXSparse
Free	ceres-solver/internal/ceres/suitesparse.h	/^  void Free(cholmod_dense* m)  { cholmod_free_dense(&m, &cc_);  }$/;"	f	class:ceres::internal::SuiteSparse
Free	ceres-solver/internal/ceres/suitesparse.h	/^  void Free(cholmod_factor* m) { cholmod_free_factor(&m, &cc_); }$/;"	f	class:ceres::internal::SuiteSparse
Free	ceres-solver/internal/ceres/suitesparse.h	/^  void Free(cholmod_sparse* m) { cholmod_free_sparse(&m, &cc_); }$/;"	f	class:ceres::internal::SuiteSparse
FreeFactorization	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^void SparseNormalCholeskySolver::FreeFactorization() {$/;"	f	class:ceres::internal::SparseNormalCholeskySolver
From	ceres-solver/examples/libmv_homography.cc	/^  static void From(const Parameterized &h, Parameters *p) {$/;"	f	class:__anon41::Homography2DNormalizedParameterization
FromTripletSparseMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix* CompressedRowSparseMatrix::FromTripletSparseMatrix($/;"	f	class:ceres::internal::CompressedRowSparseMatrix
FromTripletSparseMatrixTransposed	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix::FromTripletSparseMatrixTransposed($/;"	f	class:ceres::internal::CompressedRowSparseMatrix
FscanfOrDie	ceres-solver/examples/bal_problem.cc	/^void FscanfOrDie(FILE* fptr, const char* format, T* value) {$/;"	f	namespace:ceres::examples::__anon37
FscanfOrDie	ceres-solver/examples/simple_bundle_adjuster.cc	/^  void FscanfOrDie(FILE *fptr, const char *format, T *value) {$/;"	f	class:BALProblem	file:
FscanfOrDie	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  void FscanfOrDie(FILE *fptr, const char *format, T *value) {$/;"	f	class:ceres::internal::BundleAdjustmentProblem	file:
FullMatch	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool RE::FullMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
FullMatch	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullMatch	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool FullMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullReport	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^string GradientProblemSolver::Summary::FullReport() const {$/;"	f	class:ceres::GradientProblemSolver::Summary
FullReport	ceres-solver/internal/ceres/solver.cc	/^string Solver::Summary::FullReport() const {$/;"	f	class:ceres::Solver::Summary
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R()> {$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3, A4)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3, A4, A5)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3, A4, A5, A6)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3, A4, A5, A6, A7)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3, A4, A5, A6, A7, A8)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>$/;"	s	namespace:testing::internal
Function	ceres-solver/internal/ceres/gmock/gmock.h	/^struct Function<R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>$/;"	s	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R()> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3, A4)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3, A4, A5)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3, A4, A5, A6)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3, A4, A5, A6, A7)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3, A4, A5, A6, A7, A8)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3, A4, A5, A6, A7, A8, A9)> : public$/;"	c	namespace:testing::internal
FunctionMocker	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMocker<R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)> : public$/;"	c	namespace:testing::internal
FunctionMockerBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  FunctionMockerBase() : current_spec_(this) {}$/;"	f	class:testing::internal::FunctionMockerBase
FunctionMockerBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class FunctionMockerBase : public UntypedFunctionMockerBase {$/;"	c	namespace:testing::internal
FunctionMockers	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^typedef std::set<internal::UntypedFunctionMockerBase*> FunctionMockers;$/;"	t	namespace:testing::__anon29	file:
FunctionSample	ceres-solver/internal/ceres/polynomial.h	/^  FunctionSample()$/;"	f	struct:ceres::internal::FunctionSample
FunctionSample	ceres-solver/internal/ceres/polynomial.h	/^struct FunctionSample {$/;"	s	namespace:ceres::internal
FunctionToleranceReached	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::FunctionToleranceReached() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_	ceres-solver/internal/ceres/gmock/gmock.h	3205;"	d
GMOCK_ACTION_CLASS_	ceres-solver/internal/ceres/gmock/gmock.h	3565;"	d
GMOCK_ARG_	ceres-solver/internal/ceres/gmock/gmock.h	11323;"	d
GMOCK_DECLARE_KIND_	ceres-solver/internal/ceres/gmock/gmock.h	648;"	d
GMOCK_DECLARE_KIND_	ceres-solver/internal/ceres/gmock/gmock.h	677;"	d
GMOCK_DECLARE_bool_	ceres-solver/internal/ceres/gmock/gmock.h	308;"	d
GMOCK_DECLARE_int32_	ceres-solver/internal/ceres/gmock/gmock.h	309;"	d
GMOCK_DECLARE_string_	ceres-solver/internal/ceres/gmock/gmock.h	311;"	d
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_	ceres-solver/internal/ceres/gmock/gmock.h	1119;"	d
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_	ceres-solver/internal/ceres/gmock/gmock.h	1158;"	d
GMOCK_DEFINE_bool_	ceres-solver/internal/ceres/gmock/gmock.h	315;"	d
GMOCK_DEFINE_int32_	ceres-solver/internal/ceres/gmock/gmock.h	317;"	d
GMOCK_DEFINE_string_	ceres-solver/internal/ceres/gmock/gmock.h	319;"	d
GMOCK_EXPECT_CALL_IMPL_	ceres-solver/internal/ceres/gmock/gmock.h	11021;"	d
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k10));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k2));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3),$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k4));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5),$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k6));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k6), GMOCK_FIELD_(ArgumentTuple, k7));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k6), GMOCK_FIELD_(ArgumentTuple, k7),$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k8));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k8), GMOCK_FIELD_(ArgumentTuple, k9));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_(ArgumentTuple, k8), GMOCK_FIELD_(ArgumentTuple, k9),$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef Result type(GMOCK_FIELD_(ArgumentTuple, k1));$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef Result type(GMOCK_FIELD_(ArgumentTuple, k1),$/;"	t	class:testing::internal::SelectArgs
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	2596;"	d
GMOCK_FIELD_	ceres-solver/internal/ceres/gmock/gmock.h	2779;"	d
GMOCK_FIELD_TYPE_	ceres-solver/internal/ceres/gmock/gmock.h	12521;"	d
GMOCK_FIELD_TYPE_	ceres-solver/internal/ceres/gmock/gmock.h	12675;"	d
GMOCK_FLAG	ceres-solver/internal/ceres/gmock/gmock.h	303;"	d
GMOCK_GMOCK_MORE_MATCHERS_H_	ceres-solver/internal/ceres/gmock/gmock.h	14934;"	d
GMOCK_HAS_SIGNED_WCHAR_T_	ceres-solver/internal/ceres/gmock/gmock.h	630;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_	ceres-solver/internal/ceres/gmock/gmock.h	94;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_	ceres-solver/internal/ceres/gmock/gmock.h	2220;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_	ceres-solver/internal/ceres/gmock/gmock.h	2365;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_FUNCTION_MOCKERS_H_	ceres-solver/internal/ceres/gmock/gmock.h	4749;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_MATCHERS_H_	ceres-solver/internal/ceres/gmock/gmock.h	12510;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_	ceres-solver/internal/ceres/gmock/gmock.h	12148;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_H_	ceres-solver/internal/ceres/gmock/gmock.h	37;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_	ceres-solver/internal/ceres/gmock/gmock.h	4861;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_	ceres-solver/internal/ceres/gmock/gmock.h	14686;"	d
GMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_	ceres-solver/internal/ceres/gmock/gmock.h	4811;"	d
GMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_CALLBACK_MATCHERS_H_	ceres-solver/internal/ceres/gmock/gmock.h	9253;"	d
GMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_GENERATED_ACTIONS_H_	ceres-solver/internal/ceres/gmock/gmock.h	4704;"	d
GMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_	ceres-solver/internal/ceres/gmock/gmock.h	286;"	d
GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_	ceres-solver/internal/ceres/gmock/gmock.h	188;"	d
GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_	ceres-solver/internal/ceres/gmock/gmock.h	141;"	d
GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_	ceres-solver/internal/ceres/gmock/gmock.h	229;"	d
GMOCK_INTERNAL_COUNT_AND_0_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3549;"	d
GMOCK_INTERNAL_COUNT_AND_10_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3561;"	d
GMOCK_INTERNAL_COUNT_AND_1_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3550;"	d
GMOCK_INTERNAL_COUNT_AND_2_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3551;"	d
GMOCK_INTERNAL_COUNT_AND_3_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3552;"	d
GMOCK_INTERNAL_COUNT_AND_4_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3553;"	d
GMOCK_INTERNAL_COUNT_AND_5_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3554;"	d
GMOCK_INTERNAL_COUNT_AND_6_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3555;"	d
GMOCK_INTERNAL_COUNT_AND_7_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3556;"	d
GMOCK_INTERNAL_COUNT_AND_8_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3557;"	d
GMOCK_INTERNAL_COUNT_AND_9_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3559;"	d
GMOCK_INTERNAL_DECL_AND_0_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3521;"	d
GMOCK_INTERNAL_DECL_AND_10_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3543;"	d
GMOCK_INTERNAL_DECL_AND_1_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3522;"	d
GMOCK_INTERNAL_DECL_AND_2_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3523;"	d
GMOCK_INTERNAL_DECL_AND_3_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3525;"	d
GMOCK_INTERNAL_DECL_AND_4_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3527;"	d
GMOCK_INTERNAL_DECL_AND_5_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3529;"	d
GMOCK_INTERNAL_DECL_AND_6_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3531;"	d
GMOCK_INTERNAL_DECL_AND_7_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3534;"	d
GMOCK_INTERNAL_DECL_AND_8_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3537;"	d
GMOCK_INTERNAL_DECL_AND_9_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3540;"	d
GMOCK_INTERNAL_DECL_HAS_10_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3327;"	d
GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3300;"	d
GMOCK_INTERNAL_DECL_HAS_2_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3301;"	d
GMOCK_INTERNAL_DECL_HAS_3_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3303;"	d
GMOCK_INTERNAL_DECL_HAS_4_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3305;"	d
GMOCK_INTERNAL_DECL_HAS_5_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3308;"	d
GMOCK_INTERNAL_DECL_HAS_6_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3311;"	d
GMOCK_INTERNAL_DECL_HAS_7_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3314;"	d
GMOCK_INTERNAL_DECL_HAS_8_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3318;"	d
GMOCK_INTERNAL_DECL_HAS_9_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3322;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_0_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3363;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_10_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3390;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_1_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3364;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_2_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3365;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_3_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3367;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_4_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3369;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_5_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3372;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_6_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3375;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_7_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3378;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_8_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3382;"	d
GMOCK_INTERNAL_DECL_TYPE_AND_9_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3386;"	d
GMOCK_INTERNAL_DEFN_AND_0_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3448;"	d
GMOCK_INTERNAL_DEFN_AND_10_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3470;"	d
GMOCK_INTERNAL_DEFN_AND_1_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3449;"	d
GMOCK_INTERNAL_DEFN_AND_2_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3450;"	d
GMOCK_INTERNAL_DEFN_AND_3_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3452;"	d
GMOCK_INTERNAL_DEFN_AND_4_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3454;"	d
GMOCK_INTERNAL_DEFN_AND_5_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3456;"	d
GMOCK_INTERNAL_DEFN_AND_6_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3458;"	d
GMOCK_INTERNAL_DEFN_AND_7_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3461;"	d
GMOCK_INTERNAL_DEFN_AND_8_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3464;"	d
GMOCK_INTERNAL_DEFN_AND_9_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3467;"	d
GMOCK_INTERNAL_INIT_AND_0_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3397;"	d
GMOCK_INTERNAL_INIT_AND_10_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3438;"	d
GMOCK_INTERNAL_INIT_AND_1_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3399;"	d
GMOCK_INTERNAL_INIT_AND_2_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3401;"	d
GMOCK_INTERNAL_INIT_AND_3_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3403;"	d
GMOCK_INTERNAL_INIT_AND_4_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3406;"	d
GMOCK_INTERNAL_INIT_AND_5_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3410;"	d
GMOCK_INTERNAL_INIT_AND_6_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3414;"	d
GMOCK_INTERNAL_INIT_AND_7_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3419;"	d
GMOCK_INTERNAL_INIT_AND_8_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3424;"	d
GMOCK_INTERNAL_INIT_AND_9_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3430;"	d
GMOCK_INTERNAL_LIST_AND_0_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3476;"	d
GMOCK_INTERNAL_LIST_AND_10_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3491;"	d
GMOCK_INTERNAL_LIST_AND_1_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3477;"	d
GMOCK_INTERNAL_LIST_AND_2_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3478;"	d
GMOCK_INTERNAL_LIST_AND_3_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3479;"	d
GMOCK_INTERNAL_LIST_AND_4_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3480;"	d
GMOCK_INTERNAL_LIST_AND_5_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3481;"	d
GMOCK_INTERNAL_LIST_AND_6_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3483;"	d
GMOCK_INTERNAL_LIST_AND_7_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3485;"	d
GMOCK_INTERNAL_LIST_AND_8_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3487;"	d
GMOCK_INTERNAL_LIST_AND_9_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3489;"	d
GMOCK_INTERNAL_LIST_HAS_10_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3357;"	d
GMOCK_INTERNAL_LIST_HAS_1_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3334;"	d
GMOCK_INTERNAL_LIST_HAS_2_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3335;"	d
GMOCK_INTERNAL_LIST_HAS_3_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3337;"	d
GMOCK_INTERNAL_LIST_HAS_4_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3339;"	d
GMOCK_INTERNAL_LIST_HAS_5_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3341;"	d
GMOCK_INTERNAL_LIST_HAS_6_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3344;"	d
GMOCK_INTERNAL_LIST_HAS_7_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3347;"	d
GMOCK_INTERNAL_LIST_HAS_8_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3350;"	d
GMOCK_INTERNAL_LIST_HAS_9_TEMPLATE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3353;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_0_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3495;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_10_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3516;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_1_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3496;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_2_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3497;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_3_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3499;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_4_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3501;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_5_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3503;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_6_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3505;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_7_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3507;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_8_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3510;"	d
GMOCK_INTERNAL_LIST_TYPE_AND_9_VALUE_PARAMS	ceres-solver/internal/ceres/gmock/gmock.h	3513;"	d
GMOCK_IS_SIGNED_	ceres-solver/internal/ceres/gmock/gmock.h	685;"	d
GMOCK_IS_SIGNED_	ceres-solver/internal/ceres/gmock/gmock.h	732;"	d
GMOCK_KIND_OF_	ceres-solver/internal/ceres/gmock/gmock.h	680;"	d
GMOCK_MATCHER_	ceres-solver/internal/ceres/gmock/gmock.h	11328;"	d
GMOCK_METHOD0_	ceres-solver/internal/ceres/gmock/gmock.h	11337;"	d
GMOCK_METHOD10_	ceres-solver/internal/ceres/gmock/gmock.h	11615;"	d
GMOCK_METHOD1_	ceres-solver/internal/ceres/gmock/gmock.h	11356;"	d
GMOCK_METHOD2_	ceres-solver/internal/ceres/gmock/gmock.h	11375;"	d
GMOCK_METHOD3_	ceres-solver/internal/ceres/gmock/gmock.h	11396;"	d
GMOCK_METHOD4_	ceres-solver/internal/ceres/gmock/gmock.h	11421;"	d
GMOCK_METHOD5_	ceres-solver/internal/ceres/gmock/gmock.h	11448;"	d
GMOCK_METHOD6_	ceres-solver/internal/ceres/gmock/gmock.h	11477;"	d
GMOCK_METHOD7_	ceres-solver/internal/ceres/gmock/gmock.h	11508;"	d
GMOCK_METHOD8_	ceres-solver/internal/ceres/gmock/gmock.h	11541;"	d
GMOCK_METHOD9_	ceres-solver/internal/ceres/gmock/gmock.h	11576;"	d
GMOCK_MOCKER_	ceres-solver/internal/ceres/gmock/gmock.h	11333;"	d
GMOCK_ON_CALL_IMPL_	ceres-solver/internal/ceres/gmock/gmock.h	11016;"	d
GMOCK_RESULT_	ceres-solver/internal/ceres/gmock/gmock.h	11318;"	d
GMOCK_WCHAR_T_IS_NATIVE_	ceres-solver/internal/ceres/gmock/gmock.h	616;"	d
GOOGLE_CERES_INTERNAL_MOCK_LOG_H_	ceres-solver/internal/ceres/gmock/mock-log.h	39;"	d
GTEST_0_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1015;"	d
GTEST_0_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1941;"	d
GTEST_0_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1038;"	d
GTEST_0_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1953;"	d
GTEST_10_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1034;"	d
GTEST_10_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1951;"	d
GTEST_10_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1055;"	d
GTEST_10_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1963;"	d
GTEST_1_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_1_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_1_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1016;"	d
GTEST_1_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1942;"	d
GTEST_1_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1039;"	d
GTEST_1_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1954;"	d
GTEST_2_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_2_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_2_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1018;"	d
GTEST_2_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1943;"	d
GTEST_2_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1040;"	d
GTEST_2_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1955;"	d
GTEST_3_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_3_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_3_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1020;"	d
GTEST_3_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1944;"	d
GTEST_3_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1041;"	d
GTEST_3_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1956;"	d
GTEST_4_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_4_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_4_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1022;"	d
GTEST_4_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1945;"	d
GTEST_4_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1042;"	d
GTEST_4_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1957;"	d
GTEST_5_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_5_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_5_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1024;"	d
GTEST_5_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1946;"	d
GTEST_5_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1044;"	d
GTEST_5_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1958;"	d
GTEST_6_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_6_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_6_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1026;"	d
GTEST_6_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1947;"	d
GTEST_6_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1046;"	d
GTEST_6_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1959;"	d
GTEST_7_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_7_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_7_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1028;"	d
GTEST_7_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1948;"	d
GTEST_7_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1048;"	d
GTEST_7_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1960;"	d
GTEST_8_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_8_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_8_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1030;"	d
GTEST_8_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1949;"	d
GTEST_8_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1050;"	d
GTEST_8_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1961;"	d
GTEST_9_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_9_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_9_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1032;"	d
GTEST_9_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	1950;"	d
GTEST_9_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1052;"	d
GTEST_9_TYPENAMES_	ceres-solver/internal/ceres/gtest/gtest.h	1962;"	d
GTEST_ADD_REFERENCE_	ceres-solver/internal/ceres/gtest/gtest.h	8581;"	d
GTEST_ADD_REF_	ceres-solver/internal/ceres/gtest/gtest.h	1092;"	d
GTEST_ADD_REF_	ceres-solver/internal/ceres/gtest/gtest.h	1967;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	ceres-solver/internal/ceres/gtest/gtest.h	2125;"	d
GTEST_API_	ceres-solver/internal/ceres/gtest/gtest.h	2210;"	d
GTEST_API_	ceres-solver/internal/ceres/gtest/gtest.h	2219;"	d
GTEST_ARRAY_SIZE_	ceres-solver/internal/ceres/gtest/gtest.h	2377;"	d
GTEST_ASSERT_	ceres-solver/internal/ceres/gtest/gtest.h	20557;"	d
GTEST_ASSERT_EQ	ceres-solver/internal/ceres/gtest/gtest.h	20903;"	d
GTEST_ASSERT_GE	ceres-solver/internal/ceres/gtest/gtest.h	20913;"	d
GTEST_ASSERT_GT	ceres-solver/internal/ceres/gtest/gtest.h	20915;"	d
GTEST_ASSERT_LE	ceres-solver/internal/ceres/gtest/gtest.h	20909;"	d
GTEST_ASSERT_LT	ceres-solver/internal/ceres/gtest/gtest.h	20911;"	d
GTEST_ASSERT_NE	ceres-solver/internal/ceres/gtest/gtest.h	20907;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_	ceres-solver/internal/ceres/gtest/gtest.h	2252;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_	ceres-solver/internal/ceres/gtest/gtest.h	2240;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_	ceres-solver/internal/ceres/gtest/gtest.h	2264;"	d
GTEST_ATTRIBUTE_UNUSED_	ceres-solver/internal/ceres/gmock/gmock.h	/^} GTEST_ATTRIBUTE_UNUSED_;$/;"	m	namespace:testing	typeref:class:testing::InSequence
GTEST_ATTRIBUTE_UNUSED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^} GTEST_ATTRIBUTE_UNUSED_;$/;"	m	namespace:testing::internal	typeref:class:testing::internal::GTestFlagSaver	file:
GTEST_ATTRIBUTE_UNUSED_	ceres-solver/internal/ceres/gtest/gtest.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	ceres-solver/internal/ceres/gtest/gtest.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing::internal	typeref:class:testing::internal::ScopedTrace
GTEST_ATTRIBUTE_UNUSED_	ceres-solver/internal/ceres/gtest/gtest.h	2142;"	d
GTEST_ATTRIBUTE_UNUSED_	ceres-solver/internal/ceres/gtest/gtest.h	2149;"	d
GTEST_BIND_	ceres-solver/internal/ceres/gtest/gtest.h	6120;"	d
GTEST_BY_REF_	ceres-solver/internal/ceres/gtest/gtest.h	1082;"	d
GTEST_BY_REF_	ceres-solver/internal/ceres/gtest/gtest.h	1966;"	d
GTEST_CAN_COMPARE_NULL	ceres-solver/internal/ceres/gtest/gtest.h	3476;"	d
GTEST_CAN_STREAM_RESULTS_	ceres-solver/internal/ceres/gtest/gtest.h	2111;"	d
GTEST_CASE_NAMESPACE_	ceres-solver/internal/ceres/gtest/gtest.h	18612;"	d
GTEST_CHECK_	ceres-solver/internal/ceres/gtest/gtest.h	2580;"	d
GTEST_CHECK_POSIX_SUCCESS_	ceres-solver/internal/ceres/gtest/gtest.h	2593;"	d
GTEST_COMPILE_ASSERT_	ceres-solver/internal/ceres/gtest/gtest.h	2311;"	d
GTEST_CONCAT_TOKEN_	ceres-solver/internal/ceres/gtest/gtest.h	7821;"	d
GTEST_CONCAT_TOKEN_IMPL_	ceres-solver/internal/ceres/gtest/gtest.h	7822;"	d
GTEST_CRITICAL_SECTION	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef struct _CRITICAL_SECTION GTEST_CRITICAL_SECTION;$/;"	t	typeref:struct:_CRITICAL_SECTION
GTEST_CRITICAL_SECTION	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;$/;"	t	typeref:struct:_RTL_CRITICAL_SECTION
GTEST_DEATH_TEST_	ceres-solver/internal/ceres/gtest/gtest.h	9207;"	d
GTEST_DEATH_TEST_CHECK_	ceres-solver/internal/ceres/gmock_gtest_all.cc	7113;"	d	file:
GTEST_DEATH_TEST_CHECK_SYSCALL_	ceres-solver/internal/ceres/gmock_gtest_all.cc	7130;"	d	file:
GTEST_DECLARE_STATIC_MUTEX_	ceres-solver/internal/ceres/gtest/gtest.h	2986;"	d
GTEST_DECLARE_STATIC_MUTEX_	ceres-solver/internal/ceres/gtest/gtest.h	3253;"	d
GTEST_DECLARE_STATIC_MUTEX_	ceres-solver/internal/ceres/gtest/gtest.h	3429;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ceres-solver/internal/ceres/gtest/gtest.h	1001;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ceres-solver/internal/ceres/gtest/gtest.h	1965;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ceres-solver/internal/ceres/gtest/gtest.h	999;"	d
GTEST_DECLARE_bool_	ceres-solver/internal/ceres/gtest/gtest.h	3800;"	d
GTEST_DECLARE_int32_	ceres-solver/internal/ceres/gtest/gtest.h	3801;"	d
GTEST_DECLARE_string_	ceres-solver/internal/ceres/gtest/gtest.h	3803;"	d
GTEST_DEFINE_STATIC_MUTEX_	ceres-solver/internal/ceres/gtest/gtest.h	2989;"	d
GTEST_DEFINE_STATIC_MUTEX_	ceres-solver/internal/ceres/gtest/gtest.h	3257;"	d
GTEST_DEFINE_STATIC_MUTEX_	ceres-solver/internal/ceres/gtest/gtest.h	3432;"	d
GTEST_DEFINE_bool_	ceres-solver/internal/ceres/gtest/gtest.h	3807;"	d
GTEST_DEFINE_int32_	ceres-solver/internal/ceres/gtest/gtest.h	3809;"	d
GTEST_DEFINE_string_	ceres-solver/internal/ceres/gtest/gtest.h	3811;"	d
GTEST_DEV_EMAIL_	ceres-solver/internal/ceres/gtest/gtest.h	541;"	d
GTEST_DISABLE_MSC_WARNINGS_POP_	ceres-solver/internal/ceres/gtest/gtest.h	569;"	d
GTEST_DISABLE_MSC_WARNINGS_POP_	ceres-solver/internal/ceres/gtest/gtest.h	574;"	d
GTEST_DISABLE_MSC_WARNINGS_PUSH_	ceres-solver/internal/ceres/gtest/gtest.h	566;"	d
GTEST_DISABLE_MSC_WARNINGS_PUSH_	ceres-solver/internal/ceres/gtest/gtest.h	573;"	d
GTEST_DISALLOW_ASSIGN_	ceres-solver/internal/ceres/gtest/gtest.h	2154;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	ceres-solver/internal/ceres/gtest/gtest.h	2159;"	d
GTEST_ELLIPSIS_NEEDS_POD_	ceres-solver/internal/ceres/gtest/gtest.h	3474;"	d
GTEST_ENV_HAS_STD_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	924;"	d
GTEST_ENV_HAS_TR1_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	917;"	d
GTEST_ERROR	ceres-solver/internal/ceres/gtest/gtest.h	/^  GTEST_ERROR,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gmock/gmock.h	/^          GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) {$/;"	f	class:testing::internal::FunctionMockerBase
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gmock/gmock.h	/^          GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) {$/;"	f	class:testing::internal::TypedExpectation
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) {$/;"	f	class:testing::internal::ExpectationBase
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) {$/;"	f	class:testing::internal::FunctionMockerBase
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gmock/gmock.h	/^      GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) {$/;"	f	class:testing::internal::TypedExpectation
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) {$/;"	f	namespace:testing::internal
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    GTEST_EXCLUSIVE_LOCK_REQUIRED_(internal::g_gmock_mutex) {$/;"	f	namespace:testing
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ceres-solver/internal/ceres/gtest/gtest.h	3818;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	ceres-solver/internal/ceres/gtest/gtest.h	9183;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	ceres-solver/internal/ceres/gtest/gtest.h	9200;"	d
GTEST_EXECUTE_STATEMENT_	ceres-solver/internal/ceres/gtest/gtest.h	9246;"	d
GTEST_FAIL	ceres-solver/internal/ceres/gtest/gtest.h	20426;"	d
GTEST_FATAL	ceres-solver/internal/ceres/gtest/gtest.h	/^  GTEST_FATAL$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_FATAL_FAILURE_	ceres-solver/internal/ceres/gtest/gtest.h	8854;"	d
GTEST_FLAG	ceres-solver/internal/ceres/gtest/gtest.h	3789;"	d
GTEST_FLAG_PREFIX_	ceres-solver/internal/ceres/gtest/gtest.h	542;"	d
GTEST_FLAG_PREFIX_DASH_	ceres-solver/internal/ceres/gtest/gtest.h	543;"	d
GTEST_FLAG_PREFIX_UPPER_	ceres-solver/internal/ceres/gtest/gtest.h	544;"	d
GTEST_FLAG_SAVER_	ceres-solver/internal/ceres/gtest/gtest.h	3797;"	d
GTEST_GCC_VER_	ceres-solver/internal/ceres/gtest/gtest.h	556;"	d
GTEST_HAS_ALT_PATH_SEP_	ceres-solver/internal/ceres/gtest/gtest.h	3520;"	d
GTEST_HAS_ALT_PATH_SEP_	ceres-solver/internal/ceres/gtest/gtest.h	3525;"	d
GTEST_HAS_CLONE	ceres-solver/internal/ceres/gtest/gtest.h	2044;"	d
GTEST_HAS_COMBINE	ceres-solver/internal/ceres/gtest/gtest.h	2102;"	d
GTEST_HAS_CXXABI_H_	ceres-solver/internal/ceres/gtest/gtest.h	2231;"	d
GTEST_HAS_DEATH_TEST	ceres-solver/internal/ceres/gtest/gtest.h	2079;"	d
GTEST_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	725;"	d
GTEST_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	734;"	d
GTEST_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	737;"	d
GTEST_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	742;"	d
GTEST_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	745;"	d
GTEST_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	749;"	d
GTEST_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	753;"	d
GTEST_HAS_GETTIMEOFDAY_	ceres-solver/internal/ceres/gmock_gtest_all.cc	329;"	d	file:
GTEST_HAS_GLOBAL_STRING	ceres-solver/internal/ceres/gtest/gtest.h	770;"	d
GTEST_HAS_GLOBAL_WSTRING	ceres-solver/internal/ceres/gtest/gtest.h	791;"	d
GTEST_HAS_HASH_MAP_	ceres-solver/internal/ceres/gtest/gtest.h	882;"	d
GTEST_HAS_HASH_SET_	ceres-solver/internal/ceres/gtest/gtest.h	883;"	d
GTEST_HAS_PARAM_TEST	ceres-solver/internal/ceres/gtest/gtest.h	2085;"	d
GTEST_HAS_POSIX_RE	ceres-solver/internal/ceres/gtest/gtest.h	682;"	d
GTEST_HAS_POSIX_RE	ceres-solver/internal/ceres/gtest/gtest.h	684;"	d
GTEST_HAS_PTHREAD	ceres-solver/internal/ceres/gtest/gtest.h	865;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	803;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	805;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	818;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	820;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	823;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	831;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	838;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	840;"	d
GTEST_HAS_RTTI	ceres-solver/internal/ceres/gtest/gtest.h	846;"	d
GTEST_HAS_SEH	ceres-solver/internal/ceres/gtest/gtest.h	2195;"	d
GTEST_HAS_STD_BEGIN_AND_END_	ceres-solver/internal/ceres/gtest/gtest.h	612;"	d
GTEST_HAS_STD_FORWARD_LIST_	ceres-solver/internal/ceres/gtest/gtest.h	613;"	d
GTEST_HAS_STD_FUNCTION_	ceres-solver/internal/ceres/gtest/gtest.h	614;"	d
GTEST_HAS_STD_INITIALIZER_LIST_	ceres-solver/internal/ceres/gtest/gtest.h	615;"	d
GTEST_HAS_STD_MOVE_	ceres-solver/internal/ceres/gtest/gtest.h	616;"	d
GTEST_HAS_STD_SHARED_PTR_	ceres-solver/internal/ceres/gtest/gtest.h	617;"	d
GTEST_HAS_STD_STRING	ceres-solver/internal/ceres/gtest/gtest.h	760;"	d
GTEST_HAS_STD_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	625;"	d
GTEST_HAS_STD_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	629;"	d
GTEST_HAS_STD_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	634;"	d
GTEST_HAS_STD_TUPLE_	ceres-solver/internal/ceres/gtest/gtest.h	641;"	d
GTEST_HAS_STD_TYPE_TRAITS_	ceres-solver/internal/ceres/gtest/gtest.h	618;"	d
GTEST_HAS_STD_UNIQUE_PTR_	ceres-solver/internal/ceres/gtest/gtest.h	619;"	d
GTEST_HAS_STD_WSTRING	ceres-solver/internal/ceres/gtest/gtest.h	783;"	d
GTEST_HAS_STREAM_REDIRECTION	ceres-solver/internal/ceres/gtest/gtest.h	2064;"	d
GTEST_HAS_TR1_TUPLE	ceres-solver/internal/ceres/gtest/gtest.h	893;"	d
GTEST_HAS_TR1_TUPLE	ceres-solver/internal/ceres/gtest/gtest.h	896;"	d
GTEST_HAS_TYPED_TEST	ceres-solver/internal/ceres/gtest/gtest.h	2093;"	d
GTEST_HAS_TYPED_TEST_P	ceres-solver/internal/ceres/gtest/gtest.h	2094;"	d
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	10219;"	d	file:
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	10220;"	d	file:
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	1591;"	d	file:
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	410;"	d	file:
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	6906;"	d	file:
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	6907;"	d	file:
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	8626;"	d	file:
GTEST_IMPLEMENTATION_	ceres-solver/internal/ceres/gmock_gtest_all.cc	8627;"	d	file:
GTEST_IMPL_CMP_HELPER_	ceres-solver/internal/ceres/gmock_gtest_all.cc	2903;"	d	file:
GTEST_IMPL_CMP_HELPER_	ceres-solver/internal/ceres/gmock_gtest_all.cc	2932;"	d	file:
GTEST_IMPL_CMP_HELPER_	ceres-solver/internal/ceres/gtest/gtest.h	20115;"	d
GTEST_IMPL_CMP_HELPER_	ceres-solver/internal/ceres/gtest/gtest.h	20141;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	ceres-solver/internal/ceres/gtest/gtest.h	10361;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	ceres-solver/internal/ceres/gtest/gtest.h	10375;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	ceres-solver/internal/ceres/gtest/gtest.h	10380;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	ceres-solver/internal/ceres/gtest/gtest.h	10407;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	ceres-solver/internal/ceres/gtest/gtest.h	9022;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	ceres-solver/internal/ceres/gtest/gtest.h	52;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	ceres-solver/internal/ceres/gtest/gtest.h	3908;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	ceres-solver/internal/ceres/gtest/gtest.h	9636;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	ceres-solver/internal/ceres/gtest/gtest.h	20518;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	ceres-solver/internal/ceres/gtest/gtest.h	10167;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	ceres-solver/internal/ceres/gtest/gtest.h	18214;"	d
GTEST_INCLUDE_GTEST_GTEST_SPI_H_	ceres-solver/internal/ceres/gmock_gtest_all.cc	110;"	d	file:
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	ceres-solver/internal/ceres/gtest/gtest.h	18271;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	ceres-solver/internal/ceres/gtest/gtest.h	18447;"	d
GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_	ceres-solver/internal/ceres/gtest/gtest.h	536;"	d
GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_	ceres-solver/internal/ceres/gtest/gtest.h	11099;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	ceres-solver/internal/ceres/gtest/gtest.h	9061;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	ceres-solver/internal/ceres/gtest/gtest.h	4317;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	ceres-solver/internal/ceres/gtest/gtest.h	95;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_	ceres-solver/internal/ceres/gtest/gtest.h	9898;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_	ceres-solver/internal/ceres/gtest/gtest.h	11831;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	ceres-solver/internal/ceres/gtest/gtest.h	9818;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_	ceres-solver/internal/ceres/gtest/gtest.h	412;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	ceres-solver/internal/ceres/gtest/gtest.h	140;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	ceres-solver/internal/ceres/gtest/gtest.h	4152;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_	ceres-solver/internal/ceres/gtest/gtest.h	989;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	ceres-solver/internal/ceres/gtest/gtest.h	4526;"	d
GTEST_INFO	ceres-solver/internal/ceres/gtest/gtest.h	/^  GTEST_INFO,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_INIT_GOOGLE_TEST_NAME_	ceres-solver/internal/ceres/gtest/gtest.h	550;"	d
GTEST_INTENTIONAL_CONST_COND_POP_	ceres-solver/internal/ceres/gtest/gtest.h	2184;"	d
GTEST_INTENTIONAL_CONST_COND_PUSH_	ceres-solver/internal/ceres/gtest/gtest.h	2182;"	d
GTEST_IS_NULL_LITERAL_	ceres-solver/internal/ceres/gtest/gtest.h	7875;"	d
GTEST_IS_NULL_LITERAL_	ceres-solver/internal/ceres/gtest/gtest.h	7877;"	d
GTEST_IS_THREADSAFE	ceres-solver/internal/ceres/gtest/gtest.h	2201;"	d
GTEST_LANG_CXX11	ceres-solver/internal/ceres/gtest/gtest.h	584;"	d
GTEST_LANG_CXX11	ceres-solver/internal/ceres/gtest/gtest.h	586;"	d
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock/gmock.h	/^          GTEST_LOCK_EXCLUDED_(g_gmock_mutex) {$/;"	f	class:testing::internal::FunctionMockerBase
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock/gmock.h	/^        GTEST_LOCK_EXCLUDED_(g_gmock_mutex) {$/;"	f	class:testing::internal::FunctionMockerBase
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^        GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^        GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    GTEST_LOCK_EXCLUDED_(g_gmock_mutex) {$/;"	f	namespace:testing::internal
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex) {$/;"	f	namespace:testing::__anon29
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing::internal
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex) {$/;"	f	class:testing::internal::linked_ptr_internal
GTEST_LOCK_EXCLUDED_	ceres-solver/internal/ceres/gtest/gtest.h	3819;"	d
GTEST_LOG_	ceres-solver/internal/ceres/gtest/gtest.h	2556;"	d
GTEST_MESSAGE_	ceres-solver/internal/ceres/gtest/gtest.h	8851;"	d
GTEST_MESSAGE_AT_	ceres-solver/internal/ceres/gtest/gtest.h	8847;"	d
GTEST_MUST_USE_RESULT_	ceres-solver/internal/ceres/gtest/gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	ceres-solver/internal/ceres/gtest/gtest.h	2169;"	d
GTEST_NAME_	ceres-solver/internal/ceres/gtest/gtest.h	545;"	d
GTEST_NEEDS_IS_POINTER_	ceres-solver/internal/ceres/gtest/gtest.h	3484;"	d
GTEST_NONFATAL_FAILURE_	ceres-solver/internal/ceres/gtest/gtest.h	8857;"	d
GTEST_NO_INLINE_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string CurrentOsStackTraceExceptTop(int skip_count) GTEST_NO_INLINE_;$/;"	m	class:testing::internal::UnitTestImpl	file:
GTEST_NO_INLINE_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void StackLowerThanAddress(const void* ptr, bool* result) GTEST_NO_INLINE_;$/;"	m	namespace:testing::internal	file:
GTEST_NO_INLINE_	ceres-solver/internal/ceres/gtest/gtest.h	2224;"	d
GTEST_OS_AIX	ceres-solver/internal/ceres/gtest/gtest.h	458;"	d
GTEST_OS_CYGWIN	ceres-solver/internal/ceres/gtest/gtest.h	416;"	d
GTEST_OS_FREEBSD	ceres-solver/internal/ceres/gtest/gtest.h	447;"	d
GTEST_OS_HPUX	ceres-solver/internal/ceres/gtest/gtest.h	460;"	d
GTEST_OS_IOS	ceres-solver/internal/ceres/gtest/gtest.h	444;"	d
GTEST_OS_LINUX	ceres-solver/internal/ceres/gtest/gtest.h	449;"	d
GTEST_OS_LINUX_ANDROID	ceres-solver/internal/ceres/gtest/gtest.h	451;"	d
GTEST_OS_MAC	ceres-solver/internal/ceres/gtest/gtest.h	442;"	d
GTEST_OS_NACL	ceres-solver/internal/ceres/gtest/gtest.h	462;"	d
GTEST_OS_OPENBSD	ceres-solver/internal/ceres/gtest/gtest.h	464;"	d
GTEST_OS_QNX	ceres-solver/internal/ceres/gtest/gtest.h	466;"	d
GTEST_OS_SOLARIS	ceres-solver/internal/ceres/gtest/gtest.h	456;"	d
GTEST_OS_SYMBIAN	ceres-solver/internal/ceres/gtest/gtest.h	418;"	d
GTEST_OS_WINDOWS	ceres-solver/internal/ceres/gtest/gtest.h	420;"	d
GTEST_OS_WINDOWS_DESKTOP	ceres-solver/internal/ceres/gtest/gtest.h	428;"	d
GTEST_OS_WINDOWS_DESKTOP	ceres-solver/internal/ceres/gtest/gtest.h	436;"	d
GTEST_OS_WINDOWS_DESKTOP	ceres-solver/internal/ceres/gtest/gtest.h	439;"	d
GTEST_OS_WINDOWS_MINGW	ceres-solver/internal/ceres/gtest/gtest.h	424;"	d
GTEST_OS_WINDOWS_MOBILE	ceres-solver/internal/ceres/gtest/gtest.h	422;"	d
GTEST_OS_WINDOWS_PHONE	ceres-solver/internal/ceres/gtest/gtest.h	430;"	d
GTEST_OS_WINDOWS_RT	ceres-solver/internal/ceres/gtest/gtest.h	432;"	d
GTEST_OS_ZOS	ceres-solver/internal/ceres/gtest/gtest.h	454;"	d
GTEST_PATH_MAX_	ceres-solver/internal/ceres/gmock_gtest_all.cc	8221;"	d	file:
GTEST_PATH_SEP_	ceres-solver/internal/ceres/gtest/gtest.h	3519;"	d
GTEST_PATH_SEP_	ceres-solver/internal/ceres/gtest/gtest.h	3524;"	d
GTEST_PRED1_	ceres-solver/internal/ceres/gtest/gtest.h	20588;"	d
GTEST_PRED2_	ceres-solver/internal/ceres/gtest/gtest.h	20634;"	d
GTEST_PRED3_	ceres-solver/internal/ceres/gtest/gtest.h	20687;"	d
GTEST_PRED4_	ceres-solver/internal/ceres/gtest/gtest.h	20747;"	d
GTEST_PRED5_	ceres-solver/internal/ceres/gtest/gtest.h	20814;"	d
GTEST_PRED_FORMAT1_	ceres-solver/internal/ceres/gtest/gtest.h	20582;"	d
GTEST_PRED_FORMAT2_	ceres-solver/internal/ceres/gtest/gtest.h	20628;"	d
GTEST_PRED_FORMAT3_	ceres-solver/internal/ceres/gtest/gtest.h	20681;"	d
GTEST_PRED_FORMAT4_	ceres-solver/internal/ceres/gtest/gtest.h	20741;"	d
GTEST_PRED_FORMAT5_	ceres-solver/internal/ceres/gtest/gtest.h	20808;"	d
GTEST_PROJECT_URL_	ceres-solver/internal/ceres/gtest/gtest.h	546;"	d
GTEST_REFERENCE_TO_CONST_	ceres-solver/internal/ceres/gtest/gtest.h	8593;"	d
GTEST_REGISTERED_TEST_NAMES_	ceres-solver/internal/ceres/gtest/gtest.h	18626;"	d
GTEST_REMOVE_CONST_	ceres-solver/internal/ceres/gtest/gtest.h	8564;"	d
GTEST_REMOVE_REFERENCE_	ceres-solver/internal/ceres/gtest/gtest.h	8533;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	ceres-solver/internal/ceres/gtest/gtest.h	8568;"	d
GTEST_REPEATER_METHOD_	ceres-solver/internal/ceres/gmock_gtest_all.cc	4742;"	d	file:
GTEST_REPEATER_METHOD_	ceres-solver/internal/ceres/gmock_gtest_all.cc	4773;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	ceres-solver/internal/ceres/gmock_gtest_all.cc	4752;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	ceres-solver/internal/ceres/gmock_gtest_all.cc	4774;"	d	file:
GTEST_SNPRINTF_	ceres-solver/internal/ceres/gtest/gtest.h	3707;"	d
GTEST_SRC_GTEST_INTERNAL_INL_H_	ceres-solver/internal/ceres/gmock_gtest_all.cc	448;"	d	file:
GTEST_STDLIB_CXX11	ceres-solver/internal/ceres/gtest/gtest.h	607;"	d
GTEST_SUCCEED	ceres-solver/internal/ceres/gtest/gtest.h	20435;"	d
GTEST_SUCCESS_	ceres-solver/internal/ceres/gtest/gtest.h	8860;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	ceres-solver/internal/ceres/gtest/gtest.h	8866;"	d
GTEST_TEMPLATE_	ceres-solver/internal/ceres/gtest/gtest.h	6102;"	d
GTEST_TEST	ceres-solver/internal/ceres/gtest/gtest.h	21146;"	d
GTEST_TEST_	ceres-solver/internal/ceres/gtest/gtest.h	8959;"	d
GTEST_TEST_ANY_THROW_	ceres-solver/internal/ceres/gtest/gtest.h	8909;"	d
GTEST_TEST_BOOLEAN_	ceres-solver/internal/ceres/gtest/gtest.h	8931;"	d
GTEST_TEST_CLASS_NAME_	ceres-solver/internal/ceres/gtest/gtest.h	8955;"	d
GTEST_TEST_NO_FATAL_FAILURE_	ceres-solver/internal/ceres/gtest/gtest.h	8940;"	d
GTEST_TEST_NO_THROW_	ceres-solver/internal/ceres/gtest/gtest.h	8895;"	d
GTEST_TEST_THROW_	ceres-solver/internal/ceres/gtest/gtest.h	8869;"	d
GTEST_TUPLE_ELEMENT_	ceres-solver/internal/ceres/gtest/gtest.h	1751;"	d
GTEST_TUPLE_ELEMENT_	ceres-solver/internal/ceres/gtest/gtest.h	1968;"	d
GTEST_TUPLE_NAMESPACE_	ceres-solver/internal/ceres/gtest/gtest.h	940;"	d
GTEST_TUPLE_NAMESPACE_	ceres-solver/internal/ceres/gtest/gtest.h	947;"	d
GTEST_TYPED_TEST_CASE_P_STATE_	ceres-solver/internal/ceres/gtest/gtest.h	18619;"	d
GTEST_TYPE_PARAMS_	ceres-solver/internal/ceres/gtest/gtest.h	18572;"	d
GTEST_UNSUPPORTED_DEATH_TEST_	ceres-solver/internal/ceres/gtest/gtest.h	9323;"	d
GTEST_USES_POSIX_RE	ceres-solver/internal/ceres/gtest/gtest.h	699;"	d
GTEST_USES_SIMPLE_RE	ceres-solver/internal/ceres/gtest/gtest.h	705;"	d
GTEST_USES_SIMPLE_RE	ceres-solver/internal/ceres/gtest/gtest.h	711;"	d
GTEST_USE_OWN_FLAGFILE_FLAG_	ceres-solver/internal/ceres/gtest/gtest.h	3793;"	d
GTEST_USE_OWN_TR1_TUPLE	ceres-solver/internal/ceres/gtest/gtest.h	928;"	d
GTEST_USE_OWN_TR1_TUPLE	ceres-solver/internal/ceres/gtest/gtest.h	930;"	d
GTEST_WARNING	ceres-solver/internal/ceres/gtest/gtest.h	/^  GTEST_WARNING,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	ceres-solver/internal/ceres/gtest/gtest.h	2106;"	d
GTestColor	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum GTestColor {$/;"	g	namespace:testing::internal	file:
GTestFlagSaver	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
GTestFlagSaver	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class GTestFlagSaver {$/;"	c	namespace:testing::internal	file:
GTestIsInitialized	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool GTestIsInitialized() { return GetArgvs().size() > 0; }$/;"	f	namespace:testing::internal
GTestLog	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)$/;"	f	class:testing::internal::GTestLog
GTestLog	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:std::tr1
GTestLogSeverity	ceres-solver/internal/ceres/gtest/gtest.h	/^enum GTestLogSeverity {$/;"	g	namespace:std::tr1
GTestMutexLock	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit GTestMutexLock(Mutex* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTestMutexLock {$/;"	c	namespace:std::tr1
GTestShouldProcessSEH	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {$/;"	f	class:testing::internal::UnitTestOptions
Ge	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::Ge2Matcher Ge() { return internal::Ge2Matcher(); }$/;"	f	namespace:testing
Ge	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::GeMatcher<Rhs> Ge(Rhs x) {$/;"	f	namespace:testing
Ge2Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class Ge2Matcher : public PairMatchBase<Ge2Matcher, AnyGe> {$/;"	c	namespace:testing::internal
GeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit GeMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::GeMatcher
GeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class GeMatcher : public ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe> {$/;"	c	namespace:testing::internal
Generate	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UInt32 Random::Generate(UInt32 range) {$/;"	f	class:testing::internal::Random
GenerateFactoryConditional	ceres-solver/internal/ceres/generate_template_specializations.py	/^def GenerateFactoryConditional(row_block_size, e_block_size, f_block_size):$/;"	f
GenerateQueryFile	ceres-solver/internal/ceres/generate_template_specializations.py	/^def GenerateQueryFile():$/;"	f
GenerateUniqueFileName	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
GeneratorCreationFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T Get() { return BuiltInDefaultValue<T>::Get(); }$/;"	f	class:testing::internal::BuiltInDefaultValue
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T Get() { return T(); }$/;"	f	struct:testing::internal::BuiltInDefaultValueGetter
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T Get() {$/;"	f	class:testing::DefaultValue
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T Get() {$/;"	f	class:testing::internal::BuiltInDefaultValue
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T Get() {$/;"	f	struct:testing::internal::BuiltInDefaultValueGetter
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T& Get() {$/;"	f	class:testing::DefaultValue
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T* Get() { return NULL; }$/;"	f	class:testing::internal::BuiltInDefaultValue
Get	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void Get() {}$/;"	f	class:testing::DefaultValue
Get	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AutoHandle::Handle AutoHandle::Get() const {$/;"	f	class:testing::internal::AutoHandle
GetAbsolutePathToOutputFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string UnitTestOptions::GetAbsolutePathToOutputFile() {$/;"	f	class:testing::internal::UnitTestOptions
GetAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Action<F>& GetAction() const {$/;"	f	class:testing::internal::OnCallSpec
GetAndSplitLine	ceres-solver/examples/nist.cc	/^bool GetAndSplitLine(ifstream& ifs, vector<string>* pieces) {$/;"	f	namespace:ceres::examples
GetAnsiColorCode	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* GetAnsiColorCode(GTestColor color) {$/;"	f	namespace:testing::internal
GetArgvs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const ::std::vector<testing::internal::string>& GetArgvs() {$/;"	f	namespace:testing::internal
GetArgvsForDeathTestChildProcess	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  GetArgvsForDeathTestChildProcess() {$/;"	f	class:testing::internal::ExecDeathTest	file:
GetBestSchurTemplateSpecialization	ceres-solver/internal/ceres/schur_templates.cc	/^void GetBestSchurTemplateSpecialization(int* row_block_size,$/;"	f	namespace:ceres::internal
GetBoolAssertionFailureMessage	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string GetBoolAssertionFailureMessage($/;"	f	namespace:testing::internal
GetCapturedStderr	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string GetCapturedStderr() {$/;"	f	namespace:testing::internal
GetCapturedStdout	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string GetCapturedStdout() {$/;"	f	namespace:testing::internal
GetCapturedStream	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string GetCapturedStream(CapturedStream** captured_stream) {$/;"	f	namespace:testing::internal
GetCapturedString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string GetCapturedString() {$/;"	f	class:testing::internal::CapturedStream
GetCastTypeDescription	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void GetCastTypeDescription(::std::ostream* os) {$/;"	f	class:testing::internal::WhenDynamicCastToMatcherBase
GetCell	ceres-solver/internal/ceres/block_random_access_dense_matrix.cc	/^CellInfo* BlockRandomAccessDenseMatrix::GetCell(const int row_block_id,$/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
GetCell	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^CellInfo* BlockRandomAccessDiagonalMatrix::GetCell(int row_block_id,$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
GetCell	ceres-solver/internal/ceres/block_random_access_sparse_matrix.cc	/^CellInfo* BlockRandomAccessSparseMatrix::GetCell(int row_block_id,$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
GetCodeLocation	ceres-solver/internal/ceres/gtest/gtest.h	/^  const CodeLocation& GetCodeLocation(const std::string& test_name) const {$/;"	f	class:testing::internal::TypedTestCasePState
GetColorAttribute	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^WORD GetColorAttribute(GTestColor color) {$/;"	f	namespace:testing::internal
GetCostFunctionForResidualBlock	ceres-solver/internal/ceres/problem.cc	/^const CostFunction* Problem::GetCostFunctionForResidualBlock($/;"	f	class:ceres::Problem
GetCostFunctionForResidualBlock	ceres-solver/internal/ceres/problem_impl.cc	/^const CostFunction* ProblemImpl::GetCostFunctionForResidualBlock($/;"	f	class:ceres::internal::ProblemImpl
GetCovarianceBlock	ceres-solver/internal/ceres/covariance.cc	/^bool Covariance::GetCovarianceBlock(const double* parameter_block1,$/;"	f	class:ceres::Covariance
GetCovarianceBlockAndCompare	ceres-solver/internal/ceres/covariance_test.cc	/^  void GetCovarianceBlockAndCompare(const double* block1,$/;"	f	class:ceres::internal::CovarianceTest
GetCovarianceBlockInTangentOrAmbientSpace	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::GetCovarianceBlockInTangentOrAmbientSpace($/;"	f	class:ceres::internal::CovarianceImpl
GetCovarianceBlockInTangentSpace	ceres-solver/internal/ceres/covariance.cc	/^bool Covariance::GetCovarianceBlockInTangentSpace($/;"	f	class:ceres::Covariance
GetCovarianceMatrix	ceres-solver/internal/ceres/covariance.cc	/^bool Covariance::GetCovarianceMatrix($/;"	f	class:ceres::Covariance
GetCovarianceMatrixInTangentOrAmbientSpace	ceres-solver/internal/ceres/covariance_impl.cc	/^bool CovarianceImpl::GetCovarianceMatrixInTangentOrAmbientSpace($/;"	f	class:ceres::internal::CovarianceImpl
GetCovarianceMatrixInTangentSpace	ceres-solver/internal/ceres/covariance.cc	/^bool Covariance::GetCovarianceMatrixInTangentSpace($/;"	f	class:ceres::Covariance
GetCurrentDir	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::GetCurrentDir() {$/;"	f	class:testing::internal::FilePath
GetCurrentExecutableName	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath GetCurrentExecutableName() {$/;"	f	namespace:testing::internal
GetCurrentOsStackTraceExceptTop	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string GetCurrentOsStackTraceExceptTop(UnitTest* \/*unit_test*\/,$/;"	f	namespace:testing::internal
GetDefaultFilter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char* GetDefaultFilter() {$/;"	f	namespace:testing
GetDesc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ::std::ostream& GetDesc(::std::ostream& os) {  \/\/ NOLINT$/;"	f	class:testing::internal::PairMatchBase
GetDescriber	ceres-solver/internal/ceres/gmock/gmock.h	/^  const MatcherDescriberInterface* GetDescriber() const {$/;"	f	class:testing::internal::MatcherBase
GetElementOr	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {$/;"	f	namespace:testing::internal
GetEnv	ceres-solver/internal/ceres/gtest/gtest.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:std::tr1::posix
GetEnviron	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline char** GetEnviron() { return environ; }$/;"	f	namespace:testing::internal
GetEnviron	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline char** GetEnviron() {$/;"	f	namespace:testing::internal
GetFailureReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ FailureReporterInterface* GetFailureReporter() {$/;"	f	namespace:testing::internal
GetFileSize	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^size_t GetFileSize(FILE* file) {$/;"	f	namespace:testing::internal
GetGlobalTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UnitTestImpl::GetGlobalTestPartResultReporter() {$/;"	f	class:testing::internal::UnitTestImpl
GetHandle	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual Expectation GetHandle() {$/;"	f	class:testing::internal::TypedExpectation
GetHandleOf	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Expectation UntypedFunctionMockerBase::GetHandleOf(ExpectationBase* exp) {$/;"	f	class:testing::internal::UntypedFunctionMockerBase
GetId	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  size_t GetId(const std::string& str) {$/;"	f	class:testing::internal::edit_distance::__anon18::InternalStrings
GetIgnoreComment	ceres-solver/examples/pgm_image.h	/^bool GetIgnoreComment(std::istream* in, T& t) {$/;"	f	namespace:ceres::examples::__anon40
GetInjectableArgvs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const ::std::vector<testing::internal::string>& GetInjectableArgvs() {$/;"	f	namespace:testing::internal
GetInstance	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UnitTest* UnitTest::GetInstance() {$/;"	f	class:testing::UnitTest
GetLastErrnoDescription	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string GetLastErrnoDescription() {$/;"	f	namespace:testing::internal
GetLossFunctionForResidualBlock	ceres-solver/internal/ceres/problem.cc	/^const LossFunction* Problem::GetLossFunctionForResidualBlock($/;"	f	class:ceres::Problem
GetLossFunctionForResidualBlock	ceres-solver/internal/ceres/problem_impl.cc	/^const LossFunction* ProblemImpl::GetLossFunctionForResidualBlock($/;"	f	class:ceres::internal::ProblemImpl
GetMutableTestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestCase* GetMutableTestCase(int i) {$/;"	f	class:testing::internal::UnitTestImpl
GetMutableTestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestCase* UnitTest::GetMutableTestCase(int i) {$/;"	f	class:testing::UnitTest
GetMutableTestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestInfo* TestCase::GetMutableTestInfo(int i) {$/;"	f	class:testing::TestCase
GetNextRandomSeed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline int GetNextRandomSeed(int seed) {$/;"	f	namespace:testing::internal
GetOrCreateValue	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* GetOrCreateValue() const {$/;"	f	class:std::tr1::ThreadLocal
GetOrderedParameterBlocks	ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc	/^void CompressedRowJacobianWriter::GetOrderedParameterBlocks($/;"	f	class:ceres::internal::CompressedRowJacobianWriter
GetOutputFormat	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string UnitTestOptions::GetOutputFormat() {$/;"	f	class:testing::internal::UnitTestOptions
GetParam	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamType& GetParam() const {$/;"	f	class:testing::WithParamInterface
GetParamNameGen	ceres-solver/internal/ceres/gtest/gtest.h	/^ParamNameGenFunctor GetParamNameGen(ParamNameGenFunctor func) {$/;"	f	namespace:testing::internal
GetParamNameGen	ceres-solver/internal/ceres/gtest/gtest.h	/^typename ParamNameGenFunc<ParamType>::Type *GetParamNameGen() {$/;"	f	namespace:testing::internal
GetParameterBlock	ceres-solver/internal/ceres/problem_test.cc	/^  ParameterBlock* GetParameterBlock(int block) {$/;"	f	struct:ceres::internal::DynamicProblem
GetParameterBlocks	ceres-solver/internal/ceres/problem.cc	/^void Problem::GetParameterBlocks(vector<double*>* parameter_blocks) const {$/;"	f	class:ceres::Problem
GetParameterBlocks	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::GetParameterBlocks(vector<double*>* parameter_blocks) const {$/;"	f	class:ceres::internal::ProblemImpl
GetParameterBlocksForResidualBlock	ceres-solver/internal/ceres/problem.cc	/^void Problem::GetParameterBlocksForResidualBlock($/;"	f	class:ceres::Problem
GetParameterBlocksForResidualBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::GetParameterBlocksForResidualBlock($/;"	f	class:ceres::internal::ProblemImpl
GetParameterization	ceres-solver/internal/ceres/problem.cc	/^const LocalParameterization* Problem::GetParameterization($/;"	f	class:ceres::Problem
GetParameterization	ceres-solver/internal/ceres/problem_impl.cc	/^const LocalParameterization* ProblemImpl::GetParameterization($/;"	f	class:ceres::internal::ProblemImpl
GetPrefixUntilComma	ceres-solver/internal/ceres/gtest/gtest.h	/^inline std::string GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetRandomSeedFromFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline int GetRandomSeedFromFlag(Int32 random_seed_flag) {$/;"	f	namespace:testing::internal
GetRawPointer	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Element* GetRawPointer(Element* p) { return p; }$/;"	f	namespace:testing::internal
GetRawPointer	ceres-solver/internal/ceres/gmock/gmock.h	/^inline const typename Pointer::element_type* GetRawPointer(const Pointer& p) {$/;"	f	namespace:testing::internal
GetReservedAttributesForElement	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::vector<std::string> GetReservedAttributesForElement($/;"	f	namespace:testing
GetResidualBlock	ceres-solver/internal/ceres/problem_test.cc	/^  ResidualBlock* GetResidualBlock(int block) {$/;"	f	struct:ceres::internal::DynamicProblem
GetResidualBlocks	ceres-solver/internal/ceres/problem.cc	/^void Problem::GetResidualBlocks($/;"	f	class:ceres::Problem
GetResidualBlocks	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::GetResidualBlocks($/;"	f	class:ceres::internal::ProblemImpl
GetResidualBlocksForParameterBlock	ceres-solver/internal/ceres/problem.cc	/^void Problem::GetResidualBlocksForParameterBlock($/;"	f	class:ceres::Problem
GetResidualBlocksForParameterBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::GetResidualBlocksForParameterBlock($/;"	f	class:ceres::internal::ProblemImpl
GetSelectedArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^  static SelectedArgs GetSelectedArgs(ArgsTuple args) {$/;"	f	class:testing::internal::ArgsMatcherImpl
GetSelectedFields	ceres-solver/internal/ceres/gmock/gmock.h	/^  static type GetSelectedFields(const Tuple& \/* t *\/) {$/;"	f	class:testing::internal::TupleFields
GetSelectedFields	ceres-solver/internal/ceres/gmock/gmock.h	/^  static type GetSelectedFields(const Tuple& t) {$/;"	f	class:testing::internal::TupleFields
GetState	ceres-solver/internal/ceres/parameter_block.h	/^  void GetState(double *x) const {$/;"	f	class:ceres::internal::ParameterBlock
GetStatusFileDescriptor	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int GetStatusFileDescriptor(unsigned int parent_process_id,$/;"	f	namespace:testing::internal
GetStream	ceres-solver/internal/ceres/gtest/gtest.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:std::tr1::GTestLog
GetString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string Message::GetString() const {$/;"	f	class:testing::Message
GetTestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const TestCase* GetTestCase(int i) const {$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestCase* UnitTestImpl::GetTestCase(const char* test_case_name,$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const TestCase* UnitTest::GetTestCase(int i) const {$/;"	f	class:testing::UnitTest
GetTestCaseName	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual const string& GetTestCaseName() const { return test_case_name_; }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestCasePatternHolder	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
GetTestCaseTypeId	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual TypeId GetTestCaseTypeId() const { return GetTypeId<TestCase>(); }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const TestInfo* TestCase::GetTestInfo(int i) const {$/;"	f	class:testing::TestCase
GetTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {$/;"	f	class:testing::TestPartResultArray
GetTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const TestPartResult& TestResult::GetTestPartResult(int i) const {$/;"	f	class:testing::TestResult
GetTestPartResultReporterForCurrentThread	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UnitTestImpl::GetTestPartResultReporterForCurrentThread() {$/;"	f	class:testing::internal::UnitTestImpl
GetTestProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const TestProperty& TestResult::GetTestProperty(int i) const {$/;"	f	class:testing::TestResult
GetTestTypeId	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TypeId GetTestTypeId() {$/;"	f	namespace:testing::internal
GetThreadCount	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^size_t GetThreadCount() {$/;"	f	namespace:testing::internal
GetThreadLocalsMapLocked	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static ThreadIdToThreadLocals* GetThreadLocalsMapLocked() {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
GetTimeInMillis	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TimeInMillis GetTimeInMillis() {$/;"	f	namespace:testing::internal
GetToName	ceres-solver/internal/ceres/gmock/gmock.h	/^  static string GetToName() {$/;"	f	class:testing::internal::WhenDynamicCastToMatcherBase
GetTypeId	ceres-solver/internal/ceres/gtest/gtest.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	ceres-solver/internal/ceres/gtest/gtest.h	/^std::string GetTypeName() {$/;"	f	namespace:testing::internal
GetUnitTestImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline UnitTestImpl* GetUnitTestImpl() {$/;"	f	namespace:testing::internal
GetValue	ceres-solver/include/ceres/cubic_interpolation.h	/^  EIGEN_STRONG_INLINE void GetValue(const int n, double* f) const {$/;"	f	struct:ceres::Grid1D
GetValue	ceres-solver/include/ceres/cubic_interpolation.h	/^  EIGEN_STRONG_INLINE void GetValue(const int r, const int c, double* f) const {$/;"	f	struct:ceres::Grid2D
GetValueOnCurrentThread	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static ThreadLocalValueHolderBase* GetValueOnCurrentThread($/;"	f	class:testing::internal::ThreadLocalRegistryImpl
GetValueOnCurrentThread	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ThreadLocalValueHolderBase* ThreadLocalRegistry::GetValueOnCurrentThread($/;"	f	class:testing::internal::ThreadLocalRegistry
GetXDeltaIndices	ceres-solver/examples/fields_of_experts.h	/^  const std::vector<int>& GetXDeltaIndices() const {$/;"	f	class:ceres::examples::FieldsOfExperts
GetYDeltaIndices	ceres-solver/examples/fields_of_experts.h	/^  const std::vector<int>& GetYDeltaIndices() const {$/;"	f	class:ceres::examples::FieldsOfExperts
GlobalSize	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  virtual int GlobalSize() const { return kGlobalSize; }$/;"	f	class:ceres::AutoDiffLocalParameterization
GlobalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int GlobalSize() const { return 4; }$/;"	f	class:ceres::EigenQuaternionParameterization
GlobalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int GlobalSize() const { return 4; }$/;"	f	class:ceres::QuaternionParameterization
GlobalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int GlobalSize() const { return global_size_; }$/;"	f	class:ceres::ProductParameterization
GlobalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int GlobalSize() const { return size_; }$/;"	f	class:ceres::HomogeneousVectorParameterization
GlobalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int GlobalSize() const { return size_; }$/;"	f	class:ceres::IdentityParameterization
GlobalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int GlobalSize() const {$/;"	f	class:ceres::SubsetParameterization
GlobalSize	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual int GlobalSize() const { return 2; }$/;"	f	class:ceres::internal::PolynomialParameterization
GlobalSize	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  virtual int GlobalSize() const { return global_J_local.rows(); }$/;"	f	class:ceres::internal::MatrixParameterization
GlobalSize	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual int GlobalSize() const { return 1; }$/;"	f	struct:ceres::internal::TestParameterization
GlobalSize	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual int GlobalSize() const { return 1;}$/;"	f	class:ceres::internal::BadLocalParameterization
GoodCostFunction	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^class GoodCostFunction: public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
GoodTestTerm	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  GoodTestTerm(int arity, int const* dim) : arity_(arity), return_value_(true) {$/;"	f	class:ceres::internal::GoodTestTerm
GoodTestTerm	ceres-solver/internal/ceres/gradient_checker_test.cc	/^class GoodTestTerm : public CostFunction {$/;"	c	namespace:ceres::internal	file:
GoogleTestFailureException	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GoogleTestFailureException::GoogleTestFailureException($/;"	f	class:testing::internal::GoogleTestFailureException
GoogleTestFailureException	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ GoogleTestFailureException : public ::std::runtime_error {$/;"	c	namespace:testing::internal
GoogleTestFailureReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class GoogleTestFailureReporter : public FailureReporterInterface {$/;"	c	namespace:testing::internal	file:
GradientChecker	ceres-solver/include/ceres/gradient_checker.h	/^class CERES_EXPORT GradientChecker {$/;"	c	namespace:ceres
GradientChecker	ceres-solver/internal/ceres/gradient_checker.cc	/^GradientChecker::GradientChecker($/;"	f	class:ceres::GradientChecker
GradientCheckingCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  GradientCheckingCostFunction($/;"	f	class:ceres::internal::__anon8::GradientCheckingCostFunction
GradientCheckingCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^class GradientCheckingCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal::__anon8	file:
GradientCheckingIterationCallback	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^GradientCheckingIterationCallback::GradientCheckingIterationCallback()$/;"	f	class:ceres::internal::GradientCheckingIterationCallback
GradientCheckingIterationCallback	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^class GradientCheckingIterationCallback : public IterationCallback {$/;"	c	namespace:ceres::internal
GradientProblem	ceres-solver/include/ceres/gradient_problem.h	/^class CERES_EXPORT GradientProblem {$/;"	c	namespace:ceres
GradientProblem	ceres-solver/internal/ceres/gradient_problem.cc	/^GradientProblem::GradientProblem(FirstOrderFunction* function)$/;"	f	class:ceres::GradientProblem
GradientProblem	ceres-solver/internal/ceres/gradient_problem.cc	/^GradientProblem::GradientProblem(FirstOrderFunction* function,$/;"	f	class:ceres::GradientProblem
GradientProblemEvaluator	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  explicit GradientProblemEvaluator(const GradientProblem& problem)$/;"	f	class:ceres::internal::GradientProblemEvaluator
GradientProblemEvaluator	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^class GradientProblemEvaluator : public Evaluator {$/;"	c	namespace:ceres::internal
GradientProblemSolver	ceres-solver/include/ceres/gradient_problem_solver.h	/^class CERES_EXPORT GradientProblemSolver {$/;"	c	namespace:ceres
GradientProblemSolverOptionsToSolverOptions	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^Solver::Options GradientProblemSolverOptionsToSolverOptions($/;"	f	namespace:ceres::__anon1
GradientToleranceReached	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::GradientToleranceReached() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
Graph	ceres-solver/internal/ceres/graph.h	/^  Graph() {}$/;"	f	class:ceres::internal::Graph
Graph	ceres-solver/internal/ceres/graph.h	/^class Graph {$/;"	c	namespace:ceres::internal
Grid1D	ceres-solver/include/ceres/cubic_interpolation.h	/^  Grid1D(const T* data, const int begin, const int end)$/;"	f	struct:ceres::Grid1D
Grid1D	ceres-solver/include/ceres/cubic_interpolation.h	/^struct Grid1D {$/;"	s	namespace:ceres
Grid2D	ceres-solver/include/ceres/cubic_interpolation.h	/^  Grid2D(const T* data,$/;"	f	struct:ceres::Grid2D
Grid2D	ceres-solver/include/ceres/cubic_interpolation.h	/^struct Grid2D {$/;"	s	namespace:ceres
GroupId	ceres-solver/include/ceres/ordered_groups.h	/^  int GroupId(const T element) const {$/;"	f	class:ceres::OrderedGroups
GroupSize	ceres-solver/include/ceres/ordered_groups.h	/^  int GroupSize(const int group) const {$/;"	f	class:ceres::OrderedGroups
Gt	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::Gt2Matcher Gt() { return internal::Gt2Matcher(); }$/;"	f	namespace:testing
Gt	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::GtMatcher<Rhs> Gt(Rhs x) {$/;"	f	namespace:testing
Gt2Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class Gt2Matcher : public PairMatchBase<Gt2Matcher, AnyGt> {$/;"	c	namespace:testing::internal
GtMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit GtMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::GtMatcher
GtMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class GtMatcher : public ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt> {$/;"	c	namespace:testing::internal
HESTENES_STIEFEL	ceres-solver/include/ceres/types.h	/^  HESTENES_STIEFEL,$/;"	e	enum:ceres::NonlinearConjugateGradientType
HEX	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
HEX	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
HEX	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
HEX	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
HONOR_SHARDING_PROTOCOL	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    HONOR_SHARDING_PROTOCOL,$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding	file:
HPtimer_reset	src/rplidar_ros/sdk/src/arch/win32/timer.cpp	/^void HPtimer_reset()$/;"	f	namespace:rp::arch
HRESULTFailureHelper	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult HRESULTFailureHelper(const char* expr,$/;"	f	namespace:testing::internal::__anon22
H_	ceres-solver/examples/libmv_homography.cc	/^  Mat3 *H_;$/;"	m	class:__anon41::TerminationCheckingCallback	file:
Handle	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef void* Handle;$/;"	t	class:std::tr1::AutoHandle
HandleExceptionsInMethodIfSupported	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Result HandleExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HandleInvalidStep	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::HandleInvalidStep() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
HandleSehExceptionsInMethodIfSupported	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Result HandleSehExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HandleSuccessfulStep	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::HandleSuccessfulStep() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
HandleUnsuccessfulStep	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^void TrustRegionMinimizer::HandleUnsuccessfulStep() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
HasEdge	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool HasEdge(size_t ilhs, size_t irhs) const {$/;"	f	class:testing::internal::MatchMatrix
HasFailure	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasFatalFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool Test::HasFatalFailure() {$/;"	f	class:testing::Test
HasFatalFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool TestResult::HasFatalFailure() const {$/;"	f	class:testing::TestResult
HasFloatingPoint	ceres-solver/include/ceres/jet.h	/^    HasFloatingPoint = 1,$/;"	e	enum:Eigen::NumTraits::__anon45
HasGoogleTestFlagPrefix	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool HasGoogleTestFlagPrefix(const char* str) {$/;"	f	namespace:testing::internal
HasHeader	devel/include/console/serial_data.h	/^struct HasHeader< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/console/serial_data.h	/^struct HasHeader< ::console::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/ctrl_serial_comm/car_speed.h	/^struct HasHeader< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/ctrl_serial_comm/car_speed.h	/^struct HasHeader< ::ctrl_serial_comm::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/ctrl_serial_comm/serial_data.h	/^struct HasHeader< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/ctrl_serial_comm/serial_data.h	/^struct HasHeader< ::ctrl_serial_comm::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/logical_core/SetGoalRequest.h	/^struct HasHeader< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/logical_core/SetGoalRequest.h	/^struct HasHeader< ::logical_core::SetGoalRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/logical_core/SetGoalResponse.h	/^struct HasHeader< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/logical_core/SetGoalResponse.h	/^struct HasHeader< ::logical_core::SetGoalResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/odometry/car_speed.h	/^struct HasHeader< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/odometry/car_speed.h	/^struct HasHeader< ::odometry::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/serial_comm/car_speed.h	/^struct HasHeader< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/serial_comm/car_speed.h	/^struct HasHeader< ::serial_comm::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/serial_comm/serial_data.h	/^struct HasHeader< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/serial_comm/serial_data.h	/^struct HasHeader< ::serial_comm::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/SetGoalRequest.h	/^struct HasHeader< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/SetGoalRequest.h	/^struct HasHeader< ::vision_unit::SetGoalRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/SetGoalResponse.h	/^struct HasHeader< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/SetGoalResponse.h	/^struct HasHeader< ::vision_unit::SetGoalResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/armor_msg.h	/^struct HasHeader< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/armor_msg.h	/^struct HasHeader< ::vision_unit::armor_msg_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/transformed_scan.h	/^struct HasHeader< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	devel/include/vision_unit/transformed_scan.h	/^struct HasHeader< ::vision_unit::transformed_scan_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasMaxAbsError	ceres-solver/internal/ceres/gmock/gmock.h	/^    bool HasMaxAbsError() const {$/;"	f	class:testing::internal::FloatingEqMatcher::Impl
HasNewFatalFailureHelper	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^HasNewFatalFailureHelper::HasNewFatalFailureHelper()$/;"	f	class:testing::internal::HasNewFatalFailureHelper
HasNewFatalFailureHelper	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
HasNonfatalFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool Test::HasNonfatalFailure() {$/;"	f	class:testing::Test
HasNonfatalFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool TestResult::HasNonfatalFailure() const {$/;"	f	class:testing::TestResult
HasOneFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult HasOneFailure(const char* \/* results_expr *\/,$/;"	f	namespace:testing::internal
HasParameterBlock	ceres-solver/internal/ceres/problem.cc	/^bool Problem::HasParameterBlock(const double* values) const {$/;"	f	class:ceres::Problem
HasParameterBlock	ceres-solver/internal/ceres/problem_impl.cc	/^bool ProblemImpl::HasParameterBlock(const double* parameter_block) const {$/;"	f	class:ceres::internal::ProblemImpl
HasResidualBlock	ceres-solver/internal/ceres/problem_test.cc	/^  bool HasResidualBlock(ResidualBlock* residual_block) {$/;"	f	struct:ceres::internal::DynamicProblem
HasSameFixtureClass	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool Test::HasSameFixtureClass() {$/;"	f	class:testing::Test
HasSubstr	ceres-solver/internal/ceres/gmock/gmock.h	/^    HasSubstr(const internal::string& substring) {$/;"	f	namespace:testing
HasSubstr	ceres-solver/internal/ceres/gmock/gmock.h	/^    HasSubstr(const internal::wstring& substring) {$/;"	f	namespace:testing
HasSubstrMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit HasSubstrMatcher(const StringType& substring)$/;"	f	class:testing::internal::HasSubstrMatcher
HasSubstrMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class HasSubstrMatcher {$/;"	c	namespace:testing::internal
Hash32NumWithSeed	ceres-solver/internal/ceres/collections_port.cc	/^inline uint32 Hash32NumWithSeed(uint32 num, uint32 c) {$/;"	f
Hash64NumWithSeed	ceres-solver/internal/ceres/collections_port.cc	/^inline uint64 Hash64NumWithSeed(uint64 num, uint64 c) {$/;"	f
HashMap	ceres-solver/internal/ceres/collections_port.h	/^struct HashMap : map<K, V> {};$/;"	s	namespace:ceres::internal
HashSet	ceres-solver/internal/ceres/collections_port.h	/^struct HashSet : set<K> {};$/;"	s	namespace:ceres::internal
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
HessianGraph	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^typedef Graph<ParameterBlock*> HessianGraph;$/;"	t	namespace:ceres::internal	file:
HomogeneousVectorParameterization	ceres-solver/include/ceres/local_parameterization.h	/^class CERES_EXPORT HomogeneousVectorParameterization :$/;"	c	namespace:ceres
HomogeneousVectorParameterization	ceres-solver/internal/ceres/local_parameterization.cc	/^HomogeneousVectorParameterization::HomogeneousVectorParameterization(int size)$/;"	f	class:ceres::HomogeneousVectorParameterization
HomogeneousVectorParameterizationHelper	ceres-solver/internal/ceres/local_parameterization_test.cc	/^void HomogeneousVectorParameterizationHelper(const double* x,$/;"	f	namespace:ceres::internal
HomogeneousVectorParameterizationPlus	ceres-solver/internal/ceres/local_parameterization_test.cc	/^struct HomogeneousVectorParameterizationPlus {$/;"	s	namespace:ceres::internal	file:
Homography2DFromCorrespondencesLinearEuc	ceres-solver/examples/libmv_homography.cc	/^bool Homography2DFromCorrespondencesLinearEuc($/;"	f	namespace:__anon41
Homography2DNormalizedParameterization	ceres-solver/examples/libmv_homography.cc	/^class Homography2DNormalizedParameterization {$/;"	c	namespace:__anon41	file:
HomographySymmetricGeometricCostFunctor	ceres-solver/examples/libmv_homography.cc	/^  HomographySymmetricGeometricCostFunctor(const Vec2 &x,$/;"	f	class:__anon41::HomographySymmetricGeometricCostFunctor
HomographySymmetricGeometricCostFunctor	ceres-solver/examples/libmv_homography.cc	/^class HomographySymmetricGeometricCostFunctor {$/;"	c	namespace:__anon41	file:
HouseholderTestHelper	ceres-solver/internal/ceres/householder_vector_test.cc	/^void HouseholderTestHelper(const Vector& x) {$/;"	f	namespace:ceres::internal
HuberLoss	ceres-solver/include/ceres/loss_function.h	/^  explicit HuberLoss(double a) : a_(a), b_(a * a) { }$/;"	f	class:ceres::HuberLoss
HuberLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT HuberLoss : public LossFunction {$/;"	c	namespace:ceres
Hunk	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  Hunk(size_t left_start, size_t right_start)$/;"	f	class:testing::internal::edit_distance::__anon19::Hunk
Hunk	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class Hunk {$/;"	c	namespace:testing::internal::edit_distance::__anon19	file:
IDENTITY	ceres-solver/include/ceres/types.h	/^  IDENTITY,$/;"	e	enum:ceres::PreconditionerType
IDLE_STATE	logical_core/src/logical_core.cpp	/^    IDLE_STATE$/;"	e	enum:CarState	file:
IDLE_STATE	src/logical_core/src/logical_core.h	/^  IDLE_STATE$/;"	e	enum:CarState
ID_VOID_MAIN	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
ID_VOID_MAIN	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IGNORE_SHARDING_PROTOCOL	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    IGNORE_SHARDING_PROTOCOL$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding	file:
INFO	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int INFO    =  0;$/;"	v
INFO	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int INFO    = ::INFO;$/;"	m	namespace:google
INSTANTIATE_TEST_CASE_P	ceres-solver/internal/ceres/gtest/gtest.h	18156;"	d
INSTANTIATE_TYPED_TEST_CASE_P	ceres-solver/internal/ceres/gtest/gtest.h	18663;"	d
INTERCEPT_ALL_THREADS	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    INTERCEPT_ALL_THREADS           \/\/ Intercepts all failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode	file:
INTERCEPT_ONLY_CURRENT_THREAD	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    INTERCEPT_ONLY_CURRENT_THREAD,  \/\/ Intercepts only thread local failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode	file:
IN_PROGRESS	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
IS_DARWIN	build/catkin_generated/installspace/_setup_util.py	/^IS_DARWIN = (system == 'Darwin')$/;"	v
IS_DARWIN	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^IS_DARWIN = (system == 'Darwin')$/;"	v
IS_DARWIN	devel/_setup_util.py	/^IS_DARWIN = (system == 'Darwin')$/;"	v
IS_FAIL	src/rplidar_ros/sdk/include/rptypes.h	114;"	d
IS_OK	src/rplidar_ros/sdk/include/rptypes.h	113;"	d
IS_WINDOWS	build/catkin_generated/installspace/_setup_util.py	/^IS_WINDOWS = (system == 'Windows')$/;"	v
IS_WINDOWS	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^IS_WINDOWS = (system == 'Windows')$/;"	v
IS_WINDOWS	devel/_setup_util.py	/^IS_WINDOWS = (system == 'Windows')$/;"	v
ITERATIVE_SCHUR	ceres-solver/include/ceres/types.h	/^  ITERATIVE_SCHUR,$/;"	e	enum:ceres::LinearSolverType
IdMap	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  typedef std::map<std::string, size_t> IdMap;$/;"	t	class:testing::internal::edit_distance::__anon18::InternalStrings	file:
IdentityParameterization	ceres-solver/include/ceres/local_parameterization.h	/^class CERES_EXPORT IdentityParameterization : public LocalParameterization {$/;"	c	namespace:ceres
IdentityParameterization	ceres-solver/internal/ceres/local_parameterization.cc	/^IdentityParameterization::IdentityParameterization(const int size)$/;"	f	class:ceres::IdentityParameterization
IdentityPlus	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^struct IdentityPlus {$/;"	s	namespace:ceres::internal	file:
IgnoreResult	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::IgnoreResultAction<A> IgnoreResult(const A& an_action) {$/;"	f	namespace:testing
IgnoreResultAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit IgnoreResultAction(const A& action) : action_(action) {}$/;"	f	class:testing::internal::IgnoreResultAction
IgnoreResultAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class IgnoreResultAction {$/;"	c	namespace:testing::internal
IgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  IgnoredValue(const T& \/* ignored *\/) {}  \/\/ NOLINT(runtime\/explicit)$/;"	f	class:testing::internal::IgnoredValue
IgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^class IgnoredValue {$/;"	c	namespace:testing::internal
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    Impl(CallableStorageType callable, const Matcher<ResultType>& matcher)$/;"	f	class:testing::internal::ResultOfMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    Impl(FloatType expected, bool nan_eq_nan, FloatType max_abs_error)$/;"	f	class:testing::internal::FloatingEqMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    Impl(const Action<VoidResult>& action1, const Action<F>& action2)$/;"	f	class:testing::internal::DoBothAction::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    Impl(const Comparator& comparator, const ContainerMatcher& matcher)$/;"	f	class:testing::internal::WhenSortedByMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    Impl(const Tuple2Matcher& tm, const Second& second)$/;"	f	class:testing::internal::BoundSecondMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    Impl(const TupleMatcher& tuple_matcher, const RhsStlContainer& rhs)$/;"	f	class:testing::internal::PointwiseMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(Super& x) : object_(x) {}  \/\/ NOLINT$/;"	f	class:testing::internal::RefMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(T& ref) : ref_(ref) {}  \/\/ NOLINT$/;"	f	class:testing::internal::ReturnRefAction::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const A& action) : action_(action) {}$/;"	f	class:testing::internal::IgnoreResultAction::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const DistanceMatcher& distance_matcher)$/;"	f	class:testing::internal::BeginEndDistanceIsMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const InnerAction& action) : action_(action) {}$/;"	f	class:testing::internal::WithArgsAction::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const InnerMatcher& matcher)$/;"	f	class:testing::internal::PointeeMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const Matcher<U>& source_matcher)$/;"	f	class:testing::internal::MatcherCastImpl::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const Rhs& rhs) : rhs_(rhs) {}$/;"	f	class:testing::internal::ComparisonBase::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const SizeMatcher& size_matcher)$/;"	f	class:testing::internal::SizeIsMatcher::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const T& value) : value_(value) {}  \/\/ NOLINT$/;"	f	class:testing::internal::ReturnRefOfCopyAction::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const linked_ptr<R>& value)$/;"	f	class:testing::internal::ReturnAction::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit Impl(const linked_ptr<R>& wrapper)$/;"	f	class:testing::internal::ReturnAction::Impl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public ActionInterface<F> {$/;"	c	class:testing::internal::DoBothAction
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public ActionInterface<F> {$/;"	c	class:testing::internal::IgnoreResultAction
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public ActionInterface<F> {$/;"	c	class:testing::internal::ReturnAction
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public ActionInterface<F> {$/;"	c	class:testing::internal::ReturnRefAction
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public ActionInterface<F> {$/;"	c	class:testing::internal::ReturnRefOfCopyAction
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public ActionInterface<F> {$/;"	c	class:testing::internal::WithArgsAction
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<Container> {$/;"	c	class:testing::internal::BeginEndDistanceIsMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<Container> {$/;"	c	class:testing::internal::SizeIsMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<Lhs> {$/;"	c	class:testing::internal::ComparisonBase
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<LhsContainer> {$/;"	c	class:testing::internal::PointwiseMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<LhsContainer> {$/;"	c	class:testing::internal::WhenSortedByMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<Pointer> {$/;"	c	class:testing::internal::PointeeMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<Super&> {$/;"	c	class:testing::internal::RefMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<T> {$/;"	c	class:testing::internal::BoundSecondMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<T> {$/;"	c	class:testing::internal::FloatingEqMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<T> {$/;"	c	class:testing::internal::MatcherCastImpl
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<T> {$/;"	c	class:testing::internal::ResultOfMatcher
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl : public MatcherInterface<Tuple> {$/;"	c	class:testing::internal::PairMatchBase
Impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Impl<ByMoveWrapper<R_>, F> : public ActionInterface<F> {$/;"	c	class:testing::internal::ReturnAction
ImplicitCast_	ceres-solver/internal/ceres/gtest/gtest.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:std::tr1
ImplicitSchurComplement	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^ImplicitSchurComplement::ImplicitSchurComplement($/;"	f	class:ceres::internal::ImplicitSchurComplement
ImplicitSchurComplement	ceres-solver/internal/ceres/implicit_schur_complement.h	/^class ImplicitSchurComplement : public LinearOperator {$/;"	c	namespace:ceres::internal
ImplicitSchurComplementTest	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^class ImplicitSchurComplementTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
ImplicitlyConvertible	ceres-solver/internal/ceres/gtest/gtest.h	/^class ImplicitlyConvertible {$/;"	c	namespace:testing::internal
InDeathTestChild	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool InDeathTestChild() {$/;"	f	namespace:testing::internal
InSequence	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& InSequence(const Sequence& s) {$/;"	f	class:testing::internal::TypedExpectation
InSequence	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& InSequence(const Sequence& s1, const Sequence& s2) {$/;"	f	class:testing::internal::TypedExpectation
InSequence	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& InSequence(const Sequence& s1, const Sequence& s2,$/;"	f	class:testing::internal::TypedExpectation
InSequence	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ InSequence {$/;"	c	namespace:testing
InSequence	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^InSequence::InSequence() {$/;"	f	class:testing::InSequence
IncrementCall	ceres-solver/internal/ceres/execution_summary.h	/^  void IncrementCall(const std::string& name) {$/;"	f	class:ceres::internal::ExecutionSummary
IncrementTimeBy	ceres-solver/internal/ceres/execution_summary.h	/^  void IncrementTimeBy(const std::string& name, const double value) {$/;"	f	class:ceres::internal::ExecutionSummary
IndependentSetOrdering	ceres-solver/internal/ceres/graph_algorithms.h	/^int IndependentSetOrdering(const Graph<Vertex>& graph,$/;"	f	namespace:ceres::internal
Infinity	ceres-solver/internal/ceres/gtest/gtest.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
Init	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void Init() {$/;"	f	class:ceres::internal::ManualConstructor
Init	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void Init(const T1& p1) {$/;"	f	class:ceres::internal::ManualConstructor
Init	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2) {$/;"	f	class:ceres::internal::ManualConstructor
Init	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2, const T3& p3) {$/;"	f	class:ceres::internal::ManualConstructor
Init	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2, const T3& p3, const T4& p4) {$/;"	f	class:ceres::internal::ManualConstructor
Init	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2, const T3& p3, const T4& p4,$/;"	f	class:ceres::internal::ManualConstructor
Init	ceres-solver/internal/ceres/block_evaluate_preparer.cc	/^void BlockEvaluatePreparer::Init(int const* const* jacobian_layout,$/;"	f	class:ceres::internal::BlockEvaluatePreparer
Init	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^bool CoordinateDescentMinimizer::Init($/;"	f	class:ceres::internal::CoordinateDescentMinimizer
Init	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void RE::Init(const char* regex) {$/;"	f	class:testing::internal::RE
Init	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ScopedFakeTestPartResultReporter::Init() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
Init	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^void ImplicitSchurComplement::Init(const BlockSparseMatrix& A,$/;"	f	class:ceres::internal::ImplicitSchurComplement
Init	ceres-solver/internal/ceres/line_search.cc	/^void LineSearchFunction::Init(const Vector& position,$/;"	f	class:ceres::internal::LineSearchFunction
Init	ceres-solver/internal/ceres/local_parameterization.cc	/^void ProductParameterization::Init() {$/;"	f	class:ceres::ProductParameterization
Init	ceres-solver/internal/ceres/minimizer.h	/^    void Init(const Solver::Options& options) {$/;"	f	struct:ceres::internal::Minimizer::Options
Init	ceres-solver/internal/ceres/parameter_block.h	/^  void Init(double* user_state,$/;"	f	class:ceres::internal::ParameterBlock
Init	ceres-solver/internal/ceres/program_evaluator.h	/^    void Init(int max_parameters_per_residual_block,$/;"	f	struct:ceres::internal::ProgramEvaluator::EvaluateScratch
Init	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^void SchurEliminator<kRowBlockSize, kEBlockSize, kFBlockSize>::Init($/;"	f	class:ceres::internal::SchurEliminator
Init	ceres-solver/internal/ceres/scratch_evaluate_preparer.cc	/^void ScratchEvaluatePreparer::Init(int max_derivatives_per_residual_block) {$/;"	f	class:ceres::internal::ScratchEvaluatePreparer
Init	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^void TrustRegionMinimizer::Init(const Minimizer::Options& options,$/;"	f	class:ceres::internal::TrustRegionMinimizer
InitCopy	ceres-solver/internal/ceres/gtest/gtest.h	/^  void InitCopy(const Element* array, size_t a_size) {$/;"	f	class:testing::internal::NativeArray
InitDeathTestSubprocessControlInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void InitDeathTestSubprocessControlInfo() {$/;"	f	class:testing::internal::UnitTestImpl
InitEliminator	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^void SchurJacobiPreconditioner::InitEliminator($/;"	f	class:ceres::internal::SchurJacobiPreconditioner
InitEliminator	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::InitEliminator($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
InitGoogleLogging	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^inline void InitGoogleLogging(char *argv) {$/;"	f	namespace:google
InitGoogleMock	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ void InitGoogleMock(int* argc, char** argv) {$/;"	f	namespace:testing
InitGoogleMock	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ void InitGoogleMock(int* argc, wchar_t** argv) {$/;"	f	namespace:testing
InitGoogleMockImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void InitGoogleMockImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
InitGoogleTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void InitGoogleTest(int* argc, char** argv) {$/;"	f	namespace:testing
InitGoogleTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void InitGoogleTest(int* argc, wchar_t** argv) {$/;"	f	namespace:testing
InitGoogleTestImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void InitGoogleTestImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
InitRef	ceres-solver/internal/ceres/gtest/gtest.h	/^  void InitRef(const Element* array, size_t a_size) {$/;"	f	class:testing::internal::NativeArray
InitStorage	ceres-solver/internal/ceres/schur_complement_solver.cc	/^void DenseSchurComplementSolver::InitStorage($/;"	f	class:ceres::internal::DenseSchurComplementSolver
InitStorage	ceres-solver/internal/ceres/schur_complement_solver.cc	/^void SparseSchurComplementSolver::InitStorage($/;"	f	class:ceres::internal::SparseSchurComplementSolver
InitStorage	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::InitStorage($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
InitialiseDenseReference	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  void InitialiseDenseReference() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
InitialiseSparseMatrixReferences	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  void InitialiseSparseMatrixReferences() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
InnerContainer	ceres-solver/include/ceres/internal/fixed_array.h	/^  struct InnerContainer {$/;"	s	class:ceres::internal::FixedArray
InnerFunctionType	ceres-solver/internal/ceres/gmock/gmock.h	/^        k1, k2, k3, k4, k5, k6, k7, k8, k9, k10>::type InnerFunctionType;$/;"	t	class:testing::internal::WithArgsAction::Impl
InnerMatcherArg	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef ::testing::tuple<const LhsValue&, const RhsValue&> InnerMatcherArg;$/;"	t	class:testing::internal::PointwiseMatcher::Impl
InsertEntry	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.cc	/^void DynamicCompressedRowSparseMatrix::InsertEntry(int row,$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrix
InsertIfNotPresent	ceres-solver/internal/ceres/map_util.h	/^bool InsertIfNotPresent($/;"	f	namespace:ceres
InsertNonZeroEntriesFromDenseReference	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  void InsertNonZeroEntriesFromDenseReference() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
InsertOrDie	ceres-solver/internal/ceres/map_util.h	/^void InsertOrDie(Collection* const collection,$/;"	f	namespace:ceres
InstanceValueHolderFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal::InstanceValueHolderFactory
InstanceValueHolderFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^  class InstanceValueHolderFactory : public ValueHolderFactory {$/;"	c	class:std::tr1::ThreadLocal
InstantiationContainer	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::std::vector<InstantiationInfo> InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
InstantiationInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^      InstantiationInfo(const std::string &name_in,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::InstantiationInfo
InstantiationInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct InstantiationInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
Int	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef __int64 Int;$/;"	t	class:std::tr1::TypeWithSize
Int	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef int Int;$/;"	t	class:std::tr1::TypeWithSize
Int32	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:std::tr1
Int32FromEnvOrDie	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {$/;"	f	namespace:testing::internal
Int32FromGTestEnv	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Int32 Int32FromGTestEnv(const char* flag, Int32 default_value) {$/;"	f	namespace:testing::internal
Int64	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:std::tr1
IntMap	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^typedef HashMap<int, int> IntMap;$/;"	t	namespace:ceres::internal	file:
IntPairToLong	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  int64 IntPairToLong(int row, int col) const {$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
IntSet	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^typedef HashSet<int> IntSet;$/;"	t	namespace:ceres::internal	file:
IntToPtr	ceres-solver/internal/ceres/problem_test.cc	/^static double *IntToPtr(int i) {$/;"	f	namespace:ceres::internal
Integer	ceres-solver/internal/ceres/integral_types.h	/^struct Integer {$/;"	s	namespace:ceres::internal
InterceptMode	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  enum InterceptMode {$/;"	g	class:testing::ScopedFakeTestPartResultReporter	file:
InternalAddParameterBlock	ceres-solver/internal/ceres/problem_impl.cc	/^ParameterBlock* ProblemImpl::InternalAddParameterBlock(double* values,$/;"	f	class:ceres::internal::ProblemImpl
InternalDefaultActionSetAt	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::OnCallSpec<F>& InternalDefaultActionSetAt($/;"	f	class:testing::internal::MockSpec
InternalExpectedAt	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::TypedExpectation<F>& InternalExpectedAt($/;"	f	class:testing::internal::MockSpec
InternalRemoveResidualBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::InternalRemoveResidualBlock(ResidualBlock* residual_block) {$/;"	f	class:ceres::internal::ProblemImpl
InternalRunDeathTestFlag	ceres-solver/internal/ceres/gtest/gtest.h	/^  InternalRunDeathTestFlag(const std::string& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	ceres-solver/internal/ceres/gtest/gtest.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
InternalStrings	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class InternalStrings {$/;"	c	namespace:testing::internal::edit_distance::__anon18	file:
InterpolatedCostFunctor	ceres-solver/examples/sampled_function/sampled_function.cc	/^  explicit InterpolatedCostFunctor($/;"	f	struct:InterpolatedCostFunctor
InterpolatedCostFunctor	ceres-solver/examples/sampled_function/sampled_function.cc	/^struct InterpolatedCostFunctor {$/;"	s	file:
InterpolatingPolynomialMinimizingStepSize	ceres-solver/internal/ceres/line_search.cc	/^double LineSearch::InterpolatingPolynomialMinimizingStepSize($/;"	f	class:ceres::internal::LineSearch
Invalid	ceres-solver/internal/ceres/gmock/gmock.h	/^inline T Invalid() {$/;"	f	namespace:testing::internal
InvalidWeight	ceres-solver/internal/ceres/graph.h	/^  static double InvalidWeight() {$/;"	f	class:ceres::internal::WeightedGraph
InvalidateArray	ceres-solver/internal/ceres/array_utils.cc	/^void InvalidateArray(const int size, double* x) {$/;"	f	namespace:ceres::internal
InvalidateEvaluation	ceres-solver/internal/ceres/residual_block_utils.cc	/^void InvalidateEvaluation(const ResidualBlock& block,$/;"	f	namespace:ceres::internal
Invert	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^void BlockRandomAccessDiagonalMatrix::Invert() {$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
InvertPSDMatrix	ceres-solver/internal/ceres/invert_psd_matrix.h	/^typename EigenTypes<kSize, kSize>::Matrix InvertPSDMatrix($/;"	f	namespace:ceres::internal
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke() {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3, A4 a4) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9) {$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  R Invoke(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9,$/;"	f	class:testing::internal::FunctionMocker
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R Invoke(Function function, const ::testing::tuple<>&) {$/;"	f	class:testing::internal::InvokeHelper
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R Invoke(Function function, const ::testing::tuple<A1, A2, A3, A4, A5,$/;"	f	class:testing::internal::InvokeHelper
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R Invoke(Function function, const ::testing::tuple<A1, A2, A3, A4,$/;"	f	class:testing::internal::InvokeHelper
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R Invoke(Function function, const ::testing::tuple<A1, A2, A3,$/;"	f	class:testing::internal::InvokeHelper
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R Invoke(Function function, const ::testing::tuple<A1, A2, A3>& args) {$/;"	f	class:testing::internal::InvokeHelper
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R Invoke(Function function, const ::testing::tuple<A1, A2>& args) {$/;"	f	class:testing::internal::InvokeHelper
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R Invoke(Function function, const ::testing::tuple<A1>& args) {$/;"	f	class:testing::internal::InvokeHelper
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ResType Invoke(ResType(*f)(ArgType), T arg) {$/;"	f	struct:testing::internal::CallableTraits
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ResultType Invoke(Functor f, T arg) { return f(arg); }$/;"	f	struct:testing::internal::CallableTraits
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^PolymorphicAction<internal::InvokeAction<FunctionImpl> > Invoke($/;"	f	namespace:testing
Invoke	ceres-solver/internal/ceres/gmock/gmock.h	/^PolymorphicAction<internal::InvokeMethodAction<Class, MethodPtr> > Invoke($/;"	f	namespace:testing
InvokeAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit InvokeAction(FunctionImpl function_impl)$/;"	f	class:testing::internal::InvokeAction
InvokeAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeAction {$/;"	c	namespace:testing::internal
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f) {$/;"	f	namespace:testing::internal::invoke_argument
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f, A1 a1) {$/;"	f	namespace:testing::internal::invoke_argument
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2) {$/;"	f	namespace:testing::internal::invoke_argument
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3) {$/;"	f	namespace:testing::internal::invoke_argument
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4) {$/;"	f	namespace:testing::internal::invoke_argument
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {$/;"	f	namespace:testing::internal::invoke_argument
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {$/;"	f	namespace:testing::internal::invoke_argument
InvokeArgumentAdl	ceres-solver/internal/ceres/gmock/gmock.h	/^R InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6,$/;"	f	namespace:testing::internal::invoke_argument
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9,$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3, A4, A5, A6, A7> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3, A4, A5, A6> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3, A4, A5> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3, A4> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2, A3> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1, A2> > {$/;"	c	namespace:testing::internal
InvokeHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeHelper<R, ::testing::tuple<A1> > {$/;"	c	namespace:testing::internal
InvokeMethod	ceres-solver/internal/ceres/gmock/gmock.h	/^  static R InvokeMethod(Class* obj_ptr,$/;"	f	class:testing::internal::InvokeHelper
InvokeMethodAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  InvokeMethodAction(Class* obj_ptr, MethodPtr method_ptr)$/;"	f	class:testing::internal::InvokeMethodAction
InvokeMethodAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeMethodAction {$/;"	c	namespace:testing::internal
InvokeMethodWithoutArgsAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  InvokeMethodWithoutArgsAction(Class* obj_ptr, MethodPtr method_ptr)$/;"	f	class:testing::internal::InvokeMethodWithoutArgsAction
InvokeMethodWithoutArgsAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeMethodWithoutArgsAction {$/;"	c	namespace:testing::internal
InvokeWithoutArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^InvokeWithoutArgs(Class* obj_ptr, MethodPtr method_ptr) {$/;"	f	namespace:testing
InvokeWithoutArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^InvokeWithoutArgs(FunctionImpl function_impl) {$/;"	f	namespace:testing
InvokeWithoutArgsAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit InvokeWithoutArgsAction(FunctionImpl function_impl)$/;"	f	class:testing::internal::InvokeWithoutArgsAction
InvokeWithoutArgsAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class InvokeWithoutArgsAction {$/;"	c	namespace:testing::internal
IsAProtocolMessage	ceres-solver/internal/ceres/gtest/gtest.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:std::tr1::posix
IsATTY	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsATTY	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsAbsolutePath	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool FilePath::IsAbsolutePath() const {$/;"	f	class:testing::internal::FilePath
IsAlNum	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:std::tr1
IsAlpha	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:std::tr1
IsArrayValid	ceres-solver/internal/ceres/array_utils.cc	/^bool IsArrayValid(const int size, const double* x) {$/;"	f	namespace:ceres::internal
IsAsciiDigit	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }$/;"	f	namespace:testing::internal
IsAsciiPunct	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsAsciiPunct(char ch) {$/;"	f	namespace:testing::internal
IsAsciiWhiteSpace	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \\f\\n\\r\\t\\v"); }$/;"	f	namespace:testing::internal
IsAsciiWordChar	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsAsciiWordChar(char ch) {$/;"	f	namespace:testing::internal
IsBlockPairInPreconditioner	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^bool VisibilityBasedPreconditioner::IsBlockPairInPreconditioner($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
IsBlockPairOffDiagonal	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^bool VisibilityBasedPreconditioner::IsBlockPairOffDiagonal($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
IsBoundsConstrained	ceres-solver/internal/ceres/program.cc	/^bool Program::IsBoundsConstrained() const {$/;"	f	class:ceres::internal::Program
IsClose	ceres-solver/internal/ceres/is_close.cc	/^bool IsClose(double x, double y, double relative_precision,$/;"	f	namespace:ceres::internal
IsClose	ceres-solver/internal/ceres/rotation_test.cc	/^bool IsClose(const Jet<double, N> &x, const Jet<double, N> &y) {$/;"	f	namespace:ceres::internal
IsClose	ceres-solver/internal/ceres/rotation_test.cc	/^bool IsClose(double x, double y) {$/;"	f	namespace:ceres::internal
IsCloseable	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool AutoHandle::IsCloseable() const {$/;"	f	class:testing::internal::AutoHandle
IsComplex	ceres-solver/include/ceres/jet.h	/^    IsComplex = 0,$/;"	e	enum:Eigen::NumTraits::__anon45
IsConstant	ceres-solver/internal/ceres/parameter_block.h	/^  bool IsConstant() const { return is_constant_; }$/;"	f	class:ceres::internal::ParameterBlock
IsConstrainedApproximateMinimumDegreeOrderingAvailable	ceres-solver/internal/ceres/suitesparse.h	/^  static bool IsConstrainedApproximateMinimumDegreeOrderingAvailable() {$/;"	f	class:ceres::internal::SuiteSparse
IsContainer	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	ceres-solver/internal/ceres/gtest/gtest.h	/^IsContainer IsContainerTest(int \/* dummy *\/,$/;"	f	namespace:testing::internal
IsContainerTest	ceres-solver/internal/ceres/gtest/gtest.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsDenseLinearAlgebraLibraryTypeAvailable	ceres-solver/internal/ceres/types.cc	/^bool IsDenseLinearAlgebraLibraryTypeAvailable($/;"	f	namespace:ceres
IsDigit	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:std::tr1
IsDir	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:std::tr1::posix
IsDirectory	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool FilePath::IsDirectory() const {$/;"	f	class:testing::internal::FilePath
IsDoDefault	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool IsDoDefault() const { return impl_.get() == NULL; }$/;"	f	class:testing::Action
IsEmpty	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool IsEmpty() const { return pathname_.empty(); }$/;"	f	class:testing::internal::FilePath
IsEvaluationValid	ceres-solver/internal/ceres/residual_block_utils.cc	/^bool IsEvaluationValid(const ResidualBlock& block,$/;"	f	namespace:ceres::internal
IsFeasible	ceres-solver/internal/ceres/program.cc	/^bool Program::IsFeasible(string* message) const {$/;"	f	class:ceres::internal::Program
IsFinite	ceres-solver/include/ceres/fpclassify.h	/^inline bool IsFinite  (double x) { return _finite(x) != 0;                   }$/;"	f	namespace:ceres
IsFinite	ceres-solver/include/ceres/jet.h	/^bool IsFinite(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsFixedSize	devel/include/console/serial_data.h	/^struct IsFixedSize< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/console/serial_data.h	/^struct IsFixedSize< ::console::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/ctrl_serial_comm/car_speed.h	/^struct IsFixedSize< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/ctrl_serial_comm/car_speed.h	/^struct IsFixedSize< ::ctrl_serial_comm::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/ctrl_serial_comm/serial_data.h	/^struct IsFixedSize< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/ctrl_serial_comm/serial_data.h	/^struct IsFixedSize< ::ctrl_serial_comm::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/logical_core/SetGoalRequest.h	/^struct IsFixedSize< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/logical_core/SetGoalRequest.h	/^struct IsFixedSize< ::logical_core::SetGoalRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/logical_core/SetGoalResponse.h	/^struct IsFixedSize< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/logical_core/SetGoalResponse.h	/^struct IsFixedSize< ::logical_core::SetGoalResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/odometry/car_speed.h	/^struct IsFixedSize< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/odometry/car_speed.h	/^struct IsFixedSize< ::odometry::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/serial_comm/car_speed.h	/^struct IsFixedSize< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/serial_comm/car_speed.h	/^struct IsFixedSize< ::serial_comm::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/serial_comm/serial_data.h	/^struct IsFixedSize< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/serial_comm/serial_data.h	/^struct IsFixedSize< ::serial_comm::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/SetGoalRequest.h	/^struct IsFixedSize< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/SetGoalRequest.h	/^struct IsFixedSize< ::vision_unit::SetGoalRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/SetGoalResponse.h	/^struct IsFixedSize< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/SetGoalResponse.h	/^struct IsFixedSize< ::vision_unit::SetGoalResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/armor_msg.h	/^struct IsFixedSize< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/armor_msg.h	/^struct IsFixedSize< ::vision_unit::armor_msg_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/transformed_scan.h	/^struct IsFixedSize< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	devel/include/vision_unit/transformed_scan.h	/^struct IsFixedSize< ::vision_unit::transformed_scan_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsHRESULTFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult IsHRESULTFailure(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsHRESULTSuccess	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsInSet	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsInSet(char ch, const char* str) {$/;"	f	namespace:testing::internal
IsInfinite	ceres-solver/include/ceres/fpclassify.h	/^inline bool IsInfinite(double x) { return _finite(x) == 0 && _isnan(x) == 0; }$/;"	f	namespace:ceres
IsInfinite	ceres-solver/include/ceres/jet.h	/^bool IsInfinite(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsInteger	ceres-solver/include/ceres/jet.h	/^    IsInteger = 0,$/;"	e	enum:Eigen::NumTraits::__anon45
IsInterested	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool IsInterested() const { return stream_ != NULL; }$/;"	f	class:testing::MatchResultListener
IsLower	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:std::tr1
IsMember	ceres-solver/include/ceres/ordered_groups.h	/^  bool IsMember(const T element) const {$/;"	f	class:ceres::OrderedGroups
IsMessage	devel/include/console/serial_data.h	/^struct IsMessage< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/console/serial_data.h	/^struct IsMessage< ::console::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/ctrl_serial_comm/car_speed.h	/^struct IsMessage< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/ctrl_serial_comm/car_speed.h	/^struct IsMessage< ::ctrl_serial_comm::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/ctrl_serial_comm/serial_data.h	/^struct IsMessage< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/ctrl_serial_comm/serial_data.h	/^struct IsMessage< ::ctrl_serial_comm::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/logical_core/SetGoalRequest.h	/^struct IsMessage< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/logical_core/SetGoalRequest.h	/^struct IsMessage< ::logical_core::SetGoalRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/logical_core/SetGoalResponse.h	/^struct IsMessage< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/logical_core/SetGoalResponse.h	/^struct IsMessage< ::logical_core::SetGoalResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/odometry/car_speed.h	/^struct IsMessage< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/odometry/car_speed.h	/^struct IsMessage< ::odometry::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/serial_comm/car_speed.h	/^struct IsMessage< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/serial_comm/car_speed.h	/^struct IsMessage< ::serial_comm::car_speed_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/serial_comm/serial_data.h	/^struct IsMessage< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/serial_comm/serial_data.h	/^struct IsMessage< ::serial_comm::serial_data_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/SetGoalRequest.h	/^struct IsMessage< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/SetGoalRequest.h	/^struct IsMessage< ::vision_unit::SetGoalRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/SetGoalResponse.h	/^struct IsMessage< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/SetGoalResponse.h	/^struct IsMessage< ::vision_unit::SetGoalResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/armor_msg.h	/^struct IsMessage< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/armor_msg.h	/^struct IsMessage< ::vision_unit::armor_msg_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/transformed_scan.h	/^struct IsMessage< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	devel/include/vision_unit/transformed_scan.h	/^struct IsMessage< ::vision_unit::transformed_scan_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsNaN	ceres-solver/include/ceres/fpclassify.h	/^inline bool IsNaN     (double x) { return _isnan(x) != 0;                    }$/;"	f	namespace:ceres
IsNaN	ceres-solver/include/ceres/jet.h	/^bool IsNaN(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsNormal	ceres-solver/include/ceres/fpclassify.h	/^inline bool IsNormal  (double x) {  \/\/ NOLINT$/;"	f	namespace:ceres
IsNormal	ceres-solver/include/ceres/jet.h	/^bool IsNormal(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsNormalizableWhitespace	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static bool IsNormalizableWhitespace(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsNotContainer	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNotSubstring	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult IsNotSubstring($/;"	f	namespace:testing
IsNull	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicMatcher<internal::IsNullMatcher > IsNull() {$/;"	f	namespace:testing
IsNullMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class IsNullMatcher {$/;"	c	namespace:testing::internal
IsOrderingValid	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^bool CoordinateDescentMinimizer::IsOrderingValid($/;"	f	class:ceres::internal::CoordinateDescentMinimizer
IsOverSaturatedByCallCount	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool IsOverSaturatedByCallCount(int call_count) const {$/;"	f	class:testing::Cardinality
IsParameterBlockConstant	ceres-solver/internal/ceres/problem.cc	/^bool Problem::IsParameterBlockConstant(double* values) const {$/;"	f	class:ceres::Problem
IsParameterBlockConstant	ceres-solver/internal/ceres/problem_impl.cc	/^bool ProblemImpl::IsParameterBlockConstant(double* values) const {$/;"	f	class:ceres::internal::ProblemImpl
IsParameterBlockSetIndependent	ceres-solver/internal/ceres/program.cc	/^bool Program::IsParameterBlockSetIndependent($/;"	f	class:ceres::internal::Program
IsPathSeparator	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool IsPathSeparator(char c) {$/;"	f	namespace:testing::internal
IsPrintableAscii	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline bool IsPrintableAscii(wchar_t c) {$/;"	f	namespace:testing::internal
IsProgramValid	ceres-solver/internal/ceres/line_search_preprocessor.cc	/^bool IsProgramValid(const Program& program, std::string* error) {$/;"	f	namespace:ceres::internal::__anon14
IsProgramValid	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^bool IsProgramValid(const Program& program, std::string* error) {$/;"	f	namespace:ceres::internal::__anon31
IsReadableTypeName	ceres-solver/internal/ceres/gmock/gmock.h	/^inline bool IsReadableTypeName(const string& type_name) {$/;"	f	namespace:testing::internal
IsRepeat	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }$/;"	f	namespace:testing::internal
IsRootDirectory	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool FilePath::IsRootDirectory() const {$/;"	f	class:testing::internal::FilePath
IsSatisfiedByCallCount	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool IsSatisfiedByCallCount(int call_count) const {$/;"	f	class:testing::Cardinality
IsSatisfiedByCallCount	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual bool IsSatisfiedByCallCount(int call_count) const {$/;"	f	class:testing::__anon28::BetweenCardinalityImpl
IsSaturatedByCallCount	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool IsSaturatedByCallCount(int call_count) const {$/;"	f	class:testing::Cardinality
IsSaturatedByCallCount	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual bool IsSaturatedByCallCount(int call_count) const {$/;"	f	class:testing::__anon28::BetweenCardinalityImpl
IsSchurType	ceres-solver/internal/ceres/types.cc	/^bool IsSchurType(LinearSolverType type) {$/;"	f	namespace:ceres
IsSet	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool IsSet() { return address_ != NULL; }$/;"	f	class:testing::DefaultValue
IsSet	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool IsSet() { return producer_ != NULL; }$/;"	f	class:testing::DefaultValue
IsSigned	ceres-solver/include/ceres/jet.h	/^    IsSigned,$/;"	e	enum:Eigen::NumTraits::__anon45
IsSolutionUsable	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^bool GradientProblemSolver::Summary::IsSolutionUsable() const {$/;"	f	class:ceres::GradientProblemSolver::Summary
IsSolutionUsable	ceres-solver/internal/ceres/solver.cc	/^bool Solver::Summary::IsSolutionUsable() const {$/;"	f	class:ceres::Solver::Summary
IsSolutionUsable	ceres-solver/internal/ceres/solver_utils.h	/^bool IsSolutionUsable(const SummaryType& summary) {$/;"	f	namespace:ceres::internal
IsSpace	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:std::tr1
IsSparseLinearAlgebraLibraryTypeAvailable	ceres-solver/internal/ceres/types.cc	/^bool IsSparseLinearAlgebraLibraryTypeAvailable($/;"	f	namespace:ceres
IsStepSuccessful	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::IsStepSuccessful() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
IsSubstring	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult IsSubstring($/;"	f	namespace:testing
IsSubstringImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult IsSubstringImpl($/;"	f	namespace:testing::__anon21
IsSubstringPred	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsSubstringPred(const StringType& needle,$/;"	f	namespace:testing::__anon21
IsSubstringPred	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsSubstringPred(const char* needle, const char* haystack) {$/;"	f	namespace:testing::__anon21
IsSubstringPred	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {$/;"	f	namespace:testing::__anon21
IsTrue	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsTrue(bool condition) { return condition; }$/;"	f	namespace:testing::internal
IsTrustRegionSolveSuccessful	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^void IsTrustRegionSolveSuccessful(TrustRegionStrategyType strategy_type) {$/;"	f	namespace:ceres::internal
IsUpper	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:std::tr1
IsUtf16SurrogatePair	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {$/;"	f	namespace:testing::internal
IsValid	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^bool GradientProblemSolver::Options::IsValid(std::string* error) const {$/;"	f	class:ceres::GradientProblemSolver::Options
IsValid	ceres-solver/internal/ceres/program.cc	/^bool Program::IsValid() const {$/;"	f	class:ceres::internal::Program
IsValid	ceres-solver/internal/ceres/solver.cc	/^bool Solver::Options::IsValid(string* error) const {$/;"	f	class:ceres::Solver::Options
IsValid	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  bool IsValid() const { return AllTripletsWithinBounds(); }$/;"	f	class:ceres::internal::TripletSparseMatrix
IsValidEscape	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool IsValidEscape(char c) {$/;"	f	namespace:testing::internal
IsValidParamName	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool IsValidParamName(const std::string& name) {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
IsValidXmlCharacter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static bool IsValidXmlCharacter(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsXDigit	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:std::tr1
IsXDigit	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool IsXDigit(wchar_t ch) {$/;"	f	namespace:std::tr1
IsZeroOrInfinity	ceres-solver/internal/ceres/conjugate_gradients_solver.cc	/^bool IsZeroOrInfinity(double x) {$/;"	f	namespace:ceres::internal::__anon32
IterateOverTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  struct IterateOverTuple {$/;"	s	class:testing::internal::TransformTupleValuesHelper
IterateOverTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  struct IterateOverTuple<Tup, 0> {$/;"	s	class:testing::internal::TransformTupleValuesHelper
IterationCallback	ceres-solver/include/ceres/iteration_callback.h	/^class CERES_EXPORT IterationCallback {$/;"	c	namespace:ceres
IterationSummary	ceres-solver/include/ceres/iteration_callback.h	/^  IterationSummary()$/;"	f	struct:ceres::IterationSummary
IterationSummary	ceres-solver/include/ceres/iteration_callback.h	/^struct CERES_EXPORT IterationSummary {$/;"	s	namespace:ceres
IterationZero	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::IterationZero() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
IterativeSchurComplementSolver	ceres-solver/internal/ceres/iterative_schur_complement_solver.cc	/^IterativeSchurComplementSolver::IterativeSchurComplementSolver($/;"	f	class:ceres::internal::IterativeSchurComplementSolver
IterativeSchurComplementSolver	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	/^class IterativeSchurComplementSolver : public BlockSparseMatrixSolver {$/;"	c	namespace:ceres::internal
IterativeSchurComplementSolverTest	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^class IterativeSchurComplementSolverTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator10
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator2
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator3
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator4
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator5
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator6
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator7
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator8
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator9
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorTraits	ceres-solver/internal/ceres/gtest/gtest.h	/^struct IteratorTraits {$/;"	s	namespace:std::tr1
IteratorTraits	ceres-solver/internal/ceres/gtest/gtest.h	/^struct IteratorTraits<T*> {$/;"	s	namespace:std::tr1
IteratorTraits	ceres-solver/internal/ceres/gtest/gtest.h	/^struct IteratorTraits<const T*> {$/;"	s	namespace:std::tr1
J	ceres-solver/internal/ceres/jet_test.cc	/^typedef Jet<double, 2> J;$/;"	t	namespace:ceres::internal	file:
J3	ceres-solver/internal/ceres/rotation_test.cc	/^typedef Jet<double, 3> J3;$/;"	t	namespace:ceres::internal	file:
J4	ceres-solver/internal/ceres/rotation_test.cc	/^typedef Jet<double, 4> J4;$/;"	t	namespace:ceres::internal	file:
JACOBI	ceres-solver/include/ceres/types.h	/^  JACOBI,$/;"	e	enum:ceres::PreconditionerType
Jet	ceres-solver/include/ceres/jet.h	/^  EIGEN_STRONG_INLINE Jet(const T& a, const Eigen::DenseBase<Derived> &v)$/;"	f	struct:ceres::Jet
Jet	ceres-solver/include/ceres/jet.h	/^  Jet() : a() {$/;"	f	struct:ceres::Jet
Jet	ceres-solver/include/ceres/jet.h	/^  Jet(const T& value, int k) {$/;"	f	struct:ceres::Jet
Jet	ceres-solver/include/ceres/jet.h	/^  explicit Jet(const T& value) {$/;"	f	struct:ceres::Jet
Jet	ceres-solver/include/ceres/jet.h	/^struct Jet {$/;"	s	namespace:ceres
Join	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ThreadWithParamBase::Join() {$/;"	f	class:testing::internal::ThreadWithParamBase
Join	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Join() {$/;"	f	class:std::tr1::ThreadWithParam
JoinAsTuple	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ string JoinAsTuple(const Strings& fields) {$/;"	f	namespace:testing::internal
JoinPath	ceres-solver/examples/nist.cc	/^string JoinPath(const string& dirname, const string& basename) {$/;"	f	namespace:ceres::examples
JoinPath	ceres-solver/internal/ceres/file.cc	/^string JoinPath(const string& dirname, const string& basename) {$/;"	f	namespace:ceres::internal
Key	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::KeyMatcher<M> Key(M inner_matcher) {$/;"	f	namespace:testing
KeyMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit KeyMatcher(M m) : matcher_for_key_(m) {}$/;"	f	class:testing::internal::KeyMatcher
KeyMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class KeyMatcher {$/;"	c	namespace:testing::internal
KeyMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit KeyMatcherImpl(InnerMatcher inner_matcher)$/;"	f	class:testing::internal::KeyMatcherImpl
KeyMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class KeyMatcherImpl : public MatcherInterface<PairType> {$/;"	c	namespace:testing::internal
KeyType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename RawPairType::first_type KeyType;$/;"	t	class:testing::internal::KeyMatcherImpl
KilledBySignal	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^KilledBySignal::KilledBySignal(int signum) : signum_(signum) {$/;"	f	class:testing::KilledBySignal
KilledBySignal	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
KindOf	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct KindOf {$/;"	s	namespace:testing::internal
LABELER_H	src/vision_unit/include/vision_unit/detect_factory/labeler.h	2;"	d
LAPACK	ceres-solver/include/ceres/types.h	/^  LAPACK$/;"	e	enum:ceres::DenseLinearAlgebraLibraryType
LAPACK	ceres-solver/internal/ceres/lapack.h	/^class LAPACK {$/;"	c	namespace:ceres::internal
LBFGS	ceres-solver/include/ceres/types.h	/^  LBFGS,$/;"	e	enum:ceres::LineSearchDirectionType
LBFGS	ceres-solver/internal/ceres/line_search_direction.cc	/^  LBFGS(const int num_parameters,$/;"	f	class:ceres::internal::LBFGS
LBFGS	ceres-solver/internal/ceres/line_search_direction.cc	/^class LBFGS : public LineSearchDirection {$/;"	c	namespace:ceres::internal	file:
LEGACY_SAMPLE_DURATION	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^        LEGACY_SAMPLE_DURATION = 476,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriverSerialImpl::__anon54
LEVENBERG_MARQUARDT	ceres-solver/include/ceres/types.h	/^  LEVENBERG_MARQUARDT,$/;"	e	enum:ceres::TrustRegionStrategyType
LG	ceres-solver/internal/ceres/miniglog/glog/logging.h	307;"	d
LG	ceres-solver/internal/ceres/miniglog/glog/logging.h	312;"	d
LINEAR_SOLVER_FAILURE	ceres-solver/internal/ceres/linear_solver.h	/^  LINEAR_SOLVER_FAILURE,$/;"	e	enum:ceres::internal::LinearSolverTerminationType
LINEAR_SOLVER_FATAL_ERROR	ceres-solver/internal/ceres/linear_solver.h	/^  LINEAR_SOLVER_FATAL_ERROR$/;"	e	enum:ceres::internal::LinearSolverTerminationType
LINEAR_SOLVER_NO_CONVERGENCE	ceres-solver/internal/ceres/linear_solver.h	/^  LINEAR_SOLVER_NO_CONVERGENCE,$/;"	e	enum:ceres::internal::LinearSolverTerminationType
LINEAR_SOLVER_SUCCESS	ceres-solver/internal/ceres/linear_solver.h	/^  LINEAR_SOLVER_SUCCESS,$/;"	e	enum:ceres::internal::LinearSolverTerminationType
LINE_SEARCH	ceres-solver/include/ceres/types.h	/^  LINE_SEARCH,$/;"	e	enum:ceres::MinimizerType
LIVED	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
LOCAL_CFLAGS	ceres-solver/jni/Android.mk	/^LOCAL_CFLAGS := $(CERES_EXTRA_DEFINES) \\$/;"	m
LOCAL_CPP_EXTENSION	ceres-solver/jni/Android.mk	/^LOCAL_CPP_EXTENSION := .cc$/;"	m
LOCAL_C_INCLUDES	ceres-solver/jni/Android.mk	/^LOCAL_C_INCLUDES := $(CERES_INCLUDE_PATHS)$/;"	m
LOCAL_MODULE	ceres-solver/jni/Android.mk	/^LOCAL_MODULE := ceres$/;"	m
LOCAL_PATH	ceres-solver/jni/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	ceres-solver/jni/Android.mk	/^LOCAL_SRC_FILES := $(CERES_SRC_PATH)\/array_utils.cc \\$/;"	m
LOCK_FAILED	src/rplidar_ros/sdk/src/hal/locker.h	/^        LOCK_FAILED = 0$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LOCK_OK	src/rplidar_ros/sdk/src/hal/locker.h	/^        LOCK_OK = 1,$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LOCK_STATUS	src/rplidar_ros/sdk/src/hal/locker.h	/^    enum LOCK_STATUS$/;"	g	class:rp::hal::Locker
LOCK_TIMEOUT	src/rplidar_ros/sdk/src/hal/locker.h	/^        LOCK_TIMEOUT = -1,$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LOG	ceres-solver/internal/ceres/miniglog/glog/logging.h	305;"	d
LOG	ceres-solver/internal/ceres/miniglog/glog/logging.h	310;"	d
LOGICALCORE_H	src/logical_core/src/logical_core.h	2;"	d
LOGICAL_CORE_MESSAGE_SETGOALREQUEST_H	devel/include/logical_core/SetGoalRequest.h	6;"	d
LOGICAL_CORE_MESSAGE_SETGOALRESPONSE_H	devel/include/logical_core/SetGoalResponse.h	6;"	d
LOGICAL_CORE_MESSAGE_SETGOAL_H	devel/include/logical_core/SetGoal.h	6;"	d
LOG_IF	ceres-solver/internal/ceres/miniglog/glog/logging.h	294;"	d
LOG_IF_FALSE	ceres-solver/internal/ceres/miniglog/glog/logging.h	299;"	d
LOWER_TRIANGULAR	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    LOWER_TRIANGULAR,$/;"	e	enum:ceres::internal::CompressedRowSparseMatrix::StorageType
LargeScaleCovarianceTest	ceres-solver/internal/ceres/covariance_test.cc	/^class LargeScaleCovarianceTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
LastMessage	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* DeathTest::LastMessage() {$/;"	f	class:testing::internal::DeathTest
LayoutType	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  typedef HashMap<long int, CellInfo* > LayoutType;$/;"	t	class:ceres::internal::BlockRandomAccessSparseMatrix
Le	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::Le2Matcher Le() { return internal::Le2Matcher(); }$/;"	f	namespace:testing
Le	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::LeMatcher<Rhs> Le(Rhs x) {$/;"	f	namespace:testing
Le2Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class Le2Matcher : public PairMatchBase<Le2Matcher, AnyLe> {$/;"	c	namespace:testing::internal
LeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit LeMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::LeMatcher
LeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class LeMatcher : public ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe> {$/;"	c	namespace:testing::internal
LeftMultiply	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::BlockSparseMatrix
LeftMultiply	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  virtual void LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::CgnrLinearOperator
LeftMultiply	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
LeftMultiply	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::DenseSparseMatrix
LeftMultiply	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  virtual void LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::ImplicitSchurComplement
LeftMultiply	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  virtual void LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::LowRankInverseHessian
LeftMultiply	ceres-solver/internal/ceres/preconditioner.h	/^  virtual void LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::Preconditioner
LeftMultiply	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual void LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessDiagonalMatrixAdapter
LeftMultiply	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual void LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessSparseMatrixAdapter
LeftMultiply	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::LeftMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::TripletSparseMatrix
LeftMultiply	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  virtual void LeftMultiply(const double* x, double* y) const {}$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
LeftMultiplyE	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^LeftMultiplyE(const double* x, double* y) const {$/;"	f	class:ceres::internal::PartitionedMatrixView
LeftMultiplyF	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^LeftMultiplyF(const double* x, double* y) const {$/;"	f	class:ceres::internal::PartitionedMatrixView
LeftRight	src/serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
Less	ceres-solver/internal/ceres/gmock/gmock.h	/^  class Less {$/;"	c	class:testing::Expectation
LessComparator	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LessComparator {$/;"	s	namespace:testing::internal
LevenbergMarquardtStrategy	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^LevenbergMarquardtStrategy::LevenbergMarquardtStrategy($/;"	f	class:ceres::internal::LevenbergMarquardtStrategy
LevenbergMarquardtStrategy	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^class LevenbergMarquardtStrategy : public TrustRegionStrategy {$/;"	c	namespace:ceres::internal
LexicographicallyOrderResidualBlocks	ceres-solver/internal/ceres/reorder_program.cc	/^bool LexicographicallyOrderResidualBlocks($/;"	f	namespace:ceres::internal
LhsSize	ceres-solver/internal/ceres/gmock/gmock.h	/^  size_t LhsSize() const { return num_elements_; }$/;"	f	class:testing::internal::MatchMatrix
LhsStlContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename LhsView::type LhsStlContainer;$/;"	t	class:testing::internal::PointwiseMatcher::Impl
LhsStlContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename LhsView::type LhsStlContainer;$/;"	t	class:testing::internal::WhenSortedByMatcher::Impl
LhsStlContainerReference	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename LhsView::const_reference LhsStlContainerReference;$/;"	t	class:testing::internal::PointwiseMatcher::Impl
LhsStlContainerReference	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename LhsView::const_reference LhsStlContainerReference;$/;"	t	class:testing::internal::WhenSortedByMatcher::Impl
LhsValue	ceres-solver/internal/ceres/gmock/gmock.h	/^        typename LhsStlContainer::value_type>::type LhsValue;$/;"	t	class:testing::internal::WhenSortedByMatcher::Impl
LhsValue	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename LhsStlContainer::value_type LhsValue;$/;"	t	class:testing::internal::PointwiseMatcher::Impl
LhsView	ceres-solver/internal/ceres/gmock/gmock.h	/^         GTEST_REMOVE_REFERENCE_AND_CONST_(LhsContainer)> LhsView;$/;"	t	class:testing::internal::PointwiseMatcher::Impl
LhsView	ceres-solver/internal/ceres/gmock/gmock.h	/^         GTEST_REMOVE_REFERENCE_AND_CONST_(LhsContainer)> LhsView;$/;"	t	class:testing::internal::WhenSortedByMatcher::Impl
Lidar2Camera	src/vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^class Lidar2Camera$/;"	c
Lidar2Camera	src/vision_unit/src/vision_lidar_fusion/lidar2camera_node.cpp	/^Lidar2Camera::Lidar2Camera()$/;"	f	class:Lidar2Camera
LineSearch	ceres-solver/internal/ceres/line_search.cc	/^LineSearch::LineSearch(const LineSearch::Options& options)$/;"	f	class:ceres::internal::LineSearch
LineSearch	ceres-solver/internal/ceres/line_search.h	/^class LineSearch {$/;"	c	namespace:ceres::internal
LineSearchDirection	ceres-solver/internal/ceres/line_search_direction.h	/^class LineSearchDirection {$/;"	c	namespace:ceres::internal
LineSearchDirectionType	ceres-solver/include/ceres/types.h	/^enum LineSearchDirectionType {$/;"	g	namespace:ceres
LineSearchDirectionTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* LineSearchDirectionTypeToString(LineSearchDirectionType type) {$/;"	f	namespace:ceres
LineSearchFunction	ceres-solver/internal/ceres/line_search.cc	/^LineSearchFunction::LineSearchFunction(Evaluator* evaluator)$/;"	f	class:ceres::internal::LineSearchFunction
LineSearchFunction	ceres-solver/internal/ceres/line_search.h	/^class LineSearchFunction {$/;"	c	namespace:ceres::internal
LineSearchInterpolationType	ceres-solver/include/ceres/types.h	/^enum LineSearchInterpolationType {$/;"	g	namespace:ceres
LineSearchInterpolationTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* LineSearchInterpolationTypeToString($/;"	f	namespace:ceres
LineSearchMinimizer	ceres-solver/internal/ceres/line_search_minimizer.h	/^class LineSearchMinimizer : public Minimizer {$/;"	c	namespace:ceres::internal
LineSearchOptionsAreValid	ceres-solver/internal/ceres/solver.cc	/^bool LineSearchOptionsAreValid(const Solver::Options& options, string* error) {$/;"	f	namespace:ceres::__anon15
LineSearchPreprocessor	ceres-solver/internal/ceres/line_search_preprocessor.h	/^class LineSearchPreprocessor : public Preprocessor {$/;"	c	namespace:ceres::internal
LineSearchType	ceres-solver/include/ceres/types.h	/^enum LineSearchType {$/;"	g	namespace:ceres
LineSearchTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* LineSearchTypeToString(LineSearchType type) {$/;"	f	namespace:ceres
LinearCostFunction	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^  LinearCostFunction(double a, double b) : a_(a), b_(b) {$/;"	f	class:ceres::internal::LinearCostFunction
LinearCostFunction	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^class LinearCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal	file:
LinearCostFunction	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  explicit LinearCostFunction(const Vector& residuals_offset)$/;"	f	class:ceres::internal::LinearCostFunction
LinearCostFunction	ceres-solver/internal/ceres/gradient_checker_test.cc	/^class LinearCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal	file:
LinearIndex	ceres-solver/examples/pgm_image.h	/^int PGMImage<Real>::LinearIndex(int x, int y) const {$/;"	f	class:ceres::examples::PGMImage
LinearLeastSquaresProblem	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^  LinearLeastSquaresProblem()$/;"	f	struct:ceres::internal::LinearLeastSquaresProblem
LinearLeastSquaresProblem	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^struct LinearLeastSquaresProblem {$/;"	s	namespace:ceres::internal
LinearLeastSquaresProblem0	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^LinearLeastSquaresProblem* LinearLeastSquaresProblem0() {$/;"	f	namespace:ceres::internal
LinearLeastSquaresProblem1	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^LinearLeastSquaresProblem* LinearLeastSquaresProblem1() {$/;"	f	namespace:ceres::internal
LinearLeastSquaresProblem2	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^LinearLeastSquaresProblem* LinearLeastSquaresProblem2() {$/;"	f	namespace:ceres::internal
LinearLeastSquaresProblem3	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^LinearLeastSquaresProblem* LinearLeastSquaresProblem3() {$/;"	f	namespace:ceres::internal
LinearLeastSquaresProblem4	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^LinearLeastSquaresProblem* LinearLeastSquaresProblem4() {$/;"	f	namespace:ceres::internal
LinearOperator	ceres-solver/internal/ceres/linear_operator.h	/^class LinearOperator {$/;"	c	namespace:ceres::internal
LinearSolver	ceres-solver/internal/ceres/linear_solver.h	/^class LinearSolver {$/;"	c	namespace:ceres::internal
LinearSolverAndEvaluatorCreationTest	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^class LinearSolverAndEvaluatorCreationTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
LinearSolverForZeroEBlocks	ceres-solver/internal/ceres/linear_solver.cc	/^LinearSolverType LinearSolver::LinearSolverForZeroEBlocks($/;"	f	class:ceres::internal::LinearSolver
LinearSolverTerminationType	ceres-solver/internal/ceres/linear_solver.h	/^enum LinearSolverTerminationType {$/;"	g	namespace:ceres::internal
LinearSolverType	ceres-solver/include/ceres/types.h	/^enum LinearSolverType {$/;"	g	namespace:ceres
LinearSolverTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* LinearSolverTypeToString(LinearSolverType type) {$/;"	f	namespace:ceres
LinkedPtrLessThan	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LinkedPtrLessThan {$/;"	s	namespace:testing::internal
ListTestsMatchingFilter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::ListTestsMatchingFilter() {$/;"	f	class:testing::internal::UnitTestImpl
ListType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::std::pair<Head, typename MatcherListTail::ListType> ListType;$/;"	t	struct:testing::internal::MatcherList
ListType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::std::pair<Matcher1, Matcher2> ListType;$/;"	t	struct:testing::internal::MatcherList
Literal	ceres-solver/include/ceres/jet.h	/^  typedef ceres::Jet<T, N> Literal;$/;"	t	struct:Eigen::NumTraits
LoadFile	ceres-solver/examples/simple_bundle_adjuster.cc	/^  bool LoadFile(const char* filename) {$/;"	f	class:BALProblem
LoadFlagsFromFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void LoadFlagsFromFile(const std::string& path) {$/;"	f	namespace:testing::internal
LoadFromFile	ceres-solver/examples/fields_of_experts.cc	/^bool FieldsOfExperts::LoadFromFile(const std::string& filename) {$/;"	f	class:ceres::examples::FieldsOfExperts
LocalParameterization	ceres-solver/include/ceres/local_parameterization.h	/^class CERES_EXPORT LocalParameterization {$/;"	c	namespace:ceres
LocalParameterizationJacobian	ceres-solver/internal/ceres/parameter_block.h	/^  const double* LocalParameterizationJacobian() const {$/;"	f	class:ceres::internal::ParameterBlock
LocalSize	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  virtual int LocalSize() const { return kLocalSize; }$/;"	f	class:ceres::AutoDiffLocalParameterization
LocalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int LocalSize() const { return 3; }$/;"	f	class:ceres::EigenQuaternionParameterization
LocalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int LocalSize() const { return 3; }$/;"	f	class:ceres::QuaternionParameterization
LocalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int LocalSize() const { return local_size_; }$/;"	f	class:ceres::ProductParameterization
LocalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int LocalSize() const { return local_size_; }$/;"	f	class:ceres::SubsetParameterization
LocalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int LocalSize() const { return size_ - 1; }$/;"	f	class:ceres::HomogeneousVectorParameterization
LocalSize	ceres-solver/include/ceres/local_parameterization.h	/^  virtual int LocalSize() const { return size_; }$/;"	f	class:ceres::IdentityParameterization
LocalSize	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual int LocalSize() const { return 1; }$/;"	f	class:ceres::internal::PolynomialParameterization
LocalSize	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  virtual int LocalSize() const { return global_J_local.cols(); }$/;"	f	class:ceres::internal::MatrixParameterization
LocalSize	ceres-solver/internal/ceres/parameter_block.h	/^  int LocalSize() const {$/;"	f	class:ceres::internal::ParameterBlock
LocalSize	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual int LocalSize()  const { return 1;}$/;"	f	class:ceres::internal::BadLocalParameterization
LocalSize	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual int LocalSize() const { return 1; }$/;"	f	struct:ceres::internal::TestParameterization
LocallyParameterizedCostFunction	ceres-solver/internal/ceres/residual_block_test.cc	/^class LocallyParameterizedCostFunction: public SizedCostFunction<3, 2, 3, 4> {$/;"	c	namespace:ceres::internal	file:
Lock	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Mutex::Lock() {$/;"	f	class:testing::internal::Mutex
Lock	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Lock() {$/;"	f	class:std::tr1::MutexBase
Lock	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Lock() {}$/;"	f	class:std::tr1::Mutex
Lock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Lock()         { CERES_SAFE_PTHREAD(pthread_mutex_lock); }$/;"	f	class:ceres::internal::Mutex
Lock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Lock()         { CERES_SAFE_PTHREAD(pthread_rwlock_wrlock); }$/;"	f	class:ceres::internal::Mutex
Lock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Lock()         { assert(--mutex_ == -1); }$/;"	f	class:ceres::internal::Mutex
Lock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Lock()         { if (is_safe_) EnterCriticalSection(&mutex_); }$/;"	f	class:ceres::internal::Mutex
Locker	src/rplidar_ros/sdk/src/hal/locker.h	/^    Locker(){$/;"	f	class:rp::hal::Locker
Locker	src/rplidar_ros/sdk/src/hal/locker.h	/^class Locker$/;"	c	namespace:rp::hal
Log	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ void Log(LogSeverity severity,$/;"	f	namespace:testing::internal
LogElementMatcherPairVec	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void LogElementMatcherPairVec(const ElementMatcherPairs& pairs,$/;"	f	namespace:testing::internal
LogIsVisible	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ bool LogIsVisible(LogSeverity severity) {$/;"	f	namespace:testing::internal
LogMessageFatal	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^void LogMessageFatal(const char *file, int line, const T &message) {$/;"	f
LogSeverity	ceres-solver/internal/ceres/gmock/gmock.h	/^enum LogSeverity {$/;"	g	namespace:testing::internal
LogSeverity	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^typedef int LogSeverity;$/;"	t	namespace:google
LogSink	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^class CERES_EXPORT LogSink {$/;"	c	namespace:google
LogToSinks	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  void LogToSinks(int severity) {$/;"	f	class:MessageLogger
LogToStderr	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void LogToStderr() {}$/;"	f	namespace:std::tr1
LogWithLocation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ void LogWithLocation(testing::internal::LogSeverity severity,$/;"	f	namespace:testing::internal
LoggerVoidify	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  LoggerVoidify() { }$/;"	f	class:LoggerVoidify
LoggerVoidify	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^class CERES_EXPORT LoggerVoidify {$/;"	c
LoggingCallback	ceres-solver/internal/ceres/callbacks.cc	/^LoggingCallback::LoggingCallback(const MinimizerType minimizer_type,$/;"	f	class:ceres::internal::LoggingCallback
LoggingCallback	ceres-solver/internal/ceres/callbacks.h	/^class LoggingCallback : public IterationCallback {$/;"	c	namespace:ceres::internal
LoggingType	ceres-solver/include/ceres/types.h	/^enum LoggingType {$/;"	g	namespace:ceres
LogicalCore	src/logical_core/src/logical_core.cpp	/^LogicalCore::LogicalCore() : ac_("move_base", true), car_state_(IDLE_STATE)$/;"	f	class:LogicalCore
LogicalCore	src/logical_core/src/logical_core.h	/^class LogicalCore$/;"	c
LongToIntPair	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  void LongToIntPair(int64 index, int* row, int* col) const {$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
LossFunction	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT LossFunction {$/;"	c	namespace:ceres
LossFunctionWrapper	ceres-solver/include/ceres/loss_function.h	/^  LossFunctionWrapper(LossFunction* rho, Ownership ownership)$/;"	f	class:ceres::LossFunctionWrapper
LossFunctionWrapper	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT LossFunctionWrapper : public LossFunction {$/;"	c	namespace:ceres
LosslessArithmeticConvertibleImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LosslessArithmeticConvertibleImpl : public false_type {};$/;"	s	namespace:testing::internal
LosslessArithmeticConvertibleImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LosslessArithmeticConvertibleImpl<kBool, bool, kBool, bool>$/;"	s	namespace:testing::internal
LosslessArithmeticConvertibleImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LosslessArithmeticConvertibleImpl<kBool, bool, kFloatingPoint, To>$/;"	s	namespace:testing::internal
LosslessArithmeticConvertibleImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LosslessArithmeticConvertibleImpl<kBool, bool, kInteger, To>$/;"	s	namespace:testing::internal
LosslessArithmeticConvertibleImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LosslessArithmeticConvertibleImpl<kInteger, From, kBool, bool>$/;"	s	namespace:testing::internal
LosslessArithmeticConvertibleImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^struct LosslessArithmeticConvertibleImpl<kInteger, From, kInteger, To>$/;"	s	namespace:testing::internal
LowRankInverseHessian	ceres-solver/internal/ceres/low_rank_inverse_hessian.cc	/^LowRankInverseHessian::LowRankInverseHessian($/;"	f	class:ceres::internal::LowRankInverseHessian
LowRankInverseHessian	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^class LowRankInverseHessian : public LinearOperator {$/;"	c	namespace:ceres::internal
LowerBoundForParameter	ceres-solver/internal/ceres/parameter_block.h	/^  double LowerBoundForParameter(int index) const {$/;"	f	class:ceres::internal::ParameterBlock
Lt	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::Lt2Matcher Lt() { return internal::Lt2Matcher(); }$/;"	f	namespace:testing
Lt	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::LtMatcher<Rhs> Lt(Rhs x) {$/;"	f	namespace:testing
Lt2Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class Lt2Matcher : public PairMatchBase<Lt2Matcher, AnyLt> {$/;"	c	namespace:testing::internal
LtMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit LtMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::LtMatcher
LtMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class LtMatcher : public ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt> {$/;"	c	namespace:testing::internal
MATCHER	ceres-solver/internal/ceres/gmock/gmock.h	/^MATCHER(IsEmpty, negation ? "isn't empty" : "is empty") {$/;"	f	namespace:testing
MATCHER	ceres-solver/internal/ceres/gmock/gmock.h	13851;"	d
MATCHER	ceres-solver/internal/ceres/rotation_test.cc	/^MATCHER(IsNormalizedQuaternion, "") {$/;"	f	namespace:ceres::internal
MATCHER	ceres-solver/internal/ceres/rotation_test.cc	/^MATCHER(IsOrthonormal, "") {$/;"	f	namespace:ceres::internal
MATCHER_P	ceres-solver/internal/ceres/gmock/gmock.h	13898;"	d
MATCHER_P	ceres-solver/internal/ceres/rotation_test.cc	/^MATCHER_P(IsNear3x3Matrix, expected, "") {$/;"	f	namespace:ceres::internal
MATCHER_P	ceres-solver/internal/ceres/rotation_test.cc	/^MATCHER_P(IsNearAngleAxis, expected, "") {$/;"	f	namespace:ceres::internal
MATCHER_P	ceres-solver/internal/ceres/rotation_test.cc	/^MATCHER_P(IsNearQuaternion, expected, "") {$/;"	f	namespace:ceres::internal
MATCHER_P10	ceres-solver/internal/ceres/gmock/gmock.h	14550;"	d
MATCHER_P2	ceres-solver/internal/ceres/gmock/gmock.h	13950;"	d
MATCHER_P3	ceres-solver/internal/ceres/gmock/gmock.h	14007;"	d
MATCHER_P4	ceres-solver/internal/ceres/gmock/gmock.h	14067;"	d
MATCHER_P5	ceres-solver/internal/ceres/gmock/gmock.h	14136;"	d
MATCHER_P6	ceres-solver/internal/ceres/gmock/gmock.h	14209;"	d
MATCHER_P7	ceres-solver/internal/ceres/gmock/gmock.h	14284;"	d
MATCHER_P8	ceres-solver/internal/ceres/gmock/gmock.h	14368;"	d
MATCHER_P9	ceres-solver/internal/ceres/gmock/gmock.h	14457;"	d
MAX_MOTOR_PWM	src/rplidar_ros/sdk/include/rplidar_cmd.h	76;"	d
MAX_SCAN_NODES	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^        MAX_SCAN_NODES = 2048,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriverSerialImpl::__anon53
MAYBE_SET_CONSTANT	ceres-solver/examples/libmv_bundle_adjuster.cc	736;"	d	file:
MAYBE_SET_CONSTANT	ceres-solver/examples/libmv_bundle_adjuster.cc	747;"	d	file:
MD5Sum	devel/include/console/serial_data.h	/^struct MD5Sum< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/ctrl_serial_comm/car_speed.h	/^struct MD5Sum< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/ctrl_serial_comm/serial_data.h	/^struct MD5Sum< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/logical_core/SetGoal.h	/^struct MD5Sum< ::logical_core::SetGoal > {$/;"	s	namespace:ros::service_traits
MD5Sum	devel/include/logical_core/SetGoal.h	/^struct MD5Sum< ::logical_core::SetGoalRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	devel/include/logical_core/SetGoal.h	/^struct MD5Sum< ::logical_core::SetGoalResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	devel/include/logical_core/SetGoalRequest.h	/^struct MD5Sum< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/logical_core/SetGoalResponse.h	/^struct MD5Sum< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/odometry/car_speed.h	/^struct MD5Sum< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/serial_comm/car_speed.h	/^struct MD5Sum< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/serial_comm/serial_data.h	/^struct MD5Sum< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/vision_unit/SetGoal.h	/^struct MD5Sum< ::vision_unit::SetGoal > {$/;"	s	namespace:ros::service_traits
MD5Sum	devel/include/vision_unit/SetGoal.h	/^struct MD5Sum< ::vision_unit::SetGoalRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	devel/include/vision_unit/SetGoal.h	/^struct MD5Sum< ::vision_unit::SetGoalResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	devel/include/vision_unit/SetGoalRequest.h	/^struct MD5Sum< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/vision_unit/SetGoalResponse.h	/^struct MD5Sum< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/vision_unit/armor_msg.h	/^struct MD5Sum< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	devel/include/vision_unit/transformed_scan.h	/^struct MD5Sum< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MISSIONMODE_H	src/logical_core/src/mission_mode.h	2;"	d
MOCK_CONST_METHOD0	ceres-solver/internal/ceres/gmock/gmock.h	11668;"	d
MOCK_CONST_METHOD0_T	ceres-solver/internal/ceres/gmock/gmock.h	11692;"	d
MOCK_CONST_METHOD0_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11784;"	d
MOCK_CONST_METHOD0_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11738;"	d
MOCK_CONST_METHOD1	ceres-solver/internal/ceres/gmock/gmock.h	11669;"	d
MOCK_CONST_METHOD10	ceres-solver/internal/ceres/gmock/gmock.h	11678;"	d
MOCK_CONST_METHOD10_T	ceres-solver/internal/ceres/gmock/gmock.h	11712;"	d
MOCK_CONST_METHOD10_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11804;"	d
MOCK_CONST_METHOD10_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11758;"	d
MOCK_CONST_METHOD1_T	ceres-solver/internal/ceres/gmock/gmock.h	11694;"	d
MOCK_CONST_METHOD1_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11786;"	d
MOCK_CONST_METHOD1_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11740;"	d
MOCK_CONST_METHOD2	ceres-solver/internal/ceres/gmock/gmock.h	11670;"	d
MOCK_CONST_METHOD2_T	ceres-solver/internal/ceres/gmock/gmock.h	11696;"	d
MOCK_CONST_METHOD2_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11788;"	d
MOCK_CONST_METHOD2_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11742;"	d
MOCK_CONST_METHOD3	ceres-solver/internal/ceres/gmock/gmock.h	11671;"	d
MOCK_CONST_METHOD3_T	ceres-solver/internal/ceres/gmock/gmock.h	11698;"	d
MOCK_CONST_METHOD3_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11790;"	d
MOCK_CONST_METHOD3_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11744;"	d
MOCK_CONST_METHOD4	ceres-solver/internal/ceres/gmock/gmock.h	11672;"	d
MOCK_CONST_METHOD4_T	ceres-solver/internal/ceres/gmock/gmock.h	11700;"	d
MOCK_CONST_METHOD4_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11792;"	d
MOCK_CONST_METHOD4_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11746;"	d
MOCK_CONST_METHOD5	ceres-solver/internal/ceres/gmock/gmock.h	11673;"	d
MOCK_CONST_METHOD5_T	ceres-solver/internal/ceres/gmock/gmock.h	11702;"	d
MOCK_CONST_METHOD5_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11794;"	d
MOCK_CONST_METHOD5_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11748;"	d
MOCK_CONST_METHOD6	ceres-solver/internal/ceres/gmock/gmock.h	11674;"	d
MOCK_CONST_METHOD6_T	ceres-solver/internal/ceres/gmock/gmock.h	11704;"	d
MOCK_CONST_METHOD6_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11796;"	d
MOCK_CONST_METHOD6_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11750;"	d
MOCK_CONST_METHOD7	ceres-solver/internal/ceres/gmock/gmock.h	11675;"	d
MOCK_CONST_METHOD7_T	ceres-solver/internal/ceres/gmock/gmock.h	11706;"	d
MOCK_CONST_METHOD7_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11798;"	d
MOCK_CONST_METHOD7_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11752;"	d
MOCK_CONST_METHOD8	ceres-solver/internal/ceres/gmock/gmock.h	11676;"	d
MOCK_CONST_METHOD8_T	ceres-solver/internal/ceres/gmock/gmock.h	11708;"	d
MOCK_CONST_METHOD8_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11800;"	d
MOCK_CONST_METHOD8_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11754;"	d
MOCK_CONST_METHOD9	ceres-solver/internal/ceres/gmock/gmock.h	11677;"	d
MOCK_CONST_METHOD9_T	ceres-solver/internal/ceres/gmock/gmock.h	11710;"	d
MOCK_CONST_METHOD9_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11802;"	d
MOCK_CONST_METHOD9_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11756;"	d
MOCK_METHOD0	ceres-solver/internal/ceres/gmock/gmock.h	11656;"	d
MOCK_METHOD0_T	ceres-solver/internal/ceres/gmock/gmock.h	11680;"	d
MOCK_METHOD0_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11761;"	d
MOCK_METHOD0_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11715;"	d
MOCK_METHOD1	ceres-solver/internal/ceres/gmock/gmock.h	11657;"	d
MOCK_METHOD10	ceres-solver/internal/ceres/gmock/gmock.h	11666;"	d
MOCK_METHOD10_T	ceres-solver/internal/ceres/gmock/gmock.h	11690;"	d
MOCK_METHOD10_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11781;"	d
MOCK_METHOD10_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11735;"	d
MOCK_METHOD1_T	ceres-solver/internal/ceres/gmock/gmock.h	11681;"	d
MOCK_METHOD1_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11763;"	d
MOCK_METHOD1_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11717;"	d
MOCK_METHOD2	ceres-solver/internal/ceres/gmock/gmock.h	11658;"	d
MOCK_METHOD2_T	ceres-solver/internal/ceres/gmock/gmock.h	11682;"	d
MOCK_METHOD2_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11765;"	d
MOCK_METHOD2_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11719;"	d
MOCK_METHOD3	ceres-solver/internal/ceres/gmock/gmock.h	11659;"	d
MOCK_METHOD3_T	ceres-solver/internal/ceres/gmock/gmock.h	11683;"	d
MOCK_METHOD3_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11767;"	d
MOCK_METHOD3_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11721;"	d
MOCK_METHOD4	ceres-solver/internal/ceres/gmock/gmock.h	11660;"	d
MOCK_METHOD4_T	ceres-solver/internal/ceres/gmock/gmock.h	11684;"	d
MOCK_METHOD4_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11769;"	d
MOCK_METHOD4_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11723;"	d
MOCK_METHOD5	ceres-solver/internal/ceres/gmock/gmock.h	11661;"	d
MOCK_METHOD5_T	ceres-solver/internal/ceres/gmock/gmock.h	11685;"	d
MOCK_METHOD5_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11771;"	d
MOCK_METHOD5_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11725;"	d
MOCK_METHOD6	ceres-solver/internal/ceres/gmock/gmock.h	11662;"	d
MOCK_METHOD6_T	ceres-solver/internal/ceres/gmock/gmock.h	11686;"	d
MOCK_METHOD6_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11773;"	d
MOCK_METHOD6_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11727;"	d
MOCK_METHOD7	ceres-solver/internal/ceres/gmock/gmock.h	11663;"	d
MOCK_METHOD7_T	ceres-solver/internal/ceres/gmock/gmock.h	11687;"	d
MOCK_METHOD7_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11775;"	d
MOCK_METHOD7_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11729;"	d
MOCK_METHOD8	ceres-solver/internal/ceres/gmock/gmock.h	11664;"	d
MOCK_METHOD8_T	ceres-solver/internal/ceres/gmock/gmock.h	11688;"	d
MOCK_METHOD8_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11777;"	d
MOCK_METHOD8_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11731;"	d
MOCK_METHOD9	ceres-solver/internal/ceres/gmock/gmock.h	11665;"	d
MOCK_METHOD9_T	ceres-solver/internal/ceres/gmock/gmock.h	11689;"	d
MOCK_METHOD9_T_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11779;"	d
MOCK_METHOD9_WITH_CALLTYPE	ceres-solver/internal/ceres/gmock/gmock.h	11733;"	d
Make1stOrderPerturbation	ceres-solver/include/ceres/internal/autodiff.h	/^inline void Make1stOrderPerturbation(int offset, const T* src, JetT* dst) {$/;"	f	namespace:ceres::internal
MakeAction	ceres-solver/internal/ceres/gmock/gmock.h	/^Action<F> MakeAction(ActionInterface<F>* impl) {$/;"	f	namespace:testing
MakeAndRegisterTestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestInfo* MakeAndRegisterTestInfo($/;"	f	namespace:testing::internal
MakeCardinality	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Cardinality MakeCardinality(const CardinalityInterface* c) {$/;"	f	namespace:testing
MakeConnection	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void StreamingListener::SocketWriter::MakeConnection() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
MakeFileName	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::MakeFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
MakeJ3	ceres-solver/internal/ceres/rotation_test.cc	/^J3 MakeJ3(double a, double v0, double v1, double v2) {$/;"	f	namespace:ceres::internal
MakeJ4	ceres-solver/internal/ceres/rotation_test.cc	/^J4 MakeJ4(double a, double v0, double v1, double v2, double v3) {$/;"	f	namespace:ceres::internal
MakeJet	ceres-solver/internal/ceres/jet_test.cc	/^J MakeJet(double a, double v0, double v1) {$/;"	f	namespace:ceres::internal
MakeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Matcher<T> MakeMatcher(const MatcherInterface<T>* impl) {$/;"	f	namespace:testing
MakeNewHolder	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ValueHolder* MakeNewHolder() const { return new ValueHolder(); }$/;"	f	class:std::tr1::ThreadLocal::DefaultValueHolderFactory
MakeNewHolder	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ValueHolder* MakeNewHolder() const {$/;"	f	class:std::tr1::ThreadLocal::InstanceValueHolderFactory
MakePolymorphicAction	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicAction<Impl> MakePolymorphicAction(const Impl& impl) {$/;"	f	namespace:testing
MakePolymorphicMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicMatcher<Impl> MakePolymorphicMatcher(const Impl& impl) {$/;"	f	namespace:testing
MakePolynomialForBoundaryConstrainedProblem	ceres-solver/internal/ceres/dogleg_strategy.cc	/^Vector DoglegStrategy::MakePolynomialForBoundaryConstrainedProblem() const {$/;"	f	class:ceres::internal::DoglegStrategy
MakePredicateFormatterFromMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^MakePredicateFormatterFromMatcher(M matcher) {$/;"	f	namespace:testing::internal
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue();$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2, A3);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8);$/;"	t	struct:testing::internal::Function
MakeResultIgnoredValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8,$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid();$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3, A4);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3, A4, A5);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3, A4, A5, A6);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3, A4, A5, A6, A7);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8, A9);$/;"	t	struct:testing::internal::Function
MakeResultVoid	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef void MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);$/;"	t	struct:testing::internal::Function
ManualConstructor	ceres-solver/include/ceres/internal/manual_constructor.h	/^class ManualConstructor {$/;"	c	namespace:ceres::internal
MapOfPoses	ceres-solver/examples/slam/pose_graph_3d/types.h	/^    MapOfPoses;$/;"	t	namespace:ceres::examples
MapValuesToContiguousRange	ceres-solver/internal/ceres/array_utils.cc	/^void MapValuesToContiguousRange(const int size, int* array) {$/;"	f	namespace:ceres::internal
Marker	ceres-solver/examples/libmv_bundle_adjuster.cc	/^struct Marker {$/;"	s	namespace:__anon38	file:
Mat	ceres-solver/examples/libmv_homography.cc	/^typedef Eigen::MatrixXd Mat;$/;"	t	file:
Mat3	ceres-solver/examples/libmv_bundle_adjuster.cc	/^typedef Eigen::Matrix<double, 3, 3> Mat3;$/;"	t	file:
Mat3	ceres-solver/examples/libmv_homography.cc	/^typedef Eigen::Matrix<double, 3, 3> Mat3;$/;"	t	file:
MatX8	ceres-solver/examples/libmv_homography.cc	/^typedef Eigen::Matrix<double, Eigen::Dynamic,  8> MatX8;$/;"	t	file:
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain($/;"	f	class:testing::internal::ComparisonBase::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain($/;"	f	class:testing::internal::PairMatchBase::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain($/;"	f	class:testing::internal::RefMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(Container container,$/;"	f	class:testing::internal::BeginEndDistanceIsMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(Container container,$/;"	f	class:testing::internal::SizeIsMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(LhsContainer lhs,$/;"	f	class:testing::internal::PointwiseMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(LhsContainer lhs,$/;"	f	class:testing::internal::WhenSortedByMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(Pointer pointer,$/;"	f	class:testing::internal::PointeeMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(T obj, MatchResultListener* listener) const {$/;"	f	class:testing::internal::ResultOfMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(T value,$/;"	f	class:testing::internal::FloatingEqMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::internal::BoundSecondMatcher::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::internal::MatcherCastImpl::Impl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(CharType* s, MatchResultListener* listener) const {$/;"	f	class:testing::internal::EndsWithMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(CharType* s, MatchResultListener* listener) const {$/;"	f	class:testing::internal::HasSubstrMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(CharType* s, MatchResultListener* listener) const {$/;"	f	class:testing::internal::MatchesRegexMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(CharType* s, MatchResultListener* listener) const {$/;"	f	class:testing::internal::StartsWithMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(CharType* s, MatchResultListener* listener) const {$/;"	f	class:testing::internal::StrEqualityMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(From from, MatchResultListener* listener) const {$/;"	f	class:testing::internal::WhenDynamicCastToMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(From& from, MatchResultListener* listener) const {$/;"	f	class:testing::internal::WhenDynamicCastToMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::internal::MatcherBase
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(T& x,  \/\/ NOLINT$/;"	f	class:testing::internal::TrulyMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const LhsContainer& lhs,$/;"	f	class:testing::internal::ContainerEqMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const MatcheeStringType& s,$/;"	f	class:testing::internal::EndsWithMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const MatcheeStringType& s,$/;"	f	class:testing::internal::HasSubstrMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const MatcheeStringType& s,$/;"	f	class:testing::internal::MatchesRegexMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const MatcheeStringType& s,$/;"	f	class:testing::internal::StartsWithMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const MatcheeStringType& s,$/;"	f	class:testing::internal::StrEqualityMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const Pointer& p,$/;"	f	class:testing::internal::IsNullMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const Pointer& p,$/;"	f	class:testing::internal::NotNullMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const T& value, MatchResultListener* listener) const {$/;"	f	class:testing::internal::FieldMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplain(const T&value, MatchResultListener* listener) const {$/;"	f	class:testing::internal::PropertyMatcher
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain($/;"	f	class:testing::internal::AnyMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(ArgsTuple args,$/;"	f	class:testing::internal::ArgsMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(Container container,$/;"	f	class:testing::internal::ContainsMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(Container container,$/;"	f	class:testing::internal::EachMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(Container container,$/;"	f	class:testing::internal::ElementsAreMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(Container container,$/;"	f	class:testing::internal::UnorderedElementsAreMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(PairType a_pair,$/;"	f	class:testing::internal::PairMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(PairType key_value,$/;"	f	class:testing::internal::KeyMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::internal::BothOfMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::internal::EitherOfMatcherImpl
MatchAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::internal::NotMatcherImpl
MatchAndExplainImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplainImpl(bool all_elements_should_match,$/;"	f	class:testing::internal::QuantifierMatcherImpl
MatchAndExplainImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplainImpl(false_type \/* is_not_pointer *\/, const Class& obj,$/;"	f	class:testing::internal::FieldMatcher
MatchAndExplainImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplainImpl(false_type \/* is_not_pointer *\/, const Class& obj,$/;"	f	class:testing::internal::PropertyMatcher
MatchAndExplainImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplainImpl(true_type \/* is_pointer *\/, const Class* p,$/;"	f	class:testing::internal::FieldMatcher
MatchAndExplainImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool MatchAndExplainImpl(true_type \/* is_pointer *\/, const Class* p,$/;"	f	class:testing::internal::PropertyMatcher
MatchMatrix	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatchMatrix(size_t num_elements, size_t num_matchers)$/;"	f	class:testing::internal::MatchMatrix
MatchMatrix	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ MatchMatrix {$/;"	c	namespace:testing::internal
MatchPrintAndExplain	ceres-solver/internal/ceres/gmock/gmock.h	/^bool MatchPrintAndExplain(Value& value, const Matcher<T>& matcher,$/;"	f	namespace:testing::internal
MatchRegexAnywhere	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool MatchRegexAnywhere(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRegexAtHead	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool MatchRegexAtHead(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRepetitionAndRegexAtHead	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool MatchRepetitionAndRegexAtHead($/;"	f	namespace:testing::internal
MatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit MatchResultListener(::std::ostream* os) : stream_(os) {}$/;"	f	class:testing::MatchResultListener
MatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatchResultListener {$/;"	c	namespace:testing
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher() {}$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Matcher() {}  \/\/ NOLINT$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Matcher(const MatcherInterface<StringPiece>* impl)$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Matcher(const MatcherInterface<T>* impl)$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Matcher(const MatcherInterface<const StringPiece&>* impl)$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Matcher(const MatcherInterface<const internal::string&>* impl)$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit Matcher(const MatcherInterface<internal::string>* impl)$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^Matcher<T>::Matcher(T value) { *this = Eq(value); }$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Matcher<StringPiece>$/;"	c	namespace:testing
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Matcher<const StringPiece&>$/;"	c	namespace:testing
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Matcher<const internal::string&>$/;"	c	namespace:testing
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Matcher<internal::string>$/;"	c	namespace:testing
Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class Matcher : public internal::MatcherBase<T> {$/;"	c	namespace:testing
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<StringPiece>::Matcher(StringPiece s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<StringPiece>::Matcher(const char* s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<StringPiece>::Matcher(const internal::string& s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<const StringPiece&>::Matcher(StringPiece s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<const StringPiece&>::Matcher(const char* s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<const StringPiece&>::Matcher(const internal::string& s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<const internal::string&>::Matcher(const char* s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<const internal::string&>::Matcher(const internal::string& s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<internal::string>::Matcher(const char* s) {$/;"	f	class:testing::Matcher
Matcher	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Matcher<internal::string>::Matcher(const internal::string& s) { *this = Eq(s); }$/;"	f	class:testing::Matcher
MatcherAsPredicate	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit MatcherAsPredicate(M matcher) : matcher_(matcher) {}$/;"	f	class:testing::internal::MatcherAsPredicate
MatcherAsPredicate	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatcherAsPredicate {$/;"	c	namespace:testing::internal
MatcherBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatcherBase() {}$/;"	f	class:testing::internal::MatcherBase
MatcherBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit MatcherBase(const MatcherInterface<T>* impl)$/;"	f	class:testing::internal::MatcherBase
MatcherBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatcherBase {$/;"	c	namespace:testing::internal
MatcherBindSecond	ceres-solver/internal/ceres/gmock/gmock.h	/^BoundSecondMatcher<Tuple2Matcher, Second> MatcherBindSecond($/;"	f	namespace:testing::internal
MatcherCast	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Matcher<T> MatcherCast(const M& matcher) {$/;"	f	namespace:testing
MatcherCastImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatcherCastImpl {$/;"	c	namespace:testing::internal
MatcherCastImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatcherCastImpl<T, Matcher<T> > {$/;"	c	namespace:testing::internal
MatcherCastImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatcherCastImpl<T, Matcher<U> > {$/;"	c	namespace:testing::internal
MatcherDescriberInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatcherDescriberInterface {$/;"	c	namespace:testing
MatcherDescriberVec	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::std::vector<const MatcherDescriberInterface*> MatcherDescriberVec;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImplBase
MatcherInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatcherInterface : public MatcherDescriberInterface {$/;"	c	namespace:testing
MatcherList	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherList {$/;"	s	namespace:testing::internal
MatcherList	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherList<2, Matcher1, Matcher2> {$/;"	s	namespace:testing::internal
MatcherListTail	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef MatcherList<kSize - 1, Tail...> MatcherListTail;$/;"	t	struct:testing::internal::MatcherList
MatcherListType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef MatcherList<sizeof...(Args), Args...> MatcherListType;$/;"	t	class:testing::internal::VariadicMatcher
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9,$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3, A4> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2, A3> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1, A2> > {$/;"	s	namespace:testing::internal
MatcherTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^struct MatcherTuple< ::testing::tuple<A1> > {$/;"	s	namespace:testing::internal
MatcherVec	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::std::vector<Matcher<const Element&> > MatcherVec;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImpl
Matches	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool Matches(T x) const {$/;"	f	class:testing::internal::MatcherBase
Matches	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool Matches(const ArgumentTuple& args) const {$/;"	f	class:testing::internal::OnCallSpec
Matches	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool Matches(const MatcherTuple& \/* matcher_tuple *\/,$/;"	f	class:testing::internal::TuplePrefix
Matches	ceres-solver/internal/ceres/gmock/gmock.h	/^  static bool Matches(const MatcherTuple& matcher_tuple,$/;"	f	class:testing::internal::TuplePrefix
Matches	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::MatcherAsPredicate<M> Matches(M matcher) {$/;"	f	namespace:testing
MatchesFilter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool UnitTestOptions::MatchesFilter($/;"	f	class:testing::internal::UnitTestOptions
MatchesRegex	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex($/;"	f	namespace:testing
MatchesRegexMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatchesRegexMatcher(const RE* regex, bool full_match)$/;"	f	class:testing::internal::MatchesRegexMatcher
MatchesRegexMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class MatchesRegexMatcher {$/;"	c	namespace:testing::internal
Matrix	ceres-solver/examples/nist.cc	/^typedef Eigen::Matrix<double, Dynamic, Dynamic, RowMajor> Matrix;$/;"	t	namespace:ceres::examples	file:
Matrix	ceres-solver/include/ceres/internal/eigen.h	/^                      Eigen::RowMajor> Matrix;$/;"	t	namespace:ceres
Matrix	ceres-solver/include/ceres/internal/eigen.h	/^  Matrix;$/;"	t	struct:ceres::EigenTypes
Matrix2d	ceres-solver/internal/ceres/dogleg_strategy.h	/^  typedef Eigen::Matrix<double, 2, 2, Eigen::DontAlign> Matrix2d;$/;"	t	class:ceres::internal::DoglegStrategy
MatrixAdapter	ceres-solver/include/ceres/rotation.h	/^  explicit MatrixAdapter(T* pointer)$/;"	f	struct:ceres::MatrixAdapter
MatrixAdapter	ceres-solver/include/ceres/rotation.h	/^struct MatrixAdapter {$/;"	s	namespace:ceres
MatrixMatrixMultiply	ceres-solver/internal/ceres/cxsparse.cc	/^cs_di* CXSparse::MatrixMatrixMultiply(cs_di* A, cs_di* B) {$/;"	f	class:ceres::internal::CXSparse
MatrixParameterization	ceres-solver/internal/ceres/gradient_checker_test.cc	/^class MatrixParameterization : public LocalParameterization {$/;"	c	namespace:ceres::internal	file:
MatrixRef	ceres-solver/include/ceres/internal/eigen.h	/^  MatrixRef;$/;"	t	struct:ceres::EigenTypes
MatrixRef	ceres-solver/include/ceres/internal/eigen.h	/^typedef Eigen::Map<Matrix> MatrixRef;$/;"	t	namespace:ceres
MatrixTransposeVectorMultiply	ceres-solver/internal/ceres/small_blas.h	/^inline void MatrixTransposeVectorMultiply(const double* A,$/;"	f	namespace:ceres::internal
MatrixVectorMultiply	ceres-solver/internal/ceres/small_blas.h	/^inline void MatrixVectorMultiply(const double* A,$/;"	f	namespace:ceres::internal
Max	ceres-solver/internal/ceres/gtest/gtest.h	/^inline double FloatingPoint<double>::Max() { return DBL_MAX; }$/;"	f	class:testing::internal::FloatingPoint
Max	ceres-solver/internal/ceres/gtest/gtest.h	/^inline float FloatingPoint<float>::Max() { return FLT_MAX; }$/;"	f	class:testing::internal::FloatingPoint
MaxBipartiteMatchState	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  explicit MaxBipartiteMatchState(const MatchMatrix& graph)$/;"	f	class:testing::internal::MaxBipartiteMatchState
MaxBipartiteMatchState	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class MaxBipartiteMatchState {$/;"	c	namespace:testing::internal	file:
MaxDerivativesPerResidualBlock	ceres-solver/internal/ceres/program.cc	/^int Program::MaxDerivativesPerResidualBlock() const {$/;"	f	class:ceres::internal::Program
MaxImage	ceres-solver/examples/libmv_bundle_adjuster.cc	/^int MaxImage(const vector<Marker> &all_markers) {$/;"	f	namespace:__anon38
MaxParametersPerResidualBlock	ceres-solver/internal/ceres/program.cc	/^int Program::MaxParametersPerResidualBlock() const {$/;"	f	class:ceres::internal::Program
MaxResidualsPerResidualBlock	ceres-solver/internal/ceres/program.cc	/^int Program::MaxResidualsPerResidualBlock() const {$/;"	f	class:ceres::internal::Program
MaxScratchDoublesNeededForEvaluate	ceres-solver/internal/ceres/program.cc	/^int Program::MaxScratchDoublesNeededForEvaluate() const {$/;"	f	class:ceres::internal::Program
MaxSolverIterationsReached	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::MaxSolverIterationsReached() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
MaxSolverTimeReached	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::MaxSolverTimeReached() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
MaybeDescribeExtraMatcherTo	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void MaybeDescribeExtraMatcherTo(::std::ostream* os) {$/;"	f	class:testing::internal::TypedExpectation
MaybeReorderSchurComplementColumnsUsingEigen	ceres-solver/internal/ceres/reorder_program.cc	/^void MaybeReorderSchurComplementColumnsUsingEigen($/;"	f	namespace:ceres::internal
MaybeReorderSchurComplementColumnsUsingSuiteSparse	ceres-solver/internal/ceres/reorder_program.cc	/^void MaybeReorderSchurComplementColumnsUsingSuiteSparse($/;"	f	namespace:ceres::internal
Median	ceres-solver/examples/bal_problem.cc	/^double Median(std::vector<double>* data) {$/;"	f	namespace:ceres::examples::__anon37
Message	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Message::Message() : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	ceres-solver/internal/ceres/gtest/gtest.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
MessageInfo	ceres-solver/internal/ceres/gmock/mock-log.h	/^  struct MessageInfo {$/;"	s	class:testing::ScopedMockLog
MessageLogger	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  MessageLogger(const char *file, int line, const char *tag, int severity)$/;"	f	class:MessageLogger
MessageLogger	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^class CERES_EXPORT MessageLogger {$/;"	c
Metric	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Metric {$/;"	s	namespace:ceres::internal	file:
MinNonZeroGroup	ceres-solver/include/ceres/ordered_groups.h	/^  int MinNonZeroGroup() const {$/;"	f	class:ceres::OrderedGroups
MinParameterBlock	ceres-solver/internal/ceres/reorder_program.cc	/^static int MinParameterBlock(const ResidualBlock* residual_block,$/;"	f	namespace:ceres::internal::__anon4
MinTrustRegionRadiusReached	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::MinTrustRegionRadiusReached() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
Minimize	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^void CoordinateDescentMinimizer::Minimize($/;"	f	class:ceres::internal::CoordinateDescentMinimizer
Minimize	ceres-solver/internal/ceres/line_search_minimizer.cc	/^void LineSearchMinimizer::Minimize(const Minimizer::Options& options,$/;"	f	class:ceres::internal::LineSearchMinimizer
Minimize	ceres-solver/internal/ceres/solver.cc	/^void Minimize(internal::PreprocessedProblem* pp,$/;"	f	namespace:ceres::__anon15
Minimize	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^void TrustRegionMinimizer::Minimize(const Minimizer::Options& options,$/;"	f	class:ceres::internal::TrustRegionMinimizer
MinimizeInterpolatingPolynomial	ceres-solver/internal/ceres/polynomial.cc	/^void MinimizeInterpolatingPolynomial(const vector<FunctionSample>& samples,$/;"	f	namespace:ceres::internal
MinimizePolynomial	ceres-solver/internal/ceres/polynomial.cc	/^void MinimizePolynomial(const Vector& polynomial,$/;"	f	namespace:ceres::internal
Minimizer	ceres-solver/internal/ceres/minimizer.h	/^class Minimizer {$/;"	c	namespace:ceres::internal
MinimizerType	ceres-solver/include/ceres/types.h	/^enum MinimizerType {$/;"	g	namespace:ceres
MinimizerTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* MinimizerTypeToString(MinimizerType type) {$/;"	f	namespace:ceres
MissionMode	src/logical_core/src/mission_mode.cpp	/^MissionMode::MissionMode()$/;"	f	class:MissionMode
MissionMode	src/logical_core/src/mission_mode.h	/^class MissionMode$/;"	c
Mock	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Mock {$/;"	c	namespace:testing
MockCostFunctionBase	ceres-solver/internal/ceres/program_test.cc	/^class MockCostFunctionBase : public$/;"	c	namespace:ceres::internal	file:
MockCostFunctionBase	ceres-solver/internal/ceres/reorder_program_test.cc	/^class MockCostFunctionBase : public$/;"	c	namespace:ceres::internal	file:
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^  MockFunction() {}$/;"	f	class:testing::MockFunction
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R()> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2, A3)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2, A3, A4)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2, A3, A4, A5)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2, A3, A4, A5, A6)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2, A3, A4, A5, A6, A7)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2, A3, A4, A5, A6, A7, A8)> {$/;"	c	namespace:testing
MockFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockFunction<R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)> {$/;"	c	namespace:testing
MockObjectRegistry	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class MockObjectRegistry {$/;"	c	namespace:testing::__anon29	file:
MockObjectState	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  MockObjectState()$/;"	f	struct:testing::__anon29::MockObjectState
MockObjectState	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^struct MockObjectState {$/;"	s	namespace:testing::__anon29	file:
MockSpec	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit MockSpec(internal::FunctionMockerBase<F>* function_mocker)$/;"	f	class:testing::internal::MockSpec
MockSpec	ceres-solver/internal/ceres/gmock/gmock.h	/^class MockSpec {$/;"	c	namespace:testing::internal
ModuloNumSegments	ceres-solver/examples/ellipse_approximation.cc	/^  inline double ModuloNumSegments(const double& t) const {$/;"	f	class:PointToLineSegmentContourCostFunction	file:
MonomorphicImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit MonomorphicImpl(const Impl& impl) : impl_(impl) {}$/;"	f	class:testing::PolymorphicAction::MonomorphicImpl
MonomorphicImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^    explicit MonomorphicImpl(const Impl& impl) : impl_(impl) {}$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
MonomorphicImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class MonomorphicImpl : public ActionInterface<F> {$/;"	c	class:testing::PolymorphicAction
MonomorphicImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  class MonomorphicImpl : public MatcherInterface<T> {$/;"	c	class:testing::PolymorphicMatcher
MonomorphicInnerMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef Matcher<const SelectedArgs&> MonomorphicInnerMatcher;$/;"	t	class:testing::internal::ArgsMatcherImpl
MoveBaseClient	logical_core/src/logical_core.cpp	/^typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;$/;"	t	file:
MoveBaseClient	src/logical_core/src/logical_core.h	/^typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;$/;"	t
MulCost	ceres-solver/include/ceres/jet.h	/^    MulCost = 3,$/;"	e	enum:Eigen::NumTraits::__anon45
MultiplyByJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool IdentityParameterization::MultiplyByJacobian(const double* x,$/;"	f	class:ceres::IdentityParameterization
MultiplyByJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool LocalParameterization::MultiplyByJacobian(const double* x,$/;"	f	class:ceres::LocalParameterization
MultiplyByJacobian	ceres-solver/internal/ceres/local_parameterization.cc	/^bool SubsetParameterization::MultiplyByJacobian(const double* x,$/;"	f	class:ceres::SubsetParameterization
MutablePixel	ceres-solver/examples/pgm_image.h	/^Real* PGMImage<Real>::MutablePixel(int x, int y) {$/;"	f	class:ceres::examples::PGMImage
MutablePixelFromLinearIndex	ceres-solver/examples/pgm_image.h	/^Real* PGMImage<Real>::MutablePixelFromLinearIndex(int index) {$/;"	f	class:ceres::examples::PGMImage
Mutex	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Mutex::Mutex()$/;"	f	class:testing::internal::Mutex
Mutex	ceres-solver/internal/ceres/gtest/gtest.h	/^  Mutex() {$/;"	f	class:std::tr1::Mutex
Mutex	ceres-solver/internal/ceres/gtest/gtest.h	/^  Mutex() {}$/;"	f	class:std::tr1::Mutex
Mutex	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit Mutex(StaticConstructorSelector \/*dummy*\/) {}$/;"	f	class:std::tr1::Mutex
Mutex	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ Mutex {$/;"	c	namespace:std::tr1
Mutex	ceres-solver/internal/ceres/gtest/gtest.h	/^class Mutex : public MutexBase {$/;"	c	namespace:std::tr1
Mutex	ceres-solver/internal/ceres/gtest/gtest.h	/^class Mutex {$/;"	c	namespace:std::tr1
Mutex	ceres-solver/internal/ceres/mutex.h	/^  Mutex(Mutex* \/*ignored*\/) {}$/;"	f	class:ceres::internal::Mutex
Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::Mutex()             { InitializeCriticalSection(&mutex_); SetIsSafe(); }$/;"	f	class:ceres::internal::Mutex
Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::Mutex()             {$/;"	f	class:ceres::internal::Mutex
Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::Mutex() : mutex_(0) { }$/;"	f	class:ceres::internal::Mutex
Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::Mutex() {$/;"	f	class:ceres::internal::Mutex
Mutex	ceres-solver/internal/ceres/mutex.h	/^class Mutex {$/;"	c	namespace:ceres::internal
MutexBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class MutexBase {$/;"	c	namespace:std::tr1
MutexLock	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:std::tr1
MutexType	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	g	class:std::tr1::Mutex
MutexType	ceres-solver/internal/ceres/mutex.h	/^  typedef CRITICAL_SECTION MutexType;$/;"	t
MutexType	ceres-solver/internal/ceres/mutex.h	/^  typedef int MutexType;      \/\/ to keep a lock-count$/;"	t
MutexType	ceres-solver/internal/ceres/mutex.h	/^  typedef pthread_mutex_t MutexType;$/;"	t
MutexType	ceres-solver/internal/ceres/mutex.h	/^  typedef pthread_rwlock_t MutexType;$/;"	t
MyCostFunctor	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^class MyCostFunctor {$/;"	c	namespace:ceres::internal	file:
MyCostFunctor	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^class MyCostFunctor {$/;"	c	namespace:ceres::internal	file:
MySixParameterCostFunctor	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^class MySixParameterCostFunctor {$/;"	c	namespace:ceres::internal	file:
MyThreeParameterCostFunctor	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^class MyThreeParameterCostFunctor {$/;"	c	namespace:ceres::internal	file:
MyThreeParameterCostFunctor	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^class MyThreeParameterCostFunctor {$/;"	c	namespace:ceres::internal	file:
N	ceres-solver/scripts/make_docs.py	/^N = len(sys.argv)$/;"	v
NAVTREE	src/doc/html/navtreedata.js	/^var NAVTREE =$/;"	v
NAVTREEINDEX	src/doc/html/navtreedata.js	/^var NAVTREEINDEX =$/;"	v
NAV_STATE	logical_core/src/logical_core.cpp	/^    NAV_STATE,$/;"	e	enum:CarState	file:
NISTProblem	ceres-solver/examples/nist.cc	/^  explicit NISTProblem(const string& filename) {$/;"	f	class:ceres::examples::NISTProblem
NISTProblem	ceres-solver/examples/nist.cc	/^class NISTProblem {$/;"	c	namespace:ceres::examples	file:
NIST_BEGIN	ceres-solver/examples/nist.cc	268;"	d	file:
NIST_END	ceres-solver/examples/nist.cc	281;"	d	file:
NOGDI	ceres-solver/internal/ceres/mutex.h	115;"	d
NOMINMAX	ceres-solver/internal/ceres/mutex.h	118;"	d
NONLINEAR_CONJUGATE_GRADIENT	ceres-solver/include/ceres/types.h	/^  NONLINEAR_CONJUGATE_GRADIENT,$/;"	e	enum:ceres::LineSearchDirectionType
NO_CONVERGENCE	ceres-solver/include/ceres/types.h	/^  NO_CONVERGENCE,$/;"	e	enum:ceres::TerminationType
NO_SPARSE	ceres-solver/include/ceres/types.h	/^  NO_SPARSE$/;"	e	enum:ceres::SparseLinearAlgebraLibraryType
NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NaggyMock() {$/;"	f	class:testing::NaggyMock
NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NaggyMock(const A1& a1, const A2& a2) : MockClass(a1, a2) {$/;"	f	class:testing::NaggyMock
NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NaggyMock(const A1& a1, const A2& a2, const A3& a3) : MockClass(a1, a2, a3) {$/;"	f	class:testing::NaggyMock
NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4,$/;"	f	class:testing::NaggyMock
NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NaggyMock(const A1& a1, const A2& a2, const A3& a3,$/;"	f	class:testing::NaggyMock
NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit NaggyMock(const A1& a1) : MockClass(a1) {$/;"	f	class:testing::NaggyMock
NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^class NaggyMock : public MockClass {$/;"	c	namespace:testing
NanSensitiveDoubleEq	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<double> NanSensitiveDoubleEq(double rhs) {$/;"	f	namespace:testing
NanSensitiveDoubleNear	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<double> NanSensitiveDoubleNear($/;"	f	namespace:testing
NanSensitiveFloatEq	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<float> NanSensitiveFloatEq(float rhs) {$/;"	f	namespace:testing
NanSensitiveFloatNear	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::FloatingEqMatcher<float> NanSensitiveFloatNear($/;"	f	namespace:testing
NativeArray	ceres-solver/internal/ceres/gtest/gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSourceCopy) {$/;"	f	class:testing::internal::NativeArray
NativeArray	ceres-solver/internal/ceres/gtest/gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSourceReference) {$/;"	f	class:testing::internal::NativeArray
NativeArray	ceres-solver/internal/ceres/gtest/gtest.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	ceres-solver/internal/ceres/gtest/gtest.h	/^class NativeArray {$/;"	c	namespace:testing::internal
Nav	src/doc/html/search/search.js	/^    this.Nav = function(evt,itemIndex)$/;"	m	class:SearchResults
NavChild	src/doc/html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	src/doc/html/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	src/doc/html/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
Ne	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::Ne2Matcher Ne() { return internal::Ne2Matcher(); }$/;"	f	namespace:testing
Ne	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::NeMatcher<Rhs> Ne(Rhs x) {$/;"	f	namespace:testing
Ne2Matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class Ne2Matcher : public PairMatchBase<Ne2Matcher, AnyNe> {$/;"	c	namespace:testing::internal
NeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit NeMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::NeMatcher
NeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class NeMatcher : public ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe> {$/;"	c	namespace:testing::internal
NegatedDesc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* NegatedDesc() { return "is equal to"; }$/;"	f	class:testing::internal::NeMatcher
NegatedDesc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* NegatedDesc() { return "isn't <"; }$/;"	f	class:testing::internal::LtMatcher
NegatedDesc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* NegatedDesc() { return "isn't <="; }$/;"	f	class:testing::internal::LeMatcher
NegatedDesc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* NegatedDesc() { return "isn't >"; }$/;"	f	class:testing::internal::GtMatcher
NegatedDesc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* NegatedDesc() { return "isn't >="; }$/;"	f	class:testing::internal::GeMatcher
NegatedDesc	ceres-solver/internal/ceres/gmock/gmock.h	/^  static const char* NegatedDesc() { return "isn't equal to"; }$/;"	f	class:testing::internal::EqMatcher
Neighbors	ceres-solver/internal/ceres/graph.h	/^  const HashSet<Vertex>& Neighbors(const Vertex& vertex) const {$/;"	f	class:ceres::internal::Graph
Neighbors	ceres-solver/internal/ceres/graph.h	/^  const HashSet<Vertex>& Neighbors(const Vertex& vertex) const {$/;"	f	class:ceres::internal::WeightedGraph
Nelson	ceres-solver/examples/nist.cc	/^  Nelson(const double* const x, const double* const y)$/;"	f	struct:ceres::examples::Nelson
Nelson	ceres-solver/examples/nist.cc	/^struct Nelson {$/;"	s	namespace:ceres::examples	file:
Nested	ceres-solver/include/ceres/jet.h	/^  typedef ceres::Jet<T, N> Nested;$/;"	t	struct:Eigen::NumTraits
NewCostFunction	ceres-solver/examples/fields_of_experts.cc	/^ceres::CostFunction* FieldsOfExperts::NewCostFunction(int alpha_index) const {$/;"	f	class:ceres::examples::FieldsOfExperts
NewLossFunction	ceres-solver/examples/fields_of_experts.cc	/^ceres::LossFunction* FieldsOfExperts::NewLossFunction(int alpha_index) const {$/;"	f	class:ceres::examples::FieldsOfExperts
NewValueForCurrentThread	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {$/;"	f	class:std::tr1::ThreadLocal
NextDirection	ceres-solver/internal/ceres/line_search_direction.cc	/^  bool NextDirection(const LineSearchMinimizer::State& previous,$/;"	f	class:ceres::internal::BFGS
NextDirection	ceres-solver/internal/ceres/line_search_direction.cc	/^  bool NextDirection(const LineSearchMinimizer::State& previous,$/;"	f	class:ceres::internal::LBFGS
NextDirection	ceres-solver/internal/ceres/line_search_direction.cc	/^  bool NextDirection(const LineSearchMinimizer::State& previous,$/;"	f	class:ceres::internal::NonlinearConjugateGradient
NextDirection	ceres-solver/internal/ceres/line_search_direction.cc	/^  bool NextDirection(const LineSearchMinimizer::State& previous,$/;"	f	class:ceres::internal::SteepestDescent
NextGraph	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool MatchMatrix::NextGraph() {$/;"	f	class:testing::internal::MatchMatrix
NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NiceMock() {$/;"	f	class:testing::NiceMock
NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NiceMock(const A1& a1, const A2& a2) : MockClass(a1, a2) {$/;"	f	class:testing::NiceMock
NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NiceMock(const A1& a1, const A2& a2, const A3& a3) : MockClass(a1, a2, a3) {$/;"	f	class:testing::NiceMock
NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4,$/;"	f	class:testing::NiceMock
NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  NiceMock(const A1& a1, const A2& a2, const A3& a3,$/;"	f	class:testing::NiceMock
NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit NiceMock(const A1& a1) : MockClass(a1) {$/;"	f	class:testing::NiceMock
NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^class NiceMock : public MockClass {$/;"	c	namespace:testing
NineParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct NineParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
NoEBlockRowOuterProduct	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^NoEBlockRowOuterProduct(const BlockSparseMatrix* A,$/;"	f	class:ceres::internal::SchurEliminator
NoEBlockRowsUpdate	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^NoEBlockRowsUpdate(const BlockSparseMatrix* A,$/;"	f	class:ceres::internal::SchurEliminator
NoExecDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  NoExecDeathTest(const char* a_statement, const RE* a_regex) :$/;"	f	class:testing::internal::NoExecDeathTest
NoExecDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class NoExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
NoJacobianUpdateCostFunction	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^class NoJacobianUpdateCostFunction: public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
NoResidualUpdateCostFunction	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^class NoResidualUpdateCostFunction: public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
NonInteger	ceres-solver/include/ceres/jet.h	/^  typedef ceres::Jet<T, N> NonInteger;$/;"	t	struct:Eigen::NumTraits
None	ceres-solver/internal/ceres/gtest/gtest.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	ceres-solver/internal/ceres/gtest/gtest.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
NonlinearConjugateGradient	ceres-solver/internal/ceres/line_search_direction.cc	/^  NonlinearConjugateGradient(const NonlinearConjugateGradientType type,$/;"	f	class:ceres::internal::NonlinearConjugateGradient
NonlinearConjugateGradient	ceres-solver/internal/ceres/line_search_direction.cc	/^class NonlinearConjugateGradient : public LineSearchDirection {$/;"	c	namespace:ceres::internal	file:
NonlinearConjugateGradientType	ceres-solver/include/ceres/types.h	/^enum NonlinearConjugateGradientType {$/;"	g	namespace:ceres
NonlinearConjugateGradientTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* NonlinearConjugateGradientTypeToString($/;"	f	namespace:ceres
NormalPrior	ceres-solver/include/ceres/normal_prior.h	/^class CERES_EXPORT NormalPrior: public CostFunction {$/;"	c	namespace:ceres
NormalPrior	ceres-solver/internal/ceres/normal_prior.cc	/^NormalPrior::NormalPrior(const Matrix& A, const Vector& b)$/;"	f	class:ceres::NormalPrior
Normalize	ceres-solver/examples/bal_problem.cc	/^void BALProblem::Normalize() {$/;"	f	class:ceres::examples::BALProblem
Normalize	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void FilePath::Normalize() {$/;"	f	class:testing::internal::FilePath
Normalize	ceres-solver/internal/ceres/local_parameterization_test.cc	/^void Normalize(double* x) {$/;"	f	namespace:ceres::internal
NormalizeAngle	ceres-solver/examples/slam/pose_graph_2d/normalize_angle.h	/^inline T NormalizeAngle(const T& angle_radians) {$/;"	f	namespace:ceres::examples
Not	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::NotMatcher<InnerMatcher> Not(InnerMatcher m) {$/;"	f	namespace:testing
NotMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit NotMatcher(InnerMatcher matcher) : matcher_(matcher) {}$/;"	f	class:testing::internal::NotMatcher
NotMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class NotMatcher {$/;"	c	namespace:testing::internal
NotMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit NotMatcherImpl(const Matcher<T>& matcher)$/;"	f	class:testing::internal::NotMatcherImpl
NotMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class NotMatcherImpl : public MatcherInterface<T> {$/;"	c	namespace:testing::internal
NotNull	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicMatcher<internal::NotNullMatcher > NotNull() {$/;"	f	namespace:testing
NotNullMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class NotNullMatcher {$/;"	c	namespace:testing::internal
Notification	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Notification::Notification()$/;"	f	class:testing::internal::Notification
Notification	ceres-solver/internal/ceres/gtest/gtest.h	/^  Notification() : notified_(false) {$/;"	f	class:std::tr1::Notification
Notification	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ Notification {$/;"	c	namespace:std::tr1
Notification	ceres-solver/internal/ceres/gtest/gtest.h	/^class Notification {$/;"	c	namespace:std::tr1
Notify	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Notification::Notify() {$/;"	f	class:testing::internal::Notification
Notify	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Notify() {$/;"	f	class:std::tr1::Notification
NullJacobianFinalizer	ceres-solver/internal/ceres/program_evaluator.h	/^struct NullJacobianFinalizer {$/;"	s	namespace:ceres::internal
NumEffectiveParameters	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual int NumEffectiveParameters()  const {$/;"	f	class:ceres::internal::GradientProblemEvaluator
NumEffectiveParameters	ceres-solver/internal/ceres/program.cc	/^int Program::NumEffectiveParameters() const {$/;"	f	class:ceres::internal::Program
NumEffectiveParameters	ceres-solver/internal/ceres/program_evaluator.h	/^  int NumEffectiveParameters() const {$/;"	f	class:ceres::internal::ProgramEvaluator
NumEffectiveParameters	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  virtual int NumEffectiveParameters() const { return num_active_cols_; }$/;"	f	class:ceres::internal::PowellEvaluator2
NumElements	ceres-solver/include/ceres/ordered_groups.h	/^  int NumElements() const {$/;"	f	class:ceres::OrderedGroups
NumFilters	ceres-solver/examples/fields_of_experts.h	/^  int NumFilters() const {$/;"	f	class:ceres::examples::FieldsOfExperts
NumGroups	ceres-solver/include/ceres/ordered_groups.h	/^  int NumGroups() const {$/;"	f	class:ceres::OrderedGroups
NumLocalParameters	ceres-solver/internal/ceres/gradient_problem.cc	/^int GradientProblem::NumLocalParameters() const {$/;"	f	class:ceres::GradientProblem
NumParameterBlocks	ceres-solver/internal/ceres/problem.cc	/^int Problem::NumParameterBlocks() const {$/;"	f	class:ceres::Problem
NumParameterBlocks	ceres-solver/internal/ceres/problem_impl.cc	/^int ProblemImpl::NumParameterBlocks() const {$/;"	f	class:ceres::internal::ProblemImpl
NumParameterBlocks	ceres-solver/internal/ceres/program.cc	/^int Program::NumParameterBlocks() const {$/;"	f	class:ceres::internal::Program
NumParameterBlocks	ceres-solver/internal/ceres/residual_block.h	/^  int NumParameterBlocks() const {$/;"	f	class:ceres::internal::ResidualBlock
NumParameterBlocksCostFunction	ceres-solver/internal/ceres/program_test.cc	/^  NumParameterBlocksCostFunction() {$/;"	f	class:ceres::internal::NumParameterBlocksCostFunction
NumParameterBlocksCostFunction	ceres-solver/internal/ceres/program_test.cc	/^class NumParameterBlocksCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal	file:
NumParameters	ceres-solver/examples/rosenbrock.cc	/^  virtual int NumParameters() const { return 2; }$/;"	f	class:Rosenbrock
NumParameters	ceres-solver/internal/ceres/gradient_problem.cc	/^int GradientProblem::NumParameters() const {$/;"	f	class:ceres::GradientProblem
NumParameters	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual int NumParameters() const {$/;"	f	class:ceres::internal::GradientProblemEvaluator
NumParameters	ceres-solver/internal/ceres/gradient_problem_solver_test.cc	/^  virtual int NumParameters() const { return 2; }$/;"	f	class:ceres::internal::Rosenbrock
NumParameters	ceres-solver/internal/ceres/gradient_problem_test.cc	/^  virtual int NumParameters() const { return 1; }$/;"	f	class:ceres::internal::QuadraticTestFunction
NumParameters	ceres-solver/internal/ceres/line_search_minimizer_test.cc	/^  virtual int NumParameters() const { return 1; }$/;"	f	class:ceres::internal::QuadraticFirstOrderFunction
NumParameters	ceres-solver/internal/ceres/problem.cc	/^int Problem::NumParameters() const {$/;"	f	class:ceres::Problem
NumParameters	ceres-solver/internal/ceres/problem_impl.cc	/^int ProblemImpl::NumParameters() const {$/;"	f	class:ceres::internal::ProblemImpl
NumParameters	ceres-solver/internal/ceres/program.cc	/^int Program::NumParameters() const {$/;"	f	class:ceres::internal::Program
NumParameters	ceres-solver/internal/ceres/program_evaluator.h	/^  int NumParameters() const {$/;"	f	class:ceres::internal::ProgramEvaluator
NumParameters	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  virtual int NumParameters()          const { return 4; }$/;"	f	class:ceres::internal::PowellEvaluator2
NumPixels	ceres-solver/examples/pgm_image.h	/^int PGMImage<Real>::NumPixels() const {$/;"	f	class:ceres::examples::PGMImage
NumResidualBlocks	ceres-solver/internal/ceres/problem.cc	/^int Problem::NumResidualBlocks() const {$/;"	f	class:ceres::Problem
NumResidualBlocks	ceres-solver/internal/ceres/problem_impl.cc	/^int ProblemImpl::NumResidualBlocks() const {$/;"	f	class:ceres::internal::ProblemImpl
NumResidualBlocks	ceres-solver/internal/ceres/problem_test.cc	/^  int NumResidualBlocks() {$/;"	f	struct:ceres::internal::DynamicProblem
NumResidualBlocks	ceres-solver/internal/ceres/program.cc	/^int Program::NumResidualBlocks() const {$/;"	f	class:ceres::internal::Program
NumResiduals	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual int NumResiduals() const { return 1; }$/;"	f	class:ceres::internal::GradientProblemEvaluator
NumResiduals	ceres-solver/internal/ceres/problem.cc	/^int Problem::NumResiduals() const {$/;"	f	class:ceres::Problem
NumResiduals	ceres-solver/internal/ceres/problem_impl.cc	/^int ProblemImpl::NumResiduals() const {$/;"	f	class:ceres::internal::ProblemImpl
NumResiduals	ceres-solver/internal/ceres/program.cc	/^int Program::NumResiduals() const {$/;"	f	class:ceres::internal::Program
NumResiduals	ceres-solver/internal/ceres/program_evaluator.h	/^  int NumResiduals() const {$/;"	f	class:ceres::internal::ProgramEvaluator
NumResiduals	ceres-solver/internal/ceres/residual_block.h	/^  int NumResiduals() const { return cost_function_->num_residuals(); }$/;"	f	class:ceres::internal::ResidualBlock
NumResiduals	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  virtual int NumResiduals()           const { return 4; }$/;"	f	class:ceres::internal::PowellEvaluator2
NumScratchDoublesForEvaluate	ceres-solver/internal/ceres/residual_block.cc	/^int ResidualBlock::NumScratchDoublesForEvaluate() const {$/;"	f	class:ceres::internal::ResidualBlock
NumTraits	ceres-solver/include/ceres/jet.h	/^struct NumTraits<ceres::Jet<T, N> > {$/;"	s	namespace:Eigen
NumVariables	ceres-solver/examples/fields_of_experts.h	/^  int NumVariables() const {$/;"	f	class:ceres::examples::FieldsOfExperts
NumericDiff	ceres-solver/include/ceres/internal/numeric_diff.h	/^struct NumericDiff {$/;"	s	namespace:ceres::internal
NumericDiff	ceres-solver/include/ceres/internal/numeric_diff.h	/^struct NumericDiff<CostFunctor, kMethod, kNumResiduals,$/;"	s	namespace:ceres::internal
NumericDiffCostFunction	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^  NumericDiffCostFunction($/;"	f	class:ceres::NumericDiffCostFunction
NumericDiffCostFunction	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^class NumericDiffCostFunction$/;"	c	namespace:ceres
NumericDiffMethodType	ceres-solver/include/ceres/types.h	/^enum NumericDiffMethodType {$/;"	g	namespace:ceres
NumericDiffMethodTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* NumericDiffMethodTypeToString($/;"	f	namespace:ceres
NumericDiffOptions	ceres-solver/include/ceres/numeric_diff_options.h	/^  NumericDiffOptions() {$/;"	f	struct:ceres::NumericDiffOptions
NumericDiffOptions	ceres-solver/include/ceres/numeric_diff_options.h	/^struct CERES_EXPORT NumericDiffOptions {$/;"	s	namespace:ceres
ODOMETRY_MESSAGE_CAR_SPEED_H	devel/include/odometry/car_speed.h	6;"	d
OFFSET_FOCAL_LENGTH	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_FOCAL_LENGTH,$/;"	e	enum:__anon38::__anon39	file:
OFFSET_K1	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_K1,$/;"	e	enum:__anon38::__anon39	file:
OFFSET_K2	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_K2,$/;"	e	enum:__anon38::__anon39	file:
OFFSET_K3	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_K3,$/;"	e	enum:__anon38::__anon39	file:
OFFSET_P1	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_P1,$/;"	e	enum:__anon38::__anon39	file:
OFFSET_P2	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_P2,$/;"	e	enum:__anon38::__anon39	file:
OFFSET_PRINCIPAL_POINT_X	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_PRINCIPAL_POINT_X,$/;"	e	enum:__anon38::__anon39	file:
OFFSET_PRINCIPAL_POINT_Y	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OFFSET_PRINCIPAL_POINT_Y,$/;"	e	enum:__anon38::__anon39	file:
ON_CALL	ceres-solver/internal/ceres/gmock/gmock.h	11019;"	d
OPTION_GE	ceres-solver/internal/ceres/solver.cc	308;"	d	file:
OPTION_GE	ceres-solver/internal/ceres/solver.cc	82;"	d	file:
OPTION_GT	ceres-solver/internal/ceres/solver.cc	307;"	d	file:
OPTION_GT	ceres-solver/internal/ceres/solver.cc	83;"	d	file:
OPTION_LE	ceres-solver/internal/ceres/solver.cc	309;"	d	file:
OPTION_LE	ceres-solver/internal/ceres/solver.cc	84;"	d	file:
OPTION_LE_OPTION	ceres-solver/internal/ceres/solver.cc	311;"	d	file:
OPTION_LE_OPTION	ceres-solver/internal/ceres/solver.cc	86;"	d	file:
OPTION_LT	ceres-solver/internal/ceres/solver.cc	310;"	d	file:
OPTION_LT	ceres-solver/internal/ceres/solver.cc	85;"	d	file:
OPTION_LT_OPTION	ceres-solver/internal/ceres/solver.cc	312;"	d	file:
OPTION_LT_OPTION	ceres-solver/internal/ceres/solver.cc	87;"	d	file:
OPTION_OP	ceres-solver/internal/ceres/solver.cc	305;"	d	file:
OPTION_OP	ceres-solver/internal/ceres/solver.cc	58;"	d	file:
OPTION_OP_OPTION	ceres-solver/internal/ceres/solver.cc	306;"	d	file:
OPTION_OP_OPTION	ceres-solver/internal/ceres/solver.cc	69;"	d	file:
OVERSEE_TEST	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
O_BINARY	ceres-solver/examples/libmv_bundle_adjuster.cc	107;"	d	file:
OdometryConstraint	ceres-solver/examples/robot_pose_mle.cc	/^  OdometryConstraint(double odometry_mean, double odometry_stddev) :$/;"	f	struct:OdometryConstraint
OdometryConstraint	ceres-solver/examples/robot_pose_mle.cc	/^struct OdometryConstraint {$/;"	s	file:
OdometryCostFunction	ceres-solver/examples/robot_pose_mle.cc	/^  typedef AutoDiffCostFunction<OdometryConstraint, 1, 1> OdometryCostFunction;$/;"	t	struct:OdometryConstraint	file:
OnCallSpec	ceres-solver/internal/ceres/gmock/gmock.h	/^  OnCallSpec(const char* a_file, int a_line,$/;"	f	class:testing::internal::OnCallSpec
OnCallSpec	ceres-solver/internal/ceres/gmock/gmock.h	/^class OnCallSpec : public UntypedOnCallSpecBase {$/;"	c	namespace:testing::internal
OnEnvironmentsSetUpEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsSetUpEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsSetUpStart	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownStart	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnSearchFieldChange	src/doc/html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	src/doc/html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	src/doc/html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	src/doc/html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	src/doc/html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	src/doc/html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
OnTestCaseEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseStart	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestEnd(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestIterationEnd(const UnitTest& unit_test, int \/* iteration *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OnTestIterationEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestIterationEnd(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestIterationStart(const UnitTest& \/* unit_test *\/, int iteration) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationStart	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestIterationStart(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::internal::StreamingListener
OnTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnTestPartResult($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestPartResult	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestPartResult(const TestPartResult& \/*test_part_result*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramEnd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestProgramEnd(const UnitTest& unit_test) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramEnd	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestProgramStart(const UnitTest& \/* unit_test *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramStart	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestStart	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestStart	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void OnTestStart(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnThreadExit	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static void OnThreadExit(DWORD thread_id) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl
OnThreadLocalDestroyed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static void OnThreadLocalDestroyed($/;"	f	class:testing::internal::ThreadLocalRegistryImpl
OnThreadLocalDestroyed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ThreadLocalRegistry::OnThreadLocalDestroyed($/;"	f	class:testing::internal::ThreadLocalRegistry
OneParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct OneParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
OnlyFillsOneOutputFunctor	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^struct OnlyFillsOneOutputFunctor {$/;"	s	namespace:ceres::internal	file:
OnlyFillsOneOutputFunctor	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^struct OnlyFillsOneOutputFunctor {$/;"	s	namespace:ceres::internal	file:
OpenCVReprojectionError	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  OpenCVReprojectionError(const double observed_x, const double observed_y)$/;"	f	struct:__anon38::OpenCVReprojectionError
OpenCVReprojectionError	ceres-solver/examples/libmv_bundle_adjuster.cc	/^struct OpenCVReprojectionError {$/;"	s	namespace:__anon38	file:
OpenFile	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  bool OpenFile(const std::string &file_name) {$/;"	f	class:__anon38::EndianAwareFileReader
Options	ceres-solver/include/ceres/covariance.h	/^    Options() {$/;"	f	struct:ceres::Covariance::Options
Options	ceres-solver/include/ceres/covariance.h	/^  struct CERES_EXPORT Options {$/;"	s	class:ceres::Covariance
Options	ceres-solver/include/ceres/gradient_problem_solver.h	/^    Options() {$/;"	f	struct:ceres::GradientProblemSolver::Options
Options	ceres-solver/include/ceres/gradient_problem_solver.h	/^  struct CERES_EXPORT Options {$/;"	s	class:ceres::GradientProblemSolver
Options	ceres-solver/include/ceres/problem.h	/^    Options()$/;"	f	struct:ceres::Problem::Options
Options	ceres-solver/include/ceres/problem.h	/^  struct CERES_EXPORT Options {$/;"	s	class:ceres::Problem
Options	ceres-solver/include/ceres/solver.h	/^    Options() {$/;"	f	struct:ceres::Solver::Options
Options	ceres-solver/include/ceres/solver.h	/^  struct CERES_EXPORT Options {$/;"	s	class:ceres::Solver
Options	ceres-solver/internal/ceres/evaluator.h	/^    Options()$/;"	f	struct:ceres::internal::Evaluator::Options
Options	ceres-solver/internal/ceres/evaluator.h	/^  struct Options {$/;"	s	class:ceres::internal::Evaluator
Options	ceres-solver/internal/ceres/line_search.h	/^    Options()$/;"	f	struct:ceres::internal::LineSearch::Options
Options	ceres-solver/internal/ceres/line_search.h	/^  struct Options {$/;"	s	class:ceres::internal::LineSearch
Options	ceres-solver/internal/ceres/line_search_direction.h	/^    Options()$/;"	f	struct:ceres::internal::LineSearchDirection::Options
Options	ceres-solver/internal/ceres/line_search_direction.h	/^  struct Options {$/;"	s	class:ceres::internal::LineSearchDirection
Options	ceres-solver/internal/ceres/linear_solver.h	/^    Options()$/;"	f	struct:ceres::internal::LinearSolver::Options
Options	ceres-solver/internal/ceres/linear_solver.h	/^  struct Options {$/;"	s	class:ceres::internal::LinearSolver
Options	ceres-solver/internal/ceres/minimizer.h	/^    Options() {$/;"	f	struct:ceres::internal::Minimizer::Options
Options	ceres-solver/internal/ceres/minimizer.h	/^    explicit Options(const Solver::Options& options) {$/;"	f	struct:ceres::internal::Minimizer::Options
Options	ceres-solver/internal/ceres/minimizer.h	/^  struct Options {$/;"	s	class:ceres::internal::Minimizer
Options	ceres-solver/internal/ceres/preconditioner.h	/^    Options()$/;"	f	struct:ceres::internal::Preconditioner::Options
Options	ceres-solver/internal/ceres/preconditioner.h	/^  struct Options {$/;"	s	class:ceres::internal::Preconditioner
Options	ceres-solver/internal/ceres/trust_region_strategy.h	/^    Options()$/;"	f	struct:ceres::internal::TrustRegionStrategy::Options
Options	ceres-solver/internal/ceres/trust_region_strategy.h	/^  struct Options {$/;"	s	class:ceres::internal::TrustRegionStrategy
OrderedGroups	ceres-solver/include/ceres/ordered_groups.h	/^class OrderedGroups {$/;"	c	namespace:ceres
OrderingForSparseNormalCholeskyUsingCXSparse	ceres-solver/internal/ceres/reorder_program.cc	/^void OrderingForSparseNormalCholeskyUsingCXSparse($/;"	f	namespace:ceres::internal::__anon4
OrderingForSparseNormalCholeskyUsingEigenSparse	ceres-solver/internal/ceres/reorder_program.cc	/^void OrderingForSparseNormalCholeskyUsingEigenSparse($/;"	f	namespace:ceres::internal::__anon4
OrderingForSparseNormalCholeskyUsingSuiteSparse	ceres-solver/internal/ceres/reorder_program.cc	/^void OrderingForSparseNormalCholeskyUsingSuiteSparse($/;"	f	namespace:ceres::internal::__anon4
OrderingToGroupSizes	ceres-solver/internal/ceres/parameter_block_ordering.cc	/^void OrderingToGroupSizes(const ParameterBlockOrdering* ordering,$/;"	f	namespace:ceres::internal
OriginalFunction	ceres-solver/internal/ceres/gmock/gmock.h	/^        OriginalFunction;$/;"	t	class:testing::internal::IgnoreResultAction::Impl
OsStackTraceGetter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  OsStackTraceGetter() {}$/;"	f	class:testing::internal::OsStackTraceGetter
OsStackTraceGetter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class OsStackTraceGetter : public OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal	file:
OsStackTraceGetterInterface	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
OsStackTraceGetterInterface	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal	file:
OutputPoses	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d.cc	/^bool OutputPoses(const std::string& filename,$/;"	f	namespace:ceres::examples
OutputPoses	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d.cc	/^bool OutputPoses(const std::string& filename, const MapOfPoses& poses) {$/;"	f	namespace:ceres::examples
OutputXmlAttribute	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void XmlUnitTestResultPrinter::OutputXmlAttribute($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlCDataSection	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlTestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
Ownership	ceres-solver/include/ceres/types.h	/^enum Ownership {$/;"	g	namespace:ceres
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	276;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	278;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	280;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	282;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	284;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	286;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	288;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	290;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	292;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	294;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	296;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	298;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	300;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	302;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	304;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	306;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	308;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	310;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	312;"	d	file:
PARAMETER_BLOCK_SIZES	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	314;"	d	file:
PARAM_MANAGER_H	src/param_manager/include/param_manager.h	2;"	d
PATROLMODE_H	src/logical_core/src/patrol_mode.h	2;"	d
PATROL_MODE	logical_core/src/logical_core.cpp	/^    PATROL_MODE,$/;"	e	enum:AutoDrive	file:
PER_MINIMIZER_ITERATION	ceres-solver/include/ceres/types.h	/^  PER_MINIMIZER_ITERATION$/;"	e	enum:ceres::LoggingType
PGMImage	ceres-solver/examples/pgm_image.h	/^PGMImage<Real>::PGMImage(int width, int height)$/;"	f	class:ceres::examples::PGMImage
PGMImage	ceres-solver/examples/pgm_image.h	/^PGMImage<Real>::PGMImage(std::string filename) {$/;"	f	class:ceres::examples::PGMImage
PGMImage	ceres-solver/examples/pgm_image.h	/^class PGMImage {$/;"	c	namespace:ceres::examples
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/car_2d_nav/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/car_2d_nav/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/console/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/console/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/logical_core/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/logical_core/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/odometry/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/odometry/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/rplidar_ros/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/rplidar_ros/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/serial_comm/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/serial_comm/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/serial_communication/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/serial_communication/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/tf_tree/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/tf_tree/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/vision_unit/catkin_generated/pkg.develspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PKG_CONFIG_LIBRARIES_WITH_PREFIX	build/vision_unit/catkin_generated/pkg.installspace.context.pc.py	/^PKG_CONFIG_LIBRARIES_WITH_PREFIX = "".split(';') if "" != "" else []$/;"	v
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
POINTMODE_H	src/logical_core/src/point_mode.h	2;"	d
POINT_MODE	logical_core/src/logical_core.cpp	/^    POINT_MODE,$/;"	e	enum:AutoDrive	file:
POLAK_RIBIERE	ceres-solver/include/ceres/types.h	/^  POLAK_RIBIERE,$/;"	e	enum:ceres::NonlinearConjugateGradientType
PRIORITY_HIGH	src/rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_HIGH     = 1,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_IDLE	src/rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_IDLE     = 4,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_LOW	src/rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_LOW      = 3,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_NORMAL	src/rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_NORMAL   = 2,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_REALTIME	src/rplidar_ros/sdk/src/hal/thread.h	/^		PRIORITY_REALTIME = 0,$/;"	e	enum:rp::hal::Thread::priority_val_t
PROJECT_CATKIN_DEPENDS	build/car_2d_nav/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/car_2d_nav/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/console/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/console/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/logical_core/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/logical_core/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/odometry/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/odometry/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/rplidar_ros/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/rplidar_ros/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/serial_comm/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/serial_comm/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/serial_communication/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/serial_communication/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "message_runtime".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/tf_tree/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/tf_tree/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/vision_unit/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_CATKIN_DEPENDS	build/vision_unit/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_CATKIN_DEPENDS = "".replace(';', ' ')$/;"	v
PROJECT_NAME	build/car_2d_nav/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "car_2d_nav"$/;"	v
PROJECT_NAME	build/car_2d_nav/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "car_2d_nav"$/;"	v
PROJECT_NAME	build/console/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "console"$/;"	v
PROJECT_NAME	build/console/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "console"$/;"	v
PROJECT_NAME	build/logical_core/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "logical_core"$/;"	v
PROJECT_NAME	build/logical_core/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "logical_core"$/;"	v
PROJECT_NAME	build/odometry/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "odometry"$/;"	v
PROJECT_NAME	build/odometry/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "odometry"$/;"	v
PROJECT_NAME	build/rplidar_ros/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "rplidar_ros"$/;"	v
PROJECT_NAME	build/rplidar_ros/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "rplidar_ros"$/;"	v
PROJECT_NAME	build/serial_comm/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "serial_comm"$/;"	v
PROJECT_NAME	build/serial_comm/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "serial_comm"$/;"	v
PROJECT_NAME	build/serial_communication/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "ctrl_serial_comm"$/;"	v
PROJECT_NAME	build/serial_communication/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "ctrl_serial_comm"$/;"	v
PROJECT_NAME	build/tf_tree/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "tf_tree"$/;"	v
PROJECT_NAME	build/tf_tree/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "tf_tree"$/;"	v
PROJECT_NAME	build/vision_unit/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_NAME = "vision_unit"$/;"	v
PROJECT_NAME	build/vision_unit/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_NAME = "vision_unit"$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/car_2d_nav/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "".split(';') if "" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/car_2d_nav/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "".split(';') if "" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/console/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/console/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/logical_core/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/logical_core/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/odometry/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/odometry/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/rplidar_ros/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "".split(';') if "" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/rplidar_ros/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "".split(';') if "" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/serial_comm/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/serial_comm/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/serial_communication/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/serial_communication/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/tf_tree/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "".split(';') if "" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/tf_tree/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "".split(';') if "" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/vision_unit/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/devel\/include" != "" else []$/;"	v
PROJECT_PKG_CONFIG_INCLUDE_DIRS	build/vision_unit/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_PKG_CONFIG_INCLUDE_DIRS = "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/install\/include" != "" else []$/;"	v
PROJECT_SPACE_DIR	build/car_2d_nav/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/car_2d_nav/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/console/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/console/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/logical_core/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/logical_core/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/odometry/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/odometry/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/rplidar_ros/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/rplidar_ros/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/serial_comm/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/serial_comm/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/serial_communication/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/serial_communication/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/tf_tree/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/tf_tree/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_SPACE_DIR	build/vision_unit/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/devel"$/;"	v
PROJECT_SPACE_DIR	build/vision_unit/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_SPACE_DIR = "\/home\/ubuntu\/dji_beta\/auto_car\/install"$/;"	v
PROJECT_VERSION	build/car_2d_nav/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/car_2d_nav/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/console/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/console/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/logical_core/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/logical_core/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/odometry/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/odometry/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/rplidar_ros/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "1.5.7"$/;"	v
PROJECT_VERSION	build/rplidar_ros/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "1.5.7"$/;"	v
PROJECT_VERSION	build/serial_comm/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/serial_comm/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/serial_communication/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/serial_communication/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/tf_tree/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/tf_tree/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.0.0"$/;"	v
PROJECT_VERSION	build/vision_unit/catkin_generated/pkg.develspace.context.pc.py	/^PROJECT_VERSION = "0.1.0"$/;"	v
PROJECT_VERSION	build/vision_unit/catkin_generated/pkg.installspace.context.pc.py	/^PROJECT_VERSION = "0.1.0"$/;"	v
PYTHON_EXECUTABLE	build/console/cmake/console-genmsg-context.py	/^PYTHON_EXECUTABLE = "\/usr\/bin\/python"$/;"	v
PYTHON_EXECUTABLE	build/logical_core/cmake/logical_core-genmsg-context.py	/^PYTHON_EXECUTABLE = "\/usr\/bin\/python"$/;"	v
PYTHON_EXECUTABLE	build/odometry/cmake/odometry-genmsg-context.py	/^PYTHON_EXECUTABLE = "\/usr\/bin\/python"$/;"	v
PYTHON_EXECUTABLE	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^PYTHON_EXECUTABLE = "\/usr\/bin\/python"$/;"	v
PYTHON_EXECUTABLE	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^PYTHON_EXECUTABLE = "\/usr\/bin\/python"$/;"	v
PYTHON_EXECUTABLE	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^PYTHON_EXECUTABLE = "\/usr\/bin\/python"$/;"	v
PackCamerasRotationAndTranslation	ceres-solver/examples/libmv_bundle_adjuster.cc	/^vector<Vec6> PackCamerasRotationAndTranslation($/;"	f	namespace:__anon38
Pair	ceres-solver/internal/ceres/gmock/gmock.h	/^Pair(FirstMatcher first_matcher, SecondMatcher second_matcher) {$/;"	f	namespace:testing
PairMatchBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class PairMatchBase {$/;"	c	namespace:testing::internal
PairMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  PairMatcher(FirstMatcher first_matcher, SecondMatcher second_matcher)$/;"	f	class:testing::internal::PairMatcher
PairMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class PairMatcher {$/;"	c	namespace:testing::internal
PairMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  PairMatcherImpl(FirstMatcher first_matcher, SecondMatcher second_matcher)$/;"	f	class:testing::internal::PairMatcherImpl
PairMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class PairMatcherImpl : public MatcherInterface<PairType> {$/;"	c	namespace:testing::internal
ParamGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamIterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamNameGenFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^struct ParamNameGenFunc {$/;"	s	namespace:testing::internal
ParamNameGeneratorFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename ParamNameGenFunc<ParamType>::Type ParamNameGeneratorFunc;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator10
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator9
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator8
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6, T7> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator7
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5, T6> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator6
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4, T5> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator5
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3, T4> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator4
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2, T3> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator3
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::testing::tuple<T1, T2> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator2
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::TestMetaFactory
ParamType	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParameterBlock	ceres-solver/internal/ceres/parameter_block.h	/^  ParameterBlock(double* user_state, int size, int index) {$/;"	f	class:ceres::internal::ParameterBlock
ParameterBlock	ceres-solver/internal/ceres/parameter_block.h	/^  ParameterBlock(double* user_state,$/;"	f	class:ceres::internal::ParameterBlock
ParameterBlock	ceres-solver/internal/ceres/parameter_block.h	/^class ParameterBlock {$/;"	c	namespace:ceres::internal
ParameterBlockLocalSize	ceres-solver/internal/ceres/problem.cc	/^int Problem::ParameterBlockLocalSize(const double* parameter_block) const {$/;"	f	class:ceres::Problem
ParameterBlockLocalSize	ceres-solver/internal/ceres/problem_impl.cc	/^int ProblemImpl::ParameterBlockLocalSize(const double* values) const {$/;"	f	class:ceres::internal::ProblemImpl
ParameterBlockOrdering	ceres-solver/include/ceres/ordered_groups.h	/^typedef OrderedGroups<double*> ParameterBlockOrdering;$/;"	t	namespace:ceres
ParameterBlockSize	ceres-solver/internal/ceres/problem.cc	/^int Problem::ParameterBlockSize(const double* parameter_block) const {$/;"	f	class:ceres::Problem
ParameterBlockSize	ceres-solver/internal/ceres/problem_impl.cc	/^int ProblemImpl::ParameterBlockSize(const double* values) const {$/;"	f	class:ceres::internal::ProblemImpl
ParameterBlocksAreEquivalent	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^void ParameterBlocksAreEquivalent(const ParameterBlock*  left,$/;"	f	namespace:ceres::internal
ParameterBlocksAreFinite	ceres-solver/internal/ceres/program.cc	/^bool Program::ParameterBlocksAreFinite(string* message) const {$/;"	f	class:ceres::internal::Program
ParameterBlocksToStateVector	ceres-solver/internal/ceres/program.cc	/^void Program::ParameterBlocksToStateVector(double *state) const {$/;"	f	class:ceres::internal::Program
ParameterIgnoringCostFunction	ceres-solver/internal/ceres/evaluator_test.cc	/^class ParameterIgnoringCostFunction$/;"	c	namespace:ceres::internal	file:
ParameterMap	ceres-solver/internal/ceres/problem_impl.cc	/^typedef std::map<double*, internal::ParameterBlock*> ParameterMap;$/;"	t	namespace:ceres::internal	file:
ParameterMap	ceres-solver/internal/ceres/problem_impl.h	/^  typedef std::map<double*, ParameterBlock*> ParameterMap;$/;"	t	class:ceres::internal::ProblemImpl
ParameterSensitiveCostFunction	ceres-solver/internal/ceres/evaluator_test.cc	/^class ParameterSensitiveCostFunction : public SizedCostFunction<2, 2> {$/;"	c	namespace:ceres::internal	file:
ParameterToleranceReached	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^bool TrustRegionMinimizer::ParameterToleranceReached() {$/;"	f	class:ceres::internal::TrustRegionMinimizer
Parameterized	ceres-solver/examples/libmv_homography.cc	/^  typedef Eigen::Matrix<T, 3, 3> Parameterized;  \/\/ H$/;"	t	class:__anon41::Homography2DNormalizedParameterization	file:
ParameterizedTestCaseInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit ParameterizedTestCaseInfo($/;"	f	class:testing::internal::ParameterizedTestCaseInfo
ParameterizedTestCaseInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParameterizedTestCaseInfo : public ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseInfoBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
ParameterizedTestCaseInfoBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseRegistry	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParameterizedTestCaseRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ParameterizedTestCaseRegistry	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParameterizedTestCaseRegistry {$/;"	c	namespace:testing::internal
ParameterizedTestFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
Parameters	ceres-solver/examples/libmv_homography.cc	/^  typedef Eigen::Matrix<T, 8, 1> Parameters;     \/\/ a, b, ... g, h$/;"	t	class:__anon41::Homography2DNormalizedParameterization	file:
ParseBoolFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ParseBoolFlag(const char* str, const char* flag, bool* value) {$/;"	f	namespace:testing::internal
ParseFlagValue	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* ParseFlagValue(const char* str,$/;"	f	namespace:testing::internal
ParseGoogleMockBoolFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool ParseGoogleMockBoolFlag(const char* str, const char* flag,$/;"	f	namespace:testing::internal
ParseGoogleMockFlagValue	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char* ParseGoogleMockFlagValue(const char* str,$/;"	f	namespace:testing::internal
ParseGoogleMockStringFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool ParseGoogleMockStringFlag(const char* str, const char* flag,$/;"	f	namespace:testing::internal
ParseGoogleTestFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ParseGoogleTestFlag(const char* const arg) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ParseGoogleTestFlagsOnly(int* argc, char** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnlyImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
ParseInt32	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ParseInt32(const Message& src_text, const char* str, Int32* value) {$/;"	f	namespace:testing::internal
ParseInt32Flag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {$/;"	f	namespace:testing::internal
ParseInternalRunDeathTestFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {$/;"	f	namespace:testing::internal
ParseNaturalNumber	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ParseNaturalNumber(const ::std::string& str, Integer* number) {$/;"	f	namespace:testing::internal
ParseStringFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ParseStringFlag(const char* str, const char* flag, std::string* value) {$/;"	f	namespace:testing::internal
PartialMatch	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool RE::PartialMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
PartialMatch	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartialMatch	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool PartialMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartitionedMatrixView	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^class PartitionedMatrixView : public PartitionedMatrixViewBase {$/;"	c	namespace:ceres::internal
PartitionedMatrixView	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^PartitionedMatrixView($/;"	f	class:ceres::internal::PartitionedMatrixView
PartitionedMatrixViewBase	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^class PartitionedMatrixViewBase {$/;"	c	namespace:ceres::internal
PartitionedMatrixViewTest	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^class PartitionedMatrixViewTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Passed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::internal::UnitTestImpl
Passed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool DeathTestImpl::Passed(bool status_ok) {$/;"	f	class:testing::internal::DeathTestImpl
Passed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool UnitTest::Passed() const { return impl()->Passed(); }$/;"	f	class:testing::UnitTest
Passed	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestCase
Passed	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestResult
PatrolMode	src/logical_core/src/patrol_mode.cpp	/^PatrolMode::PatrolMode(LogicalCore* logical_core)$/;"	f	class:PatrolMode
PatrolMode	src/logical_core/src/patrol_mode.h	/^class PatrolMode: public MissionMode$/;"	c
PatternMatchesString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool UnitTestOptions::PatternMatchesString(const char *pattern,$/;"	f	class:testing::internal::UnitTestOptions
Peek	ceres-solver/internal/ceres/gmock/gmock.h	/^  const T& Peek() const { return *value_ptr_; }$/;"	f	class:testing::internal::ReferenceOrValueWrapper
Peek	ceres-solver/internal/ceres/gmock/gmock.h	/^  const T& Peek() const {$/;"	f	class:testing::internal::ReferenceOrValueWrapper
PerSolveOptions	ceres-solver/internal/ceres/linear_solver.h	/^    PerSolveOptions()$/;"	f	struct:ceres::internal::LinearSolver::PerSolveOptions
PerSolveOptions	ceres-solver/internal/ceres/linear_solver.h	/^  struct PerSolveOptions {$/;"	s	class:ceres::internal::LinearSolver
PerSolveOptions	ceres-solver/internal/ceres/trust_region_strategy.h	/^    PerSolveOptions()$/;"	f	struct:ceres::internal::TrustRegionStrategy::PerSolveOptions
PerSolveOptions	ceres-solver/internal/ceres/trust_region_strategy.h	/^  struct PerSolveOptions {$/;"	s	class:ceres::internal::TrustRegionStrategy
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual Result Perform(const ArgumentTuple& args) {$/;"	f	class:testing::PolymorphicAction::MonomorphicImpl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual Result Perform(const ArgumentTuple& args) {$/;"	f	class:testing::internal::DoBothAction::Impl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual Result Perform(const ArgumentTuple& args) {$/;"	f	class:testing::internal::WithArgsAction::Impl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual Result Perform(const ArgumentTuple&) { return value_; }$/;"	f	class:testing::internal::ReturnAction::Impl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual Result Perform(const ArgumentTuple&) {$/;"	f	class:testing::internal::ReturnAction::Impl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual Result Perform(const ArgumentTuple&) {$/;"	f	class:testing::internal::ReturnRefAction::Impl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual Result Perform(const ArgumentTuple&) {$/;"	f	class:testing::internal::ReturnRefOfCopyAction::Impl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual void Perform(const ArgumentTuple& args) {$/;"	f	class:testing::internal::IgnoreResultAction::Impl
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  Result Perform(const ArgumentTuple& \/* args *\/) const {$/;"	f	class:testing::internal::SetErrnoAndReturnAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  Result Perform(const ArgumentTuple& args) const {$/;"	f	class:testing::Action
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  Result Perform(const ArgumentTuple& args) const {$/;"	f	class:testing::internal::InvokeMethodAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  Result Perform(const ArgumentTuple& args) {$/;"	f	class:testing::internal::InvokeAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  Result Perform(const ArgumentTuple&) const {$/;"	f	class:testing::internal::InvokeMethodWithoutArgsAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  Result Perform(const ArgumentTuple&) { return function_impl_(); }$/;"	f	class:testing::internal::InvokeWithoutArgsAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(Impl* impl, const ::testing::tuple<>& args) {$/;"	f	class:testing::internal::ActionHelper
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(Impl* impl, const ::testing::tuple<A0, A1, A2, A3, A4,$/;"	f	class:testing::internal::ActionHelper
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(Impl* impl, const ::testing::tuple<A0, A1, A2, A3,$/;"	f	class:testing::internal::ActionHelper
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(Impl* impl, const ::testing::tuple<A0, A1, A2,$/;"	f	class:testing::internal::ActionHelper
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(Impl* impl, const ::testing::tuple<A0, A1, A2>& args) {$/;"	f	class:testing::internal::ActionHelper
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(Impl* impl, const ::testing::tuple<A0, A1>& args) {$/;"	f	class:testing::internal::ActionHelper
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(Impl* impl, const ::testing::tuple<A0>& args) {$/;"	f	class:testing::internal::ActionHelper
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static Result Perform(const ArgumentTuple&) {$/;"	f	class:testing::internal::ReturnNullAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void Perform(const ArgumentTuple&) {$/;"	f	class:testing::internal::ReturnVoidAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual Result Perform(const ArgumentTuple& args) {$/;"	f	class:testing::internal::ActionAdaptor
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  void Perform(const ArgumentTuple& \/* args *\/) const {$/;"	f	class:testing::internal::AssignAction
Perform	ceres-solver/internal/ceres/gmock/gmock.h	/^  void Perform(const ArgumentTuple& args) const {$/;"	f	class:testing::internal::SetArgumentPointeeAction
PerformAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  PerformAction(const Action<F>& action,$/;"	f	class:testing::internal::ActionResultHolder
PerformAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ActionResultHolder* PerformAction($/;"	f	class:testing::internal::ActionResultHolder
PerformDefaultAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  Result PerformDefaultAction(const ArgumentTuple& args,$/;"	f	class:testing::internal::FunctionMockerBase
PerformDefaultAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ActionResultHolder* PerformDefaultAction($/;"	f	class:testing::internal::ActionResultHolder
Perturb	ceres-solver/examples/bal_problem.cc	/^void BALProblem::Perturb(const double rotation_sigma,$/;"	f	class:ceres::examples::BALProblem
PerturbPoint3	ceres-solver/examples/bal_problem.cc	/^void PerturbPoint3(const double sigma, double* point) {$/;"	f	namespace:ceres::examples::__anon37
Pixel	ceres-solver/examples/pgm_image.h	/^Real PGMImage<Real>::Pixel(int x, int y) const {$/;"	f	class:ceres::examples::PGMImage
PixelFromLinearIndex	ceres-solver/examples/pgm_image.h	/^Real  PGMImage<Real>::PixelFromLinearIndex(int index) const {$/;"	f	class:ceres::examples::PGMImage
Plus	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  virtual bool Plus(const double* x,$/;"	f	class:ceres::AutoDiffLocalParameterization
Plus	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual bool Plus(const double* x,$/;"	f	class:ceres::internal::PolynomialParameterization
Plus	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  virtual bool Plus(const double* x,$/;"	f	class:ceres::internal::MatrixParameterization
Plus	ceres-solver/internal/ceres/gradient_problem.cc	/^bool GradientProblem::Plus(const double* x,$/;"	f	class:ceres::GradientProblem
Plus	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual bool Plus(const double* state,$/;"	f	class:ceres::internal::GradientProblemEvaluator
Plus	ceres-solver/internal/ceres/local_parameterization.cc	/^bool EigenQuaternionParameterization::Plus(const double* x_ptr,$/;"	f	class:ceres::EigenQuaternionParameterization
Plus	ceres-solver/internal/ceres/local_parameterization.cc	/^bool HomogeneousVectorParameterization::Plus(const double* x_ptr,$/;"	f	class:ceres::HomogeneousVectorParameterization
Plus	ceres-solver/internal/ceres/local_parameterization.cc	/^bool IdentityParameterization::Plus(const double* x,$/;"	f	class:ceres::IdentityParameterization
Plus	ceres-solver/internal/ceres/local_parameterization.cc	/^bool ProductParameterization::Plus(const double* x,$/;"	f	class:ceres::ProductParameterization
Plus	ceres-solver/internal/ceres/local_parameterization.cc	/^bool QuaternionParameterization::Plus(const double* x,$/;"	f	class:ceres::QuaternionParameterization
Plus	ceres-solver/internal/ceres/local_parameterization.cc	/^bool SubsetParameterization::Plus(const double* x,$/;"	f	class:ceres::SubsetParameterization
Plus	ceres-solver/internal/ceres/parameter_block.h	/^  bool Plus(const double *x, const double* delta, double* x_plus_delta) {$/;"	f	class:ceres::internal::ParameterBlock
Plus	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual bool Plus(const double* x,$/;"	f	class:ceres::internal::BadLocalParameterization
Plus	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual bool Plus(const double* x,$/;"	f	struct:ceres::internal::TestParameterization
Plus	ceres-solver/internal/ceres/program.cc	/^bool Program::Plus(const double* state,$/;"	f	class:ceres::internal::Program
Plus	ceres-solver/internal/ceres/program_evaluator.h	/^  bool Plus(const double* state,$/;"	f	class:ceres::internal::ProgramEvaluator
Plus	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  virtual bool Plus(const double* state,$/;"	f	class:ceres::internal::PowellEvaluator2
PointForTrack	ceres-solver/examples/libmv_bundle_adjuster.cc	/^EuclideanPoint *PointForTrack(vector<EuclideanPoint> *all_points,$/;"	f	namespace:__anon38
PointMode	src/logical_core/src/point_mode.cpp	/^PointMode::PointMode(LogicalCore *logical_core)$/;"	f	class:PointMode
PointMode	src/logical_core/src/point_mode.h	/^class PointMode: public MissionMode$/;"	c
PointToLineSegmentContourCostFunction	ceres-solver/examples/ellipse_approximation.cc	/^  PointToLineSegmentContourCostFunction(const int num_segments,$/;"	f	class:PointToLineSegmentContourCostFunction
PointToLineSegmentContourCostFunction	ceres-solver/examples/ellipse_approximation.cc	/^class PointToLineSegmentContourCostFunction : public ceres::CostFunction {$/;"	c	file:
Pointee	ceres-solver/internal/ceres/gmock/gmock.h	/^        GTEST_REMOVE_REFERENCE_(Pointer))>::type Pointee;$/;"	t	class:testing::internal::PointeeMatcher::Impl
Pointee	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::PointeeMatcher<InnerMatcher> Pointee($/;"	f	namespace:testing
PointeeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit PointeeMatcher(const InnerMatcher& matcher) : matcher_(matcher) {}$/;"	f	class:testing::internal::PointeeMatcher
PointeeMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class PointeeMatcher {$/;"	c	namespace:testing::internal
PointeeOf	ceres-solver/internal/ceres/gmock/gmock.h	/^struct PointeeOf {$/;"	s	namespace:testing::internal
PointeeOf	ceres-solver/internal/ceres/gmock/gmock.h	/^struct PointeeOf<T*> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
Pointwise	ceres-solver/internal/ceres/gmock/gmock.h	/^Pointwise(const TupleMatcher& tuple_matcher, const Container& rhs) {$/;"	f	namespace:testing
Pointwise	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::PointwiseMatcher<TupleMatcher, std::vector<T> > Pointwise($/;"	f	namespace:testing
PointwiseMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  PointwiseMatcher(const TupleMatcher& tuple_matcher, const RhsContainer& rhs)$/;"	f	class:testing::internal::PointwiseMatcher
PointwiseMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class PointwiseMatcher {$/;"	c	namespace:testing::internal
PolymorphicAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit PolymorphicAction(const Impl& impl) : impl_(impl) {}$/;"	f	class:testing::PolymorphicAction
PolymorphicAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class PolymorphicAction {$/;"	c	namespace:testing
PolymorphicMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit PolymorphicMatcher(const Impl& an_impl) : impl_(an_impl) {}$/;"	f	class:testing::PolymorphicMatcher
PolymorphicMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class PolymorphicMatcher {$/;"	c	namespace:testing
PolynomialParameterization	ceres-solver/internal/ceres/covariance_test.cc	/^class PolynomialParameterization : public LocalParameterization {$/;"	c	namespace:ceres::internal	file:
PopulateJacobianRowAndColumnBlockVectors	ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc	/^void CompressedRowJacobianWriter::PopulateJacobianRowAndColumnBlockVectors($/;"	f	class:ceres::internal::CompressedRowJacobianWriter
PortableLocaltime	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool PortableLocaltime(time_t seconds, struct tm* out) {$/;"	f	namespace:testing::internal
Pose2d	ceres-solver/examples/slam/pose_graph_2d/types.h	/^struct Pose2d {$/;"	s	namespace:ceres::examples
Pose3d	ceres-solver/examples/slam/pose_graph_3d/types.h	/^struct Pose3d {$/;"	s	namespace:ceres::examples
PoseGraph2dErrorTerm	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^  PoseGraph2dErrorTerm(double x_ab, double y_ab, double yaw_ab_radians,$/;"	f	class:ceres::examples::PoseGraph2dErrorTerm
PoseGraph2dErrorTerm	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^class PoseGraph2dErrorTerm {$/;"	c	namespace:ceres::examples
PoseGraph3dErrorTerm	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^  PoseGraph3dErrorTerm(const Pose3d& t_ab_measured,$/;"	f	class:ceres::examples::PoseGraph3dErrorTerm
PoseGraph3dErrorTerm	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^class PoseGraph3dErrorTerm {$/;"	c	namespace:ceres::examples
PostFlagParsingInit	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::PostFlagParsingInit() {$/;"	f	class:testing::internal::UnitTestImpl
PostSolveSummarize	ceres-solver/internal/ceres/solver.cc	/^void PostSolveSummarize(const internal::PreprocessedProblem& pp,$/;"	f	namespace:ceres::__anon15
PowellEvaluator2	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  PowellEvaluator2()$/;"	f	class:ceres::internal::PowellEvaluator2
PowellEvaluator2	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^class PowellEvaluator2 : public Evaluator {$/;"	c	namespace:ceres::internal	file:
PowellTest	ceres-solver/internal/ceres/system_test.cc	/^typedef SystemTest<PowellsFunction> PowellTest;$/;"	t	namespace:ceres::internal	file:
PowellsFunction	ceres-solver/internal/ceres/system_test.cc	/^  PowellsFunction() {$/;"	f	class:ceres::internal::PowellsFunction
PowellsFunction	ceres-solver/internal/ceres/system_test.cc	/^class PowellsFunction {$/;"	c	namespace:ceres::internal	file:
PreSolveSummarize	ceres-solver/internal/ceres/solver.cc	/^void PreSolveSummarize(const Solver::Options& options,$/;"	f	namespace:ceres::__anon15
Preconditioner	ceres-solver/internal/ceres/preconditioner.h	/^class Preconditioner : public LinearOperator {$/;"	c	namespace:ceres::internal
PreconditionerForZeroEBlocks	ceres-solver/internal/ceres/preconditioner.cc	/^PreconditionerType Preconditioner::PreconditionerForZeroEBlocks($/;"	f	class:ceres::internal::Preconditioner
PreconditionerType	ceres-solver/include/ceres/types.h	/^enum PreconditionerType {$/;"	g	namespace:ceres
PreconditionerTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* PreconditionerTypeToString(PreconditionerType type) {$/;"	f	namespace:ceres
PredicateFormatterFromMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit PredicateFormatterFromMatcher(M m) : matcher_(internal::move(m)) {}$/;"	f	class:testing::internal::PredicateFormatterFromMatcher
PredicateFormatterFromMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class PredicateFormatterFromMatcher {$/;"	c	namespace:testing::internal
Prepare	ceres-solver/internal/ceres/block_evaluate_preparer.cc	/^void BlockEvaluatePreparer::Prepare(const ResidualBlock* residual_block,$/;"	f	class:ceres::internal::BlockEvaluatePreparer
Prepare	ceres-solver/internal/ceres/scratch_evaluate_preparer.cc	/^void ScratchEvaluatePreparer::Prepare(const ResidualBlock* residual_block,$/;"	f	class:ceres::internal::ScratchEvaluatePreparer
Preprocess	ceres-solver/internal/ceres/line_search_preprocessor.cc	/^bool LineSearchPreprocessor::Preprocess(const Solver::Options& options,$/;"	f	class:ceres::internal::LineSearchPreprocessor
Preprocess	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^bool TrustRegionPreprocessor::Preprocess(const Solver::Options& options,$/;"	f	class:ceres::internal::TrustRegionPreprocessor
PreprocessForGivenLinearSolverAndVerify	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  void PreprocessForGivenLinearSolverAndVerify($/;"	f	class:ceres::internal::LinearSolverAndEvaluatorCreationTest
PreprocessedProblem	ceres-solver/internal/ceres/preprocessor.h	/^  PreprocessedProblem()$/;"	f	struct:ceres::internal::PreprocessedProblem
PreprocessedProblem	ceres-solver/internal/ceres/preprocessor.h	/^struct PreprocessedProblem {$/;"	s	namespace:ceres::internal
Preprocessor	ceres-solver/internal/ceres/preprocessor.h	/^class Preprocessor {$/;"	c	namespace:ceres::internal
PrettyUnitTestResultPrinter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  PrettyUnitTestResultPrinter() {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrettyUnitTestResultPrinter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class PrettyUnitTestResultPrinter : public TestEventListener {$/;"	c	namespace:testing::internal	file:
Print	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(const char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(const wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ceres-solver/internal/ceres/suitesparse.h	/^  void Print(cholmod_dense* m, const std::string& name) {$/;"	f	class:ceres::internal::SuiteSparse
Print	ceres-solver/internal/ceres/suitesparse.h	/^  void Print(cholmod_sparse* m, const std::string& name) {$/;"	f	class:ceres::internal::SuiteSparse
Print	ceres-solver/internal/ceres/suitesparse.h	/^  void Print(cholmod_triplet* m, const std::string& name) {$/;"	f	class:ceres::internal::SuiteSparse
PrintAsActionResult	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void PrintAsActionResult(::std::ostream* \/* os *\/) const {}$/;"	f	class:testing::internal::ActionResultHolder
PrintAsActionResult	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void PrintAsActionResult(::std::ostream* os) const {$/;"	f	class:testing::internal::ActionResultHolder
PrintAsCharLiteralTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static CharFormat PrintAsStringLiteralTo(char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static CharFormat PrintAsStringLiteralTo(wchar_t c, ostream* os) {$/;"	f	namespace:testing::internal
PrintByteSegmentInObjectTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintByteSegmentInObjectTo(const unsigned char* obj_bytes, size_t start,$/;"	f	namespace:testing::__anon27
PrintBytesInObjectTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::internal2
PrintBytesInObjectToImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintBytesInObjectToImpl(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::__anon27
PrintCameraIntrinsics	ceres-solver/examples/libmv_bundle_adjuster.cc	/^void PrintCameraIntrinsics(const char *text, const double *camera_intrinsics) {$/;"	f	namespace:__anon38
PrintCharAndCodeTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintCharAndCodeTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintCharsAsStringTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void PrintCharsAsStringTo($/;"	f	namespace:testing::internal
PrintColorEncoded	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void PrintColorEncoded(const char* str) {$/;"	f	namespace:testing::internal
PrintFailedTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintFullTestCommentIfPresent	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintFullTestCommentIfPresent(const TestInfo& test_info) {$/;"	f	namespace:testing::internal
PrintHeader	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void PrintHeader(std::ostream* ss) const {$/;"	f	class:testing::internal::edit_distance::__anon19::Hunk	file:
PrintIfNotEmpty	ceres-solver/internal/ceres/gmock/gmock.h	/^inline void PrintIfNotEmpty(const internal::string& explanation,$/;"	f	namespace:testing::internal
PrintIndices	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void PrintIndices(::std::ostream* os) {$/;"	f	class:testing::internal::ArgsMatcherImpl
PrintOnOneLine	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void PrintOnOneLine(const char* str, int max_length) {$/;"	f	namespace:testing::internal
PrintPrefixTo	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintPrefixTo	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintRawArrayTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintState	ceres-solver/examples/robot_pose_mle.cc	/^void PrintState(const vector<double>& odometry_readings,$/;"	f
PrintStringTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintStringTo(const ::std::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintStringTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintStringTo(const ::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTestName	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static void PrintTestName(const char * test_case, const char * test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void PrintTestPartResult(const TestPartResult& test_part_result) {$/;"	f	namespace:testing::internal
PrintTestPartResultToString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::string PrintTestPartResultToString($/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gmock/gmock.h	/^void PrintTo(const ReferenceWrapper<T>& ref, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void PrintTo(std::ostream* os) {$/;"	f	class:testing::internal::edit_distance::__anon19::Hunk
PrintTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintTo(const char* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintTo(const wchar_t* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintTo(signed char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintTo(unsigned char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintTo(wchar_t wc, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(const ::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(const ::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo($/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintToString	ceres-solver/internal/ceres/gtest/gtest.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintToStringParamName	ceres-solver/internal/ceres/gtest/gtest.h	/^struct PrintToStringParamName {$/;"	s	namespace:testing
PrintTupleTo	ceres-solver/internal/ceres/gtest/gtest.h	/^void PrintTupleTo(const Tuple& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintValue	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PrintWideStringTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintWideStringTo(const ::std::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintWideStringTo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void PrintWideStringTo(const ::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintXmlTestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PrintXmlUnitTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
Printer	devel/include/console/serial_data.h	/^struct Printer< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/ctrl_serial_comm/car_speed.h	/^struct Printer< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/ctrl_serial_comm/serial_data.h	/^struct Printer< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/logical_core/SetGoalRequest.h	/^struct Printer< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/logical_core/SetGoalResponse.h	/^struct Printer< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/odometry/car_speed.h	/^struct Printer< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/serial_comm/car_speed.h	/^struct Printer< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/serial_comm/serial_data.h	/^struct Printer< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/vision_unit/SetGoalRequest.h	/^struct Printer< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/vision_unit/SetGoalResponse.h	/^struct Printer< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/vision_unit/armor_msg.h	/^struct Printer< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	devel/include/vision_unit/transformed_scan.h	/^struct Printer< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Probe	ceres-solver/internal/ceres/gradient_checker.cc	/^bool GradientChecker::Probe(double const* const * parameters,$/;"	f	class:ceres::GradientChecker
ProbeResults	ceres-solver/include/ceres/gradient_checker.h	/^  struct CERES_EXPORT ProbeResults {$/;"	s	class:ceres::GradientChecker
Problem	ceres-solver/include/ceres/problem.h	/^class CERES_EXPORT Problem {$/;"	c	namespace:ceres
Problem	ceres-solver/internal/ceres/problem.cc	/^Problem::Problem() : problem_impl_(new internal::ProblemImpl) {}$/;"	f	class:ceres::Problem
Problem	ceres-solver/internal/ceres/problem.cc	/^Problem::Problem(const Problem::Options& options)$/;"	f	class:ceres::Problem
ProblemEvaluateTest	ceres-solver/internal/ceres/problem_test.cc	/^class ProblemEvaluateTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
ProblemImpl	ceres-solver/internal/ceres/problem_impl.cc	/^ProblemImpl::ProblemImpl() : program_(new internal::Program) {}$/;"	f	class:ceres::internal::ProblemImpl
ProblemImpl	ceres-solver/internal/ceres/problem_impl.cc	/^ProblemImpl::ProblemImpl(const Problem::Options& options)$/;"	f	class:ceres::internal::ProblemImpl
ProblemImpl	ceres-solver/internal/ceres/problem_impl.h	/^class ProblemImpl {$/;"	c	namespace:ceres::internal
ProcessKeys	src/doc/html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
Produce	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual T Produce() { return factory_(); }$/;"	f	class:testing::DefaultValue::FactoryValueProducer
Produce	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual T Produce() { return value_; }$/;"	f	class:testing::DefaultValue::FixedValueProducer
ProductParameterization	ceres-solver/include/ceres/local_parameterization.h	/^class CERES_EXPORT ProductParameterization : public LocalParameterization {$/;"	c	namespace:ceres
ProductParameterization	ceres-solver/internal/ceres/local_parameterization.cc	/^ProductParameterization::ProductParameterization($/;"	f	class:ceres::ProductParameterization
ProductParameterizationTest	ceres-solver/internal/ceres/local_parameterization_test.cc	/^class ProductParameterizationTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
ProductTerm	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  ProductTerm(const int row, const int col, const int index)$/;"	f	struct:ceres::internal::__anon34::ProductTerm
ProductTerm	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^struct ProductTerm {$/;"	s	namespace:ceres::internal::__anon34	file:
Program	ceres-solver/internal/ceres/program.cc	/^Program::Program() {}$/;"	f	class:ceres::internal::Program
Program	ceres-solver/internal/ceres/program.cc	/^Program::Program(const Program& program)$/;"	f	class:ceres::internal::Program
Program	ceres-solver/internal/ceres/program.h	/^class Program {$/;"	c	namespace:ceres::internal
ProgramEvaluator	ceres-solver/internal/ceres/program_evaluator.h	/^  ProgramEvaluator(const Evaluator::Options &options, Program* program)$/;"	f	class:ceres::internal::ProgramEvaluator
ProgramEvaluator	ceres-solver/internal/ceres/program_evaluator.h	/^class ProgramEvaluator : public Evaluator {$/;"	c	namespace:ceres::internal
Projective	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Projective {$/;"	s	namespace:ceres::internal	file:
PropertyMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class PropertyMatcher {$/;"	c	namespace:testing::internal
Ptr	devel/include/console/serial_data.h	/^  typedef boost::shared_ptr< ::console::serial_data_<ContainerAllocator> > Ptr;$/;"	t	struct:console::serial_data_
Ptr	devel/include/ctrl_serial_comm/car_speed.h	/^  typedef boost::shared_ptr< ::ctrl_serial_comm::car_speed_<ContainerAllocator> > Ptr;$/;"	t	struct:ctrl_serial_comm::car_speed_
Ptr	devel/include/ctrl_serial_comm/serial_data.h	/^  typedef boost::shared_ptr< ::ctrl_serial_comm::serial_data_<ContainerAllocator> > Ptr;$/;"	t	struct:ctrl_serial_comm::serial_data_
Ptr	devel/include/logical_core/SetGoalRequest.h	/^  typedef boost::shared_ptr< ::logical_core::SetGoalRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:logical_core::SetGoalRequest_
Ptr	devel/include/logical_core/SetGoalResponse.h	/^  typedef boost::shared_ptr< ::logical_core::SetGoalResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:logical_core::SetGoalResponse_
Ptr	devel/include/odometry/car_speed.h	/^  typedef boost::shared_ptr< ::odometry::car_speed_<ContainerAllocator> > Ptr;$/;"	t	struct:odometry::car_speed_
Ptr	devel/include/serial_comm/car_speed.h	/^  typedef boost::shared_ptr< ::serial_comm::car_speed_<ContainerAllocator> > Ptr;$/;"	t	struct:serial_comm::car_speed_
Ptr	devel/include/serial_comm/serial_data.h	/^  typedef boost::shared_ptr< ::serial_comm::serial_data_<ContainerAllocator> > Ptr;$/;"	t	struct:serial_comm::serial_data_
Ptr	devel/include/vision_unit/SetGoalRequest.h	/^  typedef boost::shared_ptr< ::vision_unit::SetGoalRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:vision_unit::SetGoalRequest_
Ptr	devel/include/vision_unit/SetGoalResponse.h	/^  typedef boost::shared_ptr< ::vision_unit::SetGoalResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:vision_unit::SetGoalResponse_
Ptr	devel/include/vision_unit/armor_msg.h	/^  typedef boost::shared_ptr< ::vision_unit::armor_msg_<ContainerAllocator> > Ptr;$/;"	t	struct:vision_unit::armor_msg_
Ptr	devel/include/vision_unit/transformed_scan.h	/^  typedef boost::shared_ptr< ::vision_unit::transformed_scan_<ContainerAllocator> > Ptr;$/;"	t	struct:vision_unit::transformed_scan_
PushLine	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void PushLine(char edit, const char* line) {$/;"	f	class:testing::internal::edit_distance::__anon19::Hunk
QUADRATIC	ceres-solver/include/ceres/types.h	/^  QUADRATIC,$/;"	e	enum:ceres::LineSearchInterpolationType
Quadratic4DCostFunction	ceres-solver/internal/ceres/solver_test.cc	/^struct Quadratic4DCostFunction {$/;"	s	namespace:ceres::internal	file:
QuadraticCostFunction	ceres-solver/examples/denoising.cc	/^  QuadraticCostFunction(double a, double b)$/;"	f	class:ceres::examples::QuadraticCostFunction
QuadraticCostFunction	ceres-solver/examples/denoising.cc	/^class QuadraticCostFunction : public ceres::SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::examples	file:
QuadraticCostFunction	ceres-solver/examples/helloworld_analytic_diff.cc	/^class QuadraticCostFunction$/;"	c	file:
QuadraticCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^  QuadraticCostFunction() {$/;"	f	class:ceres::internal::QuadraticCostFunction
QuadraticCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^class QuadraticCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal	file:
QuadraticCostFunctor	ceres-solver/internal/ceres/solver_test.cc	/^struct QuadraticCostFunctor {$/;"	s	namespace:ceres::internal	file:
QuadraticFirstOrderFunction	ceres-solver/internal/ceres/line_search_minimizer_test.cc	/^class QuadraticFirstOrderFunction : public ceres::FirstOrderFunction {$/;"	c	namespace:ceres::internal	file:
QuadraticTestFunction	ceres-solver/internal/ceres/gradient_problem_test.cc	/^  explicit QuadraticTestFunction(bool* flag_to_set_on_destruction = NULL)$/;"	f	class:ceres::internal::QuadraticTestFunction
QuadraticTestFunction	ceres-solver/internal/ceres/gradient_problem_test.cc	/^class QuadraticTestFunction : public ceres::FirstOrderFunction {$/;"	c	namespace:ceres::internal	file:
QuantifierMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit QuantifierMatcherImpl(InnerMatcher inner_matcher)$/;"	f	class:testing::internal::QuantifierMatcherImpl
QuantifierMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class QuantifierMatcherImpl : public MatcherInterface<Container> {$/;"	c	namespace:testing::internal
QuaternionParameterization	ceres-solver/include/ceres/local_parameterization.h	/^class CERES_EXPORT QuaternionParameterization : public LocalParameterization {$/;"	c	namespace:ceres
QuaternionParameterizationTestHelper	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^void QuaternionParameterizationTestHelper(const double* x,$/;"	f	namespace:ceres::internal
QuaternionParameterizationTestHelper	ceres-solver/internal/ceres/local_parameterization_test.cc	/^void QuaternionParameterizationTestHelper($/;"	f	namespace:ceres::internal
QuaternionPlus	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^struct QuaternionPlus {$/;"	s	namespace:ceres::internal	file:
QuaternionPlus	ceres-solver/internal/ceres/local_parameterization_test.cc	/^struct QuaternionPlus {$/;"	s	namespace:ceres::internal	file:
QuaternionProduct	ceres-solver/include/ceres/rotation.h	/^void QuaternionProduct(const T z[4], const T w[4], T zw[4]) {$/;"	f	namespace:ceres
QuaternionRotatePoint	ceres-solver/include/ceres/rotation.h	/^void QuaternionRotatePoint(const T q[4], const T pt[3], T result[3]) {$/;"	f	namespace:ceres
QuaternionToAngleAxis	ceres-solver/include/ceres/rotation.h	/^inline void QuaternionToAngleAxis(const T* quaternion, T* angle_axis) {$/;"	f	namespace:ceres
QuaternionToRotation	ceres-solver/include/ceres/rotation.h	/^void QuaternionToRotation(const T q[4], T R[3 * 3]) {$/;"	f	namespace:ceres
QuaternionToRotation	ceres-solver/include/ceres/rotation.h	/^void QuaternionToRotation(const T q[4],$/;"	f	namespace:ceres
QuaternionToScaledRotation	ceres-solver/include/ceres/rotation.h	/^void QuaternionToScaledRotation($/;"	f	namespace:ceres
QuaternionToScaledRotation	ceres-solver/include/ceres/rotation.h	/^void QuaternionToScaledRotation(const T q[4], T R[3 * 3]) {$/;"	f	namespace:ceres
QuaternionToScaledRotation	ceres-solver/internal/ceres/autodiff_test.cc	/^void QuaternionToScaledRotation(A const q[4], A R[3 * 3]) {$/;"	f	namespace:ceres::internal
R	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  Mat3 R;$/;"	m	struct:__anon38::EuclideanCamera	file:
R	ceres-solver/internal/ceres/autodiff_test.cc	119;"	d	file:
R	ceres-solver/internal/ceres/autodiff_test.cc	123;"	d	file:
R	src/serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
R	src/tf_tree/include/tf_tree/tf_factory.h	/^  cv::Mat R;$/;"	m	class:autocar::tf_mul::tf_factory
R	src/tf_tree/include/tf_tree/tf_param.h	/^  cv::Mat R;$/;"	m	class:autocar::tf_mul::tf_param
RAD2DEG	src/rplidar_ros/src/client.cpp	41;"	d	file:
RE	ceres-solver/internal/ceres/gtest/gtest.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ceres-solver/internal/ceres/gtest/gtest.h	/^  RE(const ::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ceres-solver/internal/ceres/gtest/gtest.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:std::tr1::RE
RE	ceres-solver/internal/ceres/gtest/gtest.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ RE {$/;"	c	namespace:std::tr1
REGISTER_TYPED_TEST_CASE_P	ceres-solver/internal/ceres/gtest/gtest.h	18652;"	d
RESULT_ALREADY_DONE	src/rplidar_ros/sdk/include/rptypes.h	104;"	d
RESULT_FAIL_BIT	src/rplidar_ros/sdk/include/rptypes.h	103;"	d
RESULT_FORMAT_NOT_SUPPORT	src/rplidar_ros/sdk/include/rptypes.h	110;"	d
RESULT_INSUFFICIENT_MEMORY	src/rplidar_ros/sdk/include/rptypes.h	111;"	d
RESULT_INVALID_DATA	src/rplidar_ros/sdk/include/rptypes.h	105;"	d
RESULT_OK	src/rplidar_ros/sdk/include/rptypes.h	102;"	d
RESULT_OPERATION_FAIL	src/rplidar_ros/sdk/include/rptypes.h	106;"	d
RESULT_OPERATION_NOT_SUPPORT	src/rplidar_ros/sdk/include/rptypes.h	109;"	d
RESULT_OPERATION_STOP	src/rplidar_ros/sdk/include/rptypes.h	108;"	d
RESULT_OPERATION_TIMEOUT	src/rplidar_ros/sdk/include/rptypes.h	107;"	d
RETURNED	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
RETURN_IF_ERROR_AND_LOG	ceres-solver/internal/ceres/trust_region_minimizer.cc	53;"	d	file:
RIDDERS	ceres-solver/include/ceres/types.h	/^  RIDDERS$/;"	e	enum:ceres::NumericDiffMethodType
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/car_2d_nav/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/console/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/gtest/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/logical_core/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/odometry/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/rplidar_ros/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/serial_comm/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/serial_communication/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/tf_tree/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/vision_unit/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	ceres-solver/ceres-bin/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	ceres-solver/ceres-bin/examples/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	ceres-solver/ceres-bin/examples/sampled_function/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	ceres-solver/ceres-bin/examples/slam/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	ceres-solver/ceres-bin/examples/slam/pose_graph_2d/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	ceres-solver/ceres-bin/examples/slam/pose_graph_3d/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	ceres-solver/ceres-bin/internal/ceres/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/console/serial_data.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/ctrl_serial_comm/car_speed.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/ctrl_serial_comm/serial_data.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/logical_core/SetGoalRequest.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/logical_core/SetGoalResponse.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/odometry/car_speed.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/serial_comm/car_speed.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/serial_comm/serial_data.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/vision_unit/SetGoalRequest.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/vision_unit/SetGoalResponse.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/vision_unit/armor_msg.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
ROS_DECLARE_ALLINONE_SERIALIZER	devel/include/vision_unit/transformed_scan.h	/^    ROS_DECLARE_ALLINONE_SERIALIZER;$/;"	m	struct:ros::serialization::Serializer
RPLIDAR_ANS_HEADER_SIZE_MASK	src/rplidar_ros/sdk/include/rplidar_protocol.h	48;"	d
RPLIDAR_ANS_HEADER_SUBTYPE_SHIFT	src/rplidar_ros/sdk/include/rplidar_protocol.h	49;"	d
RPLIDAR_ANS_PKTFLAG_LOOP	src/rplidar_ros/sdk/include/rplidar_protocol.h	46;"	d
RPLIDAR_ANS_SYNC_BYTE1	src/rplidar_ros/sdk/include/rplidar_protocol.h	43;"	d
RPLIDAR_ANS_SYNC_BYTE2	src/rplidar_ros/sdk/include/rplidar_protocol.h	44;"	d
RPLIDAR_ANS_TYPE_ACC_BOARD_FLAG	src/rplidar_ros/sdk/include/rplidar_cmd.h	98;"	d
RPLIDAR_ANS_TYPE_DEVHEALTH	src/rplidar_ros/sdk/include/rplidar_cmd.h	89;"	d
RPLIDAR_ANS_TYPE_DEVINFO	src/rplidar_ros/sdk/include/rplidar_cmd.h	88;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT	src/rplidar_ros/sdk/include/rplidar_cmd.h	91;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_CAPSULED	src/rplidar_ros/sdk/include/rplidar_cmd.h	93;"	d
RPLIDAR_ANS_TYPE_SAMPLE_RATE	src/rplidar_ros/sdk/include/rplidar_cmd.h	96;"	d
RPLIDAR_CMDFLAG_HAS_PAYLOAD	src/rplidar_ros/sdk/include/rplidar_protocol.h	40;"	d
RPLIDAR_CMD_EXPRESS_SCAN	src/rplidar_ros/sdk/include/rplidar_cmd.h	56;"	d
RPLIDAR_CMD_FORCE_SCAN	src/rplidar_ros/sdk/include/rplidar_cmd.h	45;"	d
RPLIDAR_CMD_GET_ACC_BOARD_FLAG	src/rplidar_ros/sdk/include/rplidar_cmd.h	60;"	d
RPLIDAR_CMD_GET_DEVICE_HEALTH	src/rplidar_ros/sdk/include/rplidar_cmd.h	51;"	d
RPLIDAR_CMD_GET_DEVICE_INFO	src/rplidar_ros/sdk/include/rplidar_cmd.h	50;"	d
RPLIDAR_CMD_GET_SAMPLERATE	src/rplidar_ros/sdk/include/rplidar_cmd.h	53;"	d
RPLIDAR_CMD_RESET	src/rplidar_ros/sdk/include/rplidar_cmd.h	46;"	d
RPLIDAR_CMD_SCAN	src/rplidar_ros/sdk/include/rplidar_cmd.h	44;"	d
RPLIDAR_CMD_SET_MOTOR_PWM	src/rplidar_ros/sdk/include/rplidar_cmd.h	59;"	d
RPLIDAR_CMD_STOP	src/rplidar_ros/sdk/include/rplidar_cmd.h	43;"	d
RPLIDAR_CMD_SYNC_BYTE	src/rplidar_ros/sdk/include/rplidar_protocol.h	39;"	d
RPLIDAR_EXPRESS_SCAN_MODE_FIXANGLE	src/rplidar_ros/sdk/include/rplidar_cmd.h	70;"	d
RPLIDAR_EXPRESS_SCAN_MODE_NORMAL	src/rplidar_ros/sdk/include/rplidar_cmd.h	69;"	d
RPLIDAR_RESP_ACC_BOARD_FLAG_MOTOR_CTRL_SUPPORT_MASK	src/rplidar_ros/sdk/include/rplidar_cmd.h	100;"	d
RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT	src/rplidar_ros/sdk/include/rplidar_cmd.h	113;"	d
RPLIDAR_RESP_MEASUREMENT_CHECKBIT	src/rplidar_ros/sdk/include/rplidar_cmd.h	112;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_ANGLE_MASK	src/rplidar_ros/sdk/include/rplidar_cmd.h	127;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_DISTANCE_MASK	src/rplidar_ros/sdk/include/rplidar_cmd.h	128;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNCBIT	src/rplidar_ros/sdk/include/rplidar_cmd.h	140;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_1	src/rplidar_ros/sdk/include/rplidar_cmd.h	137;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_2	src/rplidar_ros/sdk/include/rplidar_cmd.h	138;"	d
RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT	src/rplidar_ros/sdk/include/rplidar_cmd.h	111;"	d
RPLIDAR_RESP_MEASUREMENT_SYNCBIT	src/rplidar_ros/sdk/include/rplidar_cmd.h	110;"	d
RPLIDAR_SDK_VERSION	src/rplidar_ros/sdk/include/rplidar.h	43;"	d
RPLIDAR_STATUS_ERROR	src/rplidar_ros/sdk/include/rplidar_cmd.h	108;"	d
RPLIDAR_STATUS_OK	src/rplidar_ros/sdk/include/rplidar_cmd.h	106;"	d
RPLIDAR_STATUS_WARNING	src/rplidar_ros/sdk/include/rplidar_cmd.h	107;"	d
RPlidarDriver	src/rplidar_ros/sdk/include/rplidar_driver.h	/^    RPlidarDriver() {}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
RPlidarDriver	src/rplidar_ros/sdk/include/rplidar_driver.h	/^class RPlidarDriver {$/;"	c	namespace:rp::standalone::rplidar
RPlidarDriverSerialImpl	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^RPlidarDriverSerialImpl::RPlidarDriverSerialImpl() $/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
RPlidarDriverSerialImpl	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^class RPlidarDriverSerialImpl : public RPlidarDriver$/;"	c	namespace:rp::standalone::rplidar
RUNE_DETECT_H	src/vision_unit/include/vision_unit/detect_factory/rune_detect.h	2;"	d
RUN_ALL_TESTS	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int RUN_ALL_TESTS() {$/;"	f
Radius	ceres-solver/internal/ceres/dogleg_strategy.cc	/^double DoglegStrategy::Radius() const {$/;"	f	class:ceres::internal::DoglegStrategy
Radius	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^double LevenbergMarquardtStrategy::Radius() const {$/;"	f	class:ceres::internal::LevenbergMarquardtStrategy
RandDouble	ceres-solver/examples/random.h	/^inline double RandDouble() {$/;"	f	namespace:ceres::examples
RandDouble	ceres-solver/internal/ceres/random.h	/^inline double RandDouble() {$/;"	f	namespace:ceres
RandDouble	ceres-solver/internal/ceres/rotation_test.cc	/^double RandDouble() {$/;"	f	namespace:ceres::internal
RandNormal	ceres-solver/examples/random.h	/^inline double RandNormal() {$/;"	f	namespace:ceres::examples
RandNormal	ceres-solver/internal/ceres/random.h	/^inline double RandNormal() {$/;"	f	namespace:ceres
Random	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
RandomMatrix	ceres-solver/internal/ceres/normal_prior_test.cc	/^void RandomMatrix(Matrix* m) {$/;"	f	namespace:ceres::internal
RandomMatrixOptions	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    RandomMatrixOptions()$/;"	f	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
RandomMatrixOptions	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  struct RandomMatrixOptions {$/;"	s	class:ceres::internal::CompressedRowSparseMatrix
RandomMatrixOptions	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  struct RandomMatrixOptions {$/;"	s	class:ceres::internal::TripletSparseMatrix
RandomPSDMatrixWithEigenValues	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^typename EigenTypes<kSize, kSize>::Matrix RandomPSDMatrixWithEigenValues($/;"	f	namespace:ceres::internal
RandomVector	ceres-solver/internal/ceres/normal_prior_test.cc	/^void RandomVector(Vector* v) {$/;"	f	namespace:ceres::internal
Randomize	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void MatchMatrix::Randomize() {$/;"	f	class:testing::internal::MatchMatrix
RandomizedCostFunction	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  RandomizedCostFunction(double noise_factor, unsigned int random_seed)$/;"	f	class:ceres::internal::RandomizedCostFunction
RandomizedCostFunction	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class RandomizedCostFunction : public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal
RandomizedFunctor	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  RandomizedFunctor(double noise_factor, unsigned int random_seed)$/;"	f	class:ceres::internal::RandomizedFunctor
RandomizedFunctor	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class RandomizedFunctor {$/;"	c	namespace:ceres::internal
Range	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
RangeConstraint	ceres-solver/examples/robot_pose_mle.cc	/^  RangeConstraint($/;"	f	struct:RangeConstraint
RangeConstraint	ceres-solver/examples/robot_pose_mle.cc	/^struct RangeConstraint {$/;"	s	file:
RangeCostFunction	ceres-solver/examples/robot_pose_mle.cc	/^      RangeCostFunction;$/;"	t	struct:RangeConstraint	file:
RangeGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
RankDeficientCovarianceTest	ceres-solver/internal/ceres/covariance_test.cc	/^class RankDeficientCovarianceTest : public CovarianceTest {$/;"	c	namespace:ceres::internal	file:
RawArgsTuple	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REMOVE_REFERENCE_AND_CONST_(ArgsTuple) RawArgsTuple;$/;"	t	class:testing::internal::ArgsMatcherImpl
RawContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;$/;"	t	class:testing::internal::ElementsAreMatcherImpl
RawContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;$/;"	t	class:testing::internal::QuantifierMatcherImpl
RawContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImpl
RawElement	ceres-solver/internal/ceres/gmock/gmock.h	/^      typename internal::PointeeOf<ElementPointer>::type) RawElement;$/;"	t	class:testing::internal::StlContainerView
RawElement	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REMOVE_CONST_(Element) RawElement;$/;"	t	class:testing::internal::StlContainerView
RawPairType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REMOVE_REFERENCE_AND_CONST_(PairType) RawPairType;$/;"	t	class:testing::internal::KeyMatcherImpl
RawPairType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REMOVE_REFERENCE_AND_CONST_(PairType) RawPairType;$/;"	t	class:testing::internal::PairMatcherImpl
ReactionToSharding	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  enum ReactionToSharding {$/;"	g	class:testing::internal::UnitTestImpl	file:
Read	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  T Read(void) const {$/;"	f	class:__anon38::EndianAwareFileReader
Read	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
ReadAndInterpretStatusByte	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void DeathTestImpl::ReadAndInterpretStatusByte() {$/;"	f	class:testing::internal::DeathTestImpl
ReadConstraint	ceres-solver/examples/slam/common/read_g2o.h	/^void ReadConstraint(std::ifstream* infile,$/;"	f	namespace:ceres::examples
ReadCost	ceres-solver/include/ceres/jet.h	/^    ReadCost = 1,$/;"	e	enum:Eigen::NumTraits::__anon45
ReadData	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  void ReadData(const string& filename) {$/;"	f	class:ceres::internal::BundleAdjustmentProblem	file:
ReadEntireFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string ReadEntireFile(FILE* file) {$/;"	f	namespace:testing::internal
ReadFileToStringOrDie	ceres-solver/internal/ceres/file.cc	/^void ReadFileToStringOrDie(const string &filename, string *data) {$/;"	f	namespace:ceres::internal
ReadFromFile	ceres-solver/examples/pgm_image.h	/^bool PGMImage<Real>::ReadFromFile(std::string filename) {$/;"	f	class:ceres::examples::PGMImage
ReadG2oFile	ceres-solver/examples/slam/common/read_g2o.h	/^bool ReadG2oFile(const std::string& filename,$/;"	f	namespace:ceres::examples
ReadMatrix3x3	ceres-solver/examples/libmv_bundle_adjuster.cc	/^void ReadMatrix3x3(const EndianAwareFileReader &file_reader,$/;"	f	namespace:__anon38
ReadProblemFromFile	ceres-solver/examples/libmv_bundle_adjuster.cc	/^bool ReadProblemFromFile(const std::string &file_name,$/;"	f	namespace:__anon38
ReadProcFileField	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^T ReadProcFileField(const string& filename, int field) {$/;"	f	namespace:testing::internal::__anon25
ReadVector3	ceres-solver/examples/libmv_bundle_adjuster.cc	/^void ReadVector3(const EndianAwareFileReader &file_reader,$/;"	f	namespace:__anon38
ReadVertex	ceres-solver/examples/slam/common/read_g2o.h	/^bool ReadVertex(std::ifstream* infile,$/;"	f	namespace:ceres::examples
ReaderLock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::ReaderLock()   { CERES_SAFE_PTHREAD(pthread_rwlock_rdlock); }$/;"	f	class:ceres::internal::Mutex
ReaderLock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::ReaderLock()   { Lock(); }      \/\/ we don't have read-write locks$/;"	f	class:ceres::internal::Mutex
ReaderLock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::ReaderLock()   { Lock(); }$/;"	f	class:ceres::internal::Mutex
ReaderLock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::ReaderLock()   { assert(++mutex_ > 0); }$/;"	f	class:ceres::internal::Mutex
ReaderUnlock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::ReaderUnlock() { CERES_SAFE_PTHREAD(pthread_rwlock_unlock); }$/;"	f	class:ceres::internal::Mutex
ReaderUnlock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::ReaderUnlock() { Unlock(); }$/;"	f	class:ceres::internal::Mutex
ReaderUnlock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::ReaderUnlock() { assert(mutex_-- > 0); }$/;"	f	class:ceres::internal::Mutex
Real	ceres-solver/include/ceres/jet.h	/^  typedef ceres::Jet<T, N> Real;$/;"	t	struct:Eigen::NumTraits
RecordProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static void RecordProperty(TestResult* test_result,$/;"	f	class:testing::internal::TestResultAccessor
RecordProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Test::RecordProperty(const std::string& key, const std::string& value) {$/;"	f	class:testing::Test
RecordProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Test::RecordProperty(const std::string& key, int value) {$/;"	f	class:testing::Test
RecordProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestResult::RecordProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
RecordProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTest::RecordProperty(const std::string& key,$/;"	f	class:testing::UnitTest
RecordProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::RecordProperty(const TestProperty& test_property) {$/;"	f	class:testing::internal::UnitTestImpl
ReducedLinearSystemAndSolution	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  void ReducedLinearSystemAndSolution(double* D,$/;"	f	class:ceres::internal::ImplicitSchurComplementTest
Ref	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::RefMatcher<T&> Ref(T& x) {  \/\/ NOLINT$/;"	f	namespace:testing
RefMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit RefMatcher(T& x) : object_(x) {}  \/\/ NOLINT$/;"	f	class:testing::internal::RefMatcher
RefMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class RefMatcher<T&> {$/;"	c	namespace:testing::internal
RefToConstProperty	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef GTEST_REFERENCE_TO_CONST_(PropertyType) RefToConstProperty;$/;"	t	class:testing::internal::PropertyMatcher
ReferenceOrValueWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ReferenceOrValueWrapper(T value)$/;"	f	class:testing::internal::ReferenceOrValueWrapper
ReferenceOrValueWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ReferenceOrValueWrapper(reference ref)$/;"	f	class:testing::internal::ReferenceOrValueWrapper
ReferenceOrValueWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReferenceOrValueWrapper {$/;"	c	namespace:testing::internal
ReferenceOrValueWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReferenceOrValueWrapper<T&> {$/;"	c	namespace:testing::internal
ReferenceWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ReferenceWrapper(T& l_value) : pointer_(&l_value) {}  \/\/ NOLINT$/;"	f	class:testing::internal::ReferenceWrapper
ReferenceWrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReferenceWrapper {$/;"	c	namespace:testing::internal
RegionsAlias	ceres-solver/internal/ceres/problem_impl.cc	/^bool RegionsAlias(const double* a, int size_a,$/;"	f	namespace:ceres::internal::__anon13
Register	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool Register(const char* \/*prefix*\/, CodeLocation,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool Register(const char* \/*prefix*\/, CodeLocation,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool Register(const char* prefix, CodeLocation code_location,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool Register(const char* prefix,$/;"	f	class:testing::internal::TypeParameterizedTest
RegisterParameterizedTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::RegisterParameterizedTests() {$/;"	f	class:testing::internal::UnitTestImpl
RegisterTests	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
RegisterTests	ceres-solver/internal/ceres/gtest/gtest.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
RegisteredTestsMap	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::std::map<std::string, CodeLocation> RegisteredTestsMap;$/;"	t	class:testing::internal::TypedTestCasePState
RegressionDriver	ceres-solver/examples/nist.cc	/^int RegressionDriver(const string& filename,$/;"	f	namespace:ceres::examples
RegularizationCheckingLinearSolver	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^  RegularizationCheckingLinearSolver(const int num_cols, const double* diagonal)$/;"	f	class:ceres::internal::RegularizationCheckingLinearSolver
RegularizationCheckingLinearSolver	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^class RegularizationCheckingLinearSolver : public DenseSparseMatrixSolver {$/;"	c	namespace:ceres::internal	file:
ReinterpretBits	ceres-solver/internal/ceres/gtest/gtest.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelPos	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^struct RelPos$/;"	s
RelationToSourceCopy	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RelationToSourceCopy {};$/;"	s	namespace:testing::internal
RelationToSourceReference	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RelationToSourceReference {};$/;"	s	namespace:testing::internal
Release	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestEventListener* TestEventListeners::Release(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Release	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
ReleaseRxTx	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void serial_rxtx::ReleaseRxTx(serial_rxtx *rxtx)$/;"	f	class:rp::hal::serial_rxtx
ReleaseRxTx	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^    void serial_rxtx::ReleaseRxTx(serial_rxtx *rxtx)$/;"	f	class:rp::hal::serial_rxtx
ReleaseRxTx	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void  serial_rxtx::ReleaseRxTx( serial_rxtx * rxtx)$/;"	f	class:rp::hal::serial_rxtx
RememberingCallback	ceres-solver/internal/ceres/solver_test.cc	/^  explicit RememberingCallback(double *x) : calls(0), x(x) {}$/;"	f	struct:ceres::internal::RememberingCallback
RememberingCallback	ceres-solver/internal/ceres/solver_test.cc	/^struct RememberingCallback : public IterationCallback {$/;"	s	namespace:ceres::internal	file:
Remove	ceres-solver/include/ceres/ordered_groups.h	/^  bool Remove(const T element) {$/;"	f	class:ceres::OrderedGroups
Remove	ceres-solver/include/ceres/ordered_groups.h	/^  int Remove(const std::vector<T>& elements) {$/;"	f	class:ceres::OrderedGroups
RemoveConst	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveConst<T[N]> {$/;"	s	namespace:testing::internal
RemoveConst	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveConst<const T[N]> {$/;"	s	namespace:testing::internal
RemoveConstFromKey	ceres-solver/internal/ceres/gmock/gmock.h	/^struct RemoveConstFromKey {$/;"	s	namespace:testing::internal
RemoveConstFromKey	ceres-solver/internal/ceres/gmock/gmock.h	/^struct RemoveConstFromKey<std::pair<const K, V> > {$/;"	s	namespace:testing::internal
RemoveDiagonal	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::RemoveDiagonal() {$/;"	f	class:ceres::internal::DenseSparseMatrix
RemoveDirectoryName	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::RemoveDirectoryName() const {$/;"	f	class:testing::internal::FilePath
RemoveExtension	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::RemoveExtension(const char* extension) const {$/;"	f	class:testing::internal::FilePath
RemoveFileName	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::RemoveFileName() const {$/;"	f	class:testing::internal::FilePath
RemoveFixedBlocks	ceres-solver/internal/ceres/program.cc	/^bool Program::RemoveFixedBlocks(vector<double*>* removed_parameter_blocks,$/;"	f	class:ceres::internal::Program
RemoveInvalidXmlCharacters	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
RemoveLeadingZeros	ceres-solver/internal/ceres/polynomial.cc	/^Vector RemoveLeadingZeros(const Vector& polynomial_in) {$/;"	f	namespace:ceres::internal::__anon3
RemoveLogSink	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^inline void RemoveLogSink(LogSink *sink) {$/;"	f	namespace:google
RemoveParameterBlock	ceres-solver/internal/ceres/problem.cc	/^void Problem::RemoveParameterBlock(double* values) {$/;"	f	class:ceres::Problem
RemoveParameterBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::RemoveParameterBlock(double* values) {$/;"	f	class:ceres::internal::ProblemImpl
RemoveReference	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveReference	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveResidualBlock	ceres-solver/internal/ceres/parameter_block.h	/^  void RemoveResidualBlock(ResidualBlock* residual_block) {$/;"	f	class:ceres::internal::ParameterBlock
RemoveResidualBlock	ceres-solver/internal/ceres/problem.cc	/^void Problem::RemoveResidualBlock(ResidualBlockId residual_block) {$/;"	f	class:ceres::Problem
RemoveResidualBlock	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::RemoveResidualBlock(ResidualBlock* residual_block) {$/;"	f	class:ceres::internal::ProblemImpl
RemoveTrailingPathSeparator	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^FilePath FilePath::RemoveTrailingPathSeparator() const {$/;"	f	class:testing::internal::FilePath
RemoveVertex	ceres-solver/internal/ceres/graph.h	/^  bool RemoveVertex(const Vertex& vertex) {$/;"	f	class:ceres::internal::Graph
RemoveVertex	ceres-solver/internal/ceres/graph.h	/^  bool RemoveVertex(const Vertex& vertex) {$/;"	f	class:ceres::internal::WeightedGraph
ReorderProgram	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^bool ReorderProgram(PreprocessedProblem* pp) {$/;"	f	namespace:ceres::internal::__anon31
ReorderProgramForSchurTypeLinearSolver	ceres-solver/internal/ceres/reorder_program.cc	/^bool ReorderProgramForSchurTypeLinearSolver($/;"	f	namespace:ceres::internal
ReorderProgramForSparseNormalCholesky	ceres-solver/internal/ceres/reorder_program.cc	/^bool ReorderProgramForSparseNormalCholesky($/;"	f	namespace:ceres::internal
ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest	ceres-solver/internal/ceres/reorder_program_test.cc	/^class ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest :$/;"	c	namespace:ceres::internal	file:
ReportFailure	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual void ReportFailure(FailureType type, const char* file, int line,$/;"	f	class:testing::internal::GoogleTestFailureReporter
ReportFailureInUnknownLocation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ReportFailureInUnknownLocation(TestPartResult::Type result_type,$/;"	f	namespace:testing::internal
ReportInvalidTestCaseType	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ReportInvalidTestCaseType(const char* test_case_name,$/;"	f	namespace:testing::internal
ReportTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void DefaultGlobalTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
ReportTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void DefaultPerThreadTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
ReportTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void HasNewFatalFailureHelper::ReportTestPartResult($/;"	f	class:testing::internal::HasNewFatalFailureHelper
ReportTestPartResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ScopedFakeTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::ScopedFakeTestPartResultReporter
ReportUninterestingCall	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ReportUninterestingCall(CallReaction reaction, const string& msg) {$/;"	f	namespace:testing::internal
Request	devel/include/logical_core/SetGoal.h	/^typedef SetGoalRequest Request;$/;"	t	struct:logical_core::SetGoal
Request	devel/include/vision_unit/SetGoal.h	/^typedef SetGoalRequest Request;$/;"	t	struct:vision_unit::SetGoal
Request	devel/share/gennodejs/ros/logical_core/srv/SetGoal.js	/^  Request: SetGoalRequest,$/;"	p	class:module.exports
Request	devel/share/gennodejs/ros/vision_unit/srv/SetGoal.js	/^  Request: SetGoalRequest,$/;"	p	class:module.exports
RequestType	devel/include/logical_core/SetGoal.h	/^typedef Request RequestType;$/;"	t	struct:logical_core::SetGoal
RequestType	devel/include/vision_unit/SetGoal.h	/^typedef Request RequestType;$/;"	t	struct:vision_unit::SetGoal
RequireInitialization	ceres-solver/include/ceres/jet.h	/^    RequireInitialization = 1$/;"	e	enum:Eigen::NumTraits::__anon45
Reseed	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
Reserve	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::Reserve(int new_max_num_nonzeros) {$/;"	f	class:ceres::internal::TripletSparseMatrix
Reset	ceres-solver/include/ceres/loss_function.h	/^  void Reset(LossFunction* rho, Ownership ownership) {$/;"	f	class:ceres::LossFunctionWrapper
Reset	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void AutoHandle::Reset() {$/;"	f	class:testing::internal::AutoHandle
Reset	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void AutoHandle::Reset(HANDLE handle) {$/;"	f	class:testing::internal::AutoHandle
ResetTimeStatistics	ceres-solver/internal/ceres/line_search.cc	/^void LineSearchFunction::ResetTimeStatistics() {$/;"	f	class:ceres::internal::LineSearchFunction
Residual10Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual10Param {$/;"	s	namespace:ceres::internal	file:
Residual1Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual1Param {$/;"	s	namespace:ceres::internal	file:
Residual2Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual2Param {$/;"	s	namespace:ceres::internal	file:
Residual3Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual3Param {$/;"	s	namespace:ceres::internal	file:
Residual4Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual4Param {$/;"	s	namespace:ceres::internal	file:
Residual5Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual5Param {$/;"	s	namespace:ceres::internal	file:
Residual6Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual6Param {$/;"	s	namespace:ceres::internal	file:
Residual7Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual7Param {$/;"	s	namespace:ceres::internal	file:
Residual8Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual8Param {$/;"	s	namespace:ceres::internal	file:
Residual9Param	ceres-solver/internal/ceres/autodiff_test.cc	/^struct Residual9Param {$/;"	s	namespace:ceres::internal	file:
ResidualBlock	ceres-solver/internal/ceres/residual_block.cc	/^ResidualBlock::ResidualBlock($/;"	f	class:ceres::internal::ResidualBlock
ResidualBlock	ceres-solver/internal/ceres/residual_block.h	/^class ResidualBlock {$/;"	c	namespace:ceres::internal
ResidualBlockId	ceres-solver/include/ceres/problem.h	/^typedef internal::ResidualBlock* ResidualBlockId;$/;"	t	namespace:ceres
ResidualBlockSet	ceres-solver/internal/ceres/parameter_block.h	/^  typedef HashSet<ResidualBlock*> ResidualBlockSet;$/;"	t	class:ceres::internal::ParameterBlock
ResidualBlockSet	ceres-solver/internal/ceres/problem_impl.h	/^  typedef HashSet<ResidualBlock*> ResidualBlockSet;$/;"	t	class:ceres::internal::ProblemImpl
Resize	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::Resize(int new_num_rows, int new_num_cols) {$/;"	f	class:ceres::internal::TripletSparseMatrix
Response	devel/include/logical_core/SetGoal.h	/^typedef SetGoalResponse Response;$/;"	t	struct:logical_core::SetGoal
Response	devel/include/vision_unit/SetGoal.h	/^typedef SetGoalResponse Response;$/;"	t	struct:vision_unit::SetGoal
Response	devel/share/gennodejs/ros/logical_core/srv/SetGoal.js	/^  Response: SetGoalResponse,$/;"	p	class:module.exports
Response	devel/share/gennodejs/ros/vision_unit/srv/SetGoal.js	/^  Response: SetGoalResponse,$/;"	p	class:module.exports
ResponseType	devel/include/logical_core/SetGoal.h	/^typedef Response ResponseType;$/;"	t	struct:logical_core::SetGoal
ResponseType	devel/include/vision_unit/SetGoal.h	/^typedef Response ResponseType;$/;"	t	struct:vision_unit::SetGoal
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::Result Result;$/;"	t	class:testing::internal::DoBothAction::Impl
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::Result Result;$/;"	t	class:testing::internal::ReturnAction::Impl
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::Result Result;$/;"	t	class:testing::internal::ReturnRefAction::Impl
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::Result Result;$/;"	t	class:testing::internal::ReturnRefOfCopyAction::Impl
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::Result Result;$/;"	t	class:testing::internal::WithArgsAction::Impl
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename internal::Function<F>::Result Result;$/;"	t	class:testing::PolymorphicAction::MonomorphicImpl
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename internal::Function<F>::Result Result;$/;"	t	class:testing::internal::IgnoreResultAction::Impl
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef R Result;$/;"	t	struct:testing::internal::Function
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::Result Result;$/;"	t	class:testing::internal::FunctionMockerBase
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<F>::Result Result;$/;"	t	class:testing::internal::TypedExpectation
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F1>::Result Result;$/;"	t	class:testing::internal::ActionAdaptor
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F>::Result Result;$/;"	t	class:testing::Action
Result	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename internal::Function<F>::Result Result;$/;"	t	class:testing::ActionInterface
ResultHolder	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ActionResultHolder<Result> ResultHolder;$/;"	t	class:testing::internal::FunctionMockerBase
ResultOf	ceres-solver/internal/ceres/gmock/gmock.h	/^internal::ResultOfMatcher<Callable> ResultOf($/;"	f	namespace:testing
ResultOfMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  ResultOfMatcher(Callable callable, const Matcher<ResultType>& matcher)$/;"	f	class:testing::internal::ResultOfMatcher
ResultOfMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class ResultOfMatcher {$/;"	c	namespace:testing::internal
ResultType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ResType ResultType;$/;"	t	struct:testing::internal::CallableTraits
ResultType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename CallableTraits<Callable>::ResultType ResultType;$/;"	t	class:testing::internal::ResultOfMatcher
ResultType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Functor::result_type ResultType;$/;"	t	struct:testing::internal::CallableTraits
RetiresOnSaturation	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& RetiresOnSaturation() {$/;"	f	class:testing::internal::TypedExpectation
Return	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicAction<internal::ReturnVoidAction> Return() {$/;"	f	namespace:testing
Return	ceres-solver/internal/ceres/gmock/gmock.h	/^internal::ReturnAction<R> Return(R value) {$/;"	f	namespace:testing
ReturnAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ReturnAction(R value) : value_(new R(internal::move(value))) {}$/;"	f	class:testing::internal::ReturnAction
ReturnAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReturnAction {$/;"	c	namespace:testing::internal
ReturnNull	ceres-solver/internal/ceres/gmock/gmock.h	/^inline PolymorphicAction<internal::ReturnNullAction> ReturnNull() {$/;"	f	namespace:testing
ReturnNullAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReturnNullAction {$/;"	c	namespace:testing::internal
ReturnRef	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::ReturnRefAction<R> ReturnRef(R& x) {  \/\/ NOLINT$/;"	f	namespace:testing
ReturnRefAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ReturnRefAction(T& ref) : ref_(ref) {}  \/\/ NOLINT$/;"	f	class:testing::internal::ReturnRefAction
ReturnRefAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReturnRefAction {$/;"	c	namespace:testing::internal
ReturnRefOfCopy	ceres-solver/internal/ceres/gmock/gmock.h	/^inline internal::ReturnRefOfCopyAction<R> ReturnRefOfCopy(const R& x) {$/;"	f	namespace:testing
ReturnRefOfCopyAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit ReturnRefOfCopyAction(const T& value) : value_(value) {}  \/\/ NOLINT$/;"	f	class:testing::internal::ReturnRefOfCopyAction
ReturnRefOfCopyAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReturnRefOfCopyAction {$/;"	c	namespace:testing::internal
ReturnSentinel	ceres-solver/internal/ceres/gtest/gtest.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	ceres-solver/internal/ceres/gtest/gtest.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
ReturnType	ceres-solver/include/ceres/jet.h	/^  typedef ceres::Jet<T, N> ReturnType;$/;"	t	struct:Eigen::ScalarBinaryOpTraits
ReturnVoidAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class ReturnVoidAction {$/;"	c	namespace:testing::internal
Reverse	ceres-solver/include/ceres/ordered_groups.h	/^  void Reverse() {$/;"	f	class:ceres::OrderedGroups
RhsSize	ceres-solver/internal/ceres/gmock/gmock.h	/^  size_t RhsSize() const { return num_matchers_; }$/;"	f	class:testing::internal::MatchMatrix
RhsStlContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename RhsView::type RhsStlContainer;$/;"	t	class:testing::internal::PointwiseMatcher
RhsValue	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename RhsStlContainer::value_type RhsValue;$/;"	t	class:testing::internal::PointwiseMatcher
RhsView	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef internal::StlContainerView<RhsContainer> RhsView;$/;"	t	class:testing::internal::PointwiseMatcher
RightMultiply	ceres-solver/internal/ceres/block_jacobi_preconditioner.cc	/^void BlockJacobiPreconditioner::RightMultiply(const double* x,$/;"	f	class:ceres::internal::BlockJacobiPreconditioner
RightMultiply	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^void BlockRandomAccessDiagonalMatrix::RightMultiply(const double* x,$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
RightMultiply	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::RightMultiply(const double* x,  double* y) const {$/;"	f	class:ceres::internal::BlockSparseMatrix
RightMultiply	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  virtual void RightMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::CgnrLinearOperator
RightMultiply	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::RightMultiply(const double* x,$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
RightMultiply	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::RightMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::DenseSparseMatrix
RightMultiply	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^void ImplicitSchurComplement::RightMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::ImplicitSchurComplement
RightMultiply	ceres-solver/internal/ceres/low_rank_inverse_hessian.cc	/^void LowRankInverseHessian::RightMultiply(const double* x_ptr,$/;"	f	class:ceres::internal::LowRankInverseHessian
RightMultiply	ceres-solver/internal/ceres/preconditioner.cc	/^void SparseMatrixPreconditionerWrapper::RightMultiply(const double* x,$/;"	f	class:ceres::internal::SparseMatrixPreconditionerWrapper
RightMultiply	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual void RightMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessDiagonalMatrixAdapter
RightMultiply	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual void RightMultiply(const double* x, double* y) const {$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessSparseMatrixAdapter
RightMultiply	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^void SchurJacobiPreconditioner::RightMultiply(const double* x,$/;"	f	class:ceres::internal::SchurJacobiPreconditioner
RightMultiply	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::RightMultiply(const double* x,  double* y) const {$/;"	f	class:ceres::internal::TripletSparseMatrix
RightMultiply	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::RightMultiply(const double* x,$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
RightMultiply	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  virtual void RightMultiply(const double* x, double* y) const {}$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
RightMultiplyE	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^RightMultiplyE(const double* x, double* y) const {$/;"	f	class:ceres::internal::PartitionedMatrixView
RightMultiplyF	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^RightMultiplyF(const double* x, double* y) const {$/;"	f	class:ceres::internal::PartitionedMatrixView
RmDir	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:std::tr1::posix
Rosenbrock	ceres-solver/examples/rosenbrock.cc	/^class Rosenbrock : public ceres::FirstOrderFunction {$/;"	c	file:
Rosenbrock	ceres-solver/internal/ceres/gradient_problem_solver_test.cc	/^class Rosenbrock : public ceres::FirstOrderFunction {$/;"	c	namespace:ceres::internal	file:
Rotate	src/serial_comm/include/comm_read.h	/^  double YawAngle, Rotate;$/;"	m	class:autocar::serial_mul::comm_read
RotationMatrix2D	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^Eigen::Matrix<T, 2, 2> RotationMatrix2D(T yaw_radians) {$/;"	f	namespace:ceres::examples
RotationMatrixToAngleAxis	ceres-solver/include/ceres/rotation.h	/^inline void RotationMatrixToAngleAxis(const T* R, T* angle_axis) {$/;"	f	namespace:ceres
RotationMatrixToAngleAxis	ceres-solver/include/ceres/rotation.h	/^void RotationMatrixToAngleAxis($/;"	f	namespace:ceres
RotationMatrixToQuaternion	ceres-solver/include/ceres/rotation.h	/^void RotationMatrixToQuaternion($/;"	f	namespace:ceres
RotationMatrixToQuaternion	ceres-solver/include/ceres/rotation.h	/^void RotationMatrixToQuaternion(const T* R, T* angle_axis) {$/;"	f	namespace:ceres
RowColLessThan	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  RowColLessThan(const int* rows, const int* cols) : rows(rows), cols(cols) {}$/;"	f	struct:ceres::internal::__anon33::RowColLessThan
RowColLessThan	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^struct RowColLessThan {$/;"	s	namespace:ceres::internal::__anon33	file:
RowMajorAccess	ceres-solver/internal/ceres/autodiff_test.cc	/^T &RowMajorAccess(T *base, int rows, int cols, int i, int j) {$/;"	f	namespace:ceres::internal
RowMajorAdapter3x3	ceres-solver/include/ceres/rotation.h	/^MatrixAdapter<T, 3, 1> RowMajorAdapter3x3(T* pointer) {$/;"	f	namespace:ceres
Run	ceres-solver/internal/ceres/gmock/gmock.h	/^  static OutIter Run(Func f, const Tuple& t, OutIter out) {$/;"	f	class:testing::internal::TransformTupleValuesHelper
Run	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::Run() {$/;"	f	class:testing::UnitTest
Run	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Test::Run() {$/;"	f	class:testing::Test
Run	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestCase::Run() {$/;"	f	class:testing::TestCase
Run	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestInfo::Run() {$/;"	f	class:testing::TestInfo
Run	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam::RunnableImpl
Run	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam
RunAllTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool UnitTestImpl::RunAllTests() {$/;"	f	class:testing::internal::UnitTestImpl
RunCallbacks	ceres-solver/internal/ceres/minimizer.cc	/^bool Minimizer::RunCallbacks(const Minimizer::Options& options,$/;"	f	class:ceres::internal::Minimizer
RunPolynomialInterpolationTest	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  void RunPolynomialInterpolationTest(const Eigen::Matrix3d& coeff) {$/;"	f	class:ceres::internal::BiCubicInterpolatorTest
RunPolynomialInterpolationTest	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  void RunPolynomialInterpolationTest(const double a,$/;"	f	class:ceres::internal::CubicInterpolatorTest
RunPolynomialTestRealRoots	ceres-solver/internal/ceres/polynomial_test.cc	/^void RunPolynomialTestRealRoots(const double (&real_roots)[N],$/;"	f	namespace:ceres::internal::__anon7
RunSetUpTestCase	ceres-solver/internal/ceres/gtest/gtest.h	/^  void RunSetUpTestCase() { (*set_up_tc_)(); }$/;"	f	class:testing::TestCase
RunSolverForConfigAndExpectResidualsMatch	ceres-solver/internal/ceres/test_util.h	/^  void RunSolverForConfigAndExpectResidualsMatch(const SolverConfig& config) {$/;"	f	class:ceres::internal::SystemTest
RunTearDownTestCase	ceres-solver/internal/ceres/gtest/gtest.h	/^  void RunTearDownTestCase() { (*tear_down_tc_)(); }$/;"	f	class:testing::TestCase
Runnable	ceres-solver/internal/ceres/gtest/gtest.h	/^  class Runnable {$/;"	c	class:std::tr1::ThreadWithParamBase
RunnableImpl	ceres-solver/internal/ceres/gtest/gtest.h	/^    RunnableImpl(UserThreadFunc* func, T param)$/;"	f	class:std::tr1::ThreadWithParam::RunnableImpl
RunnableImpl	ceres-solver/internal/ceres/gtest/gtest.h	/^  class RunnableImpl : public Runnable {$/;"	c	class:std::tr1::ThreadWithParam
S1	ceres-solver/include/ceres/internal/fixed_array.h	/^  static const size_type S1 = ((inline_elements < 0)$/;"	m	class:ceres::internal::FixedArray
S2	ceres-solver/include/ceres/internal/fixed_array.h	/^  static const size_type S2 = (S1 <= 0) ? 1 : S1;$/;"	m	class:ceres::internal::FixedArray
SCHUR_JACOBI	ceres-solver/include/ceres/types.h	/^  SCHUR_JACOBI,$/;"	e	enum:ceres::PreconditionerType
SCOPED_TRACE	ceres-solver/internal/ceres/gtest/gtest.h	21081;"	d
SERIAL_COMM_MESSAGE_CAR_SPEED_H	devel/include/serial_comm/car_speed.h	6;"	d
SERIAL_COMM_MESSAGE_SERIAL_DATA_H	devel/include/serial_comm/serial_data.h	6;"	d
SERIAL_PARAM_H	src/serial_comm/include/serial_param.h	2;"	d
SERIAL_RX_BUFFER_SIZE	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon58
SERIAL_RX_BUFFER_SIZE	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon57
SERIAL_RX_BUFFER_SIZE	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon59
SERIAL_RX_TIMEOUT	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_RX_TIMEOUT     = 2000,$/;"	e	enum:rp::arch::net::raw_serial::__anon59
SERIAL_TX_BUFFER_SIZE	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon58
SERIAL_TX_BUFFER_SIZE	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon57
SERIAL_TX_BUFFER_SIZE	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon59
SERIAL_TX_TIMEOUT	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^        SERIAL_TX_TIMEOUT     = 2000,$/;"	e	enum:rp::arch::net::raw_serial::__anon59
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/car_2d_nav/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/console/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/gtest/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/logical_core/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/odometry/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/rplidar_ros/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/serial_comm/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/serial_communication/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/tf_tree/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/vision_unit/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	ceres-solver/ceres-bin/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	ceres-solver/ceres-bin/examples/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	ceres-solver/ceres-bin/examples/sampled_function/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	ceres-solver/ceres-bin/examples/slam/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	ceres-solver/ceres-bin/examples/slam/pose_graph_2d/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	ceres-solver/ceres-bin/examples/slam/pose_graph_3d/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	ceres-solver/ceres-bin/internal/ceres/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHOOTINGMODE_H	src/logical_core/src/shooting_mode.h	2;"	d
SILENT	ceres-solver/include/ceres/types.h	/^  SILENT,$/;"	e	enum:ceres::LoggingType
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SIMULATE_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
SIMULATE_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SINGLE_LINKAGE	ceres-solver/include/ceres/types.h	/^  SINGLE_LINKAGE$/;"	e	enum:ceres::VisibilityClusteringType
SOLVER_ABORT	ceres-solver/include/ceres/types.h	/^  SOLVER_ABORT,$/;"	e	enum:ceres::CallbackReturnType
SOLVER_CONTINUE	ceres-solver/include/ceres/types.h	/^  SOLVER_CONTINUE,$/;"	e	enum:ceres::CallbackReturnType
SOLVER_TERMINATE_SUCCESSFULLY	ceres-solver/include/ceres/types.h	/^  SOLVER_TERMINATE_SUCCESSFULLY$/;"	e	enum:ceres::CallbackReturnType
SPARSE_NORMAL_CHOLESKY	ceres-solver/include/ceres/types.h	/^  SPARSE_NORMAL_CHOLESKY,$/;"	e	enum:ceres::LinearSolverType
SPARSE_QR	ceres-solver/include/ceres/types.h	/^  SPARSE_QR,$/;"	e	enum:ceres::CovarianceAlgorithmType
SPARSE_SCHUR	ceres-solver/include/ceres/types.h	/^  SPARSE_SCHUR,$/;"	e	enum:ceres::LinearSolverType
SPECIALIZATIONS	ceres-solver/internal/ceres/generate_template_specializations.py	/^SPECIALIZATIONS = [(2, 2, 2),$/;"	v
SStringPrintf	ceres-solver/internal/ceres/stringprintf.cc	/^const string& SStringPrintf(string* dst, const char* format, ...) {$/;"	f	namespace:ceres::internal
STDHEADER_H	src/serial_communication/include/stdHeaders.h	2;"	d
STEEPEST_DESCENT	ceres-solver/include/ceres/types.h	/^  STEEPEST_DESCENT,$/;"	e	enum:ceres::LineSearchDirectionType
STLDeleteContainerPointers	ceres-solver/internal/ceres/stl_util.h	/^void STLDeleteContainerPointers(ForwardIterator begin,$/;"	f	namespace:ceres
STLDeleteElements	ceres-solver/internal/ceres/stl_util.h	/^void STLDeleteElements(T *container) {$/;"	f	namespace:ceres
STLDeleteUniqueContainerPointers	ceres-solver/internal/ceres/stl_util.h	/^void STLDeleteUniqueContainerPointers(ForwardIterator begin,$/;"	f	namespace:ceres
STRENUM	ceres-solver/internal/ceres/types.cc	338;"	d	file:
STRENUM	ceres-solver/internal/ceres/types.cc	42;"	d	file:
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
STRINGIFY_HELPER	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
STRINGIFY_HELPER	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
SUBSPACE_DOGLEG	ceres-solver/include/ceres/types.h	/^  SUBSPACE_DOGLEG$/;"	e	enum:ceres::DoglegType
SUCCEED	ceres-solver/internal/ceres/gtest/gtest.h	20440;"	d
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/car_2d_nav/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/console/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/gtest/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/logical_core/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/odometry/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/rplidar_ros/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/serial_comm/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/serial_communication/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/tf_tree/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/vision_unit/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	ceres-solver/ceres-bin/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	ceres-solver/ceres-bin/examples/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	ceres-solver/ceres-bin/examples/sampled_function/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	ceres-solver/ceres-bin/examples/slam/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	ceres-solver/ceres-bin/examples/slam/pose_graph_2d/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	ceres-solver/ceres-bin/examples/slam/pose_graph_3d/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	ceres-solver/ceres-bin/internal/ceres/Makefile	/^SUFFIXES =$/;"	m
SUITE_SPARSE	ceres-solver/include/ceres/types.h	/^  SUITE_SPARSE,$/;"	e	enum:ceres::SparseLinearAlgebraLibraryType
SYNCOFFMSG	src/doc/html/navtreedata.js	/^var SYNCOFFMSG = 'click to enable panel synchronisation';/;"	v
SYNCONMSG	src/doc/html/navtreedata.js	/^var SYNCONMSG = 'click to disable panel synchronisation';$/;"	v
SYSHEADERS_H	src/serial_communication/include/sysHeaders.h	2;"	d
SafeMatcherCast	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Matcher<T> SafeMatcherCast(const M& polymorphic_matcher) {$/;"	f	namespace:testing
SafeMatcherCastImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class SafeMatcherCastImpl {$/;"	c	namespace:testing
ScalarBinaryOpTraits	ceres-solver/include/ceres/jet.h	/^struct ScalarBinaryOpTraits<T, ceres::Jet<T, N>, BinaryOp> {$/;"	s	namespace:Eigen
ScalarBinaryOpTraits	ceres-solver/include/ceres/jet.h	/^struct ScalarBinaryOpTraits<ceres::Jet<T, N>, T, BinaryOp> {$/;"	s	namespace:Eigen
Scale	ceres-solver/internal/ceres/suitesparse.h	/^  void Scale(cholmod_dense* scale, int mode, cholmod_sparse* A) {$/;"	f	class:ceres::internal::SuiteSparse
ScaleColumns	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::ScaleColumns(const double* scale) {$/;"	f	class:ceres::internal::BlockSparseMatrix
ScaleColumns	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::ScaleColumns(const double* scale) {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
ScaleColumns	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::ScaleColumns(const double* scale) {$/;"	f	class:ceres::internal::DenseSparseMatrix
ScaleColumns	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::ScaleColumns(const double* scale) {$/;"	f	class:ceres::internal::TripletSparseMatrix
ScaleOffDiagonalCells	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^void VisibilityBasedPreconditioner::ScaleOffDiagonalCells() {$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
ScaledLoss	ceres-solver/include/ceres/loss_function.h	/^  ScaledLoss(const LossFunction* rho, double a, Ownership ownership) :$/;"	f	class:ceres::ScaledLoss
ScaledLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT ScaledLoss : public LossFunction {$/;"	c	namespace:ceres
ScaledPlus	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^  explicit ScaledPlus(const double &scale_factor)$/;"	f	struct:ceres::internal::ScaledPlus
ScaledPlus	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^struct ScaledPlus {$/;"	s	namespace:ceres::internal	file:
SchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.h	/^  explicit SchurComplementSolver(const LinearSolver::Options& options)$/;"	f	class:ceres::internal::SchurComplementSolver
SchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.h	/^class SchurComplementSolver : public BlockSparseMatrixSolver {$/;"	c	namespace:ceres::internal
SchurComplementSolverTest	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^class SchurComplementSolverTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
SchurEliminator	ceres-solver/internal/ceres/schur_eliminator.h	/^  explicit SchurEliminator(const LinearSolver::Options& options)$/;"	f	class:ceres::internal::SchurEliminator
SchurEliminator	ceres-solver/internal/ceres/schur_eliminator.h	/^class SchurEliminator : public SchurEliminatorBase {$/;"	c	namespace:ceres::internal
SchurEliminatorBase	ceres-solver/internal/ceres/schur_eliminator.h	/^class SchurEliminatorBase {$/;"	c	namespace:ceres::internal
SchurEliminatorTest	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^class SchurEliminatorTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
SchurJacobiPreconditioner	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^SchurJacobiPreconditioner::SchurJacobiPreconditioner($/;"	f	class:ceres::internal::SchurJacobiPreconditioner
SchurJacobiPreconditioner	ceres-solver/internal/ceres/schur_jacobi_preconditioner.h	/^class SchurJacobiPreconditioner : public BlockSparseMatrixPreconditioner {$/;"	c	namespace:ceres::internal
SchurOrderingTest	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^class SchurOrderingTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
SchurStructureToString	ceres-solver/internal/ceres/solver.cc	/^std::string SchurStructureToString(const int row_block_size,$/;"	f	namespace:ceres::__anon15
ScopedExecutionTimer	ceres-solver/internal/ceres/execution_summary.h	/^  ScopedExecutionTimer(const std::string& name, ExecutionSummary* summary)$/;"	f	class:ceres::internal::ScopedExecutionTimer
ScopedExecutionTimer	ceres-solver/internal/ceres/execution_summary.h	/^class ScopedExecutionTimer {$/;"	c	namespace:ceres::internal
ScopedFakeTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter($/;"	f	class:testing::ScopedFakeTestPartResultReporter
ScopedFakeTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class GTEST_API_ ScopedFakeTestPartResultReporter$/;"	c	namespace:testing	file:
ScopedMockLog	ceres-solver/internal/ceres/gmock/mock-log.h	/^  ScopedMockLog() { AddLogSink(this); }$/;"	f	class:testing::ScopedMockLog
ScopedMockLog	ceres-solver/internal/ceres/gmock/mock-log.h	/^class ScopedMockLog : public google::LogSink {$/;"	c	namespace:testing
ScopedPrematureExitFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)$/;"	f	class:testing::internal::ScopedPrematureExitFile
ScopedPrematureExitFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class ScopedPrematureExitFile {$/;"	c	namespace:testing::internal	file:
ScopedPtrMallocFree	ceres-solver/include/ceres/internal/scoped_ptr.h	/^class ScopedPtrMallocFree {$/;"	c	namespace:ceres::internal
ScopedSetValue	ceres-solver/internal/ceres/c_api_test.cc	/^  ScopedSetValue(T* variable, T new_value)$/;"	f	class:ceres::internal::ScopedSetValue
ScopedSetValue	ceres-solver/internal/ceres/c_api_test.cc	/^class ScopedSetValue {$/;"	c	namespace:ceres::internal	file:
ScopedTrace	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing::internal
ScratchEvaluatePreparer	ceres-solver/internal/ceres/scratch_evaluate_preparer.h	/^class ScratchEvaluatePreparer {$/;"	c	namespace:ceres::internal
Search	ceres-solver/internal/ceres/line_search.cc	/^void LineSearch::Search(double step_size_estimate,$/;"	f	class:ceres::internal::LineSearch
Search	src/doc/html/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	src/doc/html/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	src/doc/html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	src/doc/html/search/search.js	/^function SearchResults(name)$/;"	c
SecondType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename RawPairType::second_type SecondType;$/;"	t	class:testing::internal::PairMatcherImpl
Select	ceres-solver/internal/ceres/gmock/gmock.h	/^  static SelectedArgs Select(const ArgumentTuple& \/* args *\/) {$/;"	f	class:testing::internal::SelectArgs
Select	ceres-solver/internal/ceres/gmock/gmock.h	/^  static SelectedArgs Select(const ArgumentTuple& args) {$/;"	f	class:testing::internal::SelectArgs
SelectArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^class SelectArgs {$/;"	c	namespace:testing::internal
SelectArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^class SelectArgs<Result, ArgumentTuple,$/;"	c	namespace:testing::internal
SelectItemCount	src/doc/html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	src/doc/html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
SelectedArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^      k6, k7, k8, k9>::type SelectedArgs;$/;"	t	class:testing::internal::ArgsMatcherImpl
SelectedArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Function<type>::ArgumentTuple SelectedArgs;$/;"	t	class:testing::internal::SelectArgs
Send	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    virtual void Send(const string& message) {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
SendLn	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    void SendLn(const string& message) {$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
SendLn	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void SendLn(const string& message) { socket_writer_->SendLn(message); }$/;"	f	class:testing::internal::StreamingListener	file:
Sequence	ceres-solver/internal/ceres/gmock/gmock.h	/^  Sequence() : last_expectation_(new Expectation) {}$/;"	f	class:testing::Sequence
Sequence	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ Sequence {$/;"	c	namespace:testing
Serializer	devel/include/console/serial_data.h	/^  template<class ContainerAllocator> struct Serializer< ::console::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/ctrl_serial_comm/car_speed.h	/^  template<class ContainerAllocator> struct Serializer< ::ctrl_serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/ctrl_serial_comm/serial_data.h	/^  template<class ContainerAllocator> struct Serializer< ::ctrl_serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/logical_core/SetGoalRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::logical_core::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/logical_core/SetGoalResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::logical_core::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/odometry/car_speed.h	/^  template<class ContainerAllocator> struct Serializer< ::odometry::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/serial_comm/car_speed.h	/^  template<class ContainerAllocator> struct Serializer< ::serial_comm::car_speed_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/serial_comm/serial_data.h	/^  template<class ContainerAllocator> struct Serializer< ::serial_comm::serial_data_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/vision_unit/SetGoalRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::vision_unit::SetGoalRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/vision_unit/SetGoalResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::vision_unit::SetGoalResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/vision_unit/armor_msg.h	/^  template<class ContainerAllocator> struct Serializer< ::vision_unit::armor_msg_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	devel/include/vision_unit/transformed_scan.h	/^  template<class ContainerAllocator> struct Serializer< ::vision_unit::transformed_scan_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Set	ceres-solver/examples/pgm_image.h	/^void PGMImage<Real>::Set(double constant) {$/;"	f	class:ceres::examples::PGMImage
Set	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void Set(T x) {$/;"	f	class:testing::DefaultValue
Set	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void Set(T& x) {  \/\/ NOLINT$/;"	f	class:testing::DefaultValue
Set	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::std::set<Expectation, Less> Set;$/;"	t	class:testing::Expectation
Set	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
SetArgPointee	ceres-solver/internal/ceres/gmock/gmock.h	/^SetArgPointee(const T& x) {$/;"	f	namespace:testing
SetArgPointee	ceres-solver/internal/ceres/gmock/gmock.h	/^SetArgPointee(const char* p) {$/;"	f	namespace:testing
SetArgPointee	ceres-solver/internal/ceres/gmock/gmock.h	/^SetArgPointee(const wchar_t* p) {$/;"	f	namespace:testing
SetArgumentPointee	ceres-solver/internal/ceres/gmock/gmock.h	/^SetArgumentPointee(const T& x) {$/;"	f	namespace:testing
SetArgumentPointeeAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit SetArgumentPointeeAction(const A& value) : value_(value) {}$/;"	f	class:testing::internal::SetArgumentPointeeAction
SetArgumentPointeeAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit SetArgumentPointeeAction(const Proto& proto) : proto_(new Proto) {$/;"	f	class:testing::internal::SetArgumentPointeeAction
SetArgumentPointeeAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class SetArgumentPointeeAction {$/;"	c	namespace:testing::internal
SetArgumentPointeeAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class SetArgumentPointeeAction<N, Proto, true> {$/;"	c	namespace:testing::internal
SetConstant	ceres-solver/internal/ceres/parameter_block.h	/^  void SetConstant() { is_constant_ = true; }$/;"	f	class:ceres::internal::ParameterBlock
SetData	ceres-solver/examples/pgm_image.h	/^bool PGMImage<Real>::SetData(const std::vector<Real>& new_data) {$/;"	f	class:ceres::examples::PGMImage
SetDefaultResultPrinter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDefaultXmlGenerator	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetEdge	ceres-solver/internal/ceres/gmock/gmock.h	/^  void SetEdge(size_t ilhs, size_t irhs, bool b) {$/;"	f	class:testing::internal::MatchMatrix
SetErrnoAndReturn	ceres-solver/internal/ceres/gmock/gmock.h	/^SetErrnoAndReturn(int errval, T result) {$/;"	f	namespace:testing
SetErrnoAndReturnAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  SetErrnoAndReturnAction(int errno_value, T result)$/;"	f	class:testing::internal::SetErrnoAndReturnAction
SetErrnoAndReturnAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class SetErrnoAndReturnAction {$/;"	c	namespace:testing::internal
SetFactory	ceres-solver/internal/ceres/gmock/gmock.h	/^  static void SetFactory(FactoryFunction factory) {$/;"	f	class:testing::DefaultValue
SetGlobalTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::SetGlobalTestPartResultReporter($/;"	f	class:testing::internal::UnitTestImpl
SetGoal	devel/include/logical_core/SetGoal.h	/^struct SetGoal$/;"	s	namespace:logical_core
SetGoal	devel/include/vision_unit/SetGoal.h	/^struct SetGoal$/;"	s	namespace:vision_unit
SetGoal	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^class SetGoal(object):$/;"	c
SetGoal	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^class SetGoal(object):$/;"	c
SetGoal-request	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defclass SetGoal-request (<SetGoal-request>)$/;"	f
SetGoal-request	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defclass SetGoal-request (<SetGoal-request>)$/;"	f
SetGoal-response	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defclass SetGoal-response (<SetGoal-response>)$/;"	f
SetGoal-response	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defclass SetGoal-response (<SetGoal-response>)$/;"	f
SetGoalRequest	devel/include/logical_core/SetGoalRequest.h	/^typedef ::logical_core::SetGoalRequest_<std::allocator<void> > SetGoalRequest;$/;"	t	namespace:logical_core
SetGoalRequest	devel/include/vision_unit/SetGoalRequest.h	/^typedef ::vision_unit::SetGoalRequest_<std::allocator<void> > SetGoalRequest;$/;"	t	namespace:vision_unit
SetGoalRequest	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^class SetGoalRequest(genpy.Message):$/;"	c
SetGoalRequest	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^class SetGoalRequest(genpy.Message):$/;"	c
SetGoalRequestConstPtr	devel/include/logical_core/SetGoalRequest.h	/^typedef boost::shared_ptr< ::logical_core::SetGoalRequest const> SetGoalRequestConstPtr;$/;"	t	namespace:logical_core
SetGoalRequestConstPtr	devel/include/vision_unit/SetGoalRequest.h	/^typedef boost::shared_ptr< ::vision_unit::SetGoalRequest const> SetGoalRequestConstPtr;$/;"	t	namespace:vision_unit
SetGoalRequestPtr	devel/include/logical_core/SetGoalRequest.h	/^typedef boost::shared_ptr< ::logical_core::SetGoalRequest > SetGoalRequestPtr;$/;"	t	namespace:logical_core
SetGoalRequestPtr	devel/include/vision_unit/SetGoalRequest.h	/^typedef boost::shared_ptr< ::vision_unit::SetGoalRequest > SetGoalRequestPtr;$/;"	t	namespace:vision_unit
SetGoalRequest_	devel/include/logical_core/SetGoalRequest.h	/^  SetGoalRequest_()$/;"	f	struct:logical_core::SetGoalRequest_
SetGoalRequest_	devel/include/logical_core/SetGoalRequest.h	/^  SetGoalRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:logical_core::SetGoalRequest_
SetGoalRequest_	devel/include/logical_core/SetGoalRequest.h	/^struct SetGoalRequest_$/;"	s	namespace:logical_core
SetGoalRequest_	devel/include/vision_unit/SetGoalRequest.h	/^  SetGoalRequest_()$/;"	f	struct:vision_unit::SetGoalRequest_
SetGoalRequest_	devel/include/vision_unit/SetGoalRequest.h	/^  SetGoalRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:vision_unit::SetGoalRequest_
SetGoalRequest_	devel/include/vision_unit/SetGoalRequest.h	/^struct SetGoalRequest_$/;"	s	namespace:vision_unit
SetGoalResponse	devel/include/logical_core/SetGoalResponse.h	/^typedef ::logical_core::SetGoalResponse_<std::allocator<void> > SetGoalResponse;$/;"	t	namespace:logical_core
SetGoalResponse	devel/include/vision_unit/SetGoalResponse.h	/^typedef ::vision_unit::SetGoalResponse_<std::allocator<void> > SetGoalResponse;$/;"	t	namespace:vision_unit
SetGoalResponse	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^class SetGoalResponse(genpy.Message):$/;"	c
SetGoalResponse	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^class SetGoalResponse(genpy.Message):$/;"	c
SetGoalResponseConstPtr	devel/include/logical_core/SetGoalResponse.h	/^typedef boost::shared_ptr< ::logical_core::SetGoalResponse const> SetGoalResponseConstPtr;$/;"	t	namespace:logical_core
SetGoalResponseConstPtr	devel/include/vision_unit/SetGoalResponse.h	/^typedef boost::shared_ptr< ::vision_unit::SetGoalResponse const> SetGoalResponseConstPtr;$/;"	t	namespace:vision_unit
SetGoalResponsePtr	devel/include/logical_core/SetGoalResponse.h	/^typedef boost::shared_ptr< ::logical_core::SetGoalResponse > SetGoalResponsePtr;$/;"	t	namespace:logical_core
SetGoalResponsePtr	devel/include/vision_unit/SetGoalResponse.h	/^typedef boost::shared_ptr< ::vision_unit::SetGoalResponse > SetGoalResponsePtr;$/;"	t	namespace:vision_unit
SetGoalResponse_	devel/include/logical_core/SetGoalResponse.h	/^  SetGoalResponse_()$/;"	f	struct:logical_core::SetGoalResponse_
SetGoalResponse_	devel/include/logical_core/SetGoalResponse.h	/^  SetGoalResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:logical_core::SetGoalResponse_
SetGoalResponse_	devel/include/logical_core/SetGoalResponse.h	/^struct SetGoalResponse_$/;"	s	namespace:logical_core
SetGoalResponse_	devel/include/vision_unit/SetGoalResponse.h	/^  SetGoalResponse_()$/;"	f	struct:vision_unit::SetGoalResponse_
SetGoalResponse_	devel/include/vision_unit/SetGoalResponse.h	/^  SetGoalResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:vision_unit::SetGoalResponse_
SetGoalResponse_	devel/include/vision_unit/SetGoalResponse.h	/^struct SetGoalResponse_$/;"	s	namespace:vision_unit
SetGradientErrorDetected	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^void GradientCheckingIterationCallback::SetGradientErrorDetected($/;"	f	class:ceres::internal::GradientCheckingIterationCallback
SetInjectableArgvs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void SetInjectableArgvs(const ::std::vector<testing::internal::string>* argvs) {$/;"	f	namespace:testing::internal
SetIsSafe	ceres-solver/internal/ceres/mutex.h	/^  inline void SetIsSafe() { is_safe_ = true; }$/;"	f	class:ceres::internal::Mutex
SetJacobianOffset	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  void SetJacobianOffset(size_t index, Matrix offset) {$/;"	f	class:ceres::internal::LinearCostFunction
SetLinearSolver	ceres-solver/examples/bundle_adjuster.cc	/^void SetLinearSolver(Solver::Options* options) {$/;"	f	namespace:ceres::examples
SetLowerBound	ceres-solver/internal/ceres/parameter_block.h	/^  void SetLowerBound(int index, double lower_bound) {$/;"	f	class:ceres::internal::ParameterBlock
SetMatchers	ceres-solver/internal/ceres/gmock/gmock.h	/^  void SetMatchers(const ArgumentMatcherTuple& matchers) {$/;"	f	class:testing::internal::MockSpec
SetMaxNumNonZeros	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::SetMaxNumNonZeros(int num_nonzeros) {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
SetMinimizerOptions	ceres-solver/examples/bundle_adjuster.cc	/^void SetMinimizerOptions(Solver::Options* options) {$/;"	f	namespace:ceres::examples
SetMinimizerOptions	ceres-solver/examples/nist.cc	/^void SetMinimizerOptions(ceres::Solver::Options* options) {$/;"	f	namespace:ceres::examples
SetNumResiduals	ceres-solver/include/ceres/dynamic_cost_function.h	/^  virtual void SetNumResiduals(int num_residuals) {$/;"	f	class:ceres::DynamicCostFunction
SetNumericDiffOptions	ceres-solver/examples/more_garbow_hillstrom.cc	/^static void SetNumericDiffOptions(ceres::NumericDiffOptions* options) {$/;"	f	namespace:ceres::examples
SetNumericDiffOptions	ceres-solver/examples/nist.cc	/^static void SetNumericDiffOptions(ceres::NumericDiffOptions* options) {$/;"	f	namespace:ceres::examples
SetOrdering	ceres-solver/examples/bundle_adjuster.cc	/^void SetOrdering(BALProblem* bal_problem, Solver::Options* options) {$/;"	f	namespace:ceres::examples
SetParam	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetParameterBlockConstant	ceres-solver/internal/ceres/problem.cc	/^void Problem::SetParameterBlockConstant(double* values) {$/;"	f	class:ceres::Problem
SetParameterBlockConstant	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::SetParameterBlockConstant(double* values) {$/;"	f	class:ceres::internal::ProblemImpl
SetParameterBlockStatePtrsToUserStatePtrs	ceres-solver/internal/ceres/program.cc	/^bool Program::SetParameterBlockStatePtrsToUserStatePtrs() {$/;"	f	class:ceres::internal::Program
SetParameterBlockVariable	ceres-solver/internal/ceres/problem.cc	/^void Problem::SetParameterBlockVariable(double* values) {$/;"	f	class:ceres::Problem
SetParameterBlockVariable	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::SetParameterBlockVariable(double* values) {$/;"	f	class:ceres::internal::ProblemImpl
SetParameterLowerBound	ceres-solver/internal/ceres/problem.cc	/^void Problem::SetParameterLowerBound(double* values,$/;"	f	class:ceres::Problem
SetParameterLowerBound	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::SetParameterLowerBound(double* values,$/;"	f	class:ceres::internal::ProblemImpl
SetParameterOffsetsAndIndex	ceres-solver/internal/ceres/program.cc	/^void Program::SetParameterOffsetsAndIndex() {$/;"	f	class:ceres::internal::Program
SetParameterUpperBound	ceres-solver/internal/ceres/problem.cc	/^void Problem::SetParameterUpperBound(double* values,$/;"	f	class:ceres::Problem
SetParameterUpperBound	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::SetParameterUpperBound(double* values,$/;"	f	class:ceres::internal::ProblemImpl
SetParameterization	ceres-solver/internal/ceres/parameter_block.h	/^  void SetParameterization(LocalParameterization* new_parameterization) {$/;"	f	class:ceres::internal::ParameterBlock
SetParameterization	ceres-solver/internal/ceres/problem.cc	/^void Problem::SetParameterization($/;"	f	class:ceres::Problem
SetParameterization	ceres-solver/internal/ceres/problem_impl.cc	/^void ProblemImpl::SetParameterization($/;"	f	class:ceres::internal::ProblemImpl
SetRandomState	ceres-solver/internal/ceres/random.h	/^inline void SetRandomState(int state) {$/;"	f	namespace:ceres
SetReturnValue	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  void SetReturnValue(bool return_value) { return_value_ = return_value; }$/;"	f	class:ceres::internal::GoodTestTerm
SetSolverOptionsFromFlags	ceres-solver/examples/bundle_adjuster.cc	/^void SetSolverOptionsFromFlags(BALProblem* bal_problem,$/;"	f	namespace:ceres::examples
SetSparseMatrixConstant	ceres-solver/internal/ceres/evaluator_test.cc	/^void SetSparseMatrixConstant(SparseMatrix* sparse_matrix, double value) {$/;"	f	namespace:ceres::internal
SetState	ceres-solver/internal/ceres/parameter_block.h	/^  bool SetState(const double* x) {$/;"	f	class:ceres::internal::ParameterBlock
SetSummaryFinalCost	ceres-solver/internal/ceres/solver_utils.h	/^void SetSummaryFinalCost(SummaryType* summary) {$/;"	f	namespace:ceres::internal
SetTestPartResultReporterForCurrentThread	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::SetTestPartResultReporterForCurrentThread($/;"	f	class:testing::internal::UnitTestImpl
SetUp	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^  void SetUp() {$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrixTest
SetUp	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrixTest
SetUp	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::BlockSparseMatrixTest
SetUp	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::CanonicalViewsTest
SetUp	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^  void SetUp() {$/;"	f	class:ceres::internal::SolveUpperTriangularTest
SetUp	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::CompressedRowSparseMatrixTest
SetUp	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::CovarianceTest
SetUp	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::LargeScaleCovarianceTest
SetUp	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::RankDeficientCovarianceTest
SetUp	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::DenseSparseMatrixTest
SetUp	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::__anon36::DoglegStrategyFixtureEllipse
SetUp	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::__anon36::DoglegStrategyFixtureValley
SetUp	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::SixParameterCostFunctorTest
SetUp	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::ThreeParameterCostFunctorTest
SetUp	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::DynamicCompressedRowSparseMatrixTest
SetUp	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::ThreeParameterCostFunctorTest
SetUp	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Test::SetUp() {$/;"	f	class:testing::Test
SetUp	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUp	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::ImplicitSchurComplementTest
SetUp	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::ProductParameterizationTest
SetUp	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::SchurOrderingTest
SetUp	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::PartitionedMatrixViewTest
SetUp	ceres-solver/internal/ceres/problem_test.cc	/^  void SetUp() {$/;"	f	class:ceres::internal::ProblemEvaluateTest
SetUp	ceres-solver/internal/ceres/reorder_program_test.cc	/^  void SetUp() {$/;"	f	class:ceres::internal::ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest
SetUp	ceres-solver/internal/ceres/test_util.h	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::SystemTest
SetUp	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::LinearSolverAndEvaluatorCreationTest
SetUp	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^  virtual void SetUp() {$/;"	f	class:ceres::internal::UnsymmetricLinearSolverTest
SetUpEnvironment	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void SetUpEnvironment(Environment* env) { env->SetUp(); }$/;"	f	namespace:testing::internal
SetUpFromId	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  void SetUpFromId(int id) {$/;"	f	class:ceres::internal::SchurEliminatorTest
SetUpFromProblemId	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^  void SetUpFromProblemId(int problem_id) {$/;"	f	class:ceres::internal::BlockJacobiPreconditionerTest
SetUpFromProblemId	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  void SetUpFromProblemId(int problem_id) {$/;"	f	class:ceres::internal::SchurComplementSolverTest
SetUpProblem	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  void SetUpProblem(int problem_id) {$/;"	f	class:ceres::internal::IterativeSchurComplementSolverTest
SetUpTestCase	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCaseFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;$/;"	t	class:testing::Test
SetUpTestCaseFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef void (*SetUpTestCaseFunc)();$/;"	t	namespace:testing::internal
SetUpperBound	ceres-solver/internal/ceres/parameter_block.h	/^  void SetUpperBound(int index, double upper_bound) {$/;"	f	class:ceres::internal::ParameterBlock
SetValue	ceres-solver/internal/ceres/gtest/gtest.h	/^  void SetValue(const std::string& new_value) {$/;"	f	class:testing::TestProperty
SetVarying	ceres-solver/internal/ceres/parameter_block.h	/^  void SetVarying() { is_constant_ = false; }$/;"	f	class:ceres::internal::ParameterBlock
SetZero	ceres-solver/internal/ceres/block_random_access_dense_matrix.cc	/^void BlockRandomAccessDenseMatrix::SetZero() {$/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
SetZero	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^void BlockRandomAccessDiagonalMatrix::SetZero() {$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
SetZero	ceres-solver/internal/ceres/block_random_access_sparse_matrix.cc	/^void BlockRandomAccessSparseMatrix::SetZero() {$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
SetZero	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::SetZero() {$/;"	f	class:ceres::internal::BlockSparseMatrix
SetZero	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::SetZero() {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
SetZero	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::SetZero() {$/;"	f	class:ceres::internal::DenseSparseMatrix
SetZero	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::SetZero() {$/;"	f	class:ceres::internal::TripletSparseMatrix
Setup	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Environment
Setup	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Test
SetupCommonMinimizerOptions	ceres-solver/internal/ceres/preprocessor.cc	/^void SetupCommonMinimizerOptions(PreprocessedProblem* pp) {$/;"	f	namespace:ceres::internal
SetupEvaluator	ceres-solver/internal/ceres/line_search_preprocessor.cc	/^bool SetupEvaluator(PreprocessedProblem* pp) {$/;"	f	namespace:ceres::internal::__anon14
SetupEvaluator	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^bool SetupEvaluator(PreprocessedProblem* pp) {$/;"	f	namespace:ceres::internal::__anon31
SetupHelper	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  void SetupHelper(LinearLeastSquaresProblem* problem) {$/;"	f	class:ceres::internal::SchurEliminatorTest
SetupInnerIterationMinimizer	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^bool SetupInnerIterationMinimizer(PreprocessedProblem* pp) {$/;"	f	namespace:ceres::internal::__anon31
SetupLinearSolver	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^bool SetupLinearSolver(PreprocessedProblem* pp) {$/;"	f	namespace:ceres::internal::__anon31
SetupMinimizerOptions	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^void SetupMinimizerOptions(PreprocessedProblem* pp) {$/;"	f	namespace:ceres::internal::__anon31
Setup_should_be_spelled_SetUp	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
SevenParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct SevenParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
ShootingMode	src/logical_core/src/shooting_mode.cpp	/^ShootingMode::ShootingMode(LogicalCore *logical_core)$/;"	f	class:ShootingMode
ShootingMode	src/logical_core/src/shooting_mode.h	/^class ShootingMode: public MissionMode$/;"	c
ShouldRunTest	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
ShouldRunTestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool ShouldRunTestCase(const TestCase* test_case) {$/;"	f	namespace:testing::internal
ShouldRunTestOnShard	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {$/;"	f	namespace:testing::internal
ShouldShard	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ShouldShard(const char* total_shards_env,$/;"	f	namespace:testing::internal
ShouldUseColor	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ShouldUseColor(bool stdout_is_tty) {$/;"	f	namespace:testing::internal
ShowWideCString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string String::ShowWideCString(const wchar_t * wide_c_str) {$/;"	f	class:testing::internal::String
Shuffle	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^inline void Shuffle(internal::Random* random, std::vector<E>* v) {$/;"	f	namespace:testing::internal
ShuffleRange	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ShuffleRange(internal::Random* random, int begin, int end,$/;"	f	namespace:testing::internal
ShuffleTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestCase::ShuffleTests(internal::Random* random) {$/;"	f	class:testing::TestCase
ShuffleTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::ShuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
SignAndMagnitudeToBiased	ceres-solver/internal/ceres/gtest/gtest.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SimplicialLDLT	ceres-solver/internal/ceres/schur_complement_solver.h	/^  SimplicialLDLT;$/;"	t	class:ceres::internal::SparseSchurComplementSolver
SimplicialLDLTSolve	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary SimplicialLDLTSolve(const SparseMatrixType& lhs,$/;"	f	namespace:ceres::internal::__anon10
SimplicialLDLTWithAMDOrdering	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  SimplicialLDLTWithAMDOrdering;$/;"	t	class:ceres::internal::SparseNormalCholeskySolver
SimplicialLDLTWithNaturalOrdering	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  SimplicialLDLTWithNaturalOrdering;$/;"	t	class:ceres::internal::SparseNormalCholeskySolver
SimulateRobot	ceres-solver/examples/robot_pose_mle.cc	/^void SimulateRobot(vector<double>* odometry_values,$/;"	f
SingleFailureChecker	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^SingleFailureChecker:: SingleFailureChecker($/;"	f	class:testing::internal::SingleFailureChecker
SingleFailureChecker	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class GTEST_API_ SingleFailureChecker {$/;"	c	namespace:testing::internal	file:
SingleLinkageClusteringOptions	ceres-solver/internal/ceres/single_linkage_clustering.h	/^  SingleLinkageClusteringOptions()$/;"	f	struct:ceres::internal::SingleLinkageClusteringOptions
SingleLinkageClusteringOptions	ceres-solver/internal/ceres/single_linkage_clustering.h	/^struct SingleLinkageClusteringOptions {$/;"	s	namespace:ceres::internal
SixParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct SixParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
SixParameterCostFunctorTest	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^class SixParameterCostFunctorTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
Size	ceres-solver/examples/fields_of_experts.h	/^  int Size() const {$/;"	f	class:ceres::examples::FieldsOfExperts
Size	ceres-solver/internal/ceres/parameter_block.h	/^  int Size() const { return size_; }$/;"	f	class:ceres::internal::ParameterBlock
SizeIs	ceres-solver/internal/ceres/gmock/gmock.h	/^SizeIs(const SizeMatcher& size_matcher) {$/;"	f	namespace:testing
SizeIsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit SizeIsMatcher(const SizeMatcher& size_matcher)$/;"	f	class:testing::internal::SizeIsMatcher
SizeIsMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class SizeIsMatcher {$/;"	c	namespace:testing::internal
SizeTestingCostFunction	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^class SizeTestingCostFunction : public SizedCostFunction<num_rows, num_cols> {$/;"	c	namespace:ceres::internal	file:
SizeType	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename ContainerView::type::size_type SizeType;$/;"	t	class:testing::internal::SizeIsMatcher::Impl
SizedCostFunction	ceres-solver/include/ceres/sized_cost_function.h	/^  SizedCostFunction() {$/;"	f	class:ceres::SizedCostFunction
SizedCostFunction	ceres-solver/include/ceres/sized_cost_function.h	/^class SizedCostFunction : public CostFunction {$/;"	c	namespace:ceres
SkipComma	ceres-solver/internal/ceres/gtest/gtest.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SkipLines	ceres-solver/examples/nist.cc	/^void SkipLines(ifstream& ifs, int num_lines) {$/;"	f	namespace:ceres::examples
SkipPrefix	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool SkipPrefix(const char* prefix, const char** pstr) {$/;"	f	namespace:testing::internal
SkipSpaces	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char* SkipSpaces(const char* str) {$/;"	f	namespace:testing::internal
SleepMilliseconds	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void SleepMilliseconds(int n) {$/;"	f	namespace:testing::internal
SleepMilliseconds	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:std::tr1
SnavelyReprojectionError	ceres-solver/examples/simple_bundle_adjuster.cc	/^  SnavelyReprojectionError(double observed_x, double observed_y)$/;"	f	struct:SnavelyReprojectionError
SnavelyReprojectionError	ceres-solver/examples/simple_bundle_adjuster.cc	/^struct SnavelyReprojectionError {$/;"	s	file:
SnavelyReprojectionError	ceres-solver/examples/snavely_reprojection_error.h	/^  SnavelyReprojectionError(double observed_x, double observed_y)$/;"	f	struct:ceres::examples::SnavelyReprojectionError
SnavelyReprojectionError	ceres-solver/examples/snavely_reprojection_error.h	/^struct SnavelyReprojectionError {$/;"	s	namespace:ceres::examples
SnavelyReprojectionErrorWithQuaternions	ceres-solver/examples/snavely_reprojection_error.h	/^  SnavelyReprojectionErrorWithQuaternions(double observed_x, double observed_y)$/;"	f	struct:ceres::examples::SnavelyReprojectionErrorWithQuaternions
SnavelyReprojectionErrorWithQuaternions	ceres-solver/examples/snavely_reprojection_error.h	/^struct SnavelyReprojectionErrorWithQuaternions {$/;"	s	namespace:ceres::examples
SocketWriter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    SocketWriter(const string& host, const string& port)$/;"	f	class:testing::internal::StreamingListener::SocketWriter
SocketWriter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  class SocketWriter : public AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener	file:
SoftLOneLoss	ceres-solver/include/ceres/loss_function.h	/^  explicit SoftLOneLoss(double a) : b_(a * a), c_(1 \/ b_) { }$/;"	f	class:ceres::SoftLOneLoss
SoftLOneLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT SoftLOneLoss : public LossFunction {$/;"	c	namespace:ceres
Solve	ceres-solver/examples/more_garbow_hillstrom.cc	/^template<typename TestProblem> bool Solve(bool is_constrained, int trial) {$/;"	f	namespace:ceres::examples
Solve	ceres-solver/internal/ceres/conjugate_gradients_solver.cc	/^LinearSolver::Summary ConjugateGradientsSolver::Solve($/;"	f	class:ceres::internal::ConjugateGradientsSolver
Solve	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^void CoordinateDescentMinimizer::Solve(Program* program,$/;"	f	class:ceres::internal::CoordinateDescentMinimizer
Solve	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^void GradientProblemSolver::Solve(const GradientProblemSolver::Options& options,$/;"	f	class:ceres::GradientProblemSolver
Solve	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^void Solve(const GradientProblemSolver::Options& options,$/;"	f	namespace:ceres
Solve	ceres-solver/internal/ceres/linear_solver.h	/^  virtual LinearSolver::Summary Solve($/;"	f	class:ceres::internal::TypedLinearSolver
Solve	ceres-solver/internal/ceres/solver.cc	/^void Solve(const Solver::Options& options,$/;"	f	namespace:ceres
Solve	ceres-solver/internal/ceres/solver.cc	/^void Solver::Solve(const Solver::Options& options,$/;"	f	class:ceres::Solver
Solve	ceres-solver/internal/ceres/suitesparse.cc	/^cholmod_dense* SuiteSparse::Solve(cholmod_factor* L,$/;"	f	class:ceres::internal::SuiteSparse
SolveAndEvaluateFinalResiduals	ceres-solver/internal/ceres/test_util.h	/^  void SolveAndEvaluateFinalResiduals(const Solver::Options& options,$/;"	f	class:ceres::internal::SystemTest
SolveCholesky	ceres-solver/internal/ceres/cxsparse.cc	/^bool CXSparse::SolveCholesky(cs_di* A,$/;"	f	class:ceres::internal::CXSparse
SolveImpl	ceres-solver/internal/ceres/cgnr_solver.cc	/^LinearSolver::Summary CgnrSolver::SolveImpl($/;"	f	class:ceres::internal::CgnrSolver
SolveImpl	ceres-solver/internal/ceres/dense_normal_cholesky_solver.cc	/^LinearSolver::Summary DenseNormalCholeskySolver::SolveImpl($/;"	f	class:ceres::internal::DenseNormalCholeskySolver
SolveImpl	ceres-solver/internal/ceres/dense_qr_solver.cc	/^LinearSolver::Summary DenseQRSolver::SolveImpl($/;"	f	class:ceres::internal::DenseQRSolver
SolveImpl	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary DynamicSparseNormalCholeskySolver::SolveImpl($/;"	f	class:ceres::internal::DynamicSparseNormalCholeskySolver
SolveImpl	ceres-solver/internal/ceres/iterative_schur_complement_solver.cc	/^LinearSolver::Summary IterativeSchurComplementSolver::SolveImpl($/;"	f	class:ceres::internal::IterativeSchurComplementSolver
SolveImpl	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^  virtual LinearSolver::Summary SolveImpl($/;"	f	class:ceres::internal::RegularizationCheckingLinearSolver	file:
SolveImpl	ceres-solver/internal/ceres/schur_complement_solver.cc	/^LinearSolver::Summary SchurComplementSolver::SolveImpl($/;"	f	class:ceres::internal::SchurComplementSolver
SolveImpl	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary SparseNormalCholeskySolver::SolveImpl($/;"	f	class:ceres::internal::SparseNormalCholeskySolver
SolveImplUsingCXSparse	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary DynamicSparseNormalCholeskySolver::SolveImplUsingCXSparse($/;"	f	class:ceres::internal::DynamicSparseNormalCholeskySolver
SolveImplUsingCXSparse	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary SparseNormalCholeskySolver::SolveImplUsingCXSparse($/;"	f	class:ceres::internal::SparseNormalCholeskySolver
SolveImplUsingEigen	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary DynamicSparseNormalCholeskySolver::SolveImplUsingEigen($/;"	f	class:ceres::internal::DynamicSparseNormalCholeskySolver
SolveImplUsingEigen	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary SparseNormalCholeskySolver::SolveImplUsingEigen($/;"	f	class:ceres::internal::SparseNormalCholeskySolver
SolveImplUsingSuiteSparse	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc	/^DynamicSparseNormalCholeskySolver::SolveImplUsingSuiteSparse($/;"	f	class:ceres::internal::DynamicSparseNormalCholeskySolver
SolveImplUsingSuiteSparse	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^LinearSolver::Summary SparseNormalCholeskySolver::SolveImplUsingSuiteSparse($/;"	f	class:ceres::internal::SparseNormalCholeskySolver
SolveInPlaceUsingCholesky	ceres-solver/internal/ceres/lapack.cc	/^LinearSolverTerminationType LAPACK::SolveInPlaceUsingCholesky($/;"	f	class:ceres::internal::LAPACK
SolveInPlaceUsingQR	ceres-solver/internal/ceres/lapack.cc	/^LinearSolverTerminationType LAPACK::SolveInPlaceUsingQR($/;"	f	class:ceres::internal::LAPACK
SolveNISTProblems	ceres-solver/examples/nist.cc	/^void SolveNISTProblems() {$/;"	f	namespace:ceres::examples
SolveOptimizationProblem	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d.cc	/^bool SolveOptimizationProblem(ceres::Problem* problem) {$/;"	f	namespace:ceres::examples
SolveOptimizationProblem	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d.cc	/^bool SolveOptimizationProblem(ceres::Problem* problem) {$/;"	f	namespace:ceres::examples
SolveProblem	ceres-solver/examples/bundle_adjuster.cc	/^void SolveProblem(const char* filename) {$/;"	f	namespace:ceres::examples
SolveProblem	ceres-solver/examples/denoising.cc	/^void SolveProblem(Problem* problem, PGMImage<double>* solution) {$/;"	f	namespace:ceres::examples
SolveRTRWithSparseRHS	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.h	/^void SolveRTRWithSparseRHS(IntegerType num_cols,$/;"	f	namespace:ceres::internal
SolveReducedLinearSystem	ceres-solver/internal/ceres/schur_complement_solver.cc	/^DenseSchurComplementSolver::SolveReducedLinearSystem($/;"	f	class:ceres::internal::DenseSchurComplementSolver
SolveReducedLinearSystem	ceres-solver/internal/ceres/schur_complement_solver.cc	/^SparseSchurComplementSolver::SolveReducedLinearSystem($/;"	f	class:ceres::internal::SparseSchurComplementSolver
SolveReducedLinearSystemUsingCXSparse	ceres-solver/internal/ceres/schur_complement_solver.cc	/^SparseSchurComplementSolver::SolveReducedLinearSystemUsingCXSparse($/;"	f	class:ceres::internal::SparseSchurComplementSolver
SolveReducedLinearSystemUsingConjugateGradients	ceres-solver/internal/ceres/schur_complement_solver.cc	/^SparseSchurComplementSolver::SolveReducedLinearSystemUsingConjugateGradients($/;"	f	class:ceres::internal::SparseSchurComplementSolver
SolveReducedLinearSystemUsingEigen	ceres-solver/internal/ceres/schur_complement_solver.cc	/^SparseSchurComplementSolver::SolveReducedLinearSystemUsingEigen($/;"	f	class:ceres::internal::SparseSchurComplementSolver
SolveReducedLinearSystemUsingSuiteSparse	ceres-solver/internal/ceres/schur_complement_solver.cc	/^SparseSchurComplementSolver::SolveReducedLinearSystemUsingSuiteSparse($/;"	f	class:ceres::internal::SparseSchurComplementSolver
SolveUpperTriangularInPlace	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.h	/^void SolveUpperTriangularInPlace(IntegerType num_cols,$/;"	f	namespace:ceres::internal
SolveUpperTriangularTest	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^class SolveUpperTriangularTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
SolveUpperTriangularTransposeInPlace	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.h	/^void SolveUpperTriangularTransposeInPlace(IntegerType num_cols,$/;"	f	namespace:ceres::internal
SolveUsingEigen	ceres-solver/internal/ceres/dense_normal_cholesky_solver.cc	/^LinearSolver::Summary DenseNormalCholeskySolver::SolveUsingEigen($/;"	f	class:ceres::internal::DenseNormalCholeskySolver
SolveUsingEigen	ceres-solver/internal/ceres/dense_qr_solver.cc	/^LinearSolver::Summary DenseQRSolver::SolveUsingEigen($/;"	f	class:ceres::internal::DenseQRSolver
SolveUsingLAPACK	ceres-solver/internal/ceres/dense_normal_cholesky_solver.cc	/^LinearSolver::Summary DenseNormalCholeskySolver::SolveUsingLAPACK($/;"	f	class:ceres::internal::DenseNormalCholeskySolver
SolveUsingLAPACK	ceres-solver/internal/ceres/dense_qr_solver.cc	/^LinearSolver::Summary DenseQRSolver::SolveUsingLAPACK($/;"	f	class:ceres::internal::DenseQRSolver
SolveWithFullReport	ceres-solver/examples/ellipse_approximation.cc	/^bool SolveWithFullReport(ceres::Solver::Options options,$/;"	f
Solver	ceres-solver/include/ceres/solver.h	/^class CERES_EXPORT Solver {$/;"	c	namespace:ceres
SolverConfig	ceres-solver/internal/ceres/test_util.h	/^  SolverConfig($/;"	f	struct:ceres::internal::SolverConfig
SolverConfig	ceres-solver/internal/ceres/test_util.h	/^struct SolverConfig {$/;"	s	namespace:ceres::internal
SortVector	ceres-solver/internal/ceres/polynomial_test.cc	/^Vector SortVector(const Vector& in) {$/;"	f	namespace:ceres::internal::__anon7
SpaceIndex	ceres-solver/internal/ceres/gmock/gmock.h	/^  size_t SpaceIndex(size_t ilhs, size_t irhs) const {$/;"	f	class:testing::internal::MatchMatrix
SparseDenseMultiply	ceres-solver/internal/ceres/suitesparse.h	/^  void SparseDenseMultiply(cholmod_sparse* A, double alpha, double beta,$/;"	f	class:ceres::internal::SuiteSparse
SparseLinearAlgebraLibraryType	ceres-solver/include/ceres/types.h	/^enum SparseLinearAlgebraLibraryType {$/;"	g	namespace:ceres
SparseLinearAlgebraLibraryTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* SparseLinearAlgebraLibraryTypeToString($/;"	f	namespace:ceres
SparseMatrix	ceres-solver/internal/ceres/sparse_matrix.h	/^class SparseMatrix : public LinearOperator {$/;"	c	namespace:ceres::internal
SparseMatrixPreconditioner	ceres-solver/internal/ceres/preconditioner.h	/^typedef TypedPreconditioner<SparseMatrix>              SparseMatrixPreconditioner;               \/\/ NOLINT$/;"	t	namespace:ceres::internal
SparseMatrixPreconditionerWrapper	ceres-solver/internal/ceres/preconditioner.cc	/^SparseMatrixPreconditionerWrapper::SparseMatrixPreconditionerWrapper($/;"	f	class:ceres::internal::SparseMatrixPreconditionerWrapper
SparseMatrixPreconditionerWrapper	ceres-solver/internal/ceres/preconditioner.h	/^class SparseMatrixPreconditionerWrapper : public SparseMatrixPreconditioner {$/;"	c	namespace:ceres::internal
SparseNormalCholeskySolver	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^SparseNormalCholeskySolver::SparseNormalCholeskySolver($/;"	f	class:ceres::internal::SparseNormalCholeskySolver
SparseNormalCholeskySolver	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^class SparseNormalCholeskySolver : public CompressedRowSparseMatrixSolver {$/;"	c	namespace:ceres::internal
SparseSchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.cc	/^SparseSchurComplementSolver::SparseSchurComplementSolver($/;"	f	class:ceres::internal::SparseSchurComplementSolver
SparseSchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.h	/^class SparseSchurComplementSolver : public SchurComplementSolver {$/;"	c	namespace:ceres::internal
SpecializationFilename	ceres-solver/internal/ceres/generate_template_specializations.py	/^def SpecializationFilename(prefix, row_block_size, e_block_size, f_block_size):$/;"	f
Specialize	ceres-solver/internal/ceres/generate_template_specializations.py	/^def Specialize(name, data):$/;"	f
SpecifyCardinality	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ExpectationBase::SpecifyCardinality(const Cardinality& a_cardinality) {$/;"	f	class:testing::internal::ExpectationBase
SplitEscapedString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::vector<std::string> SplitEscapedString(const std::string& str) {$/;"	f	namespace:testing::internal::__anon20
SplitIntoTestNames	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static std::vector<std::string> SplitIntoTestNames(const char* src) {$/;"	f	namespace:testing::internal
SplitString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void SplitString(const ::std::string& str, char delimiter,$/;"	f	namespace:testing::internal
SplitStringToIteratorUsing	ceres-solver/internal/ceres/split.cc	/^void SplitStringToIteratorUsing(const StringType& full,$/;"	f	namespace:ceres::internal
SplitStringUsing	ceres-solver/internal/ceres/split.cc	/^void SplitStringUsing(const string& full,$/;"	f	namespace:ceres::internal
SplitStringUsingChar	ceres-solver/examples/nist.cc	/^void SplitStringUsingChar(const string& full,$/;"	f	namespace:ceres::examples
SquaredColumnNorm	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::SquaredColumnNorm(double* x) const {$/;"	f	class:ceres::internal::BlockSparseMatrix
SquaredColumnNorm	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::SquaredColumnNorm(double* x) const {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
SquaredColumnNorm	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::SquaredColumnNorm(double* x) const {$/;"	f	class:ceres::internal::DenseSparseMatrix
SquaredColumnNorm	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::SquaredColumnNorm(double* x) const {$/;"	f	class:ceres::internal::TripletSparseMatrix
StableIndependentSetOrdering	ceres-solver/internal/ceres/graph_algorithms.h	/^int StableIndependentSetOrdering(const Graph<Vertex>& graph,$/;"	f	namespace:ceres::internal
StackGrowsDown	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool StackGrowsDown() {$/;"	f	namespace:testing::internal
StackLowerThanAddress	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void StackLowerThanAddress(const void* ptr, bool* result) {$/;"	f	namespace:testing::internal
Start	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void Start() { SendLn("gtest_streaming_protocol_version=1.0"); }$/;"	f	class:testing::internal::StreamingListener	file:
StartWatcherThreadFor	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static void StartWatcherThreadFor(DWORD thread_id) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
StartsWith	ceres-solver/internal/ceres/gmock/gmock.h	/^    StartsWith(const internal::string& prefix) {$/;"	f	namespace:testing
StartsWith	ceres-solver/internal/ceres/gmock/gmock.h	/^    StartsWith(const internal::wstring& prefix) {$/;"	f	namespace:testing
StartsWithMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit StartsWithMatcher(const StringType& prefix) : prefix_(prefix) {$/;"	f	class:testing::internal::StartsWithMatcher
StartsWithMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class StartsWithMatcher {$/;"	c	namespace:testing::internal
Stat	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:std::tr1::posix
StatStruct	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:std::tr1::posix	typeref:struct:std::tr1::posix::_stat
State	ceres-solver/internal/ceres/line_search_minimizer.h	/^    State(int num_parameters,$/;"	f	struct:ceres::internal::LineSearchMinimizer::State
State	ceres-solver/internal/ceres/line_search_minimizer.h	/^  struct State {$/;"	s	class:ceres::internal::LineSearchMinimizer
StateMap	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  typedef std::map<const void*, MockObjectState> StateMap;$/;"	t	class:testing::__anon29::MockObjectRegistry	file:
StateUpdatingCallback	ceres-solver/internal/ceres/callbacks.cc	/^StateUpdatingCallback::StateUpdatingCallback(Program* program,$/;"	f	class:ceres::internal::StateUpdatingCallback
StateUpdatingCallback	ceres-solver/internal/ceres/callbacks.h	/^class StateUpdatingCallback : public IterationCallback {$/;"	c	namespace:ceres::internal
StateVectorToParameterBlocks	ceres-solver/internal/ceres/program.cc	/^bool Program::StateVectorToParameterBlocks(const double *state) {$/;"	f	class:ceres::internal::Program
StaticAssertTypeEq	ceres-solver/internal/ceres/gtest/gtest.h	/^bool StaticAssertTypeEq() {$/;"	f	namespace:testing
StaticConstructorSelector	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum StaticConstructorSelector { kStaticMutex = 0 };$/;"	g	class:std::tr1::Mutex
SteepestDescent	ceres-solver/internal/ceres/line_search_direction.cc	/^class SteepestDescent : public LineSearchDirection {$/;"	c	namespace:ceres::internal	file:
StepAccepted	ceres-solver/internal/ceres/dogleg_strategy.cc	/^void DoglegStrategy::StepAccepted(double step_quality) {$/;"	f	class:ceres::internal::DoglegStrategy
StepAccepted	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^void LevenbergMarquardtStrategy::StepAccepted(double step_quality) {$/;"	f	class:ceres::internal::LevenbergMarquardtStrategy
StepAccepted	ceres-solver/internal/ceres/trust_region_step_evaluator.cc	/^void TrustRegionStepEvaluator::StepAccepted($/;"	f	class:ceres::internal::TrustRegionStepEvaluator
StepIsInvalid	ceres-solver/internal/ceres/dogleg_strategy.cc	/^void DoglegStrategy::StepIsInvalid() {$/;"	f	class:ceres::internal::DoglegStrategy
StepIsInvalid	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  virtual void StepIsInvalid() {$/;"	f	class:ceres::internal::LevenbergMarquardtStrategy
StepQuality	ceres-solver/internal/ceres/trust_region_step_evaluator.cc	/^double TrustRegionStepEvaluator::StepQuality($/;"	f	class:ceres::internal::TrustRegionStepEvaluator
StepRejected	ceres-solver/internal/ceres/dogleg_strategy.cc	/^void DoglegStrategy::StepRejected(double step_quality) {$/;"	f	class:ceres::internal::DoglegStrategy
StepRejected	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^void LevenbergMarquardtStrategy::StepRejected(double step_quality) {$/;"	f	class:ceres::internal::LevenbergMarquardtStrategy
StlContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::type StlContainer;$/;"	t	class:testing::internal::ContainerEqMatcher
StlContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::type StlContainer;$/;"	t	class:testing::internal::ElementsAreMatcherImpl
StlContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::type StlContainer;$/;"	t	class:testing::internal::QuantifierMatcherImpl
StlContainer	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::type StlContainer;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImpl
StlContainerConstIterator	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename StlContainer::const_iterator StlContainerConstIterator;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImpl
StlContainerReference	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::const_reference StlContainerReference;$/;"	t	class:testing::internal::ContainerEqMatcher
StlContainerReference	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::const_reference StlContainerReference;$/;"	t	class:testing::internal::ElementsAreMatcherImpl
StlContainerReference	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::const_reference StlContainerReference;$/;"	t	class:testing::internal::QuantifierMatcherImpl
StlContainerReference	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename View::const_reference StlContainerReference;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImpl
StlContainerView	ceres-solver/internal/ceres/gmock/gmock.h	/^class StlContainerView {$/;"	c	namespace:testing::internal
StlContainerView	ceres-solver/internal/ceres/gmock/gmock.h	/^class StlContainerView< ::testing::tuple<ElementPointer, Size> > {$/;"	c	namespace:testing::internal
StlContainerView	ceres-solver/internal/ceres/gmock/gmock.h	/^class StlContainerView<Element[N]> {$/;"	c	namespace:testing::internal
StorageType	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  enum StorageType {$/;"	g	class:ceres::internal::CompressedRowSparseMatrix
StorageType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef Functor StorageType;$/;"	t	struct:testing::internal::CallableTraits
StorageType	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ResType(*StorageType)(ArgType);$/;"	t	struct:testing::internal::CallableTraits
StorageTypeForSparseLinearAlgebraLibrary	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^CompressedRowSparseMatrix::StorageType StorageTypeForSparseLinearAlgebraLibrary($/;"	f	namespace:ceres::internal
StrCaseCmp	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:std::tr1::posix
StrCaseEq	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrCaseEq(const internal::string& str) {$/;"	f	namespace:testing
StrCaseEq	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrCaseEq(const internal::wstring& str) {$/;"	f	namespace:testing
StrCaseNe	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrCaseNe(const internal::string& str) {$/;"	f	namespace:testing
StrCaseNe	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrCaseNe(const internal::wstring& str) {$/;"	f	namespace:testing
StrDup	ceres-solver/internal/ceres/gtest/gtest.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:std::tr1::posix
StrDup	ceres-solver/internal/ceres/gtest/gtest.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:std::tr1::posix
StrEq	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrEq(const internal::string& str) {$/;"	f	namespace:testing
StrEq	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrEq(const internal::wstring& str) {$/;"	f	namespace:testing
StrEqualityMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  StrEqualityMatcher(const StringType& str, bool expect_eq,$/;"	f	class:testing::internal::StrEqualityMatcher
StrEqualityMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class StrEqualityMatcher {$/;"	c	namespace:testing::internal
StrError	ceres-solver/internal/ceres/gtest/gtest.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:std::tr1::posix
StrNCpy	ceres-solver/internal/ceres/gtest/gtest.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:std::tr1::posix
StrNe	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrNe(const internal::string& str) {$/;"	f	namespace:testing
StrNe	ceres-solver/internal/ceres/gmock/gmock.h	/^    StrNe(const internal::wstring& str) {$/;"	f	namespace:testing
StreamHelper	ceres-solver/internal/ceres/gtest/gtest.h	/^  inline void StreamHelper(internal::false_type \/*is_pointer*\/,$/;"	f	class:testing::Message
StreamHelper	ceres-solver/internal/ceres/gtest/gtest.h	/^  inline void StreamHelper(internal::true_type \/*is_pointer*\/, T* pointer) {$/;"	f	class:testing::Message
StreamMatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit StreamMatchResultListener(::std::ostream* os)$/;"	f	class:testing::internal::StreamMatchResultListener
StreamMatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^class StreamMatchResultListener : public MatchResultListener {$/;"	c	namespace:testing::internal
StreamWideCharsToMessage	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,$/;"	f	namespace:testing::internal
StreamableToString	ceres-solver/internal/ceres/gtest/gtest.h	/^std::string StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
StreamingListener	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  StreamingListener(const string& host, const string& port)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  explicit StreamingListener(AbstractSocketWriter* socket_writer)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class GTEST_API_ StreamingListener : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  StrictMock() {$/;"	f	class:testing::StrictMock
StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  StrictMock(const A1& a1, const A2& a2) : MockClass(a1, a2) {$/;"	f	class:testing::StrictMock
StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  StrictMock(const A1& a1, const A2& a2, const A3& a3) : MockClass(a1, a2, a3) {$/;"	f	class:testing::StrictMock
StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4,$/;"	f	class:testing::StrictMock
StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  StrictMock(const A1& a1, const A2& a2, const A3& a3,$/;"	f	class:testing::StrictMock
StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit StrictMock(const A1& a1) : MockClass(a1) {$/;"	f	class:testing::StrictMock
StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^class StrictMock : public MockClass {$/;"	c	namespace:testing
String	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
StringAppendF	ceres-solver/internal/ceres/stringprintf.cc	/^void StringAppendF(string* dst, const char* format, ...) {$/;"	f	namespace:ceres::internal
StringAppendV	ceres-solver/internal/ceres/stringprintf.cc	/^void StringAppendV(string* dst, const char* format, va_list ap) {$/;"	f	namespace:ceres::internal
StringFromGTestEnv	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string StringFromGTestEnv(const char* flag, const char* default_value) {$/;"	f	namespace:testing::internal
StringMatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^  StringMatchResultListener() : MatchResultListener(&ss_) {}$/;"	f	class:testing::StringMatchResultListener
StringMatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^class StringMatchResultListener : public MatchResultListener {$/;"	c	namespace:testing
StringPrintf	ceres-solver/internal/ceres/stringprintf.cc	/^string StringPrintf(const char* format, ...) {$/;"	f	namespace:ceres::internal
StringStreamToString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string StringStreamToString(::std::stringstream* ss) {$/;"	f	namespace:testing::internal
StringToCovarianceAlgorithmType	ceres-solver/internal/ceres/types.cc	/^bool StringToCovarianceAlgorithmType($/;"	f	namespace:ceres
StringToDenseLinearAlgebraLibraryType	ceres-solver/internal/ceres/types.cc	/^bool StringToDenseLinearAlgebraLibraryType($/;"	f	namespace:ceres
StringToDoglegType	ceres-solver/internal/ceres/types.cc	/^bool StringToDoglegType(string value, DoglegType* type) {$/;"	f	namespace:ceres
StringToLineSearchDirectionType	ceres-solver/internal/ceres/types.cc	/^bool StringToLineSearchDirectionType(string value,$/;"	f	namespace:ceres
StringToLineSearchInterpolationType	ceres-solver/internal/ceres/types.cc	/^bool StringToLineSearchInterpolationType($/;"	f	namespace:ceres
StringToLineSearchType	ceres-solver/internal/ceres/types.cc	/^bool StringToLineSearchType(string value, LineSearchType* type) {$/;"	f	namespace:ceres
StringToLinearSolverType	ceres-solver/internal/ceres/types.cc	/^bool StringToLinearSolverType(string value, LinearSolverType* type) {$/;"	f	namespace:ceres
StringToMinimizerType	ceres-solver/internal/ceres/types.cc	/^bool StringToMinimizerType(string value, MinimizerType* type) {$/;"	f	namespace:ceres
StringToNonlinearConjugateGradientType	ceres-solver/internal/ceres/types.cc	/^bool StringToNonlinearConjugateGradientType($/;"	f	namespace:ceres
StringToNumericDiffMethodType	ceres-solver/internal/ceres/types.cc	/^bool StringToNumericDiffMethodType($/;"	f	namespace:ceres
StringToPreconditionerType	ceres-solver/internal/ceres/types.cc	/^bool StringToPreconditionerType(string value, PreconditionerType* type) {$/;"	f	namespace:ceres
StringToSparseLinearAlgebraLibraryType	ceres-solver/internal/ceres/types.cc	/^bool StringToSparseLinearAlgebraLibraryType($/;"	f	namespace:ceres
StringToTrustRegionStrategyType	ceres-solver/internal/ceres/types.cc	/^bool StringToTrustRegionStrategyType(string value,$/;"	f	namespace:ceres
StringToVisibilityClusteringType	ceres-solver/internal/ceres/types.cc	/^bool StringToVisibilityClusteringType($/;"	f	namespace:ceres
StringifyOrdering	ceres-solver/internal/ceres/solver.cc	/^void StringifyOrdering(const vector<int>& ordering, string* report) {$/;"	f	namespace:ceres::__anon15
Strings	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef ::std::vector<string> Strings;$/;"	t	namespace:testing::internal
StripBasename	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  void StripBasename(const std::string &full_path, std::string *filename) {$/;"	f	class:MessageLogger
StripTrailingSpaces	ceres-solver/internal/ceres/gtest/gtest.h	/^inline std::string StripTrailingSpaces(std::string str) {$/;"	f	namespace:std::tr1
SubsetParameterization	ceres-solver/include/ceres/local_parameterization.h	/^class CERES_EXPORT SubsetParameterization : public LocalParameterization {$/;"	c	namespace:ceres
SubsetParameterization	ceres-solver/internal/ceres/local_parameterization.cc	/^SubsetParameterization::SubsetParameterization($/;"	f	class:ceres::SubsetParameterization
SucceedingIterationCallback	ceres-solver/internal/ceres/minimizer_test.cc	/^class SucceedingIterationCallback : public IterationCallback {$/;"	c	namespace:ceres::internal	file:
SuffixForSize	ceres-solver/internal/ceres/generate_template_specializations.py	/^def SuffixForSize(size):$/;"	f
SuiteSparse	ceres-solver/internal/ceres/suitesparse.cc	/^SuiteSparse::SuiteSparse() {$/;"	f	class:ceres::internal::SuiteSparse
SuiteSparse	ceres-solver/internal/ceres/suitesparse.h	/^class SuiteSparse {$/;"	c	namespace:ceres::internal
SuiteSparse_long	ceres-solver/internal/ceres/suitesparse.h	69;"	d
SumOverTestCaseList	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static int SumOverTestCaseList(const std::vector<TestCase*>& case_list,$/;"	f	namespace:testing::internal
SummarizeGivenProgram	ceres-solver/internal/ceres/solver.cc	/^void SummarizeGivenProgram(const internal::Program& program,$/;"	f	namespace:ceres::__anon15
SummarizeReducedProgram	ceres-solver/internal/ceres/solver.cc	/^void SummarizeReducedProgram(const internal::Program& program,$/;"	f	namespace:ceres::__anon15
Summary	ceres-solver/include/ceres/gradient_problem_solver.h	/^  struct CERES_EXPORT Summary {$/;"	s	class:ceres::GradientProblemSolver
Summary	ceres-solver/include/ceres/solver.h	/^  struct CERES_EXPORT Summary {$/;"	s	class:ceres::Solver
Summary	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^GradientProblemSolver::Summary::Summary()$/;"	f	class:ceres::GradientProblemSolver::Summary
Summary	ceres-solver/internal/ceres/line_search.h	/^    Summary()$/;"	f	struct:ceres::internal::LineSearch::Summary
Summary	ceres-solver/internal/ceres/line_search.h	/^  struct Summary {$/;"	s	class:ceres::internal::LineSearch
Summary	ceres-solver/internal/ceres/linear_solver.h	/^    Summary()$/;"	f	struct:ceres::internal::LinearSolver::Summary
Summary	ceres-solver/internal/ceres/linear_solver.h	/^  struct Summary {$/;"	s	class:ceres::internal::LinearSolver
Summary	ceres-solver/internal/ceres/solver.cc	/^Solver::Summary::Summary()$/;"	f	class:ceres::Solver::Summary
Summary	ceres-solver/internal/ceres/trust_region_strategy.h	/^    Summary()$/;"	f	struct:ceres::internal::TrustRegionStrategy::Summary
Summary	ceres-solver/internal/ceres/trust_region_strategy.h	/^  struct Summary {$/;"	s	class:ceres::internal::TrustRegionStrategy
SuppressEventForwarding	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestEventListeners::SuppressEventForwarding() {$/;"	f	class:testing::TestEventListeners
SuppressTestEventsIfInSubprocess	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::SuppressTestEventsIfInSubprocess() {$/;"	f	class:testing::internal::UnitTestImpl
SwitchEndian	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  T SwitchEndian(const T value) const {$/;"	f	class:__anon38::EndianAwareFileReader	file:
SymmetricDiff	ceres-solver/internal/ceres/autodiff_test.cc	/^bool SymmetricDiff(const B& b,$/;"	f	namespace:ceres::internal
SymmetricGeometricDistance	ceres-solver/examples/libmv_homography.cc	/^double SymmetricGeometricDistance(const Mat3 &H,$/;"	f	namespace:__anon41
SymmetricGeometricDistanceTerms	ceres-solver/examples/libmv_homography.cc	/^void SymmetricGeometricDistanceTerms(const Eigen::Matrix<T, 3, 3> &H,$/;"	f	namespace:__anon41
SymmetricRankKUpdate	ceres-solver/internal/ceres/blas.cc	/^void BLAS::SymmetricRankKUpdate(int num_rows,$/;"	f	class:ceres::internal::BLAS
SymmetricRightMultiply	ceres-solver/internal/ceres/block_random_access_sparse_matrix.cc	/^void BlockRandomAccessSparseMatrix::SymmetricRightMultiply(const double* x,$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
SystemTest	ceres-solver/internal/ceres/test_util.h	/^class SystemTest : public::testing::Test {$/;"	c	namespace:ceres::internal
T	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void Print(const T (&value)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalTersePrinter
T	ceres-solver/internal/ceres/gtest/gtest.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	ceres-solver/internal/ceres/gtest/gtest.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
T	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ParamGenerator<T> ValuesIn(const T (&array)[N]);$/;"	m	namespace:testing
T	src/tf_tree/include/tf_tree/tf_factory.h	/^  cv::Mat T;$/;"	m	class:autocar::tf_mul::tf_factory
T	src/tf_tree/include/tf_tree/tf_param.h	/^  cv::Mat T;$/;"	m	class:autocar::tf_mul::tf_param
TAKE_OWNERSHIP	ceres-solver/include/ceres/types.h	/^  TAKE_OWNERSHIP$/;"	e	enum:ceres::Ownership
TEST	ceres-solver/internal/ceres/array_utils_test.cc	/^TEST(ArrayUtils, FindInvalidIndex) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/array_utils_test.cc	/^TEST(ArrayUtils, IsArrayValid) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/array_utils_test.cc	/^TEST(MapValuesToContiguousRange, ContiguousEntries) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/array_utils_test.cc	/^TEST(MapValuesToContiguousRange, NonContiguousEntries) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/array_utils_test.cc	/^TEST(MapValuesToContiguousRange, NonContiguousRepeatingEntries) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^TEST(AutoDiffCostFunction, PartiallyFilledResidualShouldFailEvaluation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^TEST(AutodiffCostFunction, BilinearDifferentiationTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^TEST(AutodiffCostFunction, ManyParameterAutodiffInstantiates) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^TEST(AutoDiffLocalParameterization, QuaternionParameterizationNearZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^TEST(AutoDiffLocalParameterization, QuaternionParameterizationNonZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^TEST(AutoDiffLocalParameterization, QuaternionParameterizationZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^TEST(AutoDiffLocalParameterizationTest, IdentityParameterization) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^TEST(AutoDiffLocalParameterizationTest, ScaledParameterization) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_test.cc	/^TEST(AutoDiff, AlignedAllocationTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_test.cc	/^TEST(AutoDiff, Metric) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_test.cc	/^TEST(AutoDiff, ProjectiveCameraModel) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_test.cc	/^TEST(AutoDiff, VariadicAutoDiff) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/autodiff_test.cc	/^TEST(AutoDiff, VaryingNumberOfResidualsForOneCostFunctorType) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/block_random_access_dense_matrix_test.cc	/^TEST(BlockRandomAccessDenseMatrix, GetCell) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/block_random_access_dense_matrix_test.cc	/^TEST(BlockRandomAccessDenseMatrix, WriteCell) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^TEST(BlockRandomAccessSparseMatrix, GetCell) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/c_api_test.cc	/^TEST(C_API, LossFunctions) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/c_api_test.cc	/^TEST(C_API, SimpleEndToEndTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^TEST(_, BlockPermutationToScalarPermutation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^TEST(_, ScalarMatrixToBlockMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST(CompressedRowSparseMatrix, ComputeOuterProduct) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST(CompressedRowSparseMatrix, CreateBlockDiagonalMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST(CompressedRowSparseMatrix, FromTripletSparseMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST(CompressedRowSparseMatrix, FromTripletSparseMatrixTransposed) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST(CompressedRowSparseMatrix, Transpose) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^TEST(CostFunctionTest, ConditionedCostFunction) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/corrector_test.cc	/^TEST(Corrector, MultidimensionalGaussNewtonApproximation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/corrector_test.cc	/^TEST(Corrector, MultidimensionalGaussNewtonApproximationZeroResidual) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/corrector_test.cc	/^TEST(Corrector, NegativeGradientDeathTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/corrector_test.cc	/^TEST(Corrector, ScalarCorrection) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/corrector_test.cc	/^TEST(Corrector, ScalarCorrectionAlphaClamped) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/corrector_test.cc	/^TEST(Corrector, ScalarCorrectionZeroResidual) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/corrector_test.cc	/^TEST(Corrector, ZeroGradientDeathTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^TEST(CostFunctionToFunctor, DynamicCostFunctionToFunctor) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^TEST(CostFunctionToFunctor, DynamicNumberOfResiduals) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/covariance_test.cc	/^TEST(CovarianceImpl, ComputeCovarianceSparsity) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/covariance_test.cc	/^TEST(CovarianceImpl, ComputeCovarianceSparsityWithConstantParameterBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/covariance_test.cc	/^TEST(CovarianceImpl, ComputeCovarianceSparsityWithFreeParameterBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(BiCubicInterpolator, JetEvaluation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(CubicInterpolator, JetEvaluation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid1D, OneDataDimension) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid1D, OneDataDimensionOutOfBounds) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid1D, TwoDataDimensionIntegerDataInterleaved) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid1D, TwoDataDimensionIntegerDataStacked) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid2D, OneDataDimensionRowMajor) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid2D, OneDataDimensionRowMajorOutOfBounds) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid2D, TwoDataDimensionColMajorInterleaved) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid2D, TwoDataDimensionColMajorStacked) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid2D, TwoDataDimensionRowMajorInterleaved) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST(Grid2D, TwoDataDimensionRowMajorStacked) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/detect_structure_test.cc	/^TEST(DetectStructure, DynamicEBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/detect_structure_test.cc	/^TEST(DetectStructure, DynamicFBlockDifferentRows) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/detect_structure_test.cc	/^TEST(DetectStructure, DynamicFBlockSameRow) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/detect_structure_test.cc	/^TEST(DetectStructure, DynamicRow) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/detect_structure_test.cc	/^TEST(DetectStructure, EverythingStatic) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST(DynamicAutodiffCostFunctionTest, JacobianWithFirstParameterBlockConstant) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST(DynamicAutodiffCostFunctionTest, JacobianWithSecondParameterBlockConstant) {  \/\/ NOLINT$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST(DynamicAutodiffCostFunctionTest, TestJacobian) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST(DynamicAutodiffCostFunctionTest, TestResiduals) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^TEST(DynamicNumericdiffCostFunctionTest, JacobianWithFirstParameterBlockConstant) {  \/\/ NOLINT$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^TEST(DynamicNumericdiffCostFunctionTest, JacobianWithSecondParameterBlockConstant) {  \/\/ NOLINT$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^TEST(DynamicNumericdiffCostFunctionTest, TestJacobian) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^TEST(DynamicNumericdiffCostFunctionTest, TestResiduals) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST(Evaluator, EvaluatorRespectsParameterChanges) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_checker_test.cc	/^TEST(GradientChecker, SmokeTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_checker_test.cc	/^TEST(GradientChecker, TestCorrectnessWithLocalParameterizations) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^TEST(GradientCheckingCostFunction, ResidualsAndJacobiansArePreservedTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^TEST(GradientCheckingCostFunction, SmokeTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^TEST(GradientCheckingProblemImpl, ProblemDimensionsMatch) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_problem_solver_test.cc	/^TEST(GradientProblemSolver, SolvesRosenbrockWithDefaultOptions) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_problem_test.cc	/^TEST(GradientProblem, EvaluationWithParameterizationAndWithGradient) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_problem_test.cc	/^TEST(GradientProblem, EvaluationWithoutParameterizationAndWithGradient) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_problem_test.cc	/^TEST(GradientProblem, EvaluationWithoutParameterizationOrGradient) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_problem_test.cc	/^TEST(GradientProblem, EvalutaionWithParameterizationAndNoGradient) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gradient_problem_test.cc	/^TEST(GradientProblem, TakesOwnershipOfFirstOrderFunction) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^TEST(Degree2MaximumSpanningForest, PreserveWeights) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^TEST(Degree2MaximumSpanningForest, StarGraph) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^TEST(IndependentSetOrdering, Chain) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^TEST(IndependentSetOrdering, Star) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^TEST(StableIndependentSet, BreakTies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^TEST(VertexTotalOrdering, TotalOrdering) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(Graph, AddVertexAndEdge) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(Graph, AddVertexIdempotence) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(Graph, DieOnNonExistentVertex) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(Graph, EmptyGraph) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(WeightedGraph, AddVertexAndEdge) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(WeightedGraph, AddVertexIdempotence) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(WeightedGraph, DieOnNonExistentVertex) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(WeightedGraph, EmptyGraph) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/graph_test.cc	/^TEST(WeightedGraph, NonExistentEdge) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/gtest/gtest.h	21153;"	d
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, LastElementZero) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, NearZeroNegative) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, NearZeroPositive) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, NonZeroNegative) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, NonZeroPositive) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, NonZeroPositive_Size4) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, ZeroNegative) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/householder_vector_test.cc	/^TEST(HouseholderVector, ZeroPositive) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^TEST(InvertPSDMatrix, FullRank5x5) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^TEST(InvertPSDMatrix, Identity3x3) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^TEST(InvertPSDMatrix, RankDeficient5x5) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/is_close_test.cc	/^TEST(IsClose, BothParametersNegative) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/is_close_test.cc	/^TEST(IsClose, BothParametersPositive) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/is_close_test.cc	/^TEST(IsClose, BothParametersZero) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/is_close_test.cc	/^TEST(IsClose, OneParameterZero) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/is_close_test.cc	/^TEST(IsClose, ParametersHaveMixedSigns) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(Jet, Jet) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(Jet, JetsInEigenMatrices) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, ArrayScalarBinaryOps) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, ArrayScalarUnaryOps) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, ClassificationFinite) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, ClassificationInf) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, ClassificationMixed) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, ClassificationNaN) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, MatrixScalarBinaryOps) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/jet_test.cc	/^TEST(JetTraitsTest, MatrixScalarUnaryOps) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^TEST(LevenbergMarquardtStrategy, AcceptRejectStepRadiusScaling) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^TEST(LevenbergMarquardtStrategy, CorrectDiagonalToLinearSolver) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/line_search_minimizer_test.cc	/^TEST(LineSearchMinimizerTest, FinalCostIsZero) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^TEST(LineSearchPreprocessor, NormalOperation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^TEST(LineSearchPreprocessor, ParameterBlockHasBounds) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^TEST(LineSearchPreprocessor, ProblemWithInvalidParameterBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^TEST(LineSearchPreprocessor, RemoveParameterBlocksFailed) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^TEST(LineSearchPreprocessor, RemoveParameterBlocksSucceeds) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^TEST(LineSearchPreprocessor, ZeroProblem) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(EigenQuaternionParameterization, AwayFromZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(EigenQuaternionParameterization, NearZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(EigenQuaternionParameterization, ZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, AwayFromZeroTest1) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, AwayFromZeroTest2) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, AwayFromZeroTest3) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, AwayFromZeroTest4) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, AwayFromZeroTest5) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, DeathTests) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, NearZeroTest1) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, NearZeroTest2) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(HomogeneousVectorParameterization, ZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(IdentityParameterization, EverythingTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(QuaternionParameterization, AwayFromZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(QuaternionParameterization, NearZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(QuaternionParameterization, ZeroTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(SubsetParameterization, DuplicateParametersDeathTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(SubsetParameterization, GreaterThanSizeParameterIndexDeathTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(SubsetParameterization, NegativeParameterIndexDeathTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(SubsetParameterization, NormalFunctionTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST(SubsetParameterization,$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, ArctanLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, CauchyLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, ComposedLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, HuberLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, LossFunctionWrapper) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, ScaledLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, SoftLOneLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, TolerantLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, TrivialLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/loss_function_test.cc	/^TEST(LossFunction, TukeyLoss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/minimizer_test.cc	/^TEST(Minimizer, InitializationCopiesCallbacks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/minimizer_test.cc	/^TEST(Minimizer, UserAbortUpdatesSummaryMessage) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/minimizer_test.cc	/^TEST(Minimizer, UserSuccessUpdatesSummaryMessage) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/normal_prior_test.cc	/^TEST(NormalPriorTest, ResidualAtRandomPosition) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/normal_prior_test.cc	/^TEST(NormalPriorTest, ResidualAtRandomPositionNullJacobians) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, EasyCaseCostFunctionCentralDifferences) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, EasyCaseCostFunctionForwardDifferences) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, EasyCaseCostFunctionRidders) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, EasyCaseFunctorCentralDifferences) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, EasyCaseFunctorForwardDifferences) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, EasyCaseFunctorRidders) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, EigenRowMajorColMajorTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, ExponentialCostFunctionRidders) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, ExponentialFunctorRidders) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, PartiallyFilledResidualShouldFailEvaluation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, RandomizedCostFunctionRidders) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction, RandomizedFunctorRidders) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^TEST(NumericDiffCostFunction,$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, AddAndRemoveEveryThingFromOneGroup) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, BulkRemove) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, BulkRemoveWithNoElements) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, EmptyOrderedGroupBehavesCorrectly) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, EverythingInOneGroup) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, MinNonZeroGroup) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, ReverseOrdering) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, ReverseOrderingWithEmptyOrderedGroups) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/ordered_groups_test.cc	/^TEST(OrderedGroups, StartInOneGroupAndThenSplit) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, DefaultBounds) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, DetectBadLocalParameterization) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, PlusWithBoundsConstraints) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, PlusWithNoLocalParameterization) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetBounds) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetLocalParameterizationAndNormalOperation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetLocalParameterizationDiesOnNullParameterization) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetLocalParameterizationDiesOnSizeMismatch) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetLocalParameterizationDiesWhenResettingToNull) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetLocalParameterizationWithSameExistingParameterization) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetParameterizationDiesOnZeroLocalSize) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock, SetStateUpdatesLocalParameterizationJacobian) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/parameter_block_test.cc	/^TEST(ParameterBlock,$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polymomial, ConstantInterpolatingPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, BothOutputArgumentsNullWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, ConstantPolynomialReturnsNoRoots) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, CubicInterpolatingPolynomialFromValues) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, CubicInterpolatingPolynomialFromValuesAndGradients) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, CubicInterpolatingPolynomialFromValuesAndOneGradient) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, DeficientCubicInterpolatingPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, DifferentiateConstantPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, DifferentiateQuadraticPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, InvalidPolynomialOfZeroLengthIsRejected) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, LinearInterpolatingPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, LinearPolynomialWithNegativeRootWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, LinearPolynomialWithPositiveRootWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, MinimizeConstantPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, MinimizeLinearPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, MinimizeQuadraticPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, NullPointerAsImaginaryPartWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, NullPointerAsRealPartWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuadraticInterpolatingPolynomial) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuadraticPolynomialWithCloseRootsWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuadraticPolynomialWithComplexRootsWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuadraticPolynomialWithOneNegativeRootWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuadraticPolynomialWithPositiveRootsWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuadraticPolynomialWithTwoNegativeRootsWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuarticMonomialWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuarticPolynomialWithTwoClustersOfCloseRootsWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuarticPolynomialWithTwoZeroRootsWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/polynomial_test.cc	/^TEST(Polynomial, QuarticPolynomialWorks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddParameterIgnoresDuplicateCalls) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddParameterWithAliasedParametersDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddParameterWithDifferentSizesOnTheSameVariableDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddResidualAddsDuplicatedParametersOnlyOnce) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddResidualWithDifferentSizesOnTheSameVariableDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddResidualWithDuplicateParametersDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddResidualWithIncorrectNumberOfParameterBlocksDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddResidualWithIncorrectSizesOfParameterBlockDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddResidualWithNullCostFunctionDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, AddingParametersAndResidualsResultsInExpectedProblem) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, CostFunctionsAreDeletedEvenWithRemovals) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, GetCostFunctionForResidualBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, GetLossFunctionForResidualBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, GetParameterization) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, IsParameterBlockConstant) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, IsParameterBlockConstantWithUnknownPtrDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, ParameterBlockQueryTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, RemoveParameterBlockWithUnknownPtrDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, ReusedCostFunctionsAreOnlyDeletedOnce) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, SetLocalParameterizationWithUnknownPtrDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, SetParameterBlockConstantWithUnknownPtrDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/problem_test.cc	/^TEST(Problem, SetParameterBlockVariableWithUnknownPtrDies) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, CreateJacobianBlockSparsityTranspose) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, InfeasibleConstantParameterBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, InfeasibleParameterBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, ProblemHasNanParameterBlocks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, ReallocationInCreateJacobianBlockSparsityTranspose) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, RemoveFixedBlocksAllParameterBlocksConstant) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, RemoveFixedBlocksFixedCost) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, RemoveFixedBlocksNoResidualBlocks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, RemoveFixedBlocksNothingConstant) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, RemoveFixedBlocksNumEliminateBlocks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/program_test.cc	/^TEST(Program, RemoveFixedBlocksOneParameterBlockConstant) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/reorder_program_test.cc	/^TEST(_, ApplyOrderingNormal) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/reorder_program_test.cc	/^TEST(_, ApplyOrderingOrderingTooSmall) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/reorder_program_test.cc	/^TEST(_, ReorderResidualBlockNormalFunction) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/residual_block_test.cc	/^TEST(ResidualBlock, EvaluteWithLocalParameterizations) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/residual_block_test.cc	/^TEST(ResidualBlock, EvaluteWithNoLossFunctionOrLocalParameterizations) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^TEST(ResidualBlockUtils, CheckAllCombinationsOfBadness) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(AngleAxis, NearZeroRotatePointGivesSameAnswerAsRotationMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(AngleAxis, RotatePointGivesSameAnswerAsRotationMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(EulerAnglesToRotationMatrix, IsOrthonormal) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(EulerAnglesToRotationMatrix, OnAxis) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(MatrixAdapter, ColumnMajor2x4IsCorrect) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(MatrixAdapter, ColumnMajor3x3ReturnTypeAndAccessIsCorrect) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(MatrixAdapter, RowMajor2x4IsCorrect) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(MatrixAdapter, RowMajor3x3ReturnTypeAndAccessIsCorrect) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Quaternion, MultiplicationIsAssociative) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Quaternion, RotatePointGivesSameAnswerAsRotationByMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Quaternion, RotatePointGivesSameAnswerAsRotationByMatrixCanned) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, AngleAxisToQuaterionAndBack) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, AngleAxisToRotationMatrixAndBack) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, AngleAxisToRotationMatrixAndBackNearZero) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, AtPiAngleAxisRoundTrip) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, NearPiAngleAxisRoundTrip) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, NearZeroAngleAxisToRotationMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, QuaterionToAngleAxisAndBack) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, QuaternionToAngleAxisAngleIsLessThanPi) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, SmallAngleAxisToQuaternion) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, SmallAngleAxisToQuaternionForJets) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, SmallQuaternionToAngleAxis) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, SmallQuaternionToAngleAxisForJets) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, TinyAngleAxisToQuaternion) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, TinyAngleAxisToQuaternionForJets) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, TinyQuaternionToAngleAxis) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, TinyQuaternionToAngleAxisForJets) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, UnitQuaternionToAngleAxis) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, XRotationToQuaternion) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, XRotationToRotationMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, YRotationQuaternionToAngleAxis) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, YRotationToRotationMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, ZRotationQuaternionToAngleAxis) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, ZRotationToRotationMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, ZeroAngleAxisToQuaternion) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, ZeroAngleAxisToQuaternionForJets) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, ZeroAngleAxisToRotationMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(Rotation, ZeroQuaternionToAngleAxisForJets) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(RotationMatrixToAngleAxis, ExhaustiveRoundTrip) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/rotation_test.cc	/^TEST(RotationMatrixToAngleAxis, NearPiExampleOneFromTobiasStrauss) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/single_linkage_clustering_test.cc	/^TEST(SingleLinkageClustering, ComponentWithWeakLink) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/single_linkage_clustering_test.cc	/^TEST(SingleLinkageClustering, ComponentWithWeakLinkAndStrongLink) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/single_linkage_clustering_test.cc	/^TEST(SingleLinkageClustering, GraphHasTwoComponents) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/small_blas_test.cc	/^TEST(BLAS, MatrixMatrixMultiply) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/small_blas_test.cc	/^TEST(BLAS, MatrixTransposeMatrixMultiply) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/small_blas_test.cc	/^TEST(BLAS, MatrixTransposeVectorMultiply) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/small_blas_test.cc	/^TEST(BLAS, MatrixVectorMultiply) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, FixedCostForConstantProblem) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, IterativeLinearSolverForDogleg) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, IterativeSchurWithClusterJacobiPerconditionerNoSparseLibrary) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, IterativeSchurWithClusterTridiagonalPerconditionerNoSparseLibrary) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, LineSearchProblemHasNoParameterBlocks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, LineSearchProblemHasZeroResiduals) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, LineSearchProblemIsConstant) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, LinearSolverTypeNormalOperation) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseNormalCholeskyNoCXSparse) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseNormalCholeskyNoEigenSparse) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseNormalCholeskyNoSparseLibrary) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseNormalCholeskyNoSuiteSparse) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseSchurNoCXSparse) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseSchurNoEigenSparse) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseSchurNoSparseLibrary) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, SparseSchurNoSuiteSparse) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, TrustRegionProblemHasNoParameterBlocks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, TrustRegionProblemHasZeroResiduals) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, TrustRegionProblemIsConstant) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(Solver, UpdateStateEveryIterationOption) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(SolverOptions, DefaultLineSearchOptionsAreValid) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/solver_test.cc	/^TEST(SolverOptions, DefaultTrustRegionOptionsAreValid) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/symmetric_linear_solver_test.cc	/^TEST(ConjuateGradientTest, Solves3x3SymmetricSystem) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/symmetric_linear_solver_test.cc	/^TEST(ConjugateGradientTest, Solves3x3IdentitySystem) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, AppendCols) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, AppendRows) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, AssignmentOperator) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, CopyConstructor) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, CreateDiagonalMatrix) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, DefaultConstructorReturnsEmptyObject) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, Resize) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^TEST(TripletSparseMatrix, SimpleConstructorAndBasicOperations) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^TEST(TrustRegionMinimizer, GradientToleranceConvergenceUpdatesStep) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^TEST(TrustRegionMinimizer, JacobiScalingTest) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^TEST(TrustRegionMinimizer, PowellsSingularFunctionUsingDogleg) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^TEST(TrustRegionMinimizer, PowellsSingularFunctionUsingLevenbergMarquardt) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST(TrustRegionPreprocessor, ParameterBlockBoundsAreInvalid) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST(TrustRegionPreprocessor, ParamterBlockIsInfeasible) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST(TrustRegionPreprocessor, ProblemWithInvalidParameterBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST(TrustRegionPreprocessor, RemoveParameterBlocksFailed) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST(TrustRegionPreprocessor, RemoveParameterBlocksSucceeds) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST(TrustRegionPreprocessor, ZeroProblem) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST(TrustRegionPreprocessorTest, InnerIterationsWithOneParameterBlock) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/visibility_test.cc	/^TEST(VisibilityTest, NoEBlocks) {$/;"	f	namespace:ceres::internal
TEST	ceres-solver/internal/ceres/visibility_test.cc	/^TEST(VisibilityTest, SimpleMatrix) {$/;"	f	namespace:ceres::internal
TEST_BODY	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	259;"	d	file:
TEST_BODY	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	316;"	d	file:
TEST_DID_NOT_DIE	ceres-solver/internal/ceres/gtest/gtest.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ENCOUNTERED_RETURN_STATEMENT	ceres-solver/internal/ceres/gtest/gtest.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_F	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^TEST_F(BlockJacobiPreconditionerTest, LargeProblem) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^TEST_F(BlockJacobiPreconditionerTest, SmallProblem) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^TEST_F(BlockRandomAccessDiagonalMatrixTest, Invert) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^TEST_F(BlockRandomAccessDiagonalMatrixTest, MatrixContents) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^TEST_F(BlockRandomAccessDiagonalMatrixTest, RightMultiply) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^TEST_F(BlockRandomAccessSparseMatrixTest, IntPairToLongOverflow) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^TEST_F(BlockRandomAccessSparseMatrixTest, LongToIntPair) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^TEST_F(BlockSparseMatrixTest, LeftMultiplyTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^TEST_F(BlockSparseMatrixTest, RightMultiplyTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^TEST_F(BlockSparseMatrixTest, SetZeroTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^TEST_F(BlockSparseMatrixTest, SquaredColumnNormTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^TEST_F(BlockSparseMatrixTest, ToDenseMatrixTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, DenseSchurWithAutomaticOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, DenseSchurWithUserOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, IterativeSchurWithJacobiAndAutomaticOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, IterativeSchurWithJacobiAndUserOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, IterativeSchurWithSchurJacobiAndUserOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, MultiThreadedDenseSchurWithAutomaticOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, MultiThreadedDenseSchurWithUserOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, SparseSchurWithAutomaticOrderingUsingCXSparse) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, SparseSchurWithUserOrderingUsingCXSparse) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, SparseSchurWithUserOrderingUsingEigenSparse) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest, SparseSchurWithUserOrderingUsingSuiteSparse) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^TEST_F(BundleAdjustmentTest,$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^TEST_F(CanonicalViewsTest, ComputeCanonicalViewsTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^TEST_F(CanonicalViewsTest, SimilarityPenaltyTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^TEST_F(CanonicalViewsTest, SizePenaltyTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^TEST_F(CanonicalViewsTest, ViewScoreTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^TEST_F(SolveUpperTriangularTest, RTRSolveWithSparseRHS) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^TEST_F(SolveUpperTriangularTest, SolveInPlace) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^TEST_F(SolveUpperTriangularTest, TransposeSolveInPlace) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, AppendAndDeleteBlockDiagonalMatrix) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, AppendRows) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, ColumnNorm) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, DeleteRows) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, LeftMultiply) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, RightMultiply) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, Scale) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, ToCRSMatrix) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^TEST_F(CompressedRowSparseMatrixTest, ToDenseMatrix) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, ComputeCovarianceFailure) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, ConstantParameterBlock) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, DenseCovarianceMatrixFromSetOfParameters) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, DenseCovarianceMatrixFromSetOfParametersInTangentSpace) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, DenseCovarianceMatrixFromSetOfParametersThreaded) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, LocalParameterization) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, LocalParameterizationInTangentSpace) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, LocalParameterizationInTangentSpaceWithConstantBlocks) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, NormalBehavior) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, ThreadedNormalBehavior) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(CovarianceTest, TruncatedRank) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(LargeScaleCovarianceTest, Parallel) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/covariance_test.cc	/^TEST_F(RankDeficientCovarianceTest, AutomaticTruncation) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, Degree00Function) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, Degree01Function) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, Degree10Function) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, Degree11Function) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, Degree12Function) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, Degree21Function) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, Degree22Function) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(BiCubicInterpolatorTest, ZeroFunction) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(CubicInterpolatorTest, ConstantFunction) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(CubicInterpolatorTest, LinearFunction) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^TEST_F(CubicInterpolatorTest, QuadraticFunction) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^TEST_F(DenseSparseMatrixTest, ColumnNorm) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^TEST_F(DenseSparseMatrixTest, LeftMultiply) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^TEST_F(DenseSparseMatrixTest, RightMultiply) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^TEST_F(DenseSparseMatrixTest, Scale) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^TEST_F(DenseSparseMatrixTest, ToDenseMatrix) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^TEST_F(DoglegStrategyFixtureEllipse, CorrectGaussNewtonStep) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^TEST_F(DoglegStrategyFixtureEllipse, TrustRegionObeyedSubspace) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^TEST_F(DoglegStrategyFixtureEllipse, TrustRegionObeyedTraditional) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^TEST_F(DoglegStrategyFixtureEllipse, ValidSubspaceBasis) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^TEST_F(DoglegStrategyFixtureValley, CorrectStepGlobalOptimumAlongGradient) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^TEST_F(DoglegStrategyFixtureValley, CorrectStepLocalOptimumAlongGradient) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST_F(SixParameterCostFunctorTest, TestSixParameterJacobian) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST_F(SixParameterCostFunctorTest, TestSixParameterJacobianVCCVCV) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST_F(SixParameterCostFunctorTest, TestSixParameterJacobianVVCVVC) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST_F(SixParameterCostFunctorTest, TestSixParameterResiduals) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST_F(ThreeParameterCostFunctorTest, TestThreeParameterJacobian) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST_F(ThreeParameterCostFunctorTest, TestThreeParameterResiduals) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^TEST_F(ThreeParameterCostFunctorTest,$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^TEST_F(DynamicCompressedRowSparseMatrixTest, ClearRows) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^TEST_F(DynamicCompressedRowSparseMatrixTest, Initialization) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^TEST_F(DynamicCompressedRowSparseMatrixTest, InsertEntryAndFinalize) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^TEST_F(ThreeParameterCostFunctorTest, TestThreeParameterJacobian) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^TEST_F(ThreeParameterCostFunctorTest, TestThreeParameterResiduals) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^TEST_F(ThreeParameterCostFunctorTest,$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/gtest/gtest.h	21182;"	d
TEST_F	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^TEST_F(ImplicitSchurComplementTest, SchurMatrixValuesTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^TEST_F(IterativeSchurComplementSolverTest, NormalProblem) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^TEST_F(IterativeSchurComplementSolverTest, ProblemWithNoFBlocks) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST_F(ProductParameterizationTest, ComputeJacobian) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST_F(ProductParameterizationTest, LocalAndGlobalSize2) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST_F(ProductParameterizationTest, LocalAndGlobalSize3) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST_F(ProductParameterizationTest, LocalAndGlobalSize4) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/local_parameterization_test.cc	/^TEST_F(ProductParameterizationTest, Plus) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^TEST_F(SchurOrderingTest, AllFixed) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^TEST_F(SchurOrderingTest, NoFixed) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^TEST_F(SchurOrderingTest, OneFixed) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^TEST_F(PartitionedMatrixViewTest, BlockDiagonalEtE) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^TEST_F(PartitionedMatrixViewTest, BlockDiagonalFtF) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^TEST_F(PartitionedMatrixViewTest, DimensionsTest) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^TEST_F(PartitionedMatrixViewTest, LeftMultiply) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^TEST_F(PartitionedMatrixViewTest, RightMultiplyE) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^TEST_F(PartitionedMatrixViewTest, RightMultiplyF) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, ConstantParameterBlock) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, ExcludedAResidualBlock) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, ExcludedParameterBlock) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, ExcludedParameterBlockAndExcludedResidualBlock) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, LocalParameterization) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, MultipleParameterAndResidualBlocks) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, ParameterAndResidualBlocksPassedInOptions) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, ReorderedResidualBlocks) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/problem_test.cc	/^TEST_F(ProblemEvaluateTest, ReorderedResidualBlocksAndReorderedParameterBlocks) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/reorder_program_test.cc	/^TEST_F(ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest,$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^TEST_F(SchurComplementSolverTest, EigenBasedDenseSchurWithLargeProblem) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^TEST_F(SchurComplementSolverTest, EigenBasedDenseSchurWithSmallProblem) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^TEST_F(SchurComplementSolverTest, EigenBasedDenseSchurWithVaryingFBlockSize) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^TEST_F(SchurComplementSolverTest, LAPACKBasedDenseSchurWithLargeProblem) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^TEST_F(SchurComplementSolverTest, LAPACKBasedDenseSchurWithSmallProblem) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^TEST_F(SchurComplementSolverTest,$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^TEST_F(SchurEliminatorTest, ScalarProblemNoRegularization) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^TEST_F(SchurEliminatorTest, ScalarProblemWithRegularization) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^TEST_F(SchurEliminatorTest, VaryingFBlockSizeWithStaticStructure) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^TEST_F(SchurEliminatorTest, VaryingFBlockSizeWithoutStaticStructure) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/system_test.cc	/^TEST_F(PowellTest, DenseNormalCholesky) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/system_test.cc	/^TEST_F(PowellTest, DenseQR) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/system_test.cc	/^TEST_F(PowellTest, DenseSchur) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/system_test.cc	/^TEST_F(PowellTest, IterativeSchurWithJacobi) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/system_test.cc	/^TEST_F(PowellTest, SparseNormalCholeskyUsingCXSparse) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/system_test.cc	/^TEST_F(PowellTest, SparseNormalCholeskyUsingEigenSparse) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/system_test.cc	/^TEST_F(PowellTest, SparseNormalCholeskyUsingSuiteSparse) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, CGNR) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, DenseNormalCholesky) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, DenseQR) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, DenseSchur) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, IterativeSchur) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, MinimizerIsAwareOfBounds) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, SchurTypeSolverWithBadOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, SchurTypeSolverWithGoodOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, SparseNormalCholesky) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, SparseSchur) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest, ValidInnerIterationsOrdering) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^TEST_F(LinearSolverAndEvaluatorCreationTest,$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^TEST_F(UnsymmetricLinearSolverTest, EigenDenseNormalCholesky) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^TEST_F(UnsymmetricLinearSolverTest, EigenDenseQR) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^TEST_F(UnsymmetricLinearSolverTest, LAPACKDenseNormalCholesky) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^TEST_F(UnsymmetricLinearSolverTest, LAPACKDenseQR) {$/;"	f	namespace:ceres::internal
TEST_F	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^TEST_F(UnsymmetricLinearSolverTest,$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST_P(EvaluatorTest, EvaluatorAbortsForResidualsThatFailToEvaluate) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST_P(EvaluatorTest, MultipleResidualProblem) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST_P(EvaluatorTest, MultipleResidualProblemWithSomeConstantParameters) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST_P(EvaluatorTest, MultipleResidualsWithLocalParameterizations) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST_P(EvaluatorTest, SingleResidualProblem) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST_P(EvaluatorTest, SingleResidualProblemWithNuisanceParameters) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/evaluator_test.cc	/^TEST_P(EvaluatorTest, SingleResidualProblemWithPermutedParameters) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/gtest/gtest.h	18115;"	d
TEST_P	ceres-solver/internal/ceres/problem_test.cc	/^TEST_P(DynamicProblem, GetXXXBlocksForYYYBlock) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/problem_test.cc	/^TEST_P(DynamicProblem, RemoveInvalidResidualBlockDies) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/problem_test.cc	/^TEST_P(DynamicProblem, RemoveParameterBlockWithNoResiduals) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/problem_test.cc	/^TEST_P(DynamicProblem, RemoveParameterBlockWithResiduals) {$/;"	f	namespace:ceres::internal
TEST_P	ceres-solver/internal/ceres/problem_test.cc	/^TEST_P(DynamicProblem, RemoveResidualBlock) {$/;"	f	namespace:ceres::internal
TEST_THREW_EXCEPTION	ceres-solver/internal/ceres/gtest/gtest.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEXTFILE	ceres-solver/include/ceres/types.h	/^  TEXTFILE$/;"	e	enum:ceres::DumpFormatType
TF_FACTORY_H	src/tf_tree/include/tf_tree/tf_factory.h	2;"	d
TF_PARAM_H	src/tf_tree/include/tf_tree/tf_param.h	2;"	d
THREAD_PROC	src/rplidar_ros/sdk/include/rptypes.h	84;"	d
THREAD_PROC	src/rplidar_ros/sdk/include/rptypes.h	87;"	d
THREAD_PROC	src/rplidar_ros/sdk/include/rptypes.h	90;"	d
THREAD_PROC	src/rplidar_ros/sdk/include/rptypes.h	93;"	d
THREAD_PROC	src/rplidar_ros/sdk/include/rptypes.h	96;"	d
THREW	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
TRACKING_MODE	logical_core/src/logical_core.cpp	/^    TRACKING_MODE,$/;"	e	enum:AutoDrive	file:
TRADITIONAL_DOGLEG	ceres-solver/include/ceres/types.h	/^  TRADITIONAL_DOGLEG,$/;"	e	enum:ceres::DoglegType
TRUE	src/serial_communication/include/sysHeaders.h	15;"	d
TRUST_REGION	ceres-solver/include/ceres/types.h	/^  TRUST_REGION$/;"	e	enum:ceres::MinimizerType
TYPED_TEST	ceres-solver/internal/ceres/gtest/gtest.h	18581;"	d
TYPED_TEST_CASE	ceres-solver/internal/ceres/gtest/gtest.h	18577;"	d
TYPED_TEST_CASE_P	ceres-solver/internal/ceres/gtest/gtest.h	18632;"	d
TYPED_TEST_P	ceres-solver/internal/ceres/gtest/gtest.h	18636;"	d
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
Take0thOrderPart	ceres-solver/include/ceres/internal/autodiff.h	/^inline void Take0thOrderPart(int M, const JetT *src, T dst) {$/;"	f	namespace:ceres::internal
Take1stOrderPart	ceres-solver/include/ceres/internal/autodiff.h	/^inline void Take1stOrderPart(const int M, const JetT *src, T *dst) {$/;"	f	namespace:ceres::internal
TearDown	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Test::TearDown() {$/;"	f	class:testing::Test
TearDown	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDown	ceres-solver/internal/ceres/problem_test.cc	/^  void TearDown() {$/;"	f	class:ceres::internal::ProblemEvaluateTest
TearDownEnvironment	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void TearDownEnvironment(Environment* env) { env->TearDown(); }$/;"	f	namespace:testing::internal
TearDownTestCase	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCaseFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;$/;"	t	class:testing::Test
TearDownTestCaseFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef void (*TearDownTestCaseFunc)();$/;"	t	namespace:testing::internal
TempDir	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string TempDir() {$/;"	f	namespace:testing::internal
TemplateSel	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
TenParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct TenParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
TenParameterCost	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^struct TenParameterCost {$/;"	s	namespace:ceres::internal	file:
TerminationCheckingCallback	ceres-solver/examples/libmv_homography.cc	/^  TerminationCheckingCallback(const Mat &x1, const Mat &x2,$/;"	f	class:__anon41::TerminationCheckingCallback
TerminationCheckingCallback	ceres-solver/examples/libmv_homography.cc	/^class TerminationCheckingCallback : public ceres::IterationCallback {$/;"	c	namespace:__anon41	file:
TerminationType	ceres-solver/include/ceres/types.h	/^enum TerminationType {$/;"	g	namespace:ceres
TerminationTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* TerminationTypeToString(TerminationType type) {$/;"	f	namespace:ceres
Ternary	ceres-solver/internal/ceres/integral_types.h	/^struct Ternary {$/;"	s	namespace:ceres::internal
Ternary	ceres-solver/internal/ceres/integral_types.h	/^struct Ternary<false, kTrueType, kFalseType> {$/;"	s	namespace:ceres::internal
TernaryCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  TernaryCostFunction(int num_residuals,$/;"	f	class:ceres::internal::TernaryCostFunction
TernaryCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^class TernaryCostFunction: public CostFunction {$/;"	c	namespace:ceres::internal	file:
TernaryCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^  TernaryCostFunction(int num_residuals,$/;"	f	class:ceres::internal::TernaryCostFunction
TernaryCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^class TernaryCostFunction: public CostFunction {$/;"	c	namespace:ceres::internal	file:
TernaryCostFunction	ceres-solver/internal/ceres/program_test.cc	/^class TernaryCostFunction : public MockCostFunctionBase<2, 1, 1, 1> {};$/;"	c	namespace:ceres::internal	file:
TernaryCostFunction	ceres-solver/internal/ceres/reorder_program_test.cc	/^class TernaryCostFunction : public MockCostFunctionBase<2, 1, 1, 1> {};$/;"	c	namespace:ceres::internal	file:
TernaryCostFunction	ceres-solver/internal/ceres/residual_block_test.cc	/^  TernaryCostFunction(int num_residuals,$/;"	f	class:ceres::internal::TernaryCostFunction
TernaryCostFunction	ceres-solver/internal/ceres/residual_block_test.cc	/^class TernaryCostFunction: public CostFunction {$/;"	c	namespace:ceres::internal	file:
TersePrintPrefixToStrings	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
TersePrintPrefixToStrings	ceres-solver/internal/ceres/gtest/gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
Test	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Test::Test()$/;"	f	class:testing::Test
Test	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
TestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestCase::TestCase(const char* a_name, const char* a_type_param,$/;"	f	class:testing::TestCase
TestCase	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ TestCase {$/;"	c	namespace:testing
TestCaseFailed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool TestCaseFailed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestCaseInfoContainer	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::std::vector<ParameterizedTestCaseInfoBase*> TestCaseInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseRegistry
TestCaseNameIs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  explicit TestCaseNameIs(const std::string& name)$/;"	f	class:testing::internal::TestCaseNameIs
TestCaseNameIs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class TestCaseNameIs {$/;"	c	namespace:testing::internal	file:
TestCasePassed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool TestCasePassed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestDisabled	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestEventListener	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestEventListeners::TestEventListeners()$/;"	f	class:testing::TestEventListeners
TestEventListeners	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestEventRepeater	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestEventRepeater() : forwarding_enabled_(true) {}$/;"	f	class:testing::internal::TestEventRepeater
TestEventRepeater	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class TestEventRepeater : public TestEventListener {$/;"	c	namespace:testing::internal	file:
TestExists	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool TestExists(const std::string& test_name) const {$/;"	f	class:testing::internal::TypedTestCasePState
TestFactoryBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryImpl	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestFileAbsolutePath	ceres-solver/internal/ceres/test_util.cc	/^std::string TestFileAbsolutePath(const std::string& filename) {$/;"	f	namespace:ceres::internal
TestImplicitSchurComplement	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  AssertionResult TestImplicitSchurComplement(double* D) {$/;"	f	class:ceres::internal::ImplicitSchurComplementTest
TestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestInfo::TestInfo(const std::string& a_test_case_name,$/;"	f	class:testing::TestInfo
TestInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^    TestInfo(const char* a_test_case_base_name,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
TestInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
TestInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfoContainer	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::std::vector<linked_ptr<TestInfo> > TestInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
TestMetaFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestNameIs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  explicit TestNameIs(const char* name)$/;"	f	class:testing::__anon23::TestNameIs
TestNameIs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class TestNameIs {$/;"	c	namespace:testing::__anon23	file:
TestParamInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestParamInfo(const ParamType& a_param, size_t an_index) :$/;"	f	struct:testing::TestParamInfo
TestParamInfo	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TestParamInfo {$/;"	s	namespace:testing
TestParameterization	ceres-solver/internal/ceres/parameter_block_test.cc	/^struct TestParameterization : public LocalParameterization {$/;"	s	namespace:ceres::internal	file:
TestPartFatallyFailed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool TestPartFatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartNonfatallyFailed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool TestPartNonfatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartResult	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestPartResult(Type a_type,$/;"	f	class:testing::TestPartResult
TestPartResult	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultReporterInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPartResultTypeToString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char * TestPartResultTypeToString(TestPartResult::Type type) {$/;"	f	namespace:testing
TestPassed	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestPropertiesAsXmlAttributes	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
TestProperty	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestProperty(const std::string& a_key, const std::string& a_value) :$/;"	f	class:testing::TestProperty
TestProperty	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestPropertyKeyIs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  explicit TestPropertyKeyIs(const std::string& key) : key_(key) {}$/;"	f	class:testing::internal::TestPropertyKeyIs
TestPropertyKeyIs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class TestPropertyKeyIs {$/;"	c	namespace:testing::internal	file:
TestReportable	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool TestReportable(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestReportableDisabled	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool TestReportableDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestResult::TestResult()$/;"	f	class:testing::TestResult
TestResult	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestResultAccessor	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class TestResultAccessor {$/;"	c	namespace:testing::internal	file:
TestRole	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestSolver	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  AssertionResult TestSolver(double* D) {$/;"	f	class:ceres::internal::IterativeSchurComplementSolverTest
TestSolver	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^  void TestSolver(const LinearSolver::Options& options) {$/;"	f	class:ceres::internal::UnsymmetricLinearSolverTest
TestTerm	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  TestTerm(int arity, int const *dim) : arity_(arity) {$/;"	f	class:ceres::internal::TestTerm
TestTerm	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^class TestTerm : public CostFunction {$/;"	c	namespace:ceres::internal	file:
TestWithParam	ceres-solver/internal/ceres/gtest/gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
Thread	src/rplidar_ros/sdk/src/hal/thread.h	/^    Thread( thread_proc_t proc, void * data ): _data(data),_func(proc), _handle(0)  {}$/;"	f	class:rp::hal::Thread
Thread	src/rplidar_ros/sdk/src/hal/thread.h	/^    Thread():  _data(NULL),_func(NULL),_handle(0)  {}$/;"	f	class:rp::hal::Thread
Thread	src/rplidar_ros/sdk/src/hal/thread.h	/^class Thread$/;"	c	namespace:rp::hal
ThreadFuncWithCLinkage	ceres-solver/internal/ceres/gtest/gtest.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:std::tr1
ThreadIdAndHandle	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  typedef std::pair<DWORD, HANDLE> ThreadIdAndHandle;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadIdToThreadLocals	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  typedef std::map<DWORD, ThreadLocalValues> ThreadIdToThreadLocals;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^  ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^  ThreadLocal() : value_() {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^  ThreadLocal()$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit ThreadLocal(const T& value)$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^class ThreadLocal : public ThreadLocalBase {$/;"	c	namespace:std::tr1
ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^class ThreadLocal {$/;"	c	namespace:std::tr1
ThreadLocalBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  ThreadLocalBase() {}$/;"	f	class:std::tr1::ThreadLocalBase
ThreadLocalBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class ThreadLocalBase {$/;"	c	namespace:std::tr1
ThreadLocalRegistry	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ ThreadLocalRegistry {$/;"	c	namespace:std::tr1
ThreadLocalRegistryImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class ThreadLocalRegistryImpl {$/;"	c	namespace:testing::internal	file:
ThreadLocalValueHolderBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:std::tr1
ThreadLocalValues	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^                   linked_ptr<ThreadLocalValueHolderBase> > ThreadLocalValues;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadMain	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static DWORD WINAPI ThreadMain(void* ptr) {$/;"	f	class:testing::internal::__anon26::ThreadWithParamSupport	file:
ThreadMainParam	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    ThreadMainParam(Runnable* runnable, Notification* thread_can_start)$/;"	f	struct:testing::internal::__anon26::ThreadWithParamSupport::ThreadMainParam
ThreadMainParam	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  struct ThreadMainParam {$/;"	s	class:testing::internal::__anon26::ThreadWithParamSupport	file:
ThreadSafeLazyInit	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Mutex::ThreadSafeLazyInit() {$/;"	f	class:testing::internal::Mutex
ThreadWithParam	ceres-solver/internal/ceres/gtest/gtest.h	/^  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)$/;"	f	class:std::tr1::ThreadWithParam
ThreadWithParam	ceres-solver/internal/ceres/gtest/gtest.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ThreadWithParamBase::ThreadWithParamBase(Runnable *runnable,$/;"	f	class:testing::internal::ThreadWithParamBase
ThreadWithParamBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	ceres-solver/internal/ceres/gtest/gtest.h	/^class ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamSupport	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class ThreadWithParamSupport : public ThreadWithParamBase {$/;"	c	namespace:testing::internal::__anon26	file:
ThreadedSolverConfig	ceres-solver/internal/ceres/test_util.cc	/^SolverConfig ThreadedSolverConfig($/;"	f	namespace:ceres::internal
ThreeParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct ThreeParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
ThreeParameterCostFunctorTest	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^class ThreeParameterCostFunctorTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
ThreeParameterCostFunctorTest	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^class ThreeParameterCostFunctorTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
TimeInMillis	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:std::tr1
TimeInMillis	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
TimeStatistics	ceres-solver/internal/ceres/evaluator.h	/^  virtual std::map<std::string, double> TimeStatistics() const {$/;"	f	class:ceres::internal::Evaluator
TimeStatistics	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual std::map<std::string, double> TimeStatistics() const {$/;"	f	class:ceres::internal::GradientProblemEvaluator
TimeStatistics	ceres-solver/internal/ceres/line_search.cc	/^void LineSearchFunction::TimeStatistics($/;"	f	class:ceres::internal::LineSearchFunction
TimeStatistics	ceres-solver/internal/ceres/linear_solver.h	/^  virtual std::map<std::string, double> TimeStatistics() const {$/;"	f	class:ceres::internal::LinearSolver
TimeStatistics	ceres-solver/internal/ceres/linear_solver.h	/^  virtual std::map<std::string, double> TimeStatistics() const {$/;"	f	class:ceres::internal::TypedLinearSolver
TimeStatistics	ceres-solver/internal/ceres/program_evaluator.h	/^  virtual std::map<std::string, double> TimeStatistics() const {$/;"	f	class:ceres::internal::ProgramEvaluator
Times	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& Times(const Cardinality& a_cardinality) {$/;"	f	class:testing::internal::TypedExpectation
Times	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& Times(int n) {$/;"	f	class:testing::internal::TypedExpectation
To	ceres-solver/examples/libmv_homography.cc	/^  static void To(const Parameters &p, Parameterized *h) {$/;"	f	class:__anon41::Homography2DNormalizedParameterization
ToCRSMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::ToCRSMatrix(CRSMatrix* matrix) const {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
ToDebugString	ceres-solver/internal/ceres/polynomial.cc	/^string FunctionSample::ToDebugString() const {$/;"	f	class:ceres::internal::FunctionSample
ToDegrees	ceres-solver/internal/ceres/rotation_test.cc	/^static void ToDegrees(double euler_angles[3]) {$/;"	f	namespace:ceres::internal
ToDenseMatrix	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::ToDenseMatrix(Matrix* dense_matrix) const {$/;"	f	class:ceres::internal::BlockSparseMatrix
ToDenseMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::ToDenseMatrix(Matrix* dense_matrix) const {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
ToDenseMatrix	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::ToDenseMatrix(Matrix* dense_matrix) const {$/;"	f	class:ceres::internal::DenseSparseMatrix
ToDenseMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::ToDenseMatrix(Matrix* dense_matrix) const {$/;"	f	class:ceres::internal::TripletSparseMatrix
ToLower	ceres-solver/internal/ceres/gtest/gtest.h	/^inline char ToLower(char ch) {$/;"	f	namespace:std::tr1
ToString	ceres-solver/internal/ceres/parameter_block.h	/^  std::string ToString() const {$/;"	f	class:ceres::internal::ParameterBlock
ToString	ceres-solver/internal/ceres/program.cc	/^string Program::ToString() const {$/;"	f	class:ceres::internal::Program
ToString	ceres-solver/internal/ceres/residual_block.h	/^  std::string ToString() const {$/;"	f	class:ceres::internal::ResidualBlock
ToString	ceres-solver/internal/ceres/test_util.h	/^  std::string ToString() const {$/;"	f	struct:ceres::internal::SolverConfig
ToTextFile	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::ToTextFile(FILE* file) const {$/;"	f	class:ceres::internal::BlockSparseMatrix
ToTextFile	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void CompressedRowSparseMatrix::ToTextFile(FILE* file) const {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
ToTextFile	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^void DenseSparseMatrix::ToTextFile(FILE* file) const {$/;"	f	class:ceres::internal::DenseSparseMatrix
ToTextFile	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::ToTextFile(FILE* file) const {$/;"	f	class:ceres::internal::TripletSparseMatrix
ToTripletSparseMatrix	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^void BlockSparseMatrix::ToTripletSparseMatrix($/;"	f	class:ceres::internal::BlockSparseMatrix
ToUpper	ceres-solver/internal/ceres/gtest/gtest.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:std::tr1
Toggle	src/doc/html/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
TolerantLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT TolerantLoss : public LossFunction {$/;"	c	namespace:ceres
TolerantLoss	ceres-solver/internal/ceres/loss_function.cc	/^TolerantLoss::TolerantLoss(double a, double b)$/;"	f	class:ceres::TolerantLoss
TraceInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^struct TraceInfo {$/;"	s	namespace:testing::internal	file:
TranscendentalCostFunction	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class TranscendentalCostFunction : public SizedCostFunction<2, 5, 5> {$/;"	c	namespace:ceres::internal
TranscendentalFunctor	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^class TranscendentalFunctor {$/;"	c	namespace:ceres::internal
TransformTupleValues	ceres-solver/internal/ceres/gmock/gmock.h	/^OutIter TransformTupleValues(Func f, const Tuple& t, OutIter out) {$/;"	f	namespace:testing::internal
TransformTupleValuesHelper	ceres-solver/internal/ceres/gmock/gmock.h	/^class TransformTupleValuesHelper {$/;"	c	namespace:testing::internal
Transpose	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix* CompressedRowSparseMatrix::Transpose() const {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
Transpose3x3	ceres-solver/internal/ceres/rotation_test.cc	/^static void Transpose3x3(double m[9]) {$/;"	f	namespace:ceres::internal
TransposeForCompressedRowSparseStructure	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^void TransposeForCompressedRowSparseStructure(const int num_rows,$/;"	f	namespace:ceres::internal::__anon33
TransposeMatrix	ceres-solver/internal/ceres/cxsparse.cc	/^cs_di* CXSparse::TransposeMatrix(cs_di* A) {$/;"	f	class:ceres::internal::CXSparse
TripletSparseMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix::TripletSparseMatrix()$/;"	f	class:ceres::internal::TripletSparseMatrix
TripletSparseMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix::TripletSparseMatrix(const TripletSparseMatrix& orig)$/;"	f	class:ceres::internal::TripletSparseMatrix
TripletSparseMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix::TripletSparseMatrix(const int num_rows,$/;"	f	class:ceres::internal::TripletSparseMatrix
TripletSparseMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix::TripletSparseMatrix(int num_rows,$/;"	f	class:ceres::internal::TripletSparseMatrix
TripletSparseMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^class TripletSparseMatrix : public SparseMatrix {$/;"	c	namespace:ceres::internal
TripletSparseMatrixSolver	ceres-solver/internal/ceres/linear_solver.h	/^typedef TypedLinearSolver<TripletSparseMatrix>       TripletSparseMatrixSolver;        \/\/ NOLINT$/;"	t	namespace:ceres::internal
TrivialLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT TrivialLoss : public LossFunction {$/;"	c	namespace:ceres
Truly	ceres-solver/internal/ceres/gmock/gmock.h	/^Truly(Predicate pred) {$/;"	f	namespace:testing
TrulyMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit TrulyMatcher(Predicate pred) : predicate_(pred) {}$/;"	f	class:testing::internal::TrulyMatcher
TrulyMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class TrulyMatcher {$/;"	c	namespace:testing::internal
TrustRegionMinimizer	ceres-solver/internal/ceres/trust_region_minimizer.h	/^class TrustRegionMinimizer : public Minimizer {$/;"	c	namespace:ceres::internal
TrustRegionOptionsAreValid	ceres-solver/internal/ceres/solver.cc	/^bool TrustRegionOptionsAreValid(const Solver::Options& options, string* error) {$/;"	f	namespace:ceres::__anon15
TrustRegionPreprocessor	ceres-solver/internal/ceres/trust_region_preprocessor.h	/^class TrustRegionPreprocessor : public Preprocessor {$/;"	c	namespace:ceres::internal
TrustRegionStepEvaluator	ceres-solver/internal/ceres/trust_region_step_evaluator.cc	/^TrustRegionStepEvaluator::TrustRegionStepEvaluator($/;"	f	class:ceres::internal::TrustRegionStepEvaluator
TrustRegionStepEvaluator	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^class TrustRegionStepEvaluator {$/;"	c	namespace:ceres::internal
TrustRegionStrategy	ceres-solver/internal/ceres/trust_region_strategy.h	/^class TrustRegionStrategy {$/;"	c	namespace:ceres::internal
TrustRegionStrategyType	ceres-solver/include/ceres/types.h	/^enum TrustRegionStrategyType {$/;"	g	namespace:ceres
TrustRegionStrategyTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* TrustRegionStrategyTypeToString(TrustRegionStrategyType type) {$/;"	f	namespace:ceres
TryAugment	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool TryAugment(size_t ilhs, ::std::vector<char>* seen) {$/;"	f	class:testing::internal::MaxBipartiteMatchState	file:
TryLock	ceres-solver/internal/ceres/mutex.h	/^bool Mutex::TryLock()      { if (mutex_) return false; Lock(); return true; }$/;"	f	class:ceres::internal::Mutex
TryLock	ceres-solver/internal/ceres/mutex.h	/^bool Mutex::TryLock()      { return is_safe_ ?$/;"	f	class:ceres::internal::Mutex
TukeyLoss	ceres-solver/include/ceres/loss_function.h	/^  explicit TukeyLoss(double a) : a_squared_(a * a) { }$/;"	f	class:ceres::TukeyLoss
TukeyLoss	ceres-solver/include/ceres/loss_function.h	/^class CERES_EXPORT TukeyLoss : public ceres::LossFunction {$/;"	c	namespace:ceres
Tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ::std::tuple<Types...> Tuple;$/;"	t	struct:testing::internal::TuplePolicy
Tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef TupleT Tuple;$/;"	t	struct:testing::internal::TuplePolicy
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1::gtest_internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1> {$/;"	c	namespace:testing::internal
TupleFields	ceres-solver/internal/ceres/gmock/gmock.h	/^class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1> {$/;"	c	namespace:testing::internal
TupleMatches	ceres-solver/internal/ceres/gmock/gmock.h	/^bool TupleMatches(const MatcherTuple& matcher_tuple,$/;"	f	namespace:testing::internal
TuplePolicy	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TuplePolicy {$/;"	s	namespace:testing::internal
TuplePolicy	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TuplePolicy< ::std::tuple<Types...> > {$/;"	s	namespace:testing::internal
TuplePrefix	ceres-solver/internal/ceres/gmock/gmock.h	/^class TuplePrefix {$/;"	c	namespace:testing::internal
TuplePrefix	ceres-solver/internal/ceres/gmock/gmock.h	/^class TuplePrefix<0> {$/;"	c	namespace:testing::internal
TuplePrefixPrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TuplePrefixPrinter {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TuplePrefixPrinter<0> {$/;"	s	namespace:testing::internal
TupleSize	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple_size<Tuple> TupleSize;$/;"	t	class:testing::internal::TransformTupleValuesHelper
TwoParameterBlockFunctor	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^struct TwoParameterBlockFunctor {$/;"	s	namespace:ceres::internal	file:
Type	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
Type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef std::string Type(const TestParamInfo<ParamType>&);$/;"	t	struct:testing::internal::ParamNameGenFunc
Type	devel/include/console/serial_data.h	/^  typedef serial_data_<ContainerAllocator> Type;$/;"	t	struct:console::serial_data_
Type	devel/include/ctrl_serial_comm/car_speed.h	/^  typedef car_speed_<ContainerAllocator> Type;$/;"	t	struct:ctrl_serial_comm::car_speed_
Type	devel/include/ctrl_serial_comm/serial_data.h	/^  typedef serial_data_<ContainerAllocator> Type;$/;"	t	struct:ctrl_serial_comm::serial_data_
Type	devel/include/logical_core/SetGoalRequest.h	/^  typedef SetGoalRequest_<ContainerAllocator> Type;$/;"	t	struct:logical_core::SetGoalRequest_
Type	devel/include/logical_core/SetGoalResponse.h	/^  typedef SetGoalResponse_<ContainerAllocator> Type;$/;"	t	struct:logical_core::SetGoalResponse_
Type	devel/include/odometry/car_speed.h	/^  typedef car_speed_<ContainerAllocator> Type;$/;"	t	struct:odometry::car_speed_
Type	devel/include/serial_comm/car_speed.h	/^  typedef car_speed_<ContainerAllocator> Type;$/;"	t	struct:serial_comm::car_speed_
Type	devel/include/serial_comm/serial_data.h	/^  typedef serial_data_<ContainerAllocator> Type;$/;"	t	struct:serial_comm::serial_data_
Type	devel/include/vision_unit/SetGoalRequest.h	/^  typedef SetGoalRequest_<ContainerAllocator> Type;$/;"	t	struct:vision_unit::SetGoalRequest_
Type	devel/include/vision_unit/SetGoalResponse.h	/^  typedef SetGoalResponse_<ContainerAllocator> Type;$/;"	t	struct:vision_unit::SetGoalResponse_
Type	devel/include/vision_unit/armor_msg.h	/^  typedef armor_msg_<ContainerAllocator> Type;$/;"	t	struct:vision_unit::armor_msg_
Type	devel/include/vision_unit/transformed_scan.h	/^  typedef transformed_scan_<ContainerAllocator> Type;$/;"	t	struct:vision_unit::transformed_scan_
TypeId	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	ceres-solver/internal/ceres/gmock/gmock.h	/^enum TypeKind {$/;"	g	namespace:testing::internal
TypeKind	ceres-solver/internal/ceres/gtest/gtest.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeList	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TypeList {$/;"	s	namespace:testing::internal
TypeList	ceres-solver/internal/ceres/gtest/gtest.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeParameterizedTest	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeParameterizedTestCase {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeParameterizedTestCase<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeWithSize	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeWithSize {$/;"	c	namespace:std::tr1
TypeWithSize	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeWithSize<4> {$/;"	c	namespace:std::tr1
TypeWithSize	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeWithSize<8> {$/;"	c	namespace:std::tr1
TypeWithoutFormatter	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	ceres-solver/internal/ceres/gtest/gtest.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedEq	ceres-solver/internal/ceres/gmock/gmock.h	/^inline Matcher<Lhs> TypedEq(const Rhs& rhs) { return Eq(rhs); }$/;"	f	namespace:testing
TypedExpectation	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation(FunctionMockerBase<F>* owner,$/;"	f	class:testing::internal::TypedExpectation
TypedExpectation	ceres-solver/internal/ceres/gmock/gmock.h	/^class TypedExpectation : public ExpectationBase {$/;"	c	namespace:testing::internal
TypedLinearSolver	ceres-solver/internal/ceres/linear_solver.h	/^class TypedLinearSolver : public LinearSolver {$/;"	c	namespace:ceres::internal
TypedPreconditioner	ceres-solver/internal/ceres/preconditioner.h	/^class TypedPreconditioner : public Preconditioner {$/;"	c	namespace:ceres::internal
TypedTestCasePState	ceres-solver/internal/ceres/gtest/gtest.h	/^  TypedTestCasePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestCasePState
TypedTestCasePState	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ TypedTestCasePState {$/;"	c	namespace:testing::internal
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types {$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	ceres-solver/internal/ceres/gtest/gtest.h	/^struct Types9 {$/;"	s	namespace:testing::internal
UInt	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef unsigned int UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef void UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt32	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:std::tr1
UInt64	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:std::tr1
UNCONSTRAINED_SOLVE	ceres-solver/examples/more_garbow_hillstrom.cc	594;"	d	file:
UNSYMMETRIC	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    UNSYMMETRIC,$/;"	e	enum:ceres::internal::CompressedRowSparseMatrix::StorageType
UPPER_TRIANGULAR	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    UPPER_TRIANGULAR$/;"	e	enum:ceres::internal::CompressedRowSparseMatrix::StorageType
USER_FAILURE	ceres-solver/include/ceres/types.h	/^  USER_FAILURE$/;"	e	enum:ceres::TerminationType
USER_SUCCESS	ceres-solver/include/ceres/types.h	/^  USER_SUCCESS,$/;"	e	enum:ceres::TerminationType
UnaryCostFunction	ceres-solver/internal/ceres/covariance_test.cc	/^  UnaryCostFunction(const int num_residuals,$/;"	f	class:ceres::internal::UnaryCostFunction
UnaryCostFunction	ceres-solver/internal/ceres/covariance_test.cc	/^class UnaryCostFunction: public CostFunction {$/;"	c	namespace:ceres::internal	file:
UnaryCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  UnaryCostFunction(int num_residuals, int32 parameter_block_size) {$/;"	f	class:ceres::internal::UnaryCostFunction
UnaryCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^class UnaryCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal	file:
UnaryCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^  UnaryCostFunction(int num_residuals, int32 parameter_block_size) {$/;"	f	class:ceres::internal::UnaryCostFunction
UnaryCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^class UnaryCostFunction : public CostFunction {$/;"	c	namespace:ceres::internal	file:
UnaryCostFunction	ceres-solver/internal/ceres/program_test.cc	/^class UnaryCostFunction : public MockCostFunctionBase<2, 1, 0, 0> {};$/;"	c	namespace:ceres::internal	file:
UnaryCostFunction	ceres-solver/internal/ceres/reorder_program_test.cc	/^class UnaryCostFunction : public MockCostFunctionBase<2, 1, 0, 0> {};$/;"	c	namespace:ceres::internal	file:
UnaryIdentityCostFunction	ceres-solver/internal/ceres/program_test.cc	/^class UnaryIdentityCostFunction : public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
UnaryIdentityCostFunction	ceres-solver/internal/ceres/solver_test.cc	/^class UnaryIdentityCostFunction : public SizedCostFunction<1, 1> {$/;"	c	namespace:ceres::internal	file:
Uniform	ceres-solver/internal/ceres/random.h	/^inline int Uniform(int n) {$/;"	f	namespace:ceres
UnitQuaternionRotatePoint	ceres-solver/include/ceres/rotation.h	/^void UnitQuaternionRotatePoint(const T q[4], const T pt[3], T result[3]) {$/;"	f	namespace:ceres
UnitTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UnitTest::UnitTest() {$/;"	f	class:testing::UnitTest
UnitTest	ceres-solver/internal/ceres/gtest/gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UnitTestImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class GTEST_API_ UnitTestImpl {$/;"	c	namespace:testing::internal	file:
UnitTestOptions	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class GTEST_API_ UnitTestOptions {$/;"	c	namespace:testing::internal	file:
UniversalPrint	ceres-solver/internal/ceres/gtest/gtest.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UniversalPrintArray(const char* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	ceres-solver/internal/ceres/gtest/gtest.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintCharArray	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static void UniversalPrintCharArray($/;"	f	namespace:testing::internal
UniversalPrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	ceres-solver/internal/ceres/gtest/gtest.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	ceres-solver/internal/ceres/gtest/gtest.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
UniversalTersePrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalTersePrinter {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalTersePrinter<T&> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalTersePrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalTersePrinter<char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalTersePrinter<const char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalTersePrinter<const wchar_t*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ceres-solver/internal/ceres/gtest/gtest.h	/^class UniversalTersePrinter<wchar_t*> {$/;"	c	namespace:testing::internal
Unlock	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Mutex::Unlock() {$/;"	f	class:testing::internal::Mutex
Unlock	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Unlock() {$/;"	f	class:std::tr1::MutexBase
Unlock	ceres-solver/internal/ceres/gtest/gtest.h	/^  void Unlock() {}$/;"	f	class:std::tr1::Mutex
Unlock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Unlock()       { CERES_SAFE_PTHREAD(pthread_mutex_unlock); }$/;"	f	class:ceres::internal::Mutex
Unlock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Unlock()       { CERES_SAFE_PTHREAD(pthread_rwlock_unlock); }$/;"	f	class:ceres::internal::Mutex
Unlock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Unlock()       { assert(mutex_++ == -1); }$/;"	f	class:ceres::internal::Mutex
Unlock	ceres-solver/internal/ceres/mutex.h	/^void Mutex::Unlock()       { if (is_safe_) LeaveCriticalSection(&mutex_); }$/;"	f	class:ceres::internal::Mutex
UnorderedElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAre() {$/;"	f	namespace:testing
UnorderedElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAre(const T1& e1) {$/;"	f	namespace:testing
UnorderedElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAre(const T1& e1, const T2& e2) {$/;"	f	namespace:testing
UnorderedElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3) {$/;"	f	namespace:testing
UnorderedElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4) {$/;"	f	namespace:testing
UnorderedElementsAre	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,$/;"	f	namespace:testing
UnorderedElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAreArray(::std::initializer_list<T> xs) {$/;"	f	namespace:testing
UnorderedElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAreArray(Iter first, Iter last) {$/;"	f	namespace:testing
UnorderedElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAreArray(const Container& container) {$/;"	f	namespace:testing
UnorderedElementsAreArray	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedElementsAreArray(const T* pointer, size_t count) {$/;"	f	namespace:testing
UnorderedElementsAreArrayMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  UnorderedElementsAreArrayMatcher() {}$/;"	f	class:testing::internal::UnorderedElementsAreArrayMatcher
UnorderedElementsAreArrayMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  UnorderedElementsAreArrayMatcher(Iter first, Iter last)$/;"	f	class:testing::internal::UnorderedElementsAreArrayMatcher
UnorderedElementsAreArrayMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class UnorderedElementsAreArrayMatcher {$/;"	c	namespace:testing::internal
UnorderedElementsAreMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit UnorderedElementsAreMatcher(const MatcherTuple& args)$/;"	f	class:testing::internal::UnorderedElementsAreMatcher
UnorderedElementsAreMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class UnorderedElementsAreMatcher {$/;"	c	namespace:testing::internal
UnorderedElementsAreMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^  UnorderedElementsAreMatcherImpl(InputIter first, InputIter last) {$/;"	f	class:testing::internal::UnorderedElementsAreMatcherImpl
UnorderedElementsAreMatcherImpl	ceres-solver/internal/ceres/gmock/gmock.h	/^class UnorderedElementsAreMatcherImpl$/;"	c	namespace:testing::internal
UnorderedElementsAreMatcherImplBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ UnorderedElementsAreMatcherImplBase {$/;"	c	namespace:testing::internal
UnorderedPointwise	ceres-solver/internal/ceres/gmock/gmock.h	/^UnorderedPointwise(const Tuple2Matcher& tuple2_matcher,$/;"	f	namespace:testing
UnpackCamerasRotationAndTranslation	ceres-solver/examples/libmv_bundle_adjuster.cc	/^void UnpackCamerasRotationAndTranslation($/;"	f	namespace:__anon38
UnshuffleTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void TestCase::UnshuffleTests() {$/;"	f	class:testing::TestCase
UnshuffleTests	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::UnshuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
UnsignedInteger	ceres-solver/internal/ceres/integral_types.h	/^struct UnsignedInteger {$/;"	s	namespace:ceres::internal
UnsymmetricLinearSolverTest	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^class UnsymmetricLinearSolverTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
UntypedActionResultHolderBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class UntypedActionResultHolderBase {$/;"	c	namespace:testing::internal
UntypedActions	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef std::vector<const void*> UntypedActions;$/;"	t	class:testing::internal::ExpectationBase
UntypedExpectations	ceres-solver/internal/ceres/gmock/gmock.h	/^  UntypedExpectations;$/;"	t	class:testing::internal::UntypedFunctionMockerBase
UntypedFunctionMockerBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class GTEST_API_ UntypedFunctionMockerBase {$/;"	c	namespace:testing::internal
UntypedFunctionMockerBase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UntypedFunctionMockerBase::UntypedFunctionMockerBase()$/;"	f	class:testing::internal::UntypedFunctionMockerBase
UntypedOnCallSpecBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  UntypedOnCallSpecBase(const char* a_file, int a_line)$/;"	f	class:testing::internal::UntypedOnCallSpecBase
UntypedOnCallSpecBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class UntypedOnCallSpecBase {$/;"	c	namespace:testing::internal
UntypedOnCallSpecs	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef std::vector<const void*> UntypedOnCallSpecs;$/;"	t	class:testing::internal::UntypedFunctionMockerBase
UntypedPerformAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual UntypedActionResultHolderBase* UntypedPerformAction($/;"	f	class:testing::internal::FunctionMockerBase
UntypedPerformDefaultAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual UntypedActionResultHolderBase* UntypedPerformDefaultAction($/;"	f	class:testing::internal::FunctionMockerBase
UntypedPrintArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual void UntypedPrintArgs(const void* untyped_args,$/;"	f	class:testing::internal::FunctionMockerBase
UntypedTimes	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void ExpectationBase::UntypedTimes(const Cardinality& a_cardinality) {$/;"	f	class:testing::internal::ExpectationBase
Unused	ceres-solver/internal/ceres/gmock/gmock.h	/^typedef internal::IgnoredValue Unused;$/;"	t	namespace:testing
Unwrap	ceres-solver/internal/ceres/gmock/gmock.h	/^  T Unwrap() { return ::testing::internal::move(value_); }$/;"	f	class:testing::internal::ReferenceOrValueWrapper
Unwrap	ceres-solver/internal/ceres/gmock/gmock.h	/^  T Unwrap() {$/;"	f	class:testing::internal::ActionResultHolder
Unwrap	ceres-solver/internal/ceres/gmock/gmock.h	/^  T& Unwrap() { return *value_ptr_; }$/;"	f	class:testing::internal::ReferenceOrValueWrapper
Unwrap	ceres-solver/internal/ceres/gmock/gmock.h	/^  void Unwrap() { }$/;"	f	class:testing::internal::ActionResultHolder
Update	ceres-solver/internal/ceres/low_rank_inverse_hessian.cc	/^bool LowRankInverseHessian::Update(const Vector& delta_x,$/;"	f	class:ceres::internal::LowRankInverseHessian
Update	ceres-solver/internal/ceres/preconditioner.h	/^  virtual bool Update(const LinearOperator& A, const double* D) {$/;"	f	class:ceres::internal::TypedPreconditioner
UpdateBlockDiagonalEtE	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^UpdateBlockDiagonalEtE($/;"	f	class:ceres::internal::PartitionedMatrixView
UpdateBlockDiagonalFtF	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^UpdateBlockDiagonalFtF(BlockSparseMatrix* block_diagonal) const {$/;"	f	class:ceres::internal::PartitionedMatrixView
UpdateCanonicalViewAssignments	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^void CanonicalViewsClustering::UpdateCanonicalViewAssignments($/;"	f	class:ceres::internal::CanonicalViewsClustering
UpdateImpl	ceres-solver/internal/ceres/block_jacobi_preconditioner.cc	/^bool BlockJacobiPreconditioner::UpdateImpl(const BlockSparseMatrix& A,$/;"	f	class:ceres::internal::BlockJacobiPreconditioner
UpdateImpl	ceres-solver/internal/ceres/preconditioner.cc	/^bool SparseMatrixPreconditionerWrapper::UpdateImpl(const SparseMatrix& A,$/;"	f	class:ceres::internal::SparseMatrixPreconditionerWrapper
UpdateImpl	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^bool SchurJacobiPreconditioner::UpdateImpl(const BlockSparseMatrix& A,$/;"	f	class:ceres::internal::SchurJacobiPreconditioner
UpdateImpl	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^bool VisibilityBasedPreconditioner::UpdateImpl(const BlockSparseMatrix& A,$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
UpdateImpl	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  bool UpdateImpl(const BlockSparseMatrix& A, const double* D) {$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
UpdateLocalParameterizationJacobian	ceres-solver/internal/ceres/parameter_block.h	/^  bool UpdateLocalParameterizationJacobian() {$/;"	f	class:ceres::internal::ParameterBlock
UpdateOptions	ceres-solver/internal/ceres/test_util.h	/^  void UpdateOptions(Solver::Options* options) const {$/;"	f	struct:ceres::internal::SolverConfig
UpdateRhs	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^void ImplicitSchurComplement::UpdateRhs() {$/;"	f	class:ceres::internal::ImplicitSchurComplement
UpdateRhs	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^UpdateRhs(const Chunk& chunk,$/;"	f	class:ceres::internal::SchurEliminator
UponLeavingGTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void OsStackTraceGetter::UponLeavingGTest() {}$/;"	f	class:testing::internal::OsStackTraceGetter
UpperBoundForParameter	ceres-solver/internal/ceres/parameter_block.h	/^  double UpperBoundForParameter(int index) const {$/;"	f	class:ceres::internal::ParameterBlock
UpperCase	ceres-solver/internal/ceres/types.cc	/^static void UpperCase(string* input) {$/;"	f	namespace:ceres
UrlEncode	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^string StreamingListener::UrlEncode(const char* str) {$/;"	f	class:testing::internal::StreamingListener
UserThreadFunc	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef void UserThreadFunc(T);$/;"	t	class:std::tr1::ThreadWithParam
Utf16ToAnsi	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {$/;"	f	class:testing::internal::String
VEL2ODOM_H	src/odometry/include/odometry/vel2odom.h	2;"	d
VIDEO_RECODER	src/vision_unit/include/vision_unit/detect_factory/video_recoder.h	2;"	d
VISION_LIDAR_FUSION_H	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	2;"	d
VISION_UNIT_MESSAGE_ARMOR_MSG_H	devel/include/vision_unit/armor_msg.h	6;"	d
VISION_UNIT_MESSAGE_SETGOALREQUEST_H	devel/include/vision_unit/SetGoalRequest.h	6;"	d
VISION_UNIT_MESSAGE_SETGOALRESPONSE_H	devel/include/vision_unit/SetGoalResponse.h	6;"	d
VISION_UNIT_MESSAGE_SETGOAL_H	devel/include/vision_unit/SetGoal.h	6;"	d
VISION_UNIT_MESSAGE_TRANSFORMED_SCAN_H	devel/include/vision_unit/transformed_scan.h	6;"	d
VL	ceres-solver/internal/ceres/jet_test.cc	42;"	d	file:
VLOG	ceres-solver/internal/ceres/miniglog/glog/logging.h	306;"	d
VLOG	ceres-solver/internal/ceres/miniglog/glog/logging.h	311;"	d
VLOG_IF	ceres-solver/internal/ceres/miniglog/glog/logging.h	308;"	d
VLOG_IF	ceres-solver/internal/ceres/miniglog/glog/logging.h	313;"	d
VLOG_IS_ON	ceres-solver/internal/ceres/miniglog/glog/logging.h	318;"	d
VLOG_IS_ON	ceres-solver/internal/ceres/miniglog/glog/logging.h	320;"	d
ValidateRegex	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ValidateRegex(const char* regex) {$/;"	f	namespace:testing::internal
ValidateTestProperty	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool TestResult::ValidateTestProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
ValidateTestPropertyName	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ValidateTestPropertyName(const std::string& property_name,$/;"	f	namespace:testing
Value	ceres-solver/internal/ceres/gmock/gmock.h	/^inline bool Value(const T& value, M matcher) {$/;"	f	namespace:testing
ValueAndGradientSample	ceres-solver/internal/ceres/line_search.cc	/^FunctionSample ValueAndGradientSample(const double x,$/;"	f	namespace:ceres::internal::__anon9
ValueArray1	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit ValueArray1(T1 v1) : v1_(v1) {}$/;"	f	class:testing::internal::ValueArray1
ValueArray1	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray1 {$/;"	c	namespace:testing::internal
ValueArray10	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray10(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray10
ValueArray10	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray10 {$/;"	c	namespace:testing::internal
ValueArray11	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray11(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray11
ValueArray11	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray11 {$/;"	c	namespace:testing::internal
ValueArray12	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray12(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray12
ValueArray12	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray12 {$/;"	c	namespace:testing::internal
ValueArray13	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray13(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray13
ValueArray13	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray13 {$/;"	c	namespace:testing::internal
ValueArray14	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray14(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray14
ValueArray14	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray14 {$/;"	c	namespace:testing::internal
ValueArray15	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray15(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray15
ValueArray15	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray15 {$/;"	c	namespace:testing::internal
ValueArray16	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray16(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray16
ValueArray16	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray16 {$/;"	c	namespace:testing::internal
ValueArray17	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray17(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray17
ValueArray17	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray17 {$/;"	c	namespace:testing::internal
ValueArray18	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray18(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray18
ValueArray18	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray18 {$/;"	c	namespace:testing::internal
ValueArray19	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray19(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray19
ValueArray19	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray19 {$/;"	c	namespace:testing::internal
ValueArray2	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray2(T1 v1, T2 v2) : v1_(v1), v2_(v2) {}$/;"	f	class:testing::internal::ValueArray2
ValueArray2	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray2 {$/;"	c	namespace:testing::internal
ValueArray20	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray20(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray20
ValueArray20	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray20 {$/;"	c	namespace:testing::internal
ValueArray21	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray21(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray21
ValueArray21	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray21 {$/;"	c	namespace:testing::internal
ValueArray22	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray22(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray22
ValueArray22	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray22 {$/;"	c	namespace:testing::internal
ValueArray23	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray23(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray23
ValueArray23	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray23 {$/;"	c	namespace:testing::internal
ValueArray24	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray24(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray24
ValueArray24	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray24 {$/;"	c	namespace:testing::internal
ValueArray25	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray25(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray25
ValueArray25	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray25 {$/;"	c	namespace:testing::internal
ValueArray26	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray26(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray26
ValueArray26	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray26 {$/;"	c	namespace:testing::internal
ValueArray27	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray27(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray27
ValueArray27	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray27 {$/;"	c	namespace:testing::internal
ValueArray28	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray28(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray28
ValueArray28	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray28 {$/;"	c	namespace:testing::internal
ValueArray29	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray29(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray29
ValueArray29	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray29 {$/;"	c	namespace:testing::internal
ValueArray3	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray3(T1 v1, T2 v2, T3 v3) : v1_(v1), v2_(v2), v3_(v3) {}$/;"	f	class:testing::internal::ValueArray3
ValueArray3	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray3 {$/;"	c	namespace:testing::internal
ValueArray30	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray30(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray30
ValueArray30	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray30 {$/;"	c	namespace:testing::internal
ValueArray31	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray31(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray31
ValueArray31	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray31 {$/;"	c	namespace:testing::internal
ValueArray32	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray32(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray32
ValueArray32	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray32 {$/;"	c	namespace:testing::internal
ValueArray33	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray33(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray33
ValueArray33	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray33 {$/;"	c	namespace:testing::internal
ValueArray34	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray34(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray34
ValueArray34	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray34 {$/;"	c	namespace:testing::internal
ValueArray35	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray35(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray35
ValueArray35	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray35 {$/;"	c	namespace:testing::internal
ValueArray36	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray36(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray36
ValueArray36	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray36 {$/;"	c	namespace:testing::internal
ValueArray37	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray37(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray37
ValueArray37	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray37 {$/;"	c	namespace:testing::internal
ValueArray38	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray38(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray38
ValueArray38	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray38 {$/;"	c	namespace:testing::internal
ValueArray39	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray39(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray39
ValueArray39	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray39 {$/;"	c	namespace:testing::internal
ValueArray4	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray4(T1 v1, T2 v2, T3 v3, T4 v4) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray4
ValueArray4	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray4 {$/;"	c	namespace:testing::internal
ValueArray40	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray40(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray40
ValueArray40	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray40 {$/;"	c	namespace:testing::internal
ValueArray41	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray41(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray41
ValueArray41	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray41 {$/;"	c	namespace:testing::internal
ValueArray42	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray42(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray42
ValueArray42	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray42 {$/;"	c	namespace:testing::internal
ValueArray43	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray43(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray43
ValueArray43	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray43 {$/;"	c	namespace:testing::internal
ValueArray44	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray44(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray44
ValueArray44	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray44 {$/;"	c	namespace:testing::internal
ValueArray45	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray45(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray45
ValueArray45	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray45 {$/;"	c	namespace:testing::internal
ValueArray46	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray46(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray46
ValueArray46	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray46 {$/;"	c	namespace:testing::internal
ValueArray47	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray47(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray47
ValueArray47	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray47 {$/;"	c	namespace:testing::internal
ValueArray48	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray48(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray48
ValueArray48	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray48 {$/;"	c	namespace:testing::internal
ValueArray49	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray49(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray49
ValueArray49	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray49 {$/;"	c	namespace:testing::internal
ValueArray5	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray5
ValueArray5	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray5 {$/;"	c	namespace:testing::internal
ValueArray50	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray50(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray50
ValueArray50	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray50 {$/;"	c	namespace:testing::internal
ValueArray6	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray6(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) : v1_(v1), v2_(v2),$/;"	f	class:testing::internal::ValueArray6
ValueArray6	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray6 {$/;"	c	namespace:testing::internal
ValueArray7	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray7(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7) : v1_(v1),$/;"	f	class:testing::internal::ValueArray7
ValueArray7	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray7 {$/;"	c	namespace:testing::internal
ValueArray8	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray8(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	class:testing::internal::ValueArray8
ValueArray8	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray8 {$/;"	c	namespace:testing::internal
ValueArray9	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValueArray9(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	class:testing::internal::ValueArray9
ValueArray9	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValueArray9 {$/;"	c	namespace:testing::internal
ValueHolder	ceres-solver/internal/ceres/gtest/gtest.h	/^    ValueHolder() : value_() {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
ValueHolder	ceres-solver/internal/ceres/gtest/gtest.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
ValueHolder	ceres-solver/internal/ceres/gtest/gtest.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:std::tr1::ThreadLocal
ValueHolderFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^    ValueHolderFactory() {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolderFactory
ValueHolderFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^  class ValueHolderFactory {$/;"	c	class:std::tr1::ThreadLocal
ValueProducer	ceres-solver/internal/ceres/gmock/gmock.h	/^  class ValueProducer {$/;"	c	class:testing::DefaultValue
ValueSample	ceres-solver/internal/ceres/line_search.cc	/^FunctionSample ValueSample(const double x, const double value) {$/;"	f	namespace:ceres::internal::__anon9
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T11> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T12> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T13> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Values(T1 v1,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17, T18> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16, T17> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15, T16> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14, T15> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T14> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T26> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T27> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T28> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Values(T1 v1,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32, T33> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31, T32> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30, T31> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29, T30> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T29> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T41> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T42> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T43> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T44, T45, T46, T47, T48, T49, T50> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T44, T45, T46, T47, T48, T49> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T44, T45, T46, T47, T48> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T44, T45, T46, T47> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T44, T45, T46> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T44, T45> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^    T44> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Values(T1 v1,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray1<T1> Values(T1 v1) {$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray2<T1, T2> Values(T1 v1, T2 v2) {$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray3<T1, T2, T3> Values(T1 v1, T2 v2, T3 v3) {$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray4<T1, T2, T3, T4> Values(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray5<T1, T2, T3, T4, T5> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray6<T1, T2, T3, T4, T5, T6> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray7<T1, T2, T3, T4, T5, T6, T7> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray8<T1, T2, T3, T4, T5, T6, T7, T8> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ValueArray9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
ValuesIn	ceres-solver/internal/ceres/gtest/gtest.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	ceres-solver/internal/ceres/gtest/gtest.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, 0, 0, 0, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, 0, 0, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, 0, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, N6, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, N6, N7, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, N6, N7, N8, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, ceres::DYNAMIC, ceres::DYNAMIC,$/;"	s	namespace:ceres::internal
VariadicMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  VariadicMatcher(const Args&... matchers)  \/\/ NOLINT$/;"	f	class:testing::internal::VariadicMatcher
VariadicMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class VariadicMatcher {$/;"	c	namespace:testing::internal
VaryingResidualFunctor	ceres-solver/internal/ceres/autodiff_test.cc	/^struct VaryingResidualFunctor {$/;"	s	namespace:ceres::internal	file:
Vec	ceres-solver/examples/libmv_homography.cc	/^typedef Eigen::VectorXd Vec;$/;"	t	file:
Vec2	ceres-solver/examples/libmv_homography.cc	/^typedef Eigen::Matrix<double, 2, 1> Vec2;$/;"	t	file:
Vec3	ceres-solver/examples/libmv_bundle_adjuster.cc	/^typedef Eigen::Vector3d Vec3;$/;"	t	file:
Vec3	ceres-solver/examples/libmv_homography.cc	/^typedef Eigen::Vector3d Vec3;$/;"	t	file:
Vec4	ceres-solver/examples/libmv_bundle_adjuster.cc	/^typedef Eigen::Vector4d Vec4;$/;"	t	file:
Vec6	ceres-solver/examples/libmv_bundle_adjuster.cc	/^typedef Eigen::Matrix<double, 6, 1> Vec6;$/;"	t	file:
Vector	ceres-solver/examples/nist.cc	/^typedef Eigen::Matrix<double, Dynamic, 1> Vector;$/;"	t	namespace:ceres::examples	file:
Vector	ceres-solver/include/ceres/internal/eigen.h	/^  Vector;$/;"	t	struct:ceres::EigenTypes
Vector	ceres-solver/include/ceres/internal/eigen.h	/^typedef Eigen::Matrix<double, Eigen::Dynamic, 1> Vector;$/;"	t	namespace:ceres
Vector2d	ceres-solver/internal/ceres/dogleg_strategy.h	/^  typedef Eigen::Matrix<double, 2, 1, Eigen::DontAlign> Vector2d;$/;"	t	class:ceres::internal::DoglegStrategy
VectorOfConstraints	ceres-solver/examples/slam/pose_graph_3d/types.h	/^    VectorOfConstraints;$/;"	t	namespace:ceres::examples
VectorRef	ceres-solver/examples/bal_problem.cc	/^typedef Eigen::Map<Eigen::VectorXd> VectorRef;$/;"	t	namespace:ceres::examples::__anon37	file:
VectorRef	ceres-solver/include/ceres/internal/eigen.h	/^  VectorRef;$/;"	t	struct:ceres::EigenTypes
VectorRef	ceres-solver/include/ceres/internal/eigen.h	/^typedef Eigen::Map<Vector> VectorRef;$/;"	t	namespace:ceres
VerifyAllElementsAndMatchersAreMatched	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^VerifyAllElementsAndMatchersAreMatched($/;"	f	class:testing::internal::UnorderedElementsAreMatcherImplBase
VerifyDiagonalBlocks	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^  void VerifyDiagonalBlocks(const int problem_id) {$/;"	f	class:ceres::internal::BlockJacobiPreconditionerTest
VerifyRegisteredTestNames	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* TypedTestCasePState::VerifyRegisteredTestNames($/;"	f	class:testing::internal::TypedTestCasePState
VersionString	ceres-solver/internal/ceres/solver_utils.cc	/^std::string VersionString() {$/;"	f	namespace:ceres::internal
VertexDegreeLessThan	ceres-solver/internal/ceres/graph_algorithms.h	/^  explicit VertexDegreeLessThan(const Graph<Vertex>& graph)$/;"	f	class:ceres::internal::VertexDegreeLessThan
VertexDegreeLessThan	ceres-solver/internal/ceres/graph_algorithms.h	/^class VertexDegreeLessThan {$/;"	c	namespace:ceres::internal
VertexSet	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^typedef HashSet<ParameterBlock*> VertexSet;$/;"	t	namespace:ceres::internal	file:
VertexTotalOrdering	ceres-solver/internal/ceres/graph_algorithms.h	/^  explicit VertexTotalOrdering(const Graph<Vertex>& graph)$/;"	f	class:ceres::internal::VertexTotalOrdering
VertexTotalOrdering	ceres-solver/internal/ceres/graph_algorithms.h	/^class VertexTotalOrdering {$/;"	c	namespace:ceres::internal
VertexWeight	ceres-solver/internal/ceres/graph.h	/^  double VertexWeight(const Vertex& vertex) const {$/;"	f	class:ceres::internal::WeightedGraph
View	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef StlContainerView<RawContainer> View;$/;"	t	class:testing::internal::QuantifierMatcherImpl
View	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef internal::StlContainerView<Container> View;$/;"	t	class:testing::internal::ContainerEqMatcher
View	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef internal::StlContainerView<RawContainer> View;$/;"	t	class:testing::internal::ElementsAreMatcherImpl
View	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef internal::StlContainerView<RawContainer> View;$/;"	t	class:testing::internal::UnorderedElementsAreMatcherImpl
VisibilityBasedPreconditioner	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^VisibilityBasedPreconditioner::VisibilityBasedPreconditioner($/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
VisibilityBasedPreconditioner	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  VisibilityBasedPreconditioner(const CompressedRowBlockStructure& bs,$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
VisibilityBasedPreconditioner	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^class VisibilityBasedPreconditioner : public BlockSparseMatrixPreconditioner {$/;"	c	namespace:ceres::internal
VisibilityClusteringType	ceres-solver/include/ceres/types.h	/^enum VisibilityClusteringType {$/;"	g	namespace:ceres
VisibilityClusteringTypeToString	ceres-solver/internal/ceres/types.cc	/^const char* VisibilityClusteringTypeToString($/;"	f	namespace:ceres
VisibilityTest	ceres-solver/internal/ceres/visibility_test.cc	/^class VisibilityTest : public ::testing::Test {$/;"	c	namespace:ceres::internal	file:
VisionLidarFusion	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^class VisionLidarFusion$/;"	c
VoidResult	ceres-solver/internal/ceres/gmock/gmock.h	/^    typedef typename Function<F>::MakeResultVoid VoidResult;$/;"	t	class:testing::internal::DoBothAction::Impl
WARNING	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int WARNING = -1;$/;"	v
WARNING	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^const int WARNING = ::WARNING;$/;"	m	namespace:google
WINVER	src/rplidar_ros/sdk/src/arch/win32/arch_win32.h	41;"	d
WOLFE	ceres-solver/include/ceres/types.h	/^  WOLFE,$/;"	e	enum:ceres::LineSearchType
Wait	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int ForkingDeathTest::Wait() {$/;"	f	class:testing::internal::ForkingDeathTest
Wait	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int WindowsDeathTest::Wait() {$/;"	f	class:testing::internal::WindowsDeathTest
WaitForNotification	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void Notification::WaitForNotification() {$/;"	f	class:testing::internal::Notification
WaitForNotification	ceres-solver/internal/ceres/gtest/gtest.h	/^  void WaitForNotification() {$/;"	f	class:std::tr1::Notification
WaitForSinks	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  void WaitForSinks() {$/;"	f	class:MessageLogger
WaitTillSent	ceres-solver/internal/ceres/gmock/mock-log.h	/^  virtual void WaitTillSent() {$/;"	f	class:testing::ScopedMockLog
WallTimeInSeconds	ceres-solver/internal/ceres/wall_time.cc	/^double WallTimeInSeconds() {$/;"	f	namespace:ceres::internal
WatcherThreadFunc	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static DWORD WINAPI WatcherThreadFunc(LPVOID param) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
WeightedGraph	ceres-solver/internal/ceres/graph.h	/^  WeightedGraph() {}$/;"	f	class:ceres::internal::WeightedGraph
WeightedGraph	ceres-solver/internal/ceres/graph.h	/^class WeightedGraph {$/;"	c	namespace:ceres::internal
WhenDynamicCastTo	ceres-solver/internal/ceres/gmock/gmock.h	/^WhenDynamicCastTo(const Matcher<To>& inner_matcher) {$/;"	f	namespace:testing
WhenDynamicCastToMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit WhenDynamicCastToMatcher(const Matcher<To&>& matcher)$/;"	f	class:testing::internal::WhenDynamicCastToMatcher
WhenDynamicCastToMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit WhenDynamicCastToMatcher(const Matcher<To>& matcher)$/;"	f	class:testing::internal::WhenDynamicCastToMatcher
WhenDynamicCastToMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class WhenDynamicCastToMatcher : public WhenDynamicCastToMatcherBase<To> {$/;"	c	namespace:testing::internal
WhenDynamicCastToMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class WhenDynamicCastToMatcher<To&> : public WhenDynamicCastToMatcherBase<To&> {$/;"	c	namespace:testing::internal
WhenDynamicCastToMatcherBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit WhenDynamicCastToMatcherBase(const Matcher<To>& matcher)$/;"	f	class:testing::internal::WhenDynamicCastToMatcherBase
WhenDynamicCastToMatcherBase	ceres-solver/internal/ceres/gmock/gmock.h	/^class WhenDynamicCastToMatcherBase {$/;"	c	namespace:testing::internal
WhenSorted	ceres-solver/internal/ceres/gmock/gmock.h	/^WhenSorted(const ContainerMatcher& container_matcher) {$/;"	f	namespace:testing
WhenSortedBy	ceres-solver/internal/ceres/gmock/gmock.h	/^WhenSortedBy(const Comparator& comparator,$/;"	f	namespace:testing
WhenSortedByMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  WhenSortedByMatcher(const Comparator& comparator,$/;"	f	class:testing::internal::WhenSortedByMatcher
WhenSortedByMatcher	ceres-solver/internal/ceres/gmock/gmock.h	/^class WhenSortedByMatcher {$/;"	c	namespace:testing::internal
WideCStringEquals	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {$/;"	f	class:testing::internal::String
WideStringToUtf8	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string WideStringToUtf8(const wchar_t* str, int num_chars) {$/;"	f	namespace:testing::internal
WillByDefault	ceres-solver/internal/ceres/gmock/gmock.h	/^  OnCallSpec& WillByDefault(const Action<F>& action) {$/;"	f	class:testing::internal::OnCallSpec
WillOnce	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& WillOnce(const Action<F>& action) {$/;"	f	class:testing::internal::TypedExpectation
WillRepeatedly	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& WillRepeatedly(const Action<F>& action) {$/;"	f	class:testing::internal::TypedExpectation
WindowsDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  WindowsDeathTest(const char* a_statement,$/;"	f	class:testing::internal::WindowsDeathTest
WindowsDeathTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class WindowsDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
With	ceres-solver/internal/ceres/gmock/gmock.h	/^  MockSpec<F>& With() {$/;"	f	class:testing::internal::FunctionMocker
With	ceres-solver/internal/ceres/gmock/gmock.h	/^  MockSpec<F>& With(const Matcher<A1>& m1) {$/;"	f	class:testing::internal::FunctionMocker
With	ceres-solver/internal/ceres/gmock/gmock.h	/^  MockSpec<F>& With(const Matcher<A1>& m1, const Matcher<A2>& m2) {$/;"	f	class:testing::internal::FunctionMocker
With	ceres-solver/internal/ceres/gmock/gmock.h	/^  MockSpec<F>& With(const Matcher<A1>& m1, const Matcher<A2>& m2,$/;"	f	class:testing::internal::FunctionMocker
With	ceres-solver/internal/ceres/gmock/gmock.h	/^  OnCallSpec& With(const Matcher<const ArgumentTuple&>& m) {$/;"	f	class:testing::internal::OnCallSpec
With	ceres-solver/internal/ceres/gmock/gmock.h	/^  TypedExpectation& With(const Matcher<const ArgumentTuple&>& m) {$/;"	f	class:testing::internal::TypedExpectation
WithArg	ceres-solver/internal/ceres/gmock/gmock.h	/^WithArg(const InnerAction& action) {$/;"	f	namespace:testing
WithArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^WithArgs(const InnerAction& action) {$/;"	f	namespace:testing
WithArgsAction	ceres-solver/internal/ceres/gmock/gmock.h	/^  explicit WithArgsAction(const InnerAction& action) : action_(action) {}$/;"	f	class:testing::internal::WithArgsAction
WithArgsAction	ceres-solver/internal/ceres/gmock/gmock.h	/^class WithArgsAction {$/;"	c	namespace:testing::internal
WithParamInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
WithoutArgs	ceres-solver/internal/ceres/gmock/gmock.h	/^WithoutArgs(const InnerAction& action) {$/;"	f	namespace:testing
WolfeLineSearch	ceres-solver/internal/ceres/line_search.cc	/^WolfeLineSearch::WolfeLineSearch(const LineSearch::Options& options)$/;"	f	class:ceres::internal::WolfeLineSearch
WolfeLineSearch	ceres-solver/internal/ceres/line_search.h	/^class WolfeLineSearch : public LineSearch {$/;"	c	namespace:ceres::internal
Wrapper	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ReferenceOrValueWrapper<T> Wrapper;$/;"	t	class:testing::internal::ActionResultHolder
Write	ceres-solver/internal/ceres/block_jacobian_writer.h	/^  void Write(int \/* residual_id *\/,$/;"	f	class:ceres::internal::BlockJacobianWriter
Write	ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc	/^void CompressedRowJacobianWriter::Write(int residual_id,$/;"	f	class:ceres::internal::CompressedRowJacobianWriter
Write	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^  void Write(int residual_id,$/;"	f	class:ceres::internal::DenseJacobianWriter
Write	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.cc	/^void DynamicCompressedRowJacobianWriter::Write(int residual_id,$/;"	f	class:ceres::internal::DynamicCompressedRowJacobianWriter
Write	ceres-solver/internal/ceres/gtest/gtest.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
WriteArrayToFileOrDie	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^void WriteArrayToFileOrDie(const string& filename,$/;"	f	namespace:ceres::internal::__anon30
WriteStringToFileOrDie	ceres-solver/internal/ceres/file.cc	/^void WriteStringToFileOrDie(const string &data, const string &filename) {$/;"	f	namespace:ceres::internal
WriteToFile	ceres-solver/examples/bal_problem.cc	/^void BALProblem::WriteToFile(const std::string& filename) const {$/;"	f	class:ceres::examples::BALProblem
WriteToFile	ceres-solver/examples/pgm_image.h	/^bool PGMImage<Real>::WriteToFile(std::string filename) const {$/;"	f	class:ceres::examples::PGMImage
WriteToPLYFile	ceres-solver/examples/bal_problem.cc	/^void BALProblem::WriteToPLYFile(const std::string& filename) const {$/;"	f	class:ceres::examples::BALProblem
WriteToShardStatusFileIfNeeded	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void WriteToShardStatusFileIfNeeded() {$/;"	f	namespace:testing::internal
WriterLock	ceres-solver/internal/ceres/mutex.h	/^  inline void WriterLock() { Lock(); }     \/\/ Acquire an exclusive lock$/;"	f	class:ceres::internal::Mutex
WriterUnlock	ceres-solver/internal/ceres/mutex.h	/^  inline void WriterUnlock() { Unlock(); } \/\/ Release a lock from WriterLock()$/;"	f	class:ceres::internal::Mutex
X	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  Vec3 X;$/;"	m	struct:__anon38::EuclideanPoint	file:
XmlUnitTestResultPrinter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
XmlUnitTestResultPrinter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^class XmlUnitTestResultPrinter : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
Y	src/serial_comm/include/comm_read.h	/^  int16_t ForeBack, LeftRight, Y, R;$/;"	m	class:autocar::serial_mul::comm_read
YawAngle	src/serial_comm/include/comm_read.h	/^  double YawAngle, Rotate;$/;"	m	class:autocar::serial_mul::comm_read
ZoomPhase	ceres-solver/internal/ceres/line_search.cc	/^bool WolfeLineSearch::ZoomPhase(const FunctionSample& initial_position,$/;"	f	class:ceres::internal::WolfeLineSearch
_	ceres-solver/internal/ceres/gmock/gmock.h	/^const internal::AnythingMatcher _ = {};$/;"	m	namespace:testing
_CRT_SECURE_NO_WARNINGS	src/rplidar_ros/sdk/src/arch/win32/arch_win32.h	38;"	d
_DEBUG_VISION	src/vision_unit/include/vision_unit/detect_factory/draw.h	7;"	d
_DEBUG_VISION	src/vision_unit/src/detect_factory/armor_detect_node.cpp	11;"	d	file:
_DEBUG_VISION	src/vision_unit/src/detect_factory/draw.cpp	2;"	d	file:
_HAS_EXCEPTIONS	ceres-solver/internal/ceres/gtest/gtest.h	723;"	d
_RICHEDIT_VER	src/rplidar_ros/sdk/src/arch/win32/arch_win32.h	54;"	d
_UTIL_H_	src/vision_unit/include/vision_unit/detect_factory/util.h	2;"	d
_WIN32_IE	src/rplidar_ros/sdk/src/arch/win32/arch_win32.h	50;"	d
_WIN32_WINNT	ceres-solver/internal/ceres/mutex.h	109;"	d
_WIN32_WINNT	src/rplidar_ros/sdk/src/arch/win32/arch_win32.h	45;"	d
_XOPEN_SOURCE	ceres-solver/internal/ceres/mutex.h	128;"	d
__ARMOR_H__	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	2;"	d
__DEBUG_UTILITY_H__	src/vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	2;"	d
__DRAW_H__	src/vision_unit/include/vision_unit/detect_factory/draw.h	2;"	d
__THREAD_OPERATION_H__	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	2;"	d
__UTILITY_H__	src/vision_unit/include/vision_unit/detect_factory/image_utility.h	2;"	d
__attribute__	src/rplidar_ros/sdk/include/rptypes.h	77;"	d
__init__	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  def __init__(self, *args, **kwds):$/;"	f
__init__	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  def __init__(self, *args, **kwds):$/;"	f
__slots__	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  __slots__ = ['data']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  __slots__ = ['angle','v_x','v_y','v_r']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  __slots__ = ['data']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  __slots__ = ['current_pose']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  __slots__ = ['target_pose']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  __slots__ = ['angle','v_x','v_y','v_r']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  __slots__ = ['angle','v_x','v_y','v_r']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  __slots__ = ['data']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  __slots__ = ['detected','x','y','d']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  __slots__ = ['dist','angle']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  __slots__ = ['current_pose']$/;"	v
__slots__	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  __slots__ = ['target_pose']$/;"	v
__small_endian	src/rplidar_ros/sdk/include/rptypes.h	74;"	d
_angle_type	devel/include/ctrl_serial_comm/car_speed.h	/^   typedef double _angle_type;$/;"	t	struct:ctrl_serial_comm::car_speed_
_angle_type	devel/include/odometry/car_speed.h	/^   typedef double _angle_type;$/;"	t	struct:odometry::car_speed_
_angle_type	devel/include/serial_comm/car_speed.h	/^   typedef double _angle_type;$/;"	t	struct:serial_comm::car_speed_
_angle_type	devel/include/vision_unit/transformed_scan.h	/^   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angle_type;$/;"	t	struct:vision_unit::transformed_scan_
_baudrate	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_baudrate	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_baudrate	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_binded	src/rplidar_ros/sdk/src/hal/locker.h	/^    Locker & _binded;$/;"	m	class:rp::hal::AutoLocker
_cacheCapsuledScanData	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_cacheCapsuledScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cacheScanData	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_cacheScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_previous_capsuledata	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rplidar_response_capsule_measurement_nodes_t _cached_previous_capsuledata;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_sampleduration_express	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    _u16                    _cached_sampleduration_express;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_sampleduration_std	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    _u16                    _cached_sampleduration_std;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_scan_node_buf	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rplidar_response_measurement_node_t      _cached_scan_node_buf[2048];$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cached_scan_node_count	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    size_t                                   _cached_scan_node_count;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_cachethread	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^	rp::hal::Thread _cachethread;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_capsuleToNormal	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^void     RPlidarDriverSerialImpl::_capsuleToNormal(const rplidar_response_capsule_measurement_nodes_t & capsule, rplidar_response_measurement_node_t *nodebuffer, size_t &nodeCount)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_co	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    COMMTIMEOUTS _co;$/;"	m	class:rp::arch::net::raw_serial
_cond_locker	src/rplidar_ros/sdk/src/hal/event.h	/^        pthread_mutex_t        _cond_locker;$/;"	m	class:rp::hal::Event
_cond_var	src/rplidar_ros/sdk/src/hal/event.h	/^        pthread_cond_t         _cond_var;$/;"	m	class:rp::hal::Event
_countof	src/rplidar_ros/sdk/src/hal/util.h	42;"	d
_countof	src/rplidar_ros/sdk/src/hal/util.h	48;"	d
_countof	src/rplidar_ros/src/node.cpp	41;"	d	file:
_current_freq	src/rplidar_ros/sdk/src/arch/win32/timer.cpp	/^static LARGE_INTEGER _current_freq;$/;"	m	namespace:rp::arch	file:
_current_pose_type	devel/include/logical_core/SetGoalResponse.h	/^   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _current_pose_type;$/;"	t	struct:logical_core::SetGoalResponse_
_current_pose_type	devel/include/vision_unit/SetGoalResponse.h	/^   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _current_pose_type;$/;"	t	struct:vision_unit::SetGoalResponse_
_d_type	devel/include/vision_unit/armor_msg.h	/^   typedef double _d_type;$/;"	t	struct:vision_unit::armor_msg_
_data	src/rplidar_ros/sdk/src/hal/thread.h	/^    void * _data;$/;"	m	class:rp::hal::Thread
_dataEvt	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rp::hal::Event          _dataEvt;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_data_type	devel/include/console/serial_data.h	/^   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _data_type;$/;"	t	struct:console::serial_data_
_data_type	devel/include/ctrl_serial_comm/serial_data.h	/^   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _data_type;$/;"	t	struct:ctrl_serial_comm::serial_data_
_data_type	devel/include/serial_comm/serial_data.h	/^   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _data_type;$/;"	t	struct:serial_comm::serial_data_
_dcb	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    DCB _dcb;$/;"	m	class:rp::arch::net::raw_serial
_detected_type	devel/include/vision_unit/armor_msg.h	/^   typedef uint8_t _detected_type;$/;"	t	struct:vision_unit::armor_msg_
_disableDataGrabbing	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^void RPlidarDriverSerialImpl::_disableDataGrabbing()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_dist_type	devel/include/vision_unit/transformed_scan.h	/^   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _dist_type;$/;"	t	struct:vision_unit::transformed_scan_
_event	src/rplidar_ros/sdk/src/hal/event.h	/^        HANDLE _event;$/;"	m	class:rp::hal::Event
_flags	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_flags	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_flags	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_func	src/rplidar_ros/sdk/src/hal/thread.h	/^    thread_proc_t _func;$/;"	m	class:rp::hal::Thread
_get_struct_3I	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^def _get_struct_3I():$/;"	f
_get_struct_3I	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^def _get_struct_3I():$/;"	f
_get_struct_4d	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^def _get_struct_4d():$/;"	f
_get_struct_4d	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^def _get_struct_4d():$/;"	f
_get_struct_4d	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^def _get_struct_4d():$/;"	f
_get_struct_7d	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^def _get_struct_7d():$/;"	f
_get_struct_7d	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^def _get_struct_7d():$/;"	f
_get_struct_B3d	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^def _get_struct_B3d():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^def _get_struct_I():$/;"	f
_get_struct_I	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^def _get_struct_I():$/;"	f
_get_types	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  def _get_types(self):$/;"	f
_get_types	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  def _get_types(self):$/;"	f
_get_workspaces	build/catkin_generated/installspace/_setup_util.py	/^def _get_workspaces(environ, include_fuerte=False, include_non_existing=False):$/;"	f
_get_workspaces	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def _get_workspaces(environ, include_fuerte=False, include_non_existing=False):$/;"	f
_get_workspaces	devel/_setup_util.py	/^def _get_workspaces(environ, include_fuerte=False, include_non_existing=False):$/;"	f
_handle	src/rplidar_ros/sdk/src/hal/thread.h	/^    _word_size_t _handle;$/;"	m	class:rp::hal::Thread
_has_header	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:serial_data
_has_header	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:car_speed
_has_header	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:serial_data
_has_header	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:SetGoalRequest
_has_header	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:SetGoalResponse
_has_header	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:car_speed
_has_header	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:car_speed
_has_header	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:serial_data
_has_header	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:armor_msg
_has_header	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:transformed_scan
_has_header	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:SetGoalRequest
_has_header	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _has_header = False #flag to mark the presence of a Header object$/;"	v	class:SetGoalResponse
_init	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_init	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_init	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_isAutoReset	src/rplidar_ros/sdk/src/hal/event.h	/^        bool                   _isAutoReset;$/;"	m	class:rp::hal::Event
_isConnected	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool     _isConnected;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_isScanning	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool     _isScanning;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_isSupportingMotorCtrl	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool     _isSupportingMotorCtrl;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_is_previous_capsuledataRdy	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    bool                                         _is_previous_capsuledataRdy;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_is_serial_opened	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    volatile bool   _is_serial_opened;$/;"	m	class:rp::hal::serial_rxtx
_is_signalled	src/rplidar_ros/sdk/src/hal/event.h	/^        bool                   _is_signalled;$/;"	m	class:rp::hal::Event
_lock	src/rplidar_ros/sdk/src/hal/locker.h	/^    HANDLE  _lock;$/;"	m	class:rp::hal::Locker
_lock	src/rplidar_ros/sdk/src/hal/locker.h	/^    pthread_mutex_t _lock;$/;"	m	class:rp::hal::Locker
_lock	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^	rp::hal::Locker         _lock;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_md5sum	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  _md5sum = "79cd2e4a60f8fd7afcb0476d2ea77fdc"$/;"	v	class:serial_data
_md5sum	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  _md5sum = "f3bb304fafabfb0151942ae8ec55cdb1"$/;"	v	class:car_speed
_md5sum	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  _md5sum = "79cd2e4a60f8fd7afcb0476d2ea77fdc"$/;"	v	class:serial_data
_md5sum	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _md5sum = "257d089627d7eb7136c24d3593d05a16"$/;"	v	class:SetGoalRequest
_md5sum	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _md5sum = "dd7058fae6e1bf2400513fe092a44c92"$/;"	v	class:SetGoalResponse
_md5sum	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _md5sum = '67dc0e3d032b7d90656c7a23574fcdcb'$/;"	v	class:SetGoal
_md5sum	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  _md5sum = "f3bb304fafabfb0151942ae8ec55cdb1"$/;"	v	class:car_speed
_md5sum	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  _md5sum = "f3bb304fafabfb0151942ae8ec55cdb1"$/;"	v	class:car_speed
_md5sum	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  _md5sum = "79cd2e4a60f8fd7afcb0476d2ea77fdc"$/;"	v	class:serial_data
_md5sum	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  _md5sum = "c146d150956b810994d3493ae1029278"$/;"	v	class:armor_msg
_md5sum	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  _md5sum = "d04f633fb6d830034a14d1a39c7655c7"$/;"	v	class:transformed_scan
_md5sum	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _md5sum = "257d089627d7eb7136c24d3593d05a16"$/;"	v	class:SetGoalRequest
_md5sum	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _md5sum = "dd7058fae6e1bf2400513fe092a44c92"$/;"	v	class:SetGoalResponse
_md5sum	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _md5sum = '67dc0e3d032b7d90656c7a23574fcdcb'$/;"	v	class:SetGoal
_parse_arguments	build/catkin_generated/installspace/_setup_util.py	/^def _parse_arguments(args=None):$/;"	f
_parse_arguments	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def _parse_arguments(args=None):$/;"	f
_parse_arguments	devel/_setup_util.py	/^def _parse_arguments(args=None):$/;"	f
_portName	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    char _portName[200];$/;"	m	class:rp::arch::net::raw_serial
_portName	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    char _portName[200];$/;"	m	class:rp::arch::net::raw_serial
_portName	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    char _portName[20];$/;"	m	class:rp::arch::net::raw_serial
_prefix_env_variable	build/catkin_generated/installspace/_setup_util.py	/^def _prefix_env_variable(environ, name, paths, subfolders):$/;"	f
_prefix_env_variable	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def _prefix_env_variable(environ, name, paths, subfolders):$/;"	f
_prefix_env_variable	devel/_setup_util.py	/^def _prefix_env_variable(environ, name, paths, subfolders):$/;"	f
_preventDefault	src/doc/html/resize.js	/^  var _preventDefault = function(evt) { evt.preventDefault(); };$/;"	f
_request_class	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _request_class  = SetGoalRequest$/;"	v	class:SetGoal
_request_class	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _request_class  = SetGoalRequest$/;"	v	class:SetGoal
_response_class	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _response_class = SetGoalResponse$/;"	v	class:SetGoal
_response_class	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _response_class = SetGoalResponse$/;"	v	class:SetGoal
_ro	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _ro, _wo;$/;"	m	class:rp::arch::net::raw_serial
_rollback_env_variable	build/catkin_generated/installspace/_setup_util.py	/^def _rollback_env_variable(environ, name, subfolders):$/;"	f
_rollback_env_variable	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def _rollback_env_variable(environ, name, subfolders):$/;"	f
_rollback_env_variable	devel/_setup_util.py	/^def _rollback_env_variable(environ, name, subfolders):$/;"	f
_rplidar_ans_header_t	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^typedef struct _rplidar_ans_header_t {$/;"	s
_rplidar_cmd_packet_t	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^typedef struct _rplidar_cmd_packet_t {$/;"	s
_rplidar_payload_acc_board_flag_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_acc_board_flag_t {$/;"	s
_rplidar_payload_express_scan_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_express_scan_t {$/;"	s
_rplidar_payload_motor_pwm_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_motor_pwm_t {$/;"	s
_rplidar_response_acc_board_flag_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_acc_board_flag_t {$/;"	s
_rplidar_response_cabin_nodes_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_cabin_nodes_t {$/;"	s
_rplidar_response_capsule_measurement_nodes_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_capsule_measurement_nodes_t {$/;"	s
_rplidar_response_device_health_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_device_health_t {$/;"	s
_rplidar_response_device_info_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_device_info_t {$/;"	s
_rplidar_response_measurement_node_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_measurement_node_t {$/;"	s
_rplidar_response_sample_rate_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_sample_rate_t {$/;"	s
_rxtx	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^    rp::hal::serial_rxtx  * _rxtx;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_s16	src/rplidar_ros/sdk/include/rptypes.h	/^typedef int16_t        _s16;$/;"	t
_s32	src/rplidar_ros/sdk/include/rptypes.h	/^typedef int32_t        _s32;$/;"	t
_s64	src/rplidar_ros/sdk/include/rptypes.h	/^typedef int64_t        _s64;$/;"	t
_s8	src/rplidar_ros/sdk/include/rptypes.h	/^typedef int8_t         _s8;$/;"	t
_sendCommand	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_sendCommand(_u8 cmd, const void * payload, size_t payloadsize)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_serial_handle	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    volatile HANDLE _serial_handle;$/;"	m	class:rp::arch::net::raw_serial
_slot_types	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  _slot_types = ['int64[]']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  _slot_types = ['float64','float64','float64','float64']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  _slot_types = ['int64[]']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _slot_types = ['geometry_msgs\/PoseStamped']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  _slot_types = ['float64','float64','float64','float64']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  _slot_types = ['float64','float64','float64','float64']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  _slot_types = ['int64[]']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  _slot_types = ['bool','float64','float64','float64']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  _slot_types = ['float32[]','float32[]']$/;"	v
_slot_types	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _slot_types = ['geometry_msgs\/PoseStamped']$/;"	v
_struct_3I	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^_struct_3I = None$/;"	v
_struct_3I	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^_struct_3I = None$/;"	v
_struct_4d	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^_struct_4d = None$/;"	v
_struct_4d	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^_struct_4d = None$/;"	v
_struct_4d	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^_struct_4d = None$/;"	v
_struct_7d	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^_struct_7d = None$/;"	v
_struct_7d	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^_struct_7d = None$/;"	v
_struct_B3d	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^_struct_B3d = None$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^_struct_I = genpy.struct_I$/;"	v
_struct_I	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^_struct_I = genpy.struct_I$/;"	v
_target_pose_type	devel/include/logical_core/SetGoalRequest.h	/^   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _target_pose_type;$/;"	t	struct:logical_core::SetGoalRequest_
_target_pose_type	devel/include/vision_unit/SetGoalRequest.h	/^   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _target_pose_type;$/;"	t	struct:vision_unit::SetGoalRequest_
_thread_thunk	src/rplidar_ros/sdk/src/hal/thread.h	/^	static _word_size_t THREAD_PROC _thread_thunk(void * data)$/;"	f	class:rp::hal::Thread
_tmain	ceres-solver/internal/ceres/gmock_main.cc	/^GTEST_API_ int _tmain(int argc, TCHAR** argv) {$/;"	f
_type	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  _type = "console\/serial_data"$/;"	v	class:serial_data
_type	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  _type = "ctrl_serial_comm\/car_speed"$/;"	v	class:car_speed
_type	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  _type = "ctrl_serial_comm\/serial_data"$/;"	v	class:serial_data
_type	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _type          = 'logical_core\/SetGoal'$/;"	v	class:SetGoal
_type	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _type = "logical_core\/SetGoalRequest"$/;"	v	class:SetGoalRequest
_type	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  _type = "logical_core\/SetGoalResponse"$/;"	v	class:SetGoalResponse
_type	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  _type = "odometry\/car_speed"$/;"	v	class:car_speed
_type	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  _type = "serial_comm\/car_speed"$/;"	v	class:car_speed
_type	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  _type = "serial_comm\/serial_data"$/;"	v	class:serial_data
_type	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  _type = "vision_unit\/armor_msg"$/;"	v	class:armor_msg
_type	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  _type = "vision_unit\/transformed_scan"$/;"	v	class:transformed_scan
_type	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _type          = 'vision_unit\/SetGoal'$/;"	v	class:SetGoal
_type	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _type = "vision_unit\/SetGoalRequest"$/;"	v	class:SetGoalRequest
_type	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  _type = "vision_unit\/SetGoalResponse"$/;"	v	class:SetGoalResponse
_u16	src/rplidar_ros/sdk/include/rptypes.h	/^typedef uint16_t       _u16;$/;"	t
_u32	src/rplidar_ros/sdk/include/rptypes.h	/^typedef uint32_t       _u32;$/;"	t
_u64	src/rplidar_ros/sdk/include/rptypes.h	/^typedef uint64_t       _u64;$/;"	t
_u8	src/rplidar_ros/sdk/include/rptypes.h	/^typedef uint8_t        _u8;$/;"	t
_v_r_type	devel/include/ctrl_serial_comm/car_speed.h	/^   typedef double _v_r_type;$/;"	t	struct:ctrl_serial_comm::car_speed_
_v_r_type	devel/include/odometry/car_speed.h	/^   typedef double _v_r_type;$/;"	t	struct:odometry::car_speed_
_v_r_type	devel/include/serial_comm/car_speed.h	/^   typedef double _v_r_type;$/;"	t	struct:serial_comm::car_speed_
_v_x_type	devel/include/ctrl_serial_comm/car_speed.h	/^   typedef double _v_x_type;$/;"	t	struct:ctrl_serial_comm::car_speed_
_v_x_type	devel/include/odometry/car_speed.h	/^   typedef double _v_x_type;$/;"	t	struct:odometry::car_speed_
_v_x_type	devel/include/serial_comm/car_speed.h	/^   typedef double _v_x_type;$/;"	t	struct:serial_comm::car_speed_
_v_y_type	devel/include/ctrl_serial_comm/car_speed.h	/^   typedef double _v_y_type;$/;"	t	struct:ctrl_serial_comm::car_speed_
_v_y_type	devel/include/odometry/car_speed.h	/^   typedef double _v_y_type;$/;"	t	struct:odometry::car_speed_
_v_y_type	devel/include/serial_comm/car_speed.h	/^   typedef double _v_y_type;$/;"	t	struct:serial_comm::car_speed_
_waitCapsuledNode	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitCapsuledNode(rplidar_response_capsule_measurement_nodes_t & node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_waitNode	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitNode(rplidar_response_measurement_node_t * node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_waitResponseHeader	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitResponseHeader(rplidar_ans_header_t * header, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_waitScanData	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::_waitScanData(rplidar_response_measurement_node_t * nodebuffer, size_t & count, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
_wait_o	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _wait_o;$/;"	m	class:rp::arch::net::raw_serial
_wo	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _ro, _wo;$/;"	m	class:rp::arch::net::raw_serial
_word_size_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef _u32            _word_size_t;$/;"	t
_word_size_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef _u32           _word_size_t;$/;"	t
_word_size_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef _u64           _word_size_t;$/;"	t
_word_size_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef _u8            _word_size_t;$/;"	t
_word_size_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned long  _word_size_t;$/;"	t
_x_type	devel/include/vision_unit/armor_msg.h	/^   typedef double _x_type;$/;"	t	struct:vision_unit::armor_msg_
_y_type	devel/include/vision_unit/armor_msg.h	/^   typedef double _y_type;$/;"	t	struct:vision_unit::armor_msg_
a	ceres-solver/include/ceres/jet.h	/^  T a;$/;"	m	struct:ceres::Jet
a.onclick	src/doc/html/navtree.js	/^      a.onclick = function(){$/;"	f
a_	ceres-solver/include/ceres/loss_function.h	/^  const double a_, b_, c_;$/;"	m	class:ceres::TolerantLoss
a_	ceres-solver/include/ceres/loss_function.h	/^  const double a_;$/;"	m	class:ceres::ArctanLoss
a_	ceres-solver/include/ceres/loss_function.h	/^  const double a_;$/;"	m	class:ceres::HuberLoss
a_	ceres-solver/include/ceres/loss_function.h	/^  const double a_;$/;"	m	class:ceres::ScaledLoss
a_	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^  double a_;$/;"	m	class:ceres::internal::BinaryScalarCost	file:
a_	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^  const double a_, b_;$/;"	m	class:ceres::internal::LinearCostFunction	file:
a_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  vector<vector<double> > a_;  \/\/ our vectors.$/;"	m	class:ceres::internal::BadTestTerm	file:
a_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  vector<vector<double> > a_;  \/\/ our vectors.$/;"	m	class:ceres::internal::GoodTestTerm	file:
a_	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  vector<vector<double> > a_;$/;"	m	class:ceres::internal::TestTerm	file:
a_squared_	ceres-solver/include/ceres/loss_function.h	/^  const double a_squared_;$/;"	m	class:ceres::TukeyLoss
abs	ceres-solver/include/ceres/jet.h	/^Jet<T, N> abs(const Jet<T, N>& f) {$/;"	f	namespace:ceres
abs	ceres-solver/include/ceres/jet.h	/^inline double abs     (double x) { return std::abs(x);      }$/;"	f	namespace:ceres
abtainedGoalState	src/logical_core/src/mission_mode.cpp	/^void MissionMode::abtainedGoalState(move_base_msgs::MoveBaseGoal goal)$/;"	f	class:MissionMode
abtainedGoalState	src/logical_core/src/patrol_mode.cpp	/^void PatrolMode::abtainedGoalState(move_base_msgs::MoveBaseGoal goal)$/;"	f	class:PatrolMode
abtainedGoalState	src/logical_core/src/point_mode.cpp	/^void PointMode::abtainedGoalState(move_base_msgs::MoveBaseGoal goal)$/;"	f	class:PointMode
abtainedGoalState	src/logical_core/src/shooting_mode.cpp	/^void ShootingMode::abtainedGoalState(move_base_msgs::MoveBaseGoal goal)$/;"	f	class:ShootingMode
ac	logical_core/src/logical_core.cpp	/^    MoveBaseClient ac;$/;"	m	class:Brain	file:
ac_	src/logical_core/src/logical_core.h	/^  MoveBaseClient ac_;$/;"	m	class:LogicalCore
accumulated_candidate_model_cost_change_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  double accumulated_candidate_model_cost_change_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
accumulated_reference_model_cost_change_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  double accumulated_reference_model_cost_change_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
acos	ceres-solver/include/ceres/jet.h	/^Jet<T, N> acos(const Jet<T, N>& f) {$/;"	f	namespace:ceres
acos	ceres-solver/include/ceres/jet.h	/^inline double acos    (double x) { return std::acos(x);     }$/;"	f	namespace:ceres
action1_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Action<VoidResult> action1_;$/;"	m	class:testing::internal::DoBothAction::Impl
action1_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Action1 action1_;$/;"	m	class:testing::internal::DoBothAction
action2_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Action<F> action2_;$/;"	m	class:testing::internal::DoBothAction::Impl
action2_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Action2 action2_;$/;"	m	class:testing::internal::DoBothAction
action_	ceres-solver/internal/ceres/gmock/gmock.h	/^    Action<InnerFunctionType> action_;$/;"	m	class:testing::internal::WithArgsAction::Impl
action_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Action<OriginalFunction> action_;$/;"	m	class:testing::internal::IgnoreResultAction::Impl
action_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Action<F> action_;$/;"	m	class:testing::internal::OnCallSpec
action_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const A action_;$/;"	m	class:testing::internal::IgnoreResultAction
action_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const InnerAction action_;$/;"	m	class:testing::internal::WithArgsAction
action_count_checked_	ceres-solver/internal/ceres/gmock/gmock.h	/^  mutable bool action_count_checked_;  \/\/ Under mutex_.$/;"	m	class:testing::internal::ExpectationBase
ad_hoc_test_result	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }$/;"	f	class:testing::internal::UnitTestImpl
ad_hoc_test_result	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const TestResult& UnitTest::ad_hoc_test_result() const {$/;"	f	class:testing::UnitTest
ad_hoc_test_result	ceres-solver/internal/ceres/gtest/gtest.h	/^  const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }$/;"	f	class:testing::TestCase
ad_hoc_test_result_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::internal::UnitTestImpl	file:
ad_hoc_test_result_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::TestCase
address_	ceres-solver/internal/ceres/gmock/gmock.h	/^  static T* address_;$/;"	m	class:testing::DefaultValue
address_	ceres-solver/internal/ceres/gmock/gmock.h	/^T* DefaultValue<T&>::address_ = NULL;$/;"	m	class:testing::DefaultValue
adds_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  size_t adds_, removes_, common_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
algorithm_type	ceres-solver/include/ceres/covariance.h	/^    CovarianceAlgorithmType algorithm_type;$/;"	m	struct:ceres::Covariance::Options
allInOne	devel/include/console/serial_data.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/ctrl_serial_comm/car_speed.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/ctrl_serial_comm/serial_data.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/logical_core/SetGoalRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/logical_core/SetGoalResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/odometry/car_speed.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/serial_comm/car_speed.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/serial_comm/serial_data.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/vision_unit/SetGoalRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/vision_unit/SetGoalResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/vision_unit/armor_msg.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	devel/include/vision_unit/transformed_scan.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
all_covariance_blocks_	ceres-solver/internal/ceres/covariance_test.cc	/^  vector<pair<const double*, const double*> > all_covariance_blocks_;$/;"	m	class:ceres::internal::CovarianceTest	file:
all_covariance_blocks_	ceres-solver/internal/ceres/covariance_test.cc	/^  vector<pair<const double*, const double*> > all_covariance_blocks_;$/;"	m	class:ceres::internal::LargeScaleCovarianceTest	file:
alpha_	ceres-solver/examples/fields_of_experts.h	/^  const double alpha_;$/;"	m	class:ceres::examples::FieldsOfExpertsLoss
alpha_	ceres-solver/examples/fields_of_experts.h	/^  std::vector<double> alpha_;$/;"	m	class:ceres::examples::FieldsOfExperts
alpha_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  double alpha_;$/;"	m	class:ceres::internal::DoglegStrategy
alpha_sq_norm_	ceres-solver/internal/ceres/corrector.h	/^  double alpha_sq_norm_;$/;"	m	class:ceres::internal::Corrector
also_run_disabled_tests_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool also_run_disabled_tests_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
amd_ldlt_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  scoped_ptr<SimplicialLDLTWithAMDOrdering> amd_ldlt_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
ang_lim	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    double ang_lim = 3.0\/180*3.14;$/;"	m	class:autocar::vision_mul::armor_detect_node
angle	devel/include/ctrl_serial_comm/car_speed.h	/^  _angle_type angle;$/;"	m	struct:ctrl_serial_comm::car_speed_
angle	devel/include/odometry/car_speed.h	/^  _angle_type angle;$/;"	m	struct:odometry::car_speed_
angle	devel/include/serial_comm/car_speed.h	/^  _angle_type angle;$/;"	m	struct:serial_comm::car_speed_
angle	devel/include/vision_unit/transformed_scan.h	/^  _angle_type angle;$/;"	m	struct:vision_unit::transformed_scan_
angle	src/serial_comm/include/comm_read.h	/^  int16_t angle;$/;"	m	struct:autocar::serial_mul::__anon50
angle	src/serial_communication/src/commRecv.cxx	/^    int16_t angle;$/;"	m	struct:__anon48	file:
angle-val	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod angle-val ((m <car_speed>))$/;"	f
angle-val	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod angle-val ((m <car_speed>))$/;"	f
angle-val	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod angle-val ((m <car_speed>))$/;"	f
angle-val	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod angle-val ((m <transformed_scan>))$/;"	f
angle_q6_checkbit	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   angle_q6_checkbit; \/\/ check_bit:1;angle_q6:15;$/;"	m	struct:_rplidar_response_measurement_node_t
animationInProgress	src/doc/html/navtree.js	/^var animationInProgress = false;$/;"	v
annotated_dup	src/doc/html/annotated_dup.js	/^var annotated_dup =$/;"	v
apply_loss_function	ceres-solver/include/ceres/covariance.h	/^    bool apply_loss_function;$/;"	m	struct:ceres::Covariance::Options
apply_loss_function	ceres-solver/include/ceres/problem.h	/^    bool apply_loss_function;$/;"	m	struct:ceres::Problem::EvaluateOptions
apply_loss_function	ceres-solver/internal/ceres/evaluator.h	/^    bool apply_loss_function;$/;"	m	struct:ceres::internal::Evaluator::EvaluateOptions
approximate_eigenvalue_scale_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  double approximate_eigenvalue_scale_;$/;"	m	class:ceres::internal::LowRankInverseHessian
arch	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	src/rplidar_ros/sdk/src/arch/linux/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	src/rplidar_ros/sdk/src/arch/linux/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
arch	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	src/rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	src/rplidar_ros/sdk/src/arch/macOS/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
arch	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	src/rplidar_ros/sdk/src/arch/win32/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	src/rplidar_ros/sdk/src/arch/win32/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
args	build/catkin_generated/installspace/_setup_util.py	/^            args = _parse_arguments()$/;"	v
args	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^            args = _parse_arguments()$/;"	v
args	devel/_setup_util.py	/^            args = _parse_arguments()$/;"	v
args_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::vector<char*> args_;$/;"	m	class:testing::internal::Arguments	file:
argv	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  char* const* argv;  \/\/ Command-line arguments for the child's call to exec$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
arity_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  int arity_;$/;"	m	class:ceres::internal::BadTestTerm	file:
arity_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  int arity_;$/;"	m	class:ceres::internal::GoodTestTerm	file:
arity_	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  int arity_;$/;"	m	class:ceres::internal::TestTerm	file:
armor	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  armor_info *armor;$/;"	m	class:autocar::vision_mul::armor_detecter
armor	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::RotatedRect armor;$/;"	m	class:autocar::vision_mul::armor_info
armor_	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    armor_info *armor_;$/;"	m	class:autocar::vision_mul::armor_detect_node
armor_angle_	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double armor_angle_;$/;"	m	class:VisionLidarFusion
armor_detect_node	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^class armor_detect_node$/;"	c	namespace:autocar::vision_mul
armor_detect_node	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^armor_detect_node::armor_detect_node(void)$/;"	f	class:autocar::vision_mul::armor_detect_node
armor_detecter	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^class armor_detecter: public detect_factory$/;"	c	namespace:autocar::vision_mul
armor_detecter	src/vision_unit/src/detect_factory/armor_detect.cpp	/^armor_detecter::armor_detecter()$/;"	f	class:autocar::vision_mul::armor_detecter
armor_dist_	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double armor_dist_;$/;"	m	class:VisionLidarFusion
armor_index_	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  int armor_index_;$/;"	m	class:VisionLidarFusion
armor_info	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  armor_info(int type_, cv::RotatedRect armor_, cv::RotatedRect left_=cv::RotatedRect(), cv::RotatedRect right_=cv::RotatedRect())$/;"	f	class:autocar::vision_mul::armor_info
armor_info	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^class armor_info$/;"	c	namespace:autocar::vision_mul
armor_info	src/vision_unit/src/detect_factory/armor_detect.cpp	/^armor_info::armor_info()$/;"	f	class:autocar::vision_mul::armor_info
armor_msg	devel/include/vision_unit/armor_msg.h	/^typedef ::vision_unit::armor_msg_<std::allocator<void> > armor_msg;$/;"	t	namespace:vision_unit
armor_msg	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^class armor_msg(genpy.Message):$/;"	c
armor_msg	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defclass armor_msg (<armor_msg>)$/;"	f
armor_msg	devel/share/gennodejs/ros/vision_unit/msg/_index.js	/^  armor_msg: armor_msg,$/;"	p	class:module.exports
armor_msgConstPtr	devel/include/vision_unit/armor_msg.h	/^typedef boost::shared_ptr< ::vision_unit::armor_msg const> armor_msgConstPtr;$/;"	t	namespace:vision_unit
armor_msgPtr	devel/include/vision_unit/armor_msg.h	/^typedef boost::shared_ptr< ::vision_unit::armor_msg > armor_msgPtr;$/;"	t	namespace:vision_unit
armor_msg_	devel/include/vision_unit/armor_msg.h	/^  armor_msg_()$/;"	f	struct:vision_unit::armor_msg_
armor_msg_	devel/include/vision_unit/armor_msg.h	/^  armor_msg_(const ContainerAllocator& _alloc)$/;"	f	struct:vision_unit::armor_msg_
armor_msg_	devel/include/vision_unit/armor_msg.h	/^struct armor_msg_$/;"	s	namespace:vision_unit
armor_pos	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    vision_unit::armor_msg armor_pos;$/;"	m	class:autocar::vision_mul::armor_detect_node
array_	ceres-solver/include/ceres/internal/fixed_array.h	/^  InnerContainer* const array_;$/;"	m	class:ceres::internal::FixedArray
array_	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C* array_;$/;"	m	class:ceres::internal::scoped_array
array_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
array_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
arraysize	ceres-solver/include/ceres/internal/macros.h	91;"	d
ascendScanData	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::ascendScanData(rplidar_response_measurement_node_t * nodebuffer, size_t count)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
asin	ceres-solver/include/ceres/jet.h	/^Jet<T, N> asin(const Jet<T, N>& f) {$/;"	f	namespace:ceres
asin	ceres-solver/include/ceres/jet.h	/^inline double asin    (double x) { return std::asin(x);     }$/;"	f	namespace:ceres
assignment	build/catkin_generated/installspace/_setup_util.py	/^def assignment(key, value):$/;"	f
assignment	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def assignment(key, value):$/;"	f
assignment	devel/_setup_util.py	/^def assignment(key, value):$/;"	f
assume_full_rank_ete_	ceres-solver/internal/ceres/schur_eliminator.h	/^  bool assume_full_rank_ete_;$/;"	m	class:ceres::internal::SchurEliminator
atan	ceres-solver/include/ceres/jet.h	/^Jet<T, N> atan(const Jet<T, N>& f) {$/;"	f	namespace:ceres
atan	ceres-solver/include/ceres/jet.h	/^inline double atan    (double x) { return std::atan(x);     }$/;"	f	namespace:ceres
atan2	ceres-solver/include/ceres/jet.h	/^Jet<T, N> atan2(const Jet<T, N>& g, const Jet<T, N>& f) {$/;"	f	namespace:ceres
atan2	ceres-solver/include/ceres/jet.h	/^inline double atan2(double y, double x) { return std::atan2(y, x); }$/;"	f	namespace:ceres
auto_vw	src/serial_comm/include/comm_write.h	/^    int16_t auto_vw;$/;"	m	struct:autocar::serial_mul::__anon49
auto_vw	src/serial_communication/src/commSend.cxx	/^    int16_t auto_vw;$/;"	m	struct:__anon47	file:
auto_vx	src/serial_comm/include/comm_write.h	/^    int16_t auto_vx;$/;"	m	struct:autocar::serial_mul::__anon49
auto_vx	src/serial_communication/src/commSend.cxx	/^    int16_t auto_vx;$/;"	m	struct:__anon47	file:
auto_vy	src/serial_comm/include/comm_write.h	/^    int16_t auto_vy;$/;"	m	struct:autocar::serial_mul::__anon49
auto_vy	src/serial_communication/src/commSend.cxx	/^    int16_t auto_vy;$/;"	m	struct:__anon47	file:
autocar	src/odometry/include/odometry/vel2odom.h	/^namespace autocar$/;"	n
autocar	src/odometry/src/vel2odom.cpp	/^namespace autocar$/;"	n	file:
autocar	src/param_manager/include/param_manager.h	/^namespace autocar$/;"	n
autocar	src/param_manager/src/param_manager.cpp	/^namespace autocar$/;"	n	file:
autocar	src/serial_comm/include/comm_read.h	/^namespace autocar$/;"	n
autocar	src/serial_comm/include/comm_write.h	/^namespace autocar$/;"	n
autocar	src/serial_comm/include/serial_param.h	/^namespace autocar$/;"	n
autocar	src/serial_comm/src/comm_read.cpp	/^namespace autocar$/;"	n	file:
autocar	src/serial_comm/src/comm_write.cpp	/^namespace autocar$/;"	n	file:
autocar	src/serial_comm/src/serial_param.cpp	/^namespace autocar$/;"	n	file:
autocar	src/tf_tree/include/tf_tree/tf_factory.h	/^namespace autocar$/;"	n
autocar	src/tf_tree/include/tf_tree/tf_param.h	/^namespace autocar$/;"	n
autocar	src/tf_tree/src/tf_factory.cpp	/^namespace autocar$/;"	n	file:
autocar	src/tf_tree/src/tf_param.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^namespace autocar$/;"	n
autocar	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^namespace autocar$/;"	n
autocar	src/vision_unit/include/vision_unit/detect_factory/detect_factory.h	/^namespace autocar$/;"	n
autocar	src/vision_unit/include/vision_unit/detect_factory/image_utility.h	/^namespace autocar$/;"	n
autocar	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^namespace autocar {$/;"	n
autocar	src/vision_unit/include/vision_unit/detect_factory/rune_detect.h	/^namespace autocar$/;"	n
autocar	src/vision_unit/include/vision_unit/detect_factory/util.h	/^namespace autocar$/;"	n
autocar	src/vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^namespace autocar$/;"	n
autocar	src/vision_unit/src/detect_factory/armor_detect.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/src/detect_factory/image_utility.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/src/detect_factory/labeler.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/src/detect_factory/rune_detect.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/src/detect_factory/util.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/src/detect_factory/video_recoder.cpp	/^namespace autocar$/;"	n	file:
autocar	src/vision_unit/src/detect_factory/vision_param.cpp	/^namespace autocar$/;"	n	file:
axes	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^  axes = plot.subplot(1, 2, 1, projection='3d')$/;"	v
axes	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^  axes = plot.subplot(1, 2, 2, projection='3d')$/;"	v
b	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^  scoped_array<double> b;$/;"	m	struct:ceres::internal::LinearLeastSquaresProblem
b	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  scoped_array<double> b;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
b	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  scoped_array<double> b;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
b_	ceres-solver/examples/denoising.cc	/^  double sqrta_, b_;$/;"	m	class:ceres::examples::QuadraticCostFunction	file:
b_	ceres-solver/include/ceres/loss_function.h	/^  const double a_, b_, c_;$/;"	m	class:ceres::TolerantLoss
b_	ceres-solver/include/ceres/loss_function.h	/^  const double b_;$/;"	m	class:ceres::ArctanLoss
b_	ceres-solver/include/ceres/loss_function.h	/^  const double b_;$/;"	m	class:ceres::CauchyLoss
b_	ceres-solver/include/ceres/loss_function.h	/^  const double b_;$/;"	m	class:ceres::HuberLoss
b_	ceres-solver/include/ceres/loss_function.h	/^  const double b_;$/;"	m	class:ceres::SoftLOneLoss
b_	ceres-solver/include/ceres/normal_prior.h	/^  Vector b_;$/;"	m	class:ceres::NormalPrior
b_	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^  const double a_, b_;$/;"	m	class:ceres::internal::LinearCostFunction	file:
b_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  const double* b_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
b_	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  scoped_array<double> b_;$/;"	m	class:ceres::internal::ImplicitSchurComplementTest	file:
b_	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  scoped_array<double> b_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolverTest	file:
b_	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^  scoped_array<double> b_;$/;"	m	class:ceres::internal::UnsymmetricLinearSolverTest	file:
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
base_path	build/catkin_generated/installspace/_setup_util.py	/^        base_path = os.path.dirname(__file__)$/;"	v
base_path	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^        base_path = os.path.dirname(__file__)$/;"	v
base_path	devel/_setup_util.py	/^        base_path = os.path.dirname(__file__)$/;"	v
basic_manipulator	ceres-solver/internal/ceres/gtest/gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
begin	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline const_iterator begin() const { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
begin	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline iterator begin() { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
begin	ceres-solver/internal/ceres/gmock/gmock.h	/^  const_iterator begin() const { return expectations_.begin(); }$/;"	f	class:testing::ExpectationSet
begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	ceres-solver/internal/ceres/gtest/gtest.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin10_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T10>::iterator begin10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin9_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin9_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int begin_;$/;"	m	struct:ceres::Grid1D
begin_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
bind	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::bind(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
bind	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::bind(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
bind	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::bind(const char * portname, _u32 baudrate, _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
bits	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	ceres-solver/internal/ceres/gtest/gtest.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
blacklisted_packages	build/catkin_generated/order_packages.py	/^blacklisted_packages = "".split(';') if "" != "" else []$/;"	v
block	ceres-solver/internal/ceres/block_structure.h	/^  Block block;$/;"	m	struct:ceres::internal::CompressedList
block_density	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    double block_density;$/;"	m	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
block_diagonal_EtE_inverse	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  const BlockSparseMatrix* block_diagonal_EtE_inverse() const {$/;"	f	class:ceres::internal::ImplicitSchurComplement
block_diagonal_EtE_inverse_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  scoped_ptr<BlockSparseMatrix> block_diagonal_EtE_inverse_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
block_diagonal_FtF_inverse	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  const BlockSparseMatrix* block_diagonal_FtF_inverse() const {$/;"	f	class:ceres::internal::ImplicitSchurComplement
block_diagonal_FtF_inverse_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  scoped_ptr<BlockSparseMatrix> block_diagonal_FtF_inverse_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
block_id	ceres-solver/internal/ceres/block_structure.h	/^  int block_id;$/;"	m	struct:ceres::internal::Cell
block_layout_	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  std::vector<int> block_layout_;$/;"	m	class:ceres::internal::BlockRandomAccessDenseMatrix
block_offsets	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const std::vector<int>& block_offsets() const { return block_offsets_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
block_offsets_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int> block_offsets_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
block_pairs_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  std::set<std::pair<int, int> > block_pairs_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
block_positions_	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  std::vector<int> block_positions_;$/;"	m	class:ceres::internal::BlockRandomAccessSparseMatrix
block_size_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  std::vector<int> block_size_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
block_structure	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^const CompressedRowBlockStructure* BlockSparseMatrix::block_structure()$/;"	f	class:ceres::internal::BlockSparseMatrix
block_structure_	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  scoped_ptr<CompressedRowBlockStructure> block_structure_;$/;"	m	class:ceres::internal::BlockSparseMatrix
blocks_	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^  const std::vector<int> blocks_;$/;"	m	class:ceres::internal::BlockRandomAccessDiagonalMatrix
blocks_	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  const std::vector<int> blocks_;$/;"	m	class:ceres::internal::BlockRandomAccessSparseMatrix
blocks_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  std::vector<int> blocks_;$/;"	m	class:ceres::internal::SparseSchurComplementSolver
bool_constant	ceres-solver/internal/ceres/gtest/gtest.h	/^struct bool_constant {$/;"	s	namespace:std::tr1
breadcrumb_start	ceres-solver/scripts/make_docs.py	/^                       else breadcrumb_start_other$/;"	v
breadcrumb_start_index	ceres-solver/scripts/make_docs.py	/^breadcrumb_start_index = breadcrumb_start_other.replace('index.html', '#')$/;"	v
break_on_failure_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool break_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
buff	src/serial_communication/src/commSend.cxx	/^uint8_t buff[28];$/;"	v
buffer_	ceres-solver/internal/ceres/schur_eliminator.h	/^  scoped_array<double> buffer_;$/;"	m	class:ceres::internal::SchurEliminator
buffer_layout	ceres-solver/internal/ceres/schur_eliminator.h	/^    BufferLayoutType buffer_layout;$/;"	m	struct:ceres::internal::SchurEliminator::Chunk
buffer_size_	ceres-solver/include/ceres/local_parameterization.h	/^  int buffer_size_;$/;"	m	class:ceres::ProductParameterization
buffer_size_	ceres-solver/internal/ceres/schur_eliminator.h	/^  int buffer_size_;$/;"	m	class:ceres::internal::SchurEliminator
build_root	ceres-solver/scripts/make_docs.py	/^build_root = sys.argv[2]$/;"	v
busyState	src/logical_core/src/mission_mode.cpp	/^void MissionMode::busyState()$/;"	f	class:MissionMode
busyState	src/logical_core/src/patrol_mode.cpp	/^void PatrolMode::busyState()$/;"	f	class:PatrolMode
busyState	src/logical_core/src/point_mode.cpp	/^void PointMode::busyState()$/;"	f	class:PointMode
busyState	src/logical_core/src/shooting_mode.cpp	/^void ShootingMode::busyState()$/;"	f	class:ShootingMode
c_	ceres-solver/include/ceres/loss_function.h	/^  const double a_, b_, c_;$/;"	m	class:ceres::TolerantLoss
c_	ceres-solver/include/ceres/loss_function.h	/^  const double c_;$/;"	m	class:ceres::CauchyLoss
c_	ceres-solver/include/ceres/loss_function.h	/^  const double c_;$/;"	m	class:ceres::SoftLOneLoss
c_str	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
cabins	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    rplidar_response_cabin_nodes_t  cabins[16];$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
cache_dir	ceres-solver/scripts/make_docs.py	/^cache_dir  = build_root + '\/doctrees'$/;"	v
cachedLink	src/doc/html/navtree.js	/^function cachedLink()$/;"	f
cal_odom	src/odometry/src/vel2odom.cpp	/^void vel2odom::cal_odom()$/;"	f	class:autocar::odom_mul::vel2odom
calcLineDegree	src/vision_unit/src/detect_factory/image_utility.cpp	/^double calcLineDegree(const cv::Point2f& firstPt, const cv::Point2f& secondPt)$/;"	f	namespace:autocar::vision_mul
call_count_	ceres-solver/internal/ceres/gmock/gmock.h	/^  int call_count_;  \/\/ How many times this expectation has been invoked.$/;"	m	class:testing::internal::ExpectationBase
callable_	ceres-solver/internal/ceres/gmock/gmock.h	/^    mutable CallableStorageType callable_;$/;"	m	class:testing::internal::ResultOfMatcher::Impl
callable_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const CallableStorageType callable_;$/;"	m	class:testing::internal::ResultOfMatcher
callback_	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  GradientCheckingIterationCallback* callback_;$/;"	m	class:ceres::internal::__anon8::GradientCheckingCostFunction	file:
callbacks	ceres-solver/include/ceres/gradient_problem_solver.h	/^    std::vector<IterationCallback*> callbacks;$/;"	m	struct:ceres::GradientProblemSolver::Options
callbacks	ceres-solver/include/ceres/solver.h	/^    std::vector<IterationCallback*> callbacks;$/;"	m	struct:ceres::Solver::Options
callbacks	ceres-solver/internal/ceres/minimizer.h	/^    std::vector<IterationCallback*> callbacks;$/;"	m	struct:ceres::internal::Minimizer::Options
calls	ceres-solver/internal/ceres/execution_summary.h	/^  const std::map<std::string, int>& calls() const { return calls_; }$/;"	f	class:ceres::internal::ExecutionSummary
calls	ceres-solver/internal/ceres/solver_test.cc	/^  int calls;$/;"	m	struct:ceres::internal::RememberingCallback	file:
calls_	ceres-solver/internal/ceres/execution_summary.h	/^  std::map<std::string, int> calls_;$/;"	m	class:ceres::internal::ExecutionSummary
calls_	ceres-solver/internal/ceres/parameter_block_test.cc	/^  mutable int calls_;$/;"	m	class:ceres::internal::BadLocalParameterization	file:
calls_mutex_	ceres-solver/internal/ceres/execution_summary.h	/^  Mutex calls_mutex_;$/;"	m	class:ceres::internal::ExecutionSummary
cam	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    double cam[9] = {839.923052, 0.0,        340.780730,$/;"	m	class:autocar::vision_mul::armor_detect_node
camera_block_size	ceres-solver/examples/bal_problem.h	/^  int camera_block_size()      const { return use_quaternions_ ? 10 : 9; }$/;"	f	class:ceres::examples::BALProblem
camera_index	ceres-solver/examples/bal_problem.h	/^  const int* camera_index()    const { return camera_index_;             }$/;"	f	class:ceres::examples::BALProblem
camera_index	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  const int* camera_index()    const { return camera_index_; }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
camera_index_	ceres-solver/examples/bal_problem.h	/^  int* camera_index_;$/;"	m	class:ceres::examples::BALProblem
camera_index_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  int* camera_index_;$/;"	m	class:BALProblem	file:
camera_index_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int* camera_index_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
camera_matrix	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat camera_matrix;$/;"	m	class:autocar::vision_mul::armor_detect_node
cameras	ceres-solver/examples/bal_problem.h	/^  const double* cameras()      const { return parameters_;               }$/;"	f	class:ceres::examples::BALProblem
candidate_cost_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double candidate_cost_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
candidate_cost_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  double candidate_cost_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
candidate_x_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector candidate_x_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
capture	ceres-solver/internal/ceres/gtest/gtest.h	/^  void capture(T* ptr) {$/;"	f	class:testing::internal::linked_ptr
car_comm_write	src/serial_comm/src/comm_write_node.cpp	/^autocar::serial_mul::comm_write car_comm_write;$/;"	v
car_position	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    geometry_msgs::PoseWithCovarianceStamped car_position;$/;"	m	class:autocar::vision_mul::armor_detect_node
car_speed	devel/include/ctrl_serial_comm/car_speed.h	/^typedef ::ctrl_serial_comm::car_speed_<std::allocator<void> > car_speed;$/;"	t	namespace:ctrl_serial_comm
car_speed	devel/include/odometry/car_speed.h	/^typedef ::odometry::car_speed_<std::allocator<void> > car_speed;$/;"	t	namespace:odometry
car_speed	devel/include/serial_comm/car_speed.h	/^typedef ::serial_comm::car_speed_<std::allocator<void> > car_speed;$/;"	t	namespace:serial_comm
car_speed	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^class car_speed(genpy.Message):$/;"	c
car_speed	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^class car_speed(genpy.Message):$/;"	c
car_speed	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^class car_speed(genpy.Message):$/;"	c
car_speed	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defclass car_speed (<car_speed>)$/;"	f
car_speed	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defclass car_speed (<car_speed>)$/;"	f
car_speed	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defclass car_speed (<car_speed>)$/;"	f
car_speed	devel/share/gennodejs/ros/ctrl_serial_comm/msg/_index.js	/^  car_speed: car_speed,$/;"	p	class:module.exports
car_speed	devel/share/gennodejs/ros/odometry/msg/_index.js	/^  car_speed: car_speed,$/;"	p	class:module.exports
car_speed	devel/share/gennodejs/ros/serial_comm/msg/_index.js	/^  car_speed: car_speed,$/;"	p	class:module.exports
car_speedConstPtr	devel/include/ctrl_serial_comm/car_speed.h	/^typedef boost::shared_ptr< ::ctrl_serial_comm::car_speed const> car_speedConstPtr;$/;"	t	namespace:ctrl_serial_comm
car_speedConstPtr	devel/include/odometry/car_speed.h	/^typedef boost::shared_ptr< ::odometry::car_speed const> car_speedConstPtr;$/;"	t	namespace:odometry
car_speedConstPtr	devel/include/serial_comm/car_speed.h	/^typedef boost::shared_ptr< ::serial_comm::car_speed const> car_speedConstPtr;$/;"	t	namespace:serial_comm
car_speedPtr	devel/include/ctrl_serial_comm/car_speed.h	/^typedef boost::shared_ptr< ::ctrl_serial_comm::car_speed > car_speedPtr;$/;"	t	namespace:ctrl_serial_comm
car_speedPtr	devel/include/odometry/car_speed.h	/^typedef boost::shared_ptr< ::odometry::car_speed > car_speedPtr;$/;"	t	namespace:odometry
car_speedPtr	devel/include/serial_comm/car_speed.h	/^typedef boost::shared_ptr< ::serial_comm::car_speed > car_speedPtr;$/;"	t	namespace:serial_comm
car_speed_	devel/include/ctrl_serial_comm/car_speed.h	/^  car_speed_()$/;"	f	struct:ctrl_serial_comm::car_speed_
car_speed_	devel/include/ctrl_serial_comm/car_speed.h	/^  car_speed_(const ContainerAllocator& _alloc)$/;"	f	struct:ctrl_serial_comm::car_speed_
car_speed_	devel/include/ctrl_serial_comm/car_speed.h	/^struct car_speed_$/;"	s	namespace:ctrl_serial_comm
car_speed_	devel/include/odometry/car_speed.h	/^  car_speed_()$/;"	f	struct:odometry::car_speed_
car_speed_	devel/include/odometry/car_speed.h	/^  car_speed_(const ContainerAllocator& _alloc)$/;"	f	struct:odometry::car_speed_
car_speed_	devel/include/odometry/car_speed.h	/^struct car_speed_$/;"	s	namespace:odometry
car_speed_	devel/include/serial_comm/car_speed.h	/^  car_speed_()$/;"	f	struct:serial_comm::car_speed_
car_speed_	devel/include/serial_comm/car_speed.h	/^  car_speed_(const ContainerAllocator& _alloc)$/;"	f	struct:serial_comm::car_speed_
car_speed_	devel/include/serial_comm/car_speed.h	/^struct car_speed_$/;"	s	namespace:serial_comm
car_state	logical_core/src/logical_core.cpp	/^    CarState car_state;$/;"	m	class:Brain	file:
car_state_	src/logical_core/src/logical_core.h	/^  CarState car_state_;$/;"	m	class:LogicalCore
cardinality	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Cardinality& cardinality() const { return cardinality_; }$/;"	f	class:testing::internal::ExpectationBase
cardinality_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Cardinality cardinality_;            \/\/ The cardinality of the expectation.$/;"	m	class:testing::internal::ExpectationBase
cardinality_specified	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool cardinality_specified() const { return cardinality_specified_; }$/;"	f	class:testing::internal::ExpectationBase
cardinality_specified_	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool cardinality_specified_;$/;"	m	class:testing::internal::ExpectationBase
case_sensitive_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const bool case_sensitive_;$/;"	m	class:testing::internal::StrEqualityMatcher
catch_exceptions	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool catch_exceptions() const { return catch_exceptions_; }$/;"	f	class:testing::internal::UnitTestImpl
catch_exceptions_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^      catch_exceptions_(false) {$/;"	f	namespace:testing::internal
catch_exceptions_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
catch_exceptions_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::UnitTestImpl	file:
cc_	ceres-solver/internal/ceres/suitesparse.h	/^  cholmod_common cc_;$/;"	m	class:ceres::internal::SuiteSparse
ceil	ceres-solver/include/ceres/jet.h	/^Jet<T, N> ceil(const Jet<T, N>& f) {$/;"	f	namespace:ceres
ceil	ceres-solver/include/ceres/jet.h	/^inline double ceil    (double x) { return std::ceil(x);     }$/;"	f	namespace:ceres
cell_infos_	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  scoped_array<CellInfo> cell_infos_;$/;"	m	class:ceres::internal::BlockRandomAccessDenseMatrix
cell_values_	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  std::vector<std::pair<std::pair<int, int>, double*> > cell_values_;$/;"	m	class:ceres::internal::BlockRandomAccessSparseMatrix
cells	ceres-solver/internal/ceres/block_structure.h	/^  std::vector<Cell> cells;$/;"	m	struct:ceres::internal::CompressedList
center_point	src/vision_unit/src/detect_factory/image_utility.cpp	/^T center_point(const T &point1, const T &point2)$/;"	f	namespace:autocar::vision_mul
centers_	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^  std::vector<int> centers_;$/;"	m	class:ceres::internal::CanonicalViewsTest	file:
ceres	ceres-solver/examples/bal_problem.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/bal_problem.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/bundle_adjuster.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/denoising.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/fields_of_experts.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/fields_of_experts.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/more_garbow_hillstrom.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/nist.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/pgm_image.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/random.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/slam/common/read_g2o.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/slam/pose_graph_2d/angle_local_parameterization.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/slam/pose_graph_2d/normalize_angle.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/slam/pose_graph_2d/types.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/slam/pose_graph_3d/types.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/examples/snavely_reprojection_error.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/autodiff_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/conditioned_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/cost_function_to_functor.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/covariance.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/crs_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/cubic_interpolation.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/dynamic_autodiff_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/dynamic_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/dynamic_cost_function_to_functor.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/fpclassify.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/gradient_checker.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/gradient_problem.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/gradient_problem_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/autodiff.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/eigen.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/fixed_array.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/manual_constructor.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/numeric_diff.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/port.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/scoped_ptr.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/iteration_callback.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/jet.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/local_parameterization.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/loss_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/normal_prior.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/numeric_diff_options.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/ordered_groups.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/problem.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/rotation.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/sized_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/include/ceres/types.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/array_utils.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/array_utils.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/array_utils_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/autodiff_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/blas.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/blas.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_evaluate_preparer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_evaluate_preparer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_jacobi_preconditioner.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_jacobian_writer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_jacobian_writer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_random_access_dense_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_random_access_dense_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_random_access_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_random_access_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_random_access_sparse_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_sparse_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_structure.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/block_structure.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/c_api_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/callbacks.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/callbacks.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/canonical_views_clustering.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/casts.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/cgnr_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/cgnr_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/collections_port.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/compressed_row_jacobian_writer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/conditioned_cost_function.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/conjugate_gradients_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/conjugate_gradients_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/corrector.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/corrector.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/corrector_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/covariance.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/covariance_impl.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/covariance_impl.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/covariance_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/cxsparse.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/cxsparse.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dense_normal_cholesky_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dense_normal_cholesky_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dense_qr_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dense_qr_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/detect_structure.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/detect_structure.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/detect_structure_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dogleg_strategy.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dogleg_strategy.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dynamic_compressed_row_finalizer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/evaluator.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/evaluator.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/evaluator_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/evaluator_test_utils.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/evaluator_test_utils.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/execution_summary.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/file.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/file.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_2.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_6.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_9.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_8.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_9.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_d_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_2.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/partitioned_matrix_view_d_d_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_2.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_6.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_9.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_8.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_9.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_2_d_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_2.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_3.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_4.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/generated/schur_eliminator_d_d_d.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_checker.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_checker_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_problem.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_problem_solver_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/gradient_problem_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/graph.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/graph_algorithms.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/graph_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/householder_vector.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/householder_vector_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/implicit_schur_complement.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/integral_types.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/invert_psd_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/is_close.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/is_close.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/is_close_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/iterative_schur_complement_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/jet_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/lapack.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/lapack.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/line_search.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/line_search.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/line_search_direction.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/line_search_direction.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/line_search_minimizer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/line_search_minimizer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/line_search_minimizer_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/line_search_preprocessor.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/line_search_preprocessor.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/linear_operator.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/linear_operator.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/linear_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/linear_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/local_parameterization.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/local_parameterization_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/loss_function.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/loss_function_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/low_rank_inverse_hessian.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/map_util.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/minimizer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/minimizer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/minimizer_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/mutex.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/normal_prior.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/normal_prior_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/ordered_groups_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/parameter_block.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/parameter_block_ordering.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/parameter_block_ordering.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/parameter_block_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/partitioned_matrix_view.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/polynomial.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/polynomial.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/polynomial_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/preconditioner.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/preconditioner.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/preprocessor.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/preprocessor.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/problem.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/problem_impl.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/problem_impl.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/problem_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/program.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/program.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/program_evaluator.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/program_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/random.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/reorder_program.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/reorder_program.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/reorder_program_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/residual_block.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/residual_block.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/residual_block_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/residual_block_utils.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/residual_block_utils.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/rotation_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/schur_complement_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/schur_complement_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/schur_eliminator.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/schur_eliminator.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/schur_jacobi_preconditioner.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/schur_templates.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/schur_templates.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/scratch_evaluate_preparer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/scratch_evaluate_preparer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/single_linkage_clustering.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/single_linkage_clustering.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/single_linkage_clustering_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/small_blas.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/small_blas_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/solver_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/solver_utils.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/solver_utils.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/sparse_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/sparse_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/split.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/split.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/stl_util.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/stringprintf.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/stringprintf.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/suitesparse.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/suitesparse.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/symmetric_linear_solver_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/system_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/test_util.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/test_util.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/trust_region_minimizer.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/trust_region_preprocessor.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/trust_region_step_evaluator.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/trust_region_strategy.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/trust_region_strategy.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/types.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/visibility.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/visibility.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^namespace ceres {$/;"	n
ceres	ceres-solver/internal/ceres/visibility_based_preconditioner_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/visibility_test.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/wall_time.cc	/^namespace ceres {$/;"	n	file:
ceres	ceres-solver/internal/ceres/wall_time.h	/^namespace ceres {$/;"	n
ceres_cost_function_t	ceres-solver/include/ceres/c_api.h	/^typedef int (*ceres_cost_function_t)(void* user_data,$/;"	t
ceres_create_arctan_loss_function_data	ceres-solver/internal/ceres/c_api.cc	/^void* ceres_create_arctan_loss_function_data(double a) {$/;"	f
ceres_create_cauchy_loss_function_data	ceres-solver/internal/ceres/c_api.cc	/^void* ceres_create_cauchy_loss_function_data(double a) {$/;"	f
ceres_create_huber_loss_function_data	ceres-solver/internal/ceres/c_api.cc	/^void* ceres_create_huber_loss_function_data(double a) {$/;"	f
ceres_create_problem	ceres-solver/internal/ceres/c_api.cc	/^ceres_problem_t* ceres_create_problem() {$/;"	f
ceres_create_softl1_loss_function_data	ceres-solver/internal/ceres/c_api.cc	/^void* ceres_create_softl1_loss_function_data(double a) {$/;"	f
ceres_create_tolerant_loss_function_data	ceres-solver/internal/ceres/c_api.cc	/^void* ceres_create_tolerant_loss_function_data(double a, double b) {$/;"	f
ceres_free_problem	ceres-solver/internal/ceres/c_api.cc	/^void ceres_free_problem(ceres_problem_t* problem) {$/;"	f
ceres_free_stock_loss_function_data	ceres-solver/internal/ceres/c_api.cc	/^void ceres_free_stock_loss_function_data(void* loss_function_data) {$/;"	f
ceres_init	ceres-solver/internal/ceres/c_api.cc	/^void ceres_init() {$/;"	f
ceres_loss_function_t	ceres-solver/include/ceres/c_api.h	/^typedef void (*ceres_loss_function_t)(void* user_data,$/;"	t
ceres_problem_add_residual_block	ceres-solver/internal/ceres/c_api.cc	/^ceres_residual_block_id_t* ceres_problem_add_residual_block($/;"	f
ceres_problem_t	ceres-solver/include/ceres/c_api.h	/^typedef struct ceres_problem_s ceres_problem_t;$/;"	t	typeref:struct:ceres_problem_s
ceres_residual_block_id_t	ceres-solver/include/ceres/c_api.h	/^typedef struct ceres_residual_block_id_s ceres_residual_block_id_t;$/;"	t	typeref:struct:ceres_residual_block_id_s
ceres_solve	ceres-solver/internal/ceres/c_api.cc	/^void ceres_solve(ceres_problem_t* c_problem) {$/;"	f
ceres_stock_loss_function	ceres-solver/internal/ceres/c_api.cc	/^void ceres_stock_loss_function(void* user_data,$/;"	f
certified_cost	ceres-solver/examples/nist.cc	/^  double certified_cost()   const { return certified_cost_; }$/;"	f	class:ceres::examples::NISTProblem
certified_cost_	ceres-solver/examples/nist.cc	/^  double certified_cost_;$/;"	m	class:ceres::examples::NISTProblem	file:
checkExpressScanSupported	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::checkExpressScanSupported(bool & support, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
checkMotorCtrlSupport	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::checkMotorCtrlSupport(bool & support, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
checkRPLIDARHealth	src/rplidar_ros/src/node.cpp	/^bool checkRPLIDARHealth(RPlidarDriver * drv)$/;"	f
check_gradients	ceres-solver/include/ceres/solver.h	/^    bool check_gradients;$/;"	m	struct:ceres::Solver::Options
child_handle_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  AutoHandle child_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
child_pid_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  pid_t child_pid_;$/;"	m	class:testing::internal::ForkingDeathTest	file:
chunk_outer_product_buffer_	ceres-solver/internal/ceres/schur_eliminator.h	/^  scoped_array<double> chunk_outer_product_buffer_;$/;"	m	class:ceres::internal::SchurEliminator
chunks_	ceres-solver/internal/ceres/schur_eliminator.h	/^  std::vector<Chunk> chunks_;$/;"	m	class:ceres::internal::SchurEliminator
cl:initialize-instance	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <serial_data>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <car_speed>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <serial_data>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <SetGoal-request>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <SetGoal-response>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <car_speed>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <car_speed>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <serial_data>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <armor_msg>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <transformed_scan>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <SetGoal-request>) cl:&rest args)$/;"	f
cl:initialize-instance	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod cl:initialize-instance :after ((m <SetGoal-response>) cl:&rest args)$/;"	f
classAngleLocalParameterization	src/doc/html/classAngleLocalParameterization.js	/^var classAngleLocalParameterization =$/;"	v
classBriefExtractor	src/doc/html/classBriefExtractor.js	/^var classBriefExtractor =$/;"	v
classCameraPoseVisualization	src/doc/html/classCameraPoseVisualization.js	/^var classCameraPoseVisualization =$/;"	v
classDBoW2_1_1BowVector	src/doc/html/classDBoW2_1_1BowVector.js	/^var classDBoW2_1_1BowVector =$/;"	v
classDBoW2_1_1FBrief	src/doc/html/classDBoW2_1_1FBrief.js	/^var classDBoW2_1_1FBrief =$/;"	v
classDBoW2_1_1FeatureVector	src/doc/html/classDBoW2_1_1FeatureVector.js	/^var classDBoW2_1_1FeatureVector =$/;"	v
classDBoW2_1_1GeneralScoring	src/doc/html/classDBoW2_1_1GeneralScoring.js	/^var classDBoW2_1_1GeneralScoring =$/;"	v
classDBoW2_1_1QueryResults	src/doc/html/classDBoW2_1_1QueryResults.js	/^var classDBoW2_1_1QueryResults =$/;"	v
classDBoW2_1_1Result	src/doc/html/classDBoW2_1_1Result.js	/^var classDBoW2_1_1Result =$/;"	v
classDBoW2_1_1TemplatedDatabase	src/doc/html/classDBoW2_1_1TemplatedDatabase.js	/^var classDBoW2_1_1TemplatedDatabase =$/;"	v
classDBoW2_1_1TemplatedVocabulary	src/doc/html/classDBoW2_1_1TemplatedVocabulary.js	/^var classDBoW2_1_1TemplatedVocabulary =$/;"	v
classDLoopDetector_1_1TemplatedLoopDetector	src/doc/html/classDLoopDetector_1_1TemplatedLoopDetector.js	/^var classDLoopDetector_1_1TemplatedLoopDetector =$/;"	v
classDUtils_1_1DException	src/doc/html/classDUtils_1_1DException.js	/^var classDUtils_1_1DException =$/;"	v
classDUtils_1_1Random	src/doc/html/classDUtils_1_1Random.js	/^var classDUtils_1_1Random =$/;"	v
classDUtils_1_1Random_1_1UnrepeatedRandomizer	src/doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.js	/^var classDUtils_1_1Random_1_1UnrepeatedRandomizer =$/;"	v
classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#ae1bf6a140e322962f65b2c98dc07a3ac	src/doc/html/navtreeindex1.js	/^"classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#ae1bf6a140e322962f65b2c98dc07a3ac":[2,0,5,1,0,5],$/;"	p	class:NAVTREEINDEX1
classDUtils_1_1Timestamp	src/doc/html/classDUtils_1_1Timestamp.js	/^var classDUtils_1_1Timestamp =$/;"	v
classDVision_1_1BRIEF	src/doc/html/classDVision_1_1BRIEF.js	/^var classDVision_1_1BRIEF =$/;"	v
classEstimator	src/doc/html/classEstimator.js	/^var classEstimator =$/;"	v
classFeatureExtractor	src/doc/html/classFeatureExtractor.js	/^var classFeatureExtractor =$/;"	v
classFeatureManager	src/doc/html/classFeatureManager.js	/^var classFeatureManager =$/;"	v
classFeaturePerFrame	src/doc/html/classFeaturePerFrame.js	/^var classFeaturePerFrame =$/;"	v
classFeaturePerId	src/doc/html/classFeaturePerId.js	/^var classFeaturePerId =$/;"	v
classFeatureTracker	src/doc/html/classFeatureTracker.js	/^var classFeatureTracker =$/;"	v
classGlobalSFM	src/doc/html/classGlobalSFM.js	/^var classGlobalSFM =$/;"	v
classIMUFactor	src/doc/html/classIMUFactor.js	/^var classIMUFactor =$/;"	v
classImageFrame	src/doc/html/classImageFrame.js	/^var classImageFrame =$/;"	v
classInitialEXRotation	src/doc/html/classInitialEXRotation.js	/^var classInitialEXRotation =$/;"	v
classIntegrationBase	src/doc/html/classIntegrationBase.js	/^var classIntegrationBase =$/;"	v
classKeyFrame	src/doc/html/classKeyFrame.js	/^var classKeyFrame =$/;"	v
classKeyFrame.html#a24f40f8b54c3b1be6b5bde3e8f6b682f	src/doc/html/navtreeindex2.js	/^"classKeyFrame.html#a24f40f8b54c3b1be6b5bde3e8f6b682f":[2,0,24,10],$/;"	p	class:NAVTREEINDEX2
classKeyFrameDatabase	src/doc/html/classKeyFrameDatabase.js	/^var classKeyFrameDatabase =$/;"	v
classLoopClosure	src/doc/html/classLoopClosure.js	/^var classLoopClosure =$/;"	v
classMarginalizationFactor	src/doc/html/classMarginalizationFactor.js	/^var classMarginalizationFactor =$/;"	v
classMarginalizationInfo	src/doc/html/classMarginalizationInfo.js	/^var classMarginalizationInfo =$/;"	v
classMotionEstimator	src/doc/html/classMotionEstimator.js	/^var classMotionEstimator =$/;"	v
classProjectionFactor	src/doc/html/classProjectionFactor.js	/^var classProjectionFactor =$/;"	v
classSpline	src/doc/html/classSpline.js	/^var classSpline =$/;"	v
classTicToc	src/doc/html/classTicToc.js	/^var classTicToc =$/;"	v
classUtility	src/doc/html/classUtility.js	/^var classUtility =$/;"	v
classautocar_1_1odom__mul_1_1vel2odom	src/doc/html/classautocar_1_1odom__mul_1_1vel2odom.js	/^var classautocar_1_1odom__mul_1_1vel2odom =$/;"	v
classautocar_1_1param__mul_1_1param__manager	src/doc/html/classautocar_1_1param__mul_1_1param__manager.js	/^var classautocar_1_1param__mul_1_1param__manager =$/;"	v
classautocar_1_1serial__mul_1_1comm__read	src/doc/html/classautocar_1_1serial__mul_1_1comm__read.js	/^var classautocar_1_1serial__mul_1_1comm__read =$/;"	v
classautocar_1_1serial__mul_1_1comm__write	src/doc/html/classautocar_1_1serial__mul_1_1comm__write.js	/^var classautocar_1_1serial__mul_1_1comm__write =$/;"	v
classautocar_1_1serial__mul_1_1serial__param	src/doc/html/classautocar_1_1serial__mul_1_1serial__param.js	/^var classautocar_1_1serial__mul_1_1serial__param =$/;"	v
classautocar_1_1tf__mul_1_1tf__factory	src/doc/html/classautocar_1_1tf__mul_1_1tf__factory.js	/^var classautocar_1_1tf__mul_1_1tf__factory =$/;"	v
classautocar_1_1tf__mul_1_1tf__param	src/doc/html/classautocar_1_1tf__mul_1_1tf__param.js	/^var classautocar_1_1tf__mul_1_1tf__param =$/;"	v
classautocar_1_1thread__operation	src/doc/html/classautocar_1_1thread__operation.js	/^var classautocar_1_1thread__operation =$/;"	v
classautocar_1_1vision__mul_1_1armor__detect__node	src/doc/html/classautocar_1_1vision__mul_1_1armor__detect__node.js	/^var classautocar_1_1vision__mul_1_1armor__detect__node =$/;"	v
classautocar_1_1vision__mul_1_1armor__detecter	src/doc/html/classautocar_1_1vision__mul_1_1armor__detecter.js	/^var classautocar_1_1vision__mul_1_1armor__detecter =$/;"	v
classautocar_1_1vision__mul_1_1armor__info	src/doc/html/classautocar_1_1vision__mul_1_1armor__info.js	/^var classautocar_1_1vision__mul_1_1armor__info =$/;"	v
classautocar_1_1vision__mul_1_1detect__factory	src/doc/html/classautocar_1_1vision__mul_1_1detect__factory.js	/^var classautocar_1_1vision__mul_1_1detect__factory =$/;"	v
classautocar_1_1vision__mul_1_1labeler	src/doc/html/classautocar_1_1vision__mul_1_1labeler.js	/^var classautocar_1_1vision__mul_1_1labeler =$/;"	v
classautocar_1_1vision__mul_1_1rune__detect	src/doc/html/classautocar_1_1vision__mul_1_1rune__detect.js	/^var classautocar_1_1vision__mul_1_1rune__detect =$/;"	v
classautocar_1_1vision__mul_1_1thread__operation	src/doc/html/classautocar_1_1vision__mul_1_1thread__operation.js	/^var classautocar_1_1vision__mul_1_1thread__operation =$/;"	v
classautocar_1_1vision__mul_1_1video__recoder	src/doc/html/classautocar_1_1vision__mul_1_1video__recoder.js	/^var classautocar_1_1vision__mul_1_1video__recoder =$/;"	v
classautocar_1_1vision__mul_1_1vision__param	src/doc/html/classautocar_1_1vision__mul_1_1vision__param.js	/^var classautocar_1_1vision__mul_1_1vision__param =$/;"	v
classcamodocal_1_1Camera	src/doc/html/classcamodocal_1_1Camera.js	/^var classcamodocal_1_1Camera =$/;"	v
classcamodocal_1_1CameraCalibration	src/doc/html/classcamodocal_1_1CameraCalibration.js	/^var classcamodocal_1_1CameraCalibration =$/;"	v
classcamodocal_1_1CameraCalibration.html#a2ad9de73fb24b25deca80bccde408af7	src/doc/html/navtreeindex3.js	/^"classcamodocal_1_1CameraCalibration.html#a2ad9de73fb24b25deca80bccde408af7":[2,0,1,1,4],$/;"	p	class:NAVTREEINDEX3
classcamodocal_1_1CameraFactory	src/doc/html/classcamodocal_1_1CameraFactory.js	/^var classcamodocal_1_1CameraFactory =$/;"	v
classcamodocal_1_1Camera_1_1Parameters	src/doc/html/classcamodocal_1_1Camera_1_1Parameters.js	/^var classcamodocal_1_1Camera_1_1Parameters =$/;"	v
classcamodocal_1_1CataCamera	src/doc/html/classcamodocal_1_1CataCamera.js	/^var classcamodocal_1_1CataCamera =$/;"	v
classcamodocal_1_1CataCamera_1_1Parameters	src/doc/html/classcamodocal_1_1CataCamera_1_1Parameters.js	/^var classcamodocal_1_1CataCamera_1_1Parameters =$/;"	v
classcamodocal_1_1Chessboard	src/doc/html/classcamodocal_1_1Chessboard.js	/^var classcamodocal_1_1Chessboard =$/;"	v
classcamodocal_1_1ChessboardCorner	src/doc/html/classcamodocal_1_1ChessboardCorner.js	/^var classcamodocal_1_1ChessboardCorner =$/;"	v
classcamodocal_1_1ChessboardQuad	src/doc/html/classcamodocal_1_1ChessboardQuad.js	/^var classcamodocal_1_1ChessboardQuad =$/;"	v
classcamodocal_1_1CostFunctionFactory	src/doc/html/classcamodocal_1_1CostFunctionFactory.js	/^var classcamodocal_1_1CostFunctionFactory =$/;"	v
classcamodocal_1_1EigenQuaternionParameterization	src/doc/html/classcamodocal_1_1EigenQuaternionParameterization.js	/^var classcamodocal_1_1EigenQuaternionParameterization =$/;"	v
classcamodocal_1_1EquidistantCamera	src/doc/html/classcamodocal_1_1EquidistantCamera.js	/^var classcamodocal_1_1EquidistantCamera =$/;"	v
classcamodocal_1_1EquidistantCamera_1_1Parameters	src/doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.js	/^var classcamodocal_1_1EquidistantCamera_1_1Parameters =$/;"	v
classcamodocal_1_1OCAMCamera	src/doc/html/classcamodocal_1_1OCAMCamera.js	/^var classcamodocal_1_1OCAMCamera =$/;"	v
classcamodocal_1_1OCAMCamera_1_1Parameters	src/doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.js	/^var classcamodocal_1_1OCAMCamera_1_1Parameters =$/;"	v
classcamodocal_1_1PinholeCamera	src/doc/html/classcamodocal_1_1PinholeCamera.js	/^var classcamodocal_1_1PinholeCamera =$/;"	v
classcamodocal_1_1PinholeCamera_1_1Parameters	src/doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.js	/^var classcamodocal_1_1PinholeCamera_1_1Parameters =$/;"	v
classcamodocal_1_1PinholeCamera_1_1Parameters.html#a4b274f65825261daf6ca34ac94a0e168	src/doc/html/navtreeindex4.js	/^"classcamodocal_1_1PinholeCamera_1_1Parameters.html#a4b274f65825261daf6ca34ac94a0e168":[2,0,1,11,0,14],$/;"	p	class:NAVTREEINDEX4
classcamodocal_1_1Transform	src/doc/html/classcamodocal_1_1Transform.js	/^var classcamodocal_1_1Transform =$/;"	v
classcv__bridge_1_1CvImage	src/doc/html/classcv__bridge_1_1CvImage.js	/^var classcv__bridge_1_1CvImage =$/;"	v
classcv__bridge_1_1Exception	src/doc/html/classcv__bridge_1_1Exception.js	/^var classcv__bridge_1_1Exception =$/;"	v
classdemoDetector	src/doc/html/classdemoDetector.js	/^var classdemoDetector =$/;"	v
classdetect__factory	src/doc/html/classdetect__factory.js	/^var classdetect__factory =$/;"	v
classtf__factory	src/doc/html/classtf__factory.js	/^var classtf__factory =$/;"	v
clearDTR	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clearDTR	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clearDTR	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clone_	ceres-solver/internal/ceres/gtest/gtest.h	/^  void (NativeArray::*clone_)(const Element*, size_t);$/;"	m	class:testing::internal::NativeArray
close	ceres-solver/examples/libmv_bundle_adjuster.cc	99;"	d	file:
close	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close_fd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int close_fd;       \/\/ File descriptor to close; the read end of a pipe$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
cluster_membership_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  std::vector<int> cluster_membership_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
cluster_pairs_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  HashSet<std::pair<int, int> > cluster_pairs_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
cmd_flag	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 cmd_flag; $/;"	m	struct:_rplidar_cmd_packet_t
code	build/catkin_generated/generate_cached_setup.py	/^code = generate_environment_script('\/home\/ubuntu\/dji_beta\/auto_car\/devel\/env.sh')$/;"	v
code_location_	ceres-solver/internal/ceres/gtest/gtest.h	/^  CodeLocation code_location_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
coeff_	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  Eigen::Matrix3d coeff_;$/;"	m	class:ceres::internal::BiCubicInterpolatorTest	file:
col	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  int col;$/;"	m	struct:ceres::internal::__anon34::ProductTerm	file:
col_begin_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int col_begin_;$/;"	m	struct:ceres::Grid2D
col_blocks	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const std::vector<int>& col_blocks() const { return col_blocks_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
col_blocks_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int> col_blocks_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
col_end_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int col_end_;$/;"	m	struct:ceres::Grid2D
color_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string color_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
cols	ceres-solver/include/ceres/crs_matrix.h	/^  std::vector<int> cols;$/;"	m	struct:ceres::CRSMatrix
cols	ceres-solver/internal/ceres/block_structure.h	/^  std::vector<Block> cols;$/;"	m	struct:ceres::internal::CompressedRowBlockStructure
cols	ceres-solver/internal/ceres/block_structure.h	/^  std::vector<CompressedColumn> cols;$/;"	m	struct:ceres::internal::CompressedColumnBlockStructure
cols	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^  vector<int> cols;$/;"	m	class:ceres::internal::SolveUpperTriangularTest	file:
cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  const int* cols;$/;"	m	struct:ceres::internal::__anon33::RowColLessThan	file:
cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const int* cols() const { return &cols_[0]; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
cols	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  const int* cols()      const { return cols_.get();       }$/;"	f	class:ceres::internal::TripletSparseMatrix
cols	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^        int cols;$/;"	m	class:autocar::vision_mul::labeler
cols	src/vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^        int cols;$/;"	m	class:autocar::vision_mul::video_recoder
cols_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int> cols_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
cols_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  scoped_array<int> cols_;$/;"	m	class:ceres::internal::TripletSparseMatrix
column_bounds_	ceres-solver/internal/ceres/covariance_test.cc	/^  BoundsMap column_bounds_;$/;"	m	class:ceres::internal::CovarianceTest	file:
commRead	src/serial_communication/src/commCtrl.cxx	/^int commRead(string& data, string port)$/;"	f
commWrite	src/serial_communication/src/commCtrl.cxx	/^int commWrite(char *data, string port)$/;"	f
comm_read	src/serial_comm/include/comm_read.h	/^class comm_read{$/;"	c	namespace:autocar::serial_mul
comm_read	src/serial_comm/src/comm_read.cpp	/^comm_read::comm_read()$/;"	f	class:autocar::serial_mul::comm_read
comm_write	src/serial_comm/include/comm_write.h	/^class comm_write{$/;"	c	namespace:autocar::serial_mul
comm_write	src/serial_comm/src/comm_write.cpp	/^comm_write::comm_write()$/;"	f	class:autocar::serial_mul::comm_write
comment	build/catkin_generated/installspace/_setup_util.py	/^def comment(msg):$/;"	f
comment	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def comment(msg):$/;"	f
comment	devel/_setup_util.py	/^def comment(msg):$/;"	f
common_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  size_t adds_, removes_, common_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
comparator_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Comparator comparator_;$/;"	m	class:testing::internal::WhenSortedByMatcher::Impl
comparator_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Comparator comparator_;$/;"	m	class:testing::internal::WhenSortedByMatcher
compass	src/serial_comm/include/comm_read.h	/^  uint32_t compass;$/;"	m	struct:autocar::serial_mul::__anon50
compass	src/serial_communication/src/commRecv.cxx	/^    uint32_t compass;$/;"	m	struct:__anon48	file:
conditioners_	ceres-solver/include/ceres/conditioned_cost_function.h	/^  std::vector<CostFunction*> conditioners_;$/;"	m	class:ceres::ConditionedCostFunction
connect	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::connect(const char * port_path, _u32 baudrate, _u32 flag)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
console	devel/include/console/serial_data.h	/^namespace console$/;"	n
console-msg	devel/share/common-lisp/ros/console/msg/_package.lisp	/^(cl:defpackage console-msg$/;"	f
console::serial_data	devel/share/roseus/ros/console/msg/serial_data.l	/^(defclass console::serial_data$/;"	f
console::serial_data	devel/share/roseus/ros/console/msg/serial_data.l	/^(defmethod console::serial_data$/;"	f
console_log	src/vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	30;"	d
const_iterator	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef T const* const_iterator;$/;"	t	class:ceres::internal::FixedArray
const_iterator	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef Expectation::Set::const_iterator const_iterator;$/;"	t	class:testing::ExpectationSet
const_iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
const_reference	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef T const& const_reference;$/;"	t	class:ceres::internal::FixedArray
const_reference	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef const type const_reference;$/;"	t	class:testing::internal::StlContainerView
const_reference	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef const type& const_reference;$/;"	t	class:testing::internal::StlContainerView
constancy_mask_	ceres-solver/include/ceres/local_parameterization.h	/^  std::vector<char> constancy_mask_;$/;"	m	class:ceres::SubsetParameterization
constant_parameter_blocks_	ceres-solver/internal/ceres/covariance_impl.h	/^  std::set<const double*> constant_parameter_blocks_;$/;"	m	class:ceres::internal::CovarianceImpl
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem14::constrained_optimal_cost = 0.15567008e1;$/;"	m	class:ceres::examples::TestProblem14	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem18::constrained_optimal_cost = 0.53209865e-3;$/;"	m	class:ceres::examples::TestProblem18	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem10::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem10	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem11::constrained_optimal_cost = 0.58281431e-4;$/;"	m	class:ceres::examples::TestProblem11	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem12::constrained_optimal_cost = 0.30998153e-5;$/;"	m	class:ceres::examples::TestProblem12	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem13::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem13	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem15::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem15	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem16::constrained_optimal_cost = 0.88860479e5;$/;"	m	class:ceres::examples::TestProblem16	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem17::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem17	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem19::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem19	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem1::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem1	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem2::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem2	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem3::constrained_optimal_cost = 0.15125900e-9;$/;"	m	class:ceres::examples::TestProblem3	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem4::constrained_optimal_cost = 0.78400000e3;$/;"	m	class:ceres::examples::TestProblem4	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem5::constrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem5	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem6::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem6	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem7::constrained_optimal_cost = 0.99042212;$/;"	m	class:ceres::examples::TestProblem7	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem8::constrained_optimal_cost =$/;"	m	class:ceres::examples::TestProblem8	file:
constrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem9::constrained_optimal_cost = 0.11279300e-7;$/;"	m	class:ceres::examples::TestProblem9	file:
container_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
convertToId	src/doc/html/search/search.js	/^function convertToId(search)$/;"	f
cookie_namespace	src/doc/html/resize.js	/^var cookie_namespace = 'doxygen'; $/;"	v
copy	ceres-solver/internal/ceres/gtest/gtest.h	/^  template <typename U> void copy(linked_ptr<U> const* ptr) {$/;"	f	class:testing::internal::linked_ptr
copyright	ceres-solver/docs/source/conf.py	/^copyright = u'2016 Google Inc'$/;"	v
corridor_length	ceres-solver/examples/robot_pose_mle.cc	/^  const double corridor_length;$/;"	m	struct:RangeConstraint	file:
cos	ceres-solver/include/ceres/jet.h	/^Jet<T, N> cos(const Jet<T, N>& f) {$/;"	f	namespace:ceres
cos	ceres-solver/include/ceres/jet.h	/^inline double cos     (double x) { return std::cos(x);      }$/;"	f	namespace:ceres
cosh	ceres-solver/include/ceres/jet.h	/^Jet<T, N> cosh(const Jet<T, N>& f) {$/;"	f	namespace:ceres
cosh	ceres-solver/include/ceres/jet.h	/^inline double cosh    (double x) { return std::cosh(x);     }$/;"	f	namespace:ceres
cost	ceres-solver/include/ceres/iteration_callback.h	/^  double cost;$/;"	m	struct:ceres::IterationSummary
cost	ceres-solver/internal/ceres/evaluator_test_utils.h	/^  double cost;$/;"	m	struct:ceres::internal::ExpectedEvaluation
cost	ceres-solver/internal/ceres/line_search_minimizer.h	/^    double cost;$/;"	m	struct:ceres::internal::LineSearchMinimizer::State
cost	ceres-solver/internal/ceres/program_evaluator.h	/^    double cost;$/;"	m	struct:ceres::internal::ProgramEvaluator::EvaluateScratch
cost_change	ceres-solver/include/ceres/iteration_callback.h	/^  double cost_change;$/;"	m	struct:ceres::IterationSummary
cost_evaluation_time_in_seconds	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double cost_evaluation_time_in_seconds;$/;"	m	struct:ceres::GradientProblemSolver::Summary
cost_evaluation_time_in_seconds	ceres-solver/internal/ceres/line_search.h	/^    double cost_evaluation_time_in_seconds;$/;"	m	struct:ceres::internal::LineSearch::Summary
cost_function	ceres-solver/internal/ceres/residual_block.h	/^  const CostFunction* cost_function() const { return cost_function_; }$/;"	f	class:ceres::internal::ResidualBlock
cost_function_	ceres-solver/include/ceres/dynamic_cost_function_to_functor.h	/^  internal::scoped_ptr<CostFunction> cost_function_;$/;"	m	class:ceres::DynamicCostFunctionToFunctor
cost_function_	ceres-solver/internal/ceres/c_api.cc	/^  ceres_cost_function_t cost_function_;$/;"	m	class:CallbackCostFunction	file:
cost_function_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  scoped_ptr<CostFunction> cost_function_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
cost_function_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  scoped_ptr<CostFunction> cost_function_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
cost_function_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  scoped_ptr<CostFunction> cost_function_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
cost_function_	ceres-solver/internal/ceres/residual_block.h	/^  const CostFunction* cost_function_;$/;"	m	class:ceres::internal::ResidualBlock
cost_function_ownership	ceres-solver/include/ceres/problem.h	/^    Ownership cost_function_ownership;$/;"	m	struct:ceres::Problem::Options
cost_functions_to_delete_	ceres-solver/internal/ceres/problem_impl.h	/^  std::vector<CostFunction*> cost_functions_to_delete_;$/;"	m	class:ceres::internal::ProblemImpl
cost_functor_	ceres-solver/include/ceres/cost_function_to_functor.h	/^  DynamicCostFunctionToFunctor cost_functor_;$/;"	m	class:ceres::CostFunctionToFunctor
count	ceres-solver/internal/ceres/gmock/gmock.h	/^  size_t count() const { return matchers_.size(); }$/;"	f	class:testing::internal::ElementsAreMatcherImpl
count	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^        int count;$/;"	m	class:autocar::vision_mul::labeler
covariance_matrix	ceres-solver/internal/ceres/covariance_impl.h	/^  const CompressedRowSparseMatrix* covariance_matrix() const {$/;"	f	class:ceres::internal::CovarianceImpl
covariance_matrix_	ceres-solver/internal/ceres/covariance_impl.h	/^  scoped_ptr<CompressedRowSparseMatrix> covariance_matrix_;$/;"	m	class:ceres::internal::CovarianceImpl
create	src/rplidar_ros/sdk/src/arch/linux/thread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
create	src/rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
create	src/rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
createIndent	src/doc/html/navtree.js	/^function createIndent(o,domNode,node,level)$/;"	f
createResults	src/doc/html/search/search.js	/^function createResults()$/;"	f
create_member	src/rplidar_ros/sdk/src/hal/thread.h	/^    static Thread create_member(T * pthis)$/;"	f	class:rp::hal::Thread
create_tf	src/tf_tree/src/tf_factory.cpp	/^void tf_factory::create_tf()$/;"	f	class:autocar::tf_mul::tf_factory
critical_section_	ceres-solver/internal/ceres/gtest/gtest.h	/^  GTEST_CRITICAL_SECTION* critical_section_;$/;"	m	class:std::tr1::Mutex
critical_section_init_phase_	ceres-solver/internal/ceres/gtest/gtest.h	/^  long critical_section_init_phase_;  \/\/ NOLINT$/;"	m	class:std::tr1::Mutex
crsb_cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const std::vector<int>& crsb_cols() const { return crsb_cols_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
crsb_cols_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int> crsb_cols_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
crsb_rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const std::vector<int>& crsb_rows() const { return crsb_rows_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
crsb_rows_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int> crsb_rows_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
crsm	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^  scoped_ptr<CompressedRowSparseMatrix> crsm;$/;"	m	class:ceres::internal::CompressedRowSparseMatrixTest	file:
crsm	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  scoped_ptr<CompressedRowSparseMatrix> crsm;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
ctrl_serial_comm	devel/include/ctrl_serial_comm/car_speed.h	/^namespace ctrl_serial_comm$/;"	n
ctrl_serial_comm	devel/include/ctrl_serial_comm/serial_data.h	/^namespace ctrl_serial_comm$/;"	n
ctrl_serial_comm-msg	devel/share/common-lisp/ros/ctrl_serial_comm/msg/_package.lisp	/^(cl:defpackage ctrl_serial_comm-msg$/;"	f
ctrl_serial_comm::car_speed	devel/share/roseus/ros/ctrl_serial_comm/msg/car_speed.l	/^(defclass ctrl_serial_comm::car_speed$/;"	f
ctrl_serial_comm::car_speed	devel/share/roseus/ros/ctrl_serial_comm/msg/car_speed.l	/^(defmethod ctrl_serial_comm::car_speed$/;"	f
ctrl_serial_comm::serial_data	devel/share/roseus/ros/ctrl_serial_comm/msg/serial_data.l	/^(defclass ctrl_serial_comm::serial_data$/;"	f
ctrl_serial_comm::serial_data	devel/share/roseus/ros/ctrl_serial_comm/msg/serial_data.l	/^(defmethod ctrl_serial_comm::serial_data$/;"	f
cumulative_time_in_seconds	ceres-solver/include/ceres/iteration_callback.h	/^  double cumulative_time_in_seconds;$/;"	m	struct:ceres::IterationSummary
current10_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T10>::iterator current10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current9_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current9_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current_cost_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  double current_cost_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
current_pose	devel/include/logical_core/SetGoalResponse.h	/^  _current_pose_type current_pose;$/;"	m	struct:logical_core::SetGoalResponse_
current_pose	devel/include/vision_unit/SetGoalResponse.h	/^  _current_pose_type current_pose;$/;"	m	struct:vision_unit::SetGoalResponse_
current_pose-val	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod current_pose-val ((m <SetGoal-response>))$/;"	f
current_pose-val	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod current_pose-val ((m <SetGoal-response>))$/;"	f
current_spec	ceres-solver/internal/ceres/gmock/gmock.h	/^  MockSpec<F>& current_spec() { return current_spec_; }$/;"	f	class:testing::internal::FunctionMockerBase
current_spec_	ceres-solver/internal/ceres/gmock/gmock.h	/^  MockSpec<F> current_spec_;$/;"	m	class:testing::internal::FunctionMockerBase
current_test_case	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const TestCase* current_test_case() const { return current_test_case_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_case_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestCase* current_test_case_;$/;"	m	class:testing::internal::UnitTestImpl	file:
current_test_info	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestInfo* current_test_info() { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const TestInfo* current_test_info() const { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestInfo* current_test_info_;$/;"	m	class:testing::internal::UnitTestImpl	file:
current_test_result	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestResult* UnitTestImpl::current_test_result() {$/;"	f	class:testing::internal::UnitTestImpl
current_time	src/odometry/include/odometry/vel2odom.h	/^  ros::Time current_time;$/;"	m	class:autocar::odom_mul::vel2odom
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current_value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
cxsparse_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  CXSparse cxsparse_;$/;"	m	class:ceres::internal::SparseSchurComplementSolver
cxsparse_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  CXSparse cxsparse_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
cxsparse_factor_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  cs_dis* cxsparse_factor_;$/;"	m	class:ceres::internal::SparseSchurComplementSolver
cxsparse_factor_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  cs_dis* cxsparse_factor_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
d	devel/include/vision_unit/armor_msg.h	/^  _d_type d;$/;"	m	struct:vision_unit::armor_msg_
d-val	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod d-val ((m <armor_msg>))$/;"	f
data	ceres-solver/examples/curve_fitting.c	/^double data[] = {$/;"	v
data	ceres-solver/examples/curve_fitting.cc	/^const double data[] = {$/;"	v
data	ceres-solver/examples/pgm_image.h	/^const std::vector<Real>& PGMImage<Real>::data() const {$/;"	f	class:ceres::examples::PGMImage
data	ceres-solver/examples/robust_curve_fitting.cc	/^const double data[] = {$/;"	v
data	ceres-solver/internal/ceres/c_api_test.cc	/^double data[] = {$/;"	v
data	devel/include/console/serial_data.h	/^  _data_type data;$/;"	m	struct:console::serial_data_
data	devel/include/ctrl_serial_comm/serial_data.h	/^  _data_type data;$/;"	m	struct:ctrl_serial_comm::serial_data_
data	devel/include/serial_comm/serial_data.h	/^  _data_type data;$/;"	m	struct:serial_comm::serial_data_
data	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 data[0];$/;"	m	struct:_rplidar_cmd_packet_t
data	src/serial_comm/include/comm_read.h	/^  data_t data;$/;"	m	class:autocar::serial_mul::comm_read
data	src/serial_comm/include/comm_write.h	/^  data_t data;$/;"	m	class:autocar::serial_mul::comm_write
data	src/serial_comm/src/comm_write_node.cpp	/^autocar::serial_mul::data_t data;$/;"	v
data	src/serial_communication/src/commSend.cxx	/^data_t data;$/;"	v
data-val	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod data-val ((m <serial_data>))$/;"	f
data-val	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod data-val ((m <serial_data>))$/;"	f
data-val	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod data-val ((m <serial_data>))$/;"	f
dataPub	src/serial_communication/src/commSend.cxx	/^ros::Publisher dataPub;$/;"	v
data_	ceres-solver/examples/pgm_image.h	/^  std::vector<Real> data_;$/;"	m	class:ceres::examples::PGMImage
data_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const T* data_;$/;"	m	struct:ceres::Grid1D
data_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const T* data_;$/;"	m	struct:ceres::Grid2D
data_	ceres-solver/internal/ceres/gtest/gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_len	src/serial_comm/include/comm_read.h	/^  int data_len;$/;"	m	class:autocar::serial_mul::comm_read
data_len	src/serial_comm/include/comm_write.h	/^  int data_len;$/;"	m	class:autocar::serial_mul::comm_write
data_status	src/serial_comm/include/comm_read.h	/^  uint8_t data_status;$/;"	m	struct:autocar::serial_mul::__anon50
data_status	src/serial_communication/src/commRecv.cxx	/^    uint8_t data_status;$/;"	m	struct:__anon48	file:
data_t	src/serial_comm/include/comm_read.h	/^}__attribute__((packed)) data_t;$/;"	t	namespace:autocar::serial_mul	typeref:struct:autocar::serial_mul::__anon50
data_t	src/serial_comm/include/comm_write.h	/^}__attribute__((packed)) data_t;$/;"	t	namespace:autocar::serial_mul	typeref:struct:autocar::serial_mul::__anon49
data_t	src/serial_communication/src/commRecv.cxx	/^}__attribute__((packed)) data_t;$/;"	t	typeref:struct:__anon48	file:
data_t	src/serial_communication/src/commSend.cxx	/^}__attribute__((packed)) data_t;$/;"	t	typeref:struct:__anon47	file:
dcrsm	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  scoped_ptr<DynamicCompressedRowSparseMatrix> dcrsm;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
death_test_count	ceres-solver/internal/ceres/gtest/gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	ceres-solver/internal/ceres/gtest/gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
death_test_factory	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::DeathTestFactory* death_test_factory() {$/;"	f	class:testing::internal::UnitTestImpl
death_test_factory_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::scoped_ptr<internal::DeathTestFactory> death_test_factory_;$/;"	m	class:testing::internal::UnitTestImpl	file:
death_test_style_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string death_test_style_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
death_test_use_fork_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool death_test_use_fork_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
debug_vision	src/vision_unit/src/detect_factory/armor_detect.cpp	/^void armor_detecter::debug_vision()$/;"	f	class:autocar::vision_mul::armor_detecter
decrease_factor_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  double decrease_factor_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
decrease_threshold_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double decrease_threshold_;$/;"	m	class:ceres::internal::DoglegStrategy
def_v	src/console/src/console.cpp	/^float def_v = 0.3;$/;"	v
default_factory_	ceres-solver/internal/ceres/gtest/gtest.h	/^  scoped_ptr<ValueHolderFactory> default_factory_;$/;"	m	class:std::tr1::ThreadLocal
default_global_test_part_result_reporter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^          &default_global_test_part_result_reporter_),$/;"	m	namespace:testing::internal	file:
default_global_test_part_result_reporter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
default_per_thread_test_part_result_reporter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^          &default_per_thread_test_part_result_reporter_),$/;"	m	namespace:testing::internal	file:
default_per_thread_test_part_result_reporter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^      default_per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
default_result_printer	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_xml_generator	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
delay	src/rplidar_ros/sdk/src/arch/linux/timer.h	/^static inline void delay(_word_size_t ms){$/;"	f
delay	src/rplidar_ros/sdk/src/arch/macOS/timer.h	/^static inline void delay(_word_size_t ms){$/;"	f
delay	src/rplidar_ros/sdk/src/arch/win32/timer.h	39;"	d
deleteLink	src/doc/html/navtree.js	/^function deleteLink()$/;"	f
delta_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector delta_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
delta_gradient_history_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  ColMajorMatrix delta_gradient_history_;$/;"	m	class:ceres::internal::LowRankInverseHessian
delta_offset	ceres-solver/internal/ceres/parameter_block.h	/^  int delta_offset() const { return delta_offset_; }$/;"	f	class:ceres::internal::ParameterBlock
delta_offset_	ceres-solver/internal/ceres/parameter_block.h	/^  int32 delta_offset_;$/;"	m	class:ceres::internal::ParameterBlock
delta_x_dot_delta_gradient_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  Vector delta_x_dot_delta_gradient_;$/;"	m	class:ceres::internal::LowRankInverseHessian
delta_x_history_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  ColMajorMatrix delta_x_history_;$/;"	m	class:ceres::internal::LowRankInverseHessian
dense	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  Matrix dense;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
dense_ata	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^  Matrix dense_ata;$/;"	m	class:ceres::internal::BlockJacobiPreconditionerTest	file:
dense_linear_algebra_library_type	ceres-solver/include/ceres/solver.h	/^    DenseLinearAlgebraLibraryType dense_linear_algebra_library_type;$/;"	m	struct:ceres::Solver::Options
dense_linear_algebra_library_type	ceres-solver/include/ceres/solver.h	/^    DenseLinearAlgebraLibraryType dense_linear_algebra_library_type;$/;"	m	struct:ceres::Solver::Summary
dense_linear_algebra_library_type	ceres-solver/internal/ceres/linear_solver.h	/^    DenseLinearAlgebraLibraryType dense_linear_algebra_library_type;$/;"	m	struct:ceres::internal::LinearSolver::Options
density	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^    double density;$/;"	m	struct:ceres::internal::TripletSparseMatrix::RandomMatrixOptions
dep_include_paths_str	build/console/cmake/console-genmsg-context.py	/^dep_include_paths_str = "console;\/home\/ubuntu\/dji_beta\/auto_car\/src\/console\/msg;std_msgs;\/opt\/ros\/kinetic\/share\/std_msgs\/cmake\/..\/msg;geometry_msgs;\/opt\/ros\/kinetic\/share\/geometry_msgs\/cmake\/..\/msg"$/;"	v
dep_include_paths_str	build/logical_core/cmake/logical_core-genmsg-context.py	/^dep_include_paths_str = "move_base_msgs;\/opt\/ros\/kinetic\/share\/move_base_msgs\/cmake\/..\/msg;geometry_msgs;\/opt\/ros\/kinetic\/share\/geometry_msgs\/cmake\/..\/msg;actionlib_msgs;\/opt\/ros\/kinetic\/share\/actionlib_msgs\/cmake\/..\/msg;std_msgs;\/opt\/ros\/kinetic\/share\/std_msgs\/cmake\/..\/msg"$/;"	v
dep_include_paths_str	build/odometry/cmake/odometry-genmsg-context.py	/^dep_include_paths_str = "odometry;\/home\/ubuntu\/dji_beta\/auto_car\/src\/odometry\/msg"$/;"	v
dep_include_paths_str	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^dep_include_paths_str = "serial_comm;\/home\/ubuntu\/dji_beta\/auto_car\/src\/serial_comm\/msg;geometry_msgs;\/opt\/ros\/kinetic\/share\/geometry_msgs\/cmake\/..\/msg;std_msgs;\/opt\/ros\/kinetic\/share\/std_msgs\/cmake\/..\/msg"$/;"	v
dep_include_paths_str	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^dep_include_paths_str = "ctrl_serial_comm;\/home\/ubuntu\/dji_beta\/auto_car\/src\/serial_communication\/msg;geometry_msgs;\/opt\/ros\/kinetic\/share\/geometry_msgs\/cmake\/..\/msg;std_msgs;\/opt\/ros\/kinetic\/share\/std_msgs\/cmake\/..\/msg"$/;"	v
dep_include_paths_str	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^dep_include_paths_str = "vision_unit;\/home\/ubuntu\/dji_beta\/auto_car\/src\/vision_unit\/msg;move_base_msgs;\/opt\/ros\/kinetic\/share\/move_base_msgs\/cmake\/..\/msg;geometry_msgs;\/opt\/ros\/kinetic\/share\/geometry_msgs\/cmake\/..\/msg;actionlib_msgs;\/opt\/ros\/kinetic\/share\/actionlib_msgs\/cmake\/..\/msg;std_msgs;\/opt\/ros\/kinetic\/share\/std_msgs\/cmake\/..\/msg"$/;"	v
depart	ceres-solver/internal/ceres/gtest/gtest.h	/^  void depart() {$/;"	f	class:testing::internal::linked_ptr
dependencies_str	build/console/cmake/console-genmsg-context.py	/^dependencies_str = "std_msgs;geometry_msgs"$/;"	v
dependencies_str	build/logical_core/cmake/logical_core-genmsg-context.py	/^dependencies_str = "move_base_msgs;geometry_msgs"$/;"	v
dependencies_str	build/odometry/cmake/odometry-genmsg-context.py	/^dependencies_str = ""$/;"	v
dependencies_str	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^dependencies_str = "geometry_msgs"$/;"	v
dependencies_str	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^dependencies_str = "geometry_msgs"$/;"	v
dependencies_str	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^dependencies_str = "move_base_msgs;geometry_msgs"$/;"	v
deserialize	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  def deserialize(self, str):$/;"	f
deserialize	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  def deserialize(self, str):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
deserialize_numpy	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  def deserialize_numpy(self, str, numpy):$/;"	f
details	src/doc/html/classDBoW2_1_1BowVector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1FBrief.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1FClass.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1FeatureVector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1GeneralScoring.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1QueryResults.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1Result.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDUtils_1_1DException.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDUtils_1_1Random.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDUtils_1_1Timestamp.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classDVision_1_1BRIEF.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classFeatureExtractor.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classcamodocal_1_1CataCamera.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classcamodocal_1_1EquidistantCamera.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classcamodocal_1_1OCAMCamera.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classcv__bridge_1_1CvImage.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/classdemoDetector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/namespaceDBoW2.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/namespaceDLoopDetector.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/namespaceDUtils.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/namespaceDVision.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/structDLoopDetector_1_1DetectionResult.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
detect	src/vision_unit/src/detect_factory/armor_detect.cpp	/^bool armor_detecter::detect(const cv::Mat &image, bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
detect	src/vision_unit/src/detect_factory/rune_detect.cpp	/^void rune_detect::detect()$/;"	f	class:autocar::vision_mul::rune_detect
detect_factory	src/vision_unit/include/vision_unit/detect_factory/detect_factory.h	/^class detect_factory$/;"	c	namespace:autocar::vision_mul
detect_lights	src/vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<cv::RotatedRect> armor_detecter::detect_lights(bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
detected	devel/include/vision_unit/armor_msg.h	/^  _detected_type detected;$/;"	m	struct:vision_unit::armor_msg_
detected-val	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod detected-val ((m <armor_msg>))$/;"	f
detected_armor	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    bool detected_armor;$/;"	m	class:autocar::vision_mul::armor_detect_node
dev	src/serial_comm/include/comm_read.h	/^  std::string dev;$/;"	m	class:autocar::serial_mul::comm_read
dev	src/serial_comm/include/comm_write.h	/^  std::string dev;$/;"	m	class:autocar::serial_mul::comm_write
dev	src/serial_communication/src/commSend.cxx	/^string dev = "\/dev\/ttyTHS2"; \/\/ set as default$/;"	v
diagonal_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector diagonal_;  \/\/ sqrt(diag(J^T J))$/;"	m	class:ceres::internal::DoglegStrategy
diagonal_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  Vector diagonal_;   \/\/ diagonal_ =  diag(J'J)$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
diagonal_	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^  const double* diagonal_;$/;"	m	class:ceres::internal::RegularizationCheckingLinearSolver	file:
difference_type	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:ceres::internal::FixedArray
difference_type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
digits10	ceres-solver/include/ceres/jet.h	/^  static inline int digits10() { return NumTraits<T>::digits10(); }$/;"	f	struct:Eigen::NumTraits
dir_125e7f126f10d6d82b7727e2eff633b9	src/doc/html/dir_125e7f126f10d6d82b7727e2eff633b9.js	/^var dir_125e7f126f10d6d82b7727e2eff633b9 =$/;"	v
dir_178510db1be2a7db789ad3a16c560bb0	src/doc/html/dir_178510db1be2a7db789ad3a16c560bb0.js	/^var dir_178510db1be2a7db789ad3a16c560bb0 =$/;"	v
dir_1c86866f58725cbc8a8f650f634c1b21	src/doc/html/dir_1c86866f58725cbc8a8f650f634c1b21.js	/^var dir_1c86866f58725cbc8a8f650f634c1b21 =$/;"	v
dir_1ce5266766058a56db2573afb763b0aa	src/doc/html/dir_1ce5266766058a56db2573afb763b0aa.js	/^var dir_1ce5266766058a56db2573afb763b0aa =$/;"	v
dir_21bdf9efc55dbdf1c7a01a5eabaeccb8	src/doc/html/dir_21bdf9efc55dbdf1c7a01a5eabaeccb8.js	/^var dir_21bdf9efc55dbdf1c7a01a5eabaeccb8 =$/;"	v
dir_22f04675140458f12f752464d75b29ad	src/doc/html/dir_22f04675140458f12f752464d75b29ad.js	/^var dir_22f04675140458f12f752464d75b29ad =$/;"	v
dir_2bb129e7572810fca886dae68ff69a2d	src/doc/html/dir_2bb129e7572810fca886dae68ff69a2d.js	/^var dir_2bb129e7572810fca886dae68ff69a2d =$/;"	v
dir_2c95bba08f7f326697602ead8870d96e	src/doc/html/dir_2c95bba08f7f326697602ead8870d96e.js	/^var dir_2c95bba08f7f326697602ead8870d96e =$/;"	v
dir_2d88a95eaf792b93d8dec6cb3cf8eb68	src/doc/html/dir_2d88a95eaf792b93d8dec6cb3cf8eb68.js	/^var dir_2d88a95eaf792b93d8dec6cb3cf8eb68 =$/;"	v
dir_31eaaf881da50199d59a94e947ea09d5	src/doc/html/dir_31eaaf881da50199d59a94e947ea09d5.js	/^var dir_31eaaf881da50199d59a94e947ea09d5 =$/;"	v
dir_320fe6d286df73fc981311a902a07d31	src/doc/html/dir_320fe6d286df73fc981311a902a07d31.js	/^var dir_320fe6d286df73fc981311a902a07d31 =$/;"	v
dir_3774b78f742e86463f186103299b33c9	src/doc/html/dir_3774b78f742e86463f186103299b33c9.js	/^var dir_3774b78f742e86463f186103299b33c9 =$/;"	v
dir_39903b13293b03099f869299802630f2	src/doc/html/dir_39903b13293b03099f869299802630f2.js	/^var dir_39903b13293b03099f869299802630f2 =$/;"	v
dir_3cff172a548866d15f45a5d74df3690d	src/doc/html/dir_3cff172a548866d15f45a5d74df3690d.js	/^var dir_3cff172a548866d15f45a5d74df3690d =$/;"	v
dir_3d75f7bea507c05bdccef4eecb546379	src/doc/html/dir_3d75f7bea507c05bdccef4eecb546379.js	/^var dir_3d75f7bea507c05bdccef4eecb546379 =$/;"	v
dir_42cb5db3f120f5eca9d021e3f70e81f6	src/doc/html/dir_42cb5db3f120f5eca9d021e3f70e81f6.js	/^var dir_42cb5db3f120f5eca9d021e3f70e81f6 =$/;"	v
dir_42e0a74288423937a6d783277b641c4e	src/doc/html/dir_42e0a74288423937a6d783277b641c4e.js	/^var dir_42e0a74288423937a6d783277b641c4e =$/;"	v
dir_53ac1b8e7cb4cf6a35b6d485fd55775b	src/doc/html/dir_53ac1b8e7cb4cf6a35b6d485fd55775b.js	/^var dir_53ac1b8e7cb4cf6a35b6d485fd55775b =$/;"	v
dir_5feeefd5aff41c940a705f28e2f7b4d1	src/doc/html/dir_5feeefd5aff41c940a705f28e2f7b4d1.js	/^var dir_5feeefd5aff41c940a705f28e2f7b4d1 =$/;"	v
dir_632d0589b82df931c46f0fd2ca768715	src/doc/html/dir_632d0589b82df931c46f0fd2ca768715.js	/^var dir_632d0589b82df931c46f0fd2ca768715 =$/;"	v
dir_6b93e9efbe231040aa932a74170c7ed6	src/doc/html/dir_6b93e9efbe231040aa932a74170c7ed6.js	/^var dir_6b93e9efbe231040aa932a74170c7ed6 =$/;"	v
dir_6e85067a9f65d8721eb9d0ae7e3b8b02	src/doc/html/dir_6e85067a9f65d8721eb9d0ae7e3b8b02.js	/^var dir_6e85067a9f65d8721eb9d0ae7e3b8b02 =$/;"	v
dir_6f335e227b6f4587f8caa6f6971bdd1f	src/doc/html/dir_6f335e227b6f4587f8caa6f6971bdd1f.js	/^var dir_6f335e227b6f4587f8caa6f6971bdd1f =$/;"	v
dir_7538059cdcff22e7e3c1f1d8f09563f5	src/doc/html/dir_7538059cdcff22e7e3c1f1d8f09563f5.js	/^var dir_7538059cdcff22e7e3c1f1d8f09563f5 =$/;"	v
dir_76433691e77e9eb1884f75d25ab2ceb7	src/doc/html/dir_76433691e77e9eb1884f75d25ab2ceb7.js	/^var dir_76433691e77e9eb1884f75d25ab2ceb7 =$/;"	v
dir_78bd6ff603a4e7a886075eaa2bc7aa1d	src/doc/html/dir_78bd6ff603a4e7a886075eaa2bc7aa1d.js	/^var dir_78bd6ff603a4e7a886075eaa2bc7aa1d =$/;"	v
dir_7cef61e006ffab1102b624e0f68f12af	src/doc/html/dir_7cef61e006ffab1102b624e0f68f12af.js	/^var dir_7cef61e006ffab1102b624e0f68f12af =$/;"	v
dir_819ee5dbf222308ee69c59d4c1bb6efa	src/doc/html/dir_819ee5dbf222308ee69c59d4c1bb6efa.js	/^var dir_819ee5dbf222308ee69c59d4c1bb6efa =$/;"	v
dir_8adc25141e02ebb8b2a2682caaec5a6c	src/doc/html/dir_8adc25141e02ebb8b2a2682caaec5a6c.js	/^var dir_8adc25141e02ebb8b2a2682caaec5a6c =$/;"	v
dir_8fa1f859b2f210d40eee8c0b93403892	src/doc/html/dir_8fa1f859b2f210d40eee8c0b93403892.js	/^var dir_8fa1f859b2f210d40eee8c0b93403892 =$/;"	v
dir_941c1786eb1aa1d366208c95a3435d32	src/doc/html/dir_941c1786eb1aa1d366208c95a3435d32.js	/^var dir_941c1786eb1aa1d366208c95a3435d32 =$/;"	v
dir_97fcdfbdeedbfe8fea1533b76877713c	src/doc/html/dir_97fcdfbdeedbfe8fea1533b76877713c.js	/^var dir_97fcdfbdeedbfe8fea1533b76877713c =$/;"	v
dir_9b844149ba6d7058420c6a91bd5802cd	src/doc/html/dir_9b844149ba6d7058420c6a91bd5802cd.js	/^var dir_9b844149ba6d7058420c6a91bd5802cd =$/;"	v
dir_9cf2f5a20d4216a00ddbaafe1985cc3f	src/doc/html/dir_9cf2f5a20d4216a00ddbaafe1985cc3f.js	/^var dir_9cf2f5a20d4216a00ddbaafe1985cc3f =$/;"	v
dir_a46eddeb623ec0e49e82572f668574ce	src/doc/html/dir_a46eddeb623ec0e49e82572f668574ce.js	/^var dir_a46eddeb623ec0e49e82572f668574ce =$/;"	v
dir_b7013225dcc7d0a6522e73cde7f45cc1	src/doc/html/dir_b7013225dcc7d0a6522e73cde7f45cc1.js	/^var dir_b7013225dcc7d0a6522e73cde7f45cc1 =$/;"	v
dir_b96ec28c57991c70ca3fe794ec6dea2d	src/doc/html/dir_b96ec28c57991c70ca3fe794ec6dea2d.js	/^var dir_b96ec28c57991c70ca3fe794ec6dea2d =$/;"	v
dir_bb6dc18ce3effbc13de7245017d598a9	src/doc/html/dir_bb6dc18ce3effbc13de7245017d598a9.js	/^var dir_bb6dc18ce3effbc13de7245017d598a9 =$/;"	v
dir_bd6308583a59b667b7c3bf18085fc557	src/doc/html/dir_bd6308583a59b667b7c3bf18085fc557.js	/^var dir_bd6308583a59b667b7c3bf18085fc557 =$/;"	v
dir_bedba83ae136e8d2cdd7f7d78a788823	src/doc/html/dir_bedba83ae136e8d2cdd7f7d78a788823.js	/^var dir_bedba83ae136e8d2cdd7f7d78a788823 =$/;"	v
dir_c71ce13486d53e237b3d6327ea865ee8	src/doc/html/dir_c71ce13486d53e237b3d6327ea865ee8.js	/^var dir_c71ce13486d53e237b3d6327ea865ee8 =$/;"	v
dir_c85daa479f1bda18639ed32774ca9257	src/doc/html/dir_c85daa479f1bda18639ed32774ca9257.js	/^var dir_c85daa479f1bda18639ed32774ca9257 =$/;"	v
dir_cb499c4cc22744134db869a9eb142e51	src/doc/html/dir_cb499c4cc22744134db869a9eb142e51.js	/^var dir_cb499c4cc22744134db869a9eb142e51 =$/;"	v
dir_cf7c12eb188b066a47dd4501c72ce69e	src/doc/html/dir_cf7c12eb188b066a47dd4501c72ce69e.js	/^var dir_cf7c12eb188b066a47dd4501c72ce69e =$/;"	v
dir_d285ad54adf05f3c92ef90a6d99a8da9	src/doc/html/dir_d285ad54adf05f3c92ef90a6d99a8da9.js	/^var dir_d285ad54adf05f3c92ef90a6d99a8da9 =$/;"	v
dir_d77c21bb48471e8bb4b4c55b65f4558b	src/doc/html/dir_d77c21bb48471e8bb4b4c55b65f4558b.js	/^var dir_d77c21bb48471e8bb4b4c55b65f4558b =$/;"	v
dir_d9c295ee68a7ce9d9f516b0a75440cd9	src/doc/html/dir_d9c295ee68a7ce9d9f516b0a75440cd9.js	/^var dir_d9c295ee68a7ce9d9f516b0a75440cd9 =$/;"	v
dir_e2a8f84382fbd5fbf8d354e6600a5cc7	src/doc/html/dir_e2a8f84382fbd5fbf8d354e6600a5cc7.js	/^var dir_e2a8f84382fbd5fbf8d354e6600a5cc7 =$/;"	v
dir_e48b3836b4d643c4df50382a8cad09f0	src/doc/html/dir_e48b3836b4d643c4df50382a8cad09f0.js	/^var dir_e48b3836b4d643c4df50382a8cad09f0 =$/;"	v
dir_e8f682ed1d0bb9523fd3c2d0b01524b6	src/doc/html/dir_e8f682ed1d0bb9523fd3c2d0b01524b6.js	/^var dir_e8f682ed1d0bb9523fd3c2d0b01524b6 =$/;"	v
dir_fbf7e5f07368d25b39c492563af5539e	src/doc/html/dir_fbf7e5f07368d25b39c492563af5539e.js	/^var dir_fbf7e5f07368d25b39c492563af5539e =$/;"	v
direction_	ceres-solver/internal/ceres/line_search.h	/^  Vector direction_;$/;"	m	class:ceres::internal::LineSearchFunction
directional_derivative	ceres-solver/internal/ceres/line_search_minimizer.h	/^    double directional_derivative;$/;"	m	struct:ceres::internal::LineSearchMinimizer::State
disable_all_safety_checks	ceres-solver/include/ceres/problem.h	/^    bool disable_all_safety_checks;$/;"	m	struct:ceres::Problem::Options
disabled_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestCase::disabled_test_count() const {$/;"	f	class:testing::TestCase
disabled_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::disabled_test_count() const {$/;"	f	class:testing::UnitTest
disabled_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
disconnect	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^void RPlidarDriverSerialImpl::disconnect()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
dist	devel/include/vision_unit/transformed_scan.h	/^  _dist_type dist;$/;"	m	struct:vision_unit::transformed_scan_
dist-val	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod dist-val ((m <transformed_scan>))$/;"	f
dist_c	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    double dist_c[5] = {0.082613, 0.043275, 0.002486, -0.000823, 0.0};$/;"	m	class:autocar::vision_mul::armor_detect_node
dist_coeffs	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat dist_coeffs;$/;"	m	class:autocar::vision_mul::armor_detect_node
distance	src/vision_unit/src/detect_factory/image_utility.cpp	/^double distance(T x1, T y1, T x2, T y2)$/;"	f	namespace:autocar::vision_mul
distance	src/vision_unit/src/detect_factory/image_utility.cpp	/^double distance(const cv::Point_<T> &point1, const cv::Point_<T> &point2)$/;"	f	namespace:autocar::vision_mul
distance_angle_1	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   distance_angle_1; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
distance_angle_2	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   distance_angle_2; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
distance_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<DistanceType> distance_matcher_;$/;"	m	class:testing::internal::BeginEndDistanceIsMatcher::Impl
distance_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const DistanceMatcher distance_matcher_;$/;"	m	class:testing::internal::BeginEndDistanceIsMatcher
distance_q2	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16   distance_q2;$/;"	m	struct:_rplidar_response_measurement_node_t
dogleg_step_norm_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  double dogleg_step_norm_;$/;"	m	class:ceres::internal::DoglegStrategy
dogleg_type	ceres-solver/include/ceres/solver.h	/^    DoglegType dogleg_type;$/;"	m	struct:ceres::Solver::Options
dogleg_type	ceres-solver/include/ceres/solver.h	/^    DoglegType dogleg_type;$/;"	m	struct:ceres::Solver::Summary
dogleg_type	ceres-solver/internal/ceres/trust_region_strategy.h	/^    DoglegType dogleg_type;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Options
dogleg_type_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  DoglegType dogleg_type_;$/;"	m	class:ceres::internal::DoglegStrategy
down_cast	ceres-solver/internal/ceres/casts.h	/^inline To down_cast(From* f) {                   \/\/ so we only accept pointers$/;"	f	namespace:ceres
draw_circle	src/vision_unit/src/detect_factory/draw.cpp	/^void draw_circle(const cv::Mat &img, const cv::Point &center, int radius, const cv::Scalar &color, int thickness)$/;"	f
draw_rotated_rect	src/vision_unit/src/detect_factory/draw.cpp	/^void draw_rotated_rect(const cv::Mat &img, const cv::RotatedRect &rect, const cv::Scalar &color, int thickness)$/;"	f
draw_rotated_rects	src/vision_unit/src/detect_factory/draw.cpp	/^void draw_rotated_rects(const cv::Mat &img, const std::vector<cv::RotatedRect> &rects, const cv::Scalar &color, int thickness, bool tab, const cv::Scalar &text_color)$/;"	f
drive_mode	logical_core/src/logical_core.cpp	/^    AutoDrive drive_mode;$/;"	m	class:Brain	file:
dsm	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^  scoped_ptr<DenseSparseMatrix> dsm;$/;"	m	class:ceres::internal::DenseSparseMatrixTest	file:
dummy_	ceres-solver/internal/ceres/gtest/gtest.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	ceres-solver/internal/ceres/gtest/gtest.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
dummy_precision	ceres-solver/include/ceres/jet.h	/^  static typename ceres::Jet<T, N> dummy_precision() {$/;"	f	struct:Eigen::NumTraits
dump_filename_base	ceres-solver/internal/ceres/trust_region_strategy.h	/^    std::string dump_filename_base;$/;"	m	struct:ceres::internal::TrustRegionStrategy::PerSolveOptions
dump_format_type	ceres-solver/internal/ceres/trust_region_strategy.h	/^    DumpFormatType dump_format_type;$/;"	m	struct:ceres::internal::TrustRegionStrategy::PerSolveOptions
dynamic_cols_	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h	/^  std::vector<std::vector<int> > dynamic_cols_;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrix
dynamic_sparsity	ceres-solver/include/ceres/solver.h	/^    bool dynamic_sparsity;$/;"	m	struct:ceres::Solver::Options
dynamic_sparsity	ceres-solver/internal/ceres/evaluator.h	/^    bool dynamic_sparsity;$/;"	m	struct:ceres::internal::Evaluator::Options
dynamic_sparsity	ceres-solver/internal/ceres/evaluator_test.cc	/^  bool dynamic_sparsity;$/;"	m	struct:ceres::internal::EvaluatorTestOptions	file:
dynamic_sparsity	ceres-solver/internal/ceres/linear_solver.h	/^    bool dynamic_sparsity;$/;"	m	struct:ceres::internal::LinearSolver::Options
dynamic_values_	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h	/^  std::vector<std::vector<double> > dynamic_values_;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrix
e_block_size	ceres-solver/internal/ceres/linear_solver.h	/^    int e_block_size;$/;"	m	struct:ceres::internal::LinearSolver::Options
e_block_size	ceres-solver/internal/ceres/preconditioner.h	/^    int e_block_size;$/;"	m	struct:ceres::internal::Preconditioner::Options
edge_weights_	ceres-solver/internal/ceres/graph.h	/^  HashMap<std::pair<Vertex, Vertex>, double> edge_weights_;$/;"	m	class:ceres::internal::WeightedGraph
edges_	ceres-solver/internal/ceres/graph.h	/^  HashMap<Vertex, HashSet<Vertex> > edges_;$/;"	m	class:ceres::internal::Graph
edges_	ceres-solver/internal/ceres/graph.h	/^  HashMap<Vertex, HashSet<Vertex> > edges_;$/;"	m	class:ceres::internal::WeightedGraph
edit_distance	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^namespace edit_distance {$/;"	n	namespace:testing::internal	file:
edit_distance	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace edit_distance {$/;"	n	namespace:testing::internal
ei_abs	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_abs (const Jet<T, N>& x) { return fabs(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_abs2	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_abs2(const Jet<T, N>& x) { return x * x;          }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_atan	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_atan(const Jet<T, N>& x) { return atan(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_conj	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline const Jet<T, N>& ei_conj(const Jet<T, N>& x) { return x;              }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_cos	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_cos (const Jet<T, N>& x) { return cos(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_cosh	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_cosh(const Jet<T, N>& x) { return cosh(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_exp	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_exp (const Jet<T, N>& x) { return exp(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_imag	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_imag(const Jet<T, N>&  ) { return Jet<T, N>(0.0); }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_log	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_log (const Jet<T, N>& x) { return log(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_pow	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_pow (const Jet<T, N>& x, Jet<T, N> y) { return pow(x, y); }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_real	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline const Jet<T, N>& ei_real(const Jet<T, N>& x) { return x;              }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_sin	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_sin (const Jet<T, N>& x) { return sin(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_sinh	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_sinh(const Jet<T, N>& x) { return sinh(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_sqrt	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_sqrt(const Jet<T, N>& x) { return sqrt(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_tan	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_tan (const Jet<T, N>& x) { return tan(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_tanh	ceres-solver/include/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_tanh(const Jet<T, N>& x) { return tanh(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
elapsed_time	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::internal::UnitTestImpl
elapsed_time	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^internal::TimeInMillis UnitTest::elapsed_time() const {$/;"	f	class:testing::UnitTest
elapsed_time	ceres-solver/internal/ceres/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestCase
elapsed_time	ceres-solver/internal/ceres/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::internal::UnitTestImpl	file:
elapsed_time_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestCase
elapsed_time_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
element	ceres-solver/include/ceres/internal/fixed_array.h	/^    T element;$/;"	m	struct:ceres::internal::FixedArray::InnerContainer
element_to_group	ceres-solver/include/ceres/ordered_groups.h	/^  const std::map<T, int>& element_to_group() const {$/;"	f	class:ceres::OrderedGroups
element_to_group_	ceres-solver/include/ceres/ordered_groups.h	/^  std::map<T, int> element_to_group_;$/;"	m	class:ceres::OrderedGroups
element_type	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  typedef C element_type;$/;"	t	class:ceres::internal::scoped_array
element_type	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  typedef C element_type;$/;"	t	class:ceres::internal::scoped_ptr
element_type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T element_type;$/;"	t	class:testing::internal::linked_ptr
elimination_groups	ceres-solver/internal/ceres/linear_solver.h	/^    std::vector<int> elimination_groups;$/;"	m	struct:ceres::internal::LinearSolver::Options
elimination_groups	ceres-solver/internal/ceres/preconditioner.h	/^    std::vector<int> elimination_groups;$/;"	m	struct:ceres::internal::Preconditioner::Options
eliminator_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  scoped_ptr<SchurEliminatorBase> eliminator_;$/;"	m	class:ceres::internal::SchurComplementSolver
eliminator_	ceres-solver/internal/ceres/schur_jacobi_preconditioner.h	/^  scoped_ptr<SchurEliminatorBase> eliminator_;$/;"	m	class:ceres::internal::SchurJacobiPreconditioner
eliminator_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  scoped_ptr<SchurEliminatorBase> eliminator_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
enable_fast_removal	ceres-solver/include/ceres/problem.h	/^    bool enable_fast_removal;$/;"	m	struct:ceres::Problem::Options
end	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline const_iterator end() const { return &array_[size_].element; }$/;"	f	class:ceres::internal::FixedArray
end	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline iterator end() { return &array_[size_].element; }$/;"	f	class:ceres::internal::FixedArray
end	ceres-solver/internal/ceres/gmock/gmock.h	/^  const_iterator end() const { return expectations_.end(); }$/;"	f	class:testing::ExpectationSet
end	ceres-solver/internal/ceres/gtest/gtest.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	ceres-solver/internal/ceres/gtest/gtest.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end	src/serial_comm/include/comm_read.h	/^  uint8_t end;$/;"	m	struct:autocar::serial_mul::__anon50
end	src/serial_comm/include/comm_write.h	/^    uint8_t end;$/;"	m	struct:autocar::serial_mul::__anon49
end	src/serial_communication/src/commRecv.cxx	/^    uint8_t end;$/;"	m	struct:__anon48	file:
end	src/serial_communication/src/commSend.cxx	/^    uint8_t end;$/;"	m	struct:__anon47	file:
end10_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T10>::iterator end10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end1_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end2_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end3_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end4_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end5_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end6_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end7_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end8_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end9_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end9_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int end_;$/;"	m	struct:ceres::Grid1D
end_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_index_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
enum-members	src/doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"><\/a>$/;"	a
enum-members	src/doc/html/namespaceDLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"><\/a>$/;"	a
environ	build/catkin_generated/installspace/_setup_util.py	/^        environ = dict(os.environ)$/;"	v
environ	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^        environ = dict(os.environ)$/;"	v
environ	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^extern "C" char** environ;$/;"	m	namespace:testing::internal	file:
environ	devel/_setup_util.py	/^        environ = dict(os.environ)$/;"	v
environments	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::vector<Environment*>& environments() { return environments_; }$/;"	f	class:testing::internal::UnitTestImpl
environments_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::vector<Environment*> environments_;$/;"	m	class:testing::internal::UnitTestImpl	file:
epsilon	ceres-solver/include/ceres/jet.h	/^  static inline Real epsilon() {$/;"	f	struct:Eigen::NumTraits
errno_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const int errno_;$/;"	m	class:testing::internal::SetErrnoAndReturnAction
error	ceres-solver/internal/ceres/line_search.h	/^    std::string error;$/;"	m	struct:ceres::internal::LineSearch::Summary
error	ceres-solver/internal/ceres/preprocessor.h	/^  std::string error;$/;"	m	struct:ceres::internal::PreprocessedProblem
error_code	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  error_code;$/;"	m	struct:_rplidar_response_device_health_t
error_log	ceres-solver/include/ceres/gradient_checker.h	/^    std::string error_log;$/;"	m	struct:ceres::GradientChecker::ProbeResults
error_log	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^  const std::string& error_log() const { return error_log_; }$/;"	f	class:ceres::internal::GradientCheckingIterationCallback
error_log_	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^  std::string error_log_;$/;"	m	class:ceres::internal::GradientCheckingIterationCallback
eta	ceres-solver/include/ceres/iteration_callback.h	/^  double eta;$/;"	m	struct:ceres::IterationSummary
eta	ceres-solver/include/ceres/solver.h	/^    double eta;$/;"	m	struct:ceres::Solver::Options
eta	ceres-solver/internal/ceres/minimizer.h	/^    double eta;$/;"	m	struct:ceres::internal::Minimizer::Options
eta	ceres-solver/internal/ceres/trust_region_strategy.h	/^    double eta;$/;"	m	struct:ceres::internal::TrustRegionStrategy::PerSolveOptions
evaluate_options_	ceres-solver/internal/ceres/covariance_impl.h	/^  Problem::EvaluateOptions evaluate_options_;$/;"	m	class:ceres::internal::CovarianceImpl
evaluate_preparers_	ceres-solver/internal/ceres/program_evaluator.h	/^  scoped_array<EvaluatePreparer> evaluate_preparers_;$/;"	m	class:ceres::internal::ProgramEvaluator
evaluate_scratch_	ceres-solver/internal/ceres/program_evaluator.h	/^  scoped_array<EvaluateScratch> evaluate_scratch_;$/;"	m	class:ceres::internal::ProgramEvaluator
evaluation_point_	ceres-solver/internal/ceres/line_search.h	/^  Vector evaluation_point_;$/;"	m	class:ceres::internal::LineSearchFunction
evaluator	ceres-solver/internal/ceres/minimizer.h	/^    shared_ptr<Evaluator> evaluator;$/;"	m	struct:ceres::internal::Minimizer::Options
evaluator	ceres-solver/internal/ceres/preprocessor.h	/^  shared_ptr<Evaluator> evaluator;$/;"	m	struct:ceres::internal::PreprocessedProblem
evaluator_	ceres-solver/internal/ceres/line_search.h	/^  Evaluator* evaluator_;$/;"	m	class:ceres::internal::LineSearchFunction
evaluator_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Evaluator* evaluator_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
evaluator_options	ceres-solver/internal/ceres/preprocessor.h	/^  Evaluator::Options evaluator_options;$/;"	m	struct:ceres::internal::PreprocessedProblem
evaluator_options_	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	/^  Evaluator::Options evaluator_options_;$/;"	m	class:ceres::internal::CoordinateDescentMinimizer
event_	ceres-solver/internal/ceres/gtest/gtest.h	/^  AutoHandle event_;$/;"	m	class:std::tr1::Notification
event_handle_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  AutoHandle event_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
events_	ceres-solver/internal/ceres/wall_time.h	/^  std::string events_;$/;"	m	class:ceres::internal::EventLogger
examples	ceres-solver/examples/bal_problem.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/bal_problem.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/bundle_adjuster.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/denoising.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/fields_of_experts.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/fields_of_experts.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/more_garbow_hillstrom.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/nist.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/pgm_image.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/random.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/slam/common/read_g2o.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/slam/pose_graph_2d/angle_local_parameterization.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/slam/pose_graph_2d/normalize_angle.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/slam/pose_graph_2d/types.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d.cc	/^namespace examples {$/;"	n	namespace:ceres	file:
examples	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/slam/pose_graph_3d/types.h	/^namespace examples {$/;"	n	namespace:ceres
examples	ceres-solver/examples/snavely_reprojection_error.h	/^namespace examples {$/;"	n	namespace:ceres
exclude_patterns	ceres-solver/docs/source/conf.py	/^exclude_patterns = []$/;"	v
execution_summary_	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  ::ceres::internal::ExecutionSummary execution_summary_;$/;"	m	class:ceres::internal::GradientProblemEvaluator
execution_summary_	ceres-solver/internal/ceres/linear_solver.h	/^  ExecutionSummary execution_summary_;$/;"	m	class:ceres::internal::TypedLinearSolver
execution_summary_	ceres-solver/internal/ceres/program_evaluator.h	/^  ::ceres::internal::ExecutionSummary execution_summary_;$/;"	m	class:ceres::internal::ProgramEvaluator
exit_code_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
exp	ceres-solver/include/ceres/jet.h	/^Jet<T, N> exp(const Jet<T, N>& f) {$/;"	f	namespace:ceres
exp	ceres-solver/include/ceres/jet.h	/^inline double exp     (double x) { return std::exp(x);      }$/;"	f	namespace:ceres
expandNode	src/doc/html/navtree.js	/^function expandNode(o, node, imm, showRoot)$/;"	f
expect_eq_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const bool expect_eq_;$/;"	m	class:testing::internal::StrEqualityMatcher
expectation_base	ceres-solver/internal/ceres/gmock/gmock.h	/^  expectation_base() const {$/;"	f	class:testing::Expectation
expectation_base_	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::linked_ptr<internal::ExpectationBase> expectation_base_;$/;"	m	class:testing::Expectation
expectations_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Expectation::Set expectations_;$/;"	m	class:testing::ExpectationSet
expected_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const FloatType expected_;$/;"	m	class:testing::internal::FloatingEqMatcher::Impl
expected_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const FloatType expected_;$/;"	m	class:testing::internal::FloatingEqMatcher
expected_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const StlContainer expected_;$/;"	m	class:testing::internal::ContainerEqMatcher
expected_average_symmetric_distance	ceres-solver/examples/libmv_homography.cc	/^  double expected_average_symmetric_distance;$/;"	m	struct:__anon41::EstimateHomographyOptions	file:
expected_final_residuals_	ceres-solver/internal/ceres/test_util.h	/^  std::vector<double> expected_final_residuals_;$/;"	m	class:ceres::internal::SystemTest
expected_jacobian_x_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> expected_jacobian_x_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
expected_jacobian_x_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double> expected_jacobian_x_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
expected_jacobian_y_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> expected_jacobian_y_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
expected_jacobian_y_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double> expected_jacobian_y_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
expected_jacobian_z_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> expected_jacobian_z_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
expected_jacobian_z_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double> expected_jacobian_z_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
expected_jacobians_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<vector<double> > expected_jacobians_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
expected_num_nonzeros	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  int expected_num_nonzeros;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
expected_residuals_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> expected_residuals_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
expected_residuals_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> expected_residuals_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
expected_residuals_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double> expected_residuals_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
exponent_bits	ceres-solver/internal/ceres/gtest/gtest.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
exponential_residual	ceres-solver/examples/curve_fitting.c	/^int exponential_residual(void* user_data,$/;"	f
exponential_residual	ceres-solver/internal/ceres/c_api_test.cc	/^int exponential_residual(void* user_data,$/;"	f
express_sample_duration_us	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  express_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
extensions	ceres-solver/docs/source/conf.py	/^extensions = ['sphinx.ext.todo', 'sphinx.ext.mathjax', 'sphinx.ext.ifconfig']$/;"	v
extra_info_	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  string extra_info_;$/;"	m	class:ceres::internal::__anon8::GradientCheckingCostFunction	file:
extra_matcher	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<const ArgumentTuple&>& extra_matcher() const {$/;"	f	class:testing::internal::TypedExpectation
extra_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher<const ArgumentTuple&> extra_matcher_;$/;"	m	class:testing::internal::OnCallSpec
extra_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher<const ArgumentTuple&> extra_matcher_;$/;"	m	class:testing::internal::TypedExpectation
extra_matcher_specified_	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool extra_matcher_specified_;$/;"	m	class:testing::internal::ExpectationBase
f0	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f0_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T0 f0_;$/;"	m	class:std::tr1::tuple
f1	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T1 f1_;$/;"	m	class:std::tr1::tuple
f2	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T2 f2_;$/;"	m	class:std::tr1::tuple
f3	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T3 f3_;$/;"	m	class:std::tr1::tuple
f4	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T4 f4_;$/;"	m	class:std::tr1::tuple
f5	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T5 f5_;$/;"	m	class:std::tr1::tuple
f6	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T6 f6_;$/;"	m	class:std::tr1::tuple
f7	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T7 f7_;$/;"	m	class:std::tr1::tuple
f8	ceres-solver/internal/ceres/gtest/gtest.h	/^      GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2),$/;"	m	class:std::tr1::tuple
f8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T8 f8_;$/;"	m	class:std::tr1::tuple
f9_	ceres-solver/internal/ceres/gtest/gtest.h	/^      f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9) {}$/;"	f	class:std::tr1::tuple
f9_	ceres-solver/internal/ceres/gtest/gtest.h	/^      f9_(t.f9_) {}$/;"	f	class:std::tr1::tuple
f9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T9 f9_;$/;"	m	class:std::tr1::tuple
f_	ceres-solver/include/ceres/loss_function.h	/^  internal::scoped_ptr<const LossFunction> f_, g_;$/;"	m	class:ceres::ComposedLoss
f_block_size	ceres-solver/internal/ceres/linear_solver.h	/^    int f_block_size;$/;"	m	struct:ceres::internal::LinearSolver::Options
f_block_size	ceres-solver/internal/ceres/preconditioner.h	/^    int f_block_size;$/;"	m	struct:ceres::internal::Preconditioner::Options
factor_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  cholmod_factor* factor_;$/;"	m	class:ceres::internal::SparseSchurComplementSolver
factor_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  cholmod_factor* factor_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
factor_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  cholmod_factor* factor_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
factory_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const FactoryFunction factory_;$/;"	m	class:testing::DefaultValue::FactoryValueProducer
factory_	ceres-solver/internal/ceres/gtest/gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
failed	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool failed() const { return type_ != kSuccess; }$/;"	f	class:testing::TestPartResult
failed_test_case_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::failed_test_case_count() const {$/;"	f	class:testing::UnitTest
failed_test_case_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::failed_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failed_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestCase::failed_test_count() const {$/;"	f	class:testing::TestCase
failed_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }$/;"	f	class:testing::UnitTest
failed_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::failed_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failure_message	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
false_type	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef bool_constant<false> false_type;$/;"	t	namespace:std::tr1
fatally_failed	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
fd	src/serial_comm/include/comm_read.h	/^  int fd;$/;"	m	class:autocar::serial_mul::comm_read
fd	src/serial_comm/include/comm_write.h	/^  int fd;$/;"	m	class:autocar::serial_mul::comm_write
fd	src/serial_communication/src/commCtrl.h	/^static int fd;$/;"	v
fd	src/serial_communication/src/commSend.cxx	/^int fd;$/;"	v
fd_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const int fd_;  \/\/ A stream to capture.$/;"	m	class:testing::internal::CapturedStream	file:
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
features	ceres-solver/ceres-bin/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	ceres-solver/ceres-bin/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
field_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const FieldType Class::*field_;$/;"	m	class:testing::internal::FieldMatcher::Class
figure	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^figure = plot.figure()$/;"	v
file	ceres-solver/internal/ceres/gmock/gmock.h	/^  const char* file() const { return file_; }$/;"	f	class:testing::internal::ExpectationBase
file	ceres-solver/internal/ceres/gmock/gmock.h	/^  const char* file() const { return file_; }$/;"	f	class:testing::internal::UntypedOnCallSpecBase
file	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const char* file;$/;"	m	struct:testing::internal::TraceInfo	file:
file	ceres-solver/internal/ceres/gtest/gtest.h	/^      const char* file;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::InstantiationInfo
file	ceres-solver/internal/ceres/gtest/gtest.h	/^    const char* const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* file() const { return location_.file.c_str(); }$/;"	f	class:testing::TestInfo
file	ceres-solver/internal/ceres/gtest/gtest.h	/^  const std::string& file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
file	ceres-solver/internal/ceres/gtest/gtest.h	/^  string file;$/;"	m	struct:testing::internal::CodeLocation
file_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const char* file_;          \/\/ The file that contains the expectation.$/;"	m	class:testing::internal::ExpectationBase
file_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const char* file_;$/;"	m	class:testing::internal::UntypedOnCallSpecBase
file_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const char* const file_;$/;"	m	class:testing::internal::ExecDeathTest	file:
file_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const char* const file_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
file_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  std::string file_;$/;"	m	class:MessageLogger
file_descriptor_	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  int file_descriptor_;$/;"	m	class:__anon38::EndianAwareFileReader	file:
file_endian_type_	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  int file_endian_type_;$/;"	m	class:__anon38::EndianAwareFileReader	file:
file_name	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* file_name() const {$/;"	f	class:testing::TestPartResult
file_name_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string file_name_;$/;"	m	class:testing::TestPartResult
file_path	ceres-solver/internal/ceres/gmock/mock-log.h	/^    std::string file_path;$/;"	m	struct:testing::ScopedMockLog::MessageInfo
filename_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ::std::string filename_;$/;"	m	class:testing::internal::CapturedStream	file:
filename_only_	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  std::string filename_only_;$/;"	m	class:MessageLogger
files	src/doc/html/dir_178510db1be2a7db789ad3a16c560bb0.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_1ce5266766058a56db2573afb763b0aa.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_2c95bba08f7f326697602ead8870d96e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_320fe6d286df73fc981311a902a07d31.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_39903b13293b03099f869299802630f2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_3cff172a548866d15f45a5d74df3690d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_53ac1b8e7cb4cf6a35b6d485fd55775b.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_6b93e9efbe231040aa932a74170c7ed6.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_6e85067a9f65d8721eb9d0ae7e3b8b02.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_6f335e227b6f4587f8caa6f6971bdd1f.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_7538059cdcff22e7e3c1f1d8f09563f5.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_78bd6ff603a4e7a886075eaa2bc7aa1d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_7cef61e006ffab1102b624e0f68f12af.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_819ee5dbf222308ee69c59d4c1bb6efa.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_97fcdfbdeedbfe8fea1533b76877713c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_9b844149ba6d7058420c6a91bd5802cd.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_a46eddeb623ec0e49e82572f668574ce.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_b7013225dcc7d0a6522e73cde7f45cc1.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_b96ec28c57991c70ca3fe794ec6dea2d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_bedba83ae136e8d2cdd7f7d78a788823.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_c71ce13486d53e237b3d6327ea865ee8.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_cb499c4cc22744134db869a9eb142e51.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_cf7c12eb188b066a47dd4501c72ce69e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_d285ad54adf05f3c92ef90a6d99a8da9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_d77c21bb48471e8bb4b4c55b65f4558b.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_d9c295ee68a7ce9d9f516b0a75440cd9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_e2a8f84382fbd5fbf8d354e6600a5cc7.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_e48b3836b4d643c4df50382a8cad09f0.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/dir_fbf7e5f07368d25b39c492563af5539e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	src/doc/html/files.js	/^var files =$/;"	v
fillPatrolList	src/logical_core/src/logical_core.cpp	/^void LogicalCore::fillPatrolList()$/;"	f	class:LogicalCore
fill_patrol_list	logical_core/src/logical_core.cpp	/^    void fill_patrol_list()$/;"	f	class:Brain
filter_	ceres-solver/examples/fields_of_experts.h	/^  const std::vector<double>& filter_;$/;"	m	class:ceres::examples::FieldsOfExpertsCost
filter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string filter_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
filter_by_features	src/vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<armor_info> armor_detecter::filter_by_features(std::vector<armor_info> &armors)$/;"	f	class:autocar::vision_mul::armor_detecter
filter_lights	src/vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<cv::RotatedRect> armor_detecter::filter_lights(const std::vector<cv::RotatedRect> &lights, float thresh_max_angle, float thresh_min_area)$/;"	f	class:autocar::vision_mul::armor_detecter
filters_	ceres-solver/examples/fields_of_experts.h	/^  std::vector<std::vector<double> > filters_;$/;"	m	class:ceres::examples::FieldsOfExperts
final_cost	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double final_cost;$/;"	m	struct:ceres::GradientProblemSolver::Summary
final_cost	ceres-solver/include/ceres/solver.h	/^    double final_cost;$/;"	m	struct:ceres::Solver::Summary
final_parameters	ceres-solver/examples/nist.cc	/^  Matrix final_parameters() const  { return final_parameters_; }$/;"	f	class:ceres::examples::NISTProblem
final_parameters_	ceres-solver/examples/nist.cc	/^  Matrix final_parameters_;$/;"	m	class:ceres::examples::NISTProblem	file:
find_contours	src/vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<std::vector<cv::Point>> armor_detecter::find_contours(const cv::Mat &binary)$/;"	f	class:autocar::vision_mul::armor_detecter
find_env_hooks	build/catkin_generated/installspace/_setup_util.py	/^def find_env_hooks(environ, cmake_prefix_path):$/;"	f
find_env_hooks	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def find_env_hooks(environ, cmake_prefix_path):$/;"	f
find_env_hooks	devel/_setup_util.py	/^def find_env_hooks(environ, cmake_prefix_path):$/;"	f
finished_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool finished_;  \/\/ true iff we know that the thread function has finished.$/;"	m	class:std::tr1::ThreadWithParam
finite_diff_cost_function_	ceres-solver/include/ceres/gradient_checker.h	/^  internal::scoped_ptr<CostFunction> finite_diff_cost_function_;$/;"	m	class:ceres::GradientChecker
firmware_version	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  firmware_version;$/;"	m	struct:_rplidar_response_device_info_t
first_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const FirstMatcher first_matcher_;$/;"	m	class:testing::internal::PairMatcher
first_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<const FirstType&> first_matcher_;$/;"	m	class:testing::internal::PairMatcherImpl
first_used_file	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const char* first_used_file;$/;"	m	struct:testing::__anon29::MockObjectState	file:
first_used_line	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int first_used_line;$/;"	m	struct:testing::__anon29::MockObjectState	file:
first_used_test	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ::std::string first_used_test;$/;"	m	struct:testing::__anon29::MockObjectState	file:
first_used_test_case	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ::std::string first_used_test_case;$/;"	m	struct:testing::__anon29::MockObjectState	file:
fixed_cost	ceres-solver/include/ceres/solver.h	/^    double fixed_cost;$/;"	m	struct:ceres::Solver::Summary
fixed_cost	ceres-solver/internal/ceres/preprocessor.h	/^  double fixed_cost;$/;"	m	struct:ceres::internal::PreprocessedProblem
fixture_class_id_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const internal::TypeId fixture_class_id_;   \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
flag	src/serial_comm/include/comm_read.h	/^  uint8_t flag;$/;"	m	struct:autocar::serial_mul::__anon50
flag	src/serial_communication/src/commRecv.cxx	/^    uint8_t flag;$/;"	m	struct:__anon48	file:
flag_to_set_on_destruction_	ceres-solver/internal/ceres/gradient_problem_test.cc	/^  bool* flag_to_set_on_destruction_;$/;"	m	class:ceres::internal::QuadraticTestFunction	file:
floor	ceres-solver/include/ceres/jet.h	/^Jet<T, N> floor(const Jet<T, N>& f) {$/;"	f	namespace:ceres
floor	ceres-solver/include/ceres/jet.h	/^inline double floor   (double x) { return std::floor(x);    }$/;"	f	namespace:ceres
flush	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
flush	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
flush	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
for_each	src/vision_unit/src/detect_factory/image_utility.cpp	/^void for_each(const cv::RotatedRect &rect, const std::function<void(int, int)> &func, int xstep, int ystep)$/;"	f	namespace:autocar::vision_mul
for_each	src/vision_unit/src/detect_factory/image_utility.cpp	/^void for_each(const cv::RotatedRect &rect, float xmin, float ymin, float xmax, float ymax, const std::function<void(int, int)> &func, int xstep, int ystep)$/;"	f	namespace:autocar::vision_mul
forceUnlock	src/rplidar_ros/sdk/src/hal/locker.h	/^    void forceUnlock() {$/;"	f	class:rp::hal::AutoLocker
forward_back	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    bool forward_back = true;$/;"	m	class:autocar::vision_mul::armor_detect_node
forwarding_enabled	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool forwarding_enabled() const { return forwarding_enabled_; }$/;"	f	class:testing::internal::TestEventRepeater
forwarding_enabled_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool forwarding_enabled_;$/;"	m	class:testing::internal::TestEventRepeater	file:
fraction_bits	ceres-solver/internal/ceres/gtest/gtest.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
friends	src/doc/html/classDBoW2_1_1BowVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	src/doc/html/classDBoW2_1_1FeatureVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	src/doc/html/classDBoW2_1_1QueryResults.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	src/doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	src/doc/html/classcamodocal_1_1CataCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	src/doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	src/doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	src/doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
full_match_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const bool full_match_;$/;"	m	class:testing::internal::MatchesRegexMatcher
full_pattern_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:std::tr1::RE
full_regex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:std::tr1::RE
func-members	src/doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func_	ceres-solver/internal/ceres/gtest/gtest.h	/^    UserThreadFunc* const func_;$/;"	m	class:std::tr1::ThreadWithParam::RunnableImpl
func_	ceres-solver/internal/ceres/gtest/gtest.h	/^  UserThreadFunc* const func_;  \/\/ User-supplied thread function.$/;"	m	class:std::tr1::ThreadWithParam
function	ceres-solver/internal/ceres/line_search.h	/^    LineSearchFunction* function;$/;"	m	struct:ceres::internal::LineSearch::Options
function_	ceres-solver/include/ceres/gradient_checker.h	/^  const CostFunction* function_;$/;"	m	class:ceres::GradientChecker
function_	ceres-solver/include/ceres/gradient_problem.h	/^  internal::scoped_ptr<FirstOrderFunction> function_;$/;"	m	class:ceres::GradientProblem
function_	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  const CostFunction* function_;$/;"	m	class:ceres::internal::__anon8::GradientCheckingCostFunction	file:
function_impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  FunctionImpl function_impl_;$/;"	m	class:testing::internal::InvokeAction
function_impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  FunctionImpl function_impl_;$/;"	m	class:testing::internal::InvokeWithoutArgsAction
function_mocker_	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::FunctionMockerBase<F>* const function_mocker_;$/;"	m	class:testing::internal::MockSpec::internal
function_mockers	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  FunctionMockers function_mockers;  \/\/ All registered methods of the object.$/;"	m	struct:testing::__anon29::MockObjectState	file:
function_tolerance	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double function_tolerance;$/;"	m	struct:ceres::GradientProblemSolver::Options
function_tolerance	ceres-solver/include/ceres/solver.h	/^    double function_tolerance;$/;"	m	struct:ceres::Solver::Options
function_tolerance	ceres-solver/internal/ceres/line_search_direction.h	/^    double function_tolerance;$/;"	m	struct:ceres::internal::LineSearchDirection::Options
function_tolerance	ceres-solver/internal/ceres/minimizer.h	/^    double function_tolerance;$/;"	m	struct:ceres::internal::Minimizer::Options
function_tolerance_	ceres-solver/internal/ceres/line_search_direction.cc	/^  const double function_tolerance_;$/;"	m	class:ceres::internal::NonlinearConjugateGradient	file:
functions_dup	src/doc/html/functions_dup.js	/^var functions_dup =$/;"	v
functions_func	src/doc/html/functions_func.js	/^var functions_func =$/;"	v
functor_	ceres-solver/include/ceres/autodiff_cost_function.h	/^  internal::scoped_ptr<CostFunctor> functor_;$/;"	m	class:ceres::AutoDiffCostFunction
functor_	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  internal::scoped_ptr<Functor> functor_;$/;"	m	class:ceres::AutoDiffLocalParameterization
functor_	ceres-solver/include/ceres/dynamic_autodiff_cost_function.h	/^  internal::scoped_ptr<CostFunctor> functor_;$/;"	m	class:ceres::DynamicAutoDiffCostFunction
functor_	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  internal::scoped_ptr<const CostFunctor> functor_;$/;"	m	class:ceres::DynamicNumericDiffCostFunction
functor_	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^  internal::scoped_ptr<CostFunctor> functor_;$/;"	m	class:ceres::NumericDiffCostFunction
functor_	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  EasyFunctor functor_;$/;"	m	class:ceres::internal::EasyCostFunction
functor_	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  ExponentialFunctor functor_;$/;"	m	class:ceres::internal::ExponentialCostFunction
functor_	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  RandomizedFunctor functor_;$/;"	m	class:ceres::internal::RandomizedCostFunction
functor_	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  TranscendentalFunctor functor_;$/;"	m	class:ceres::internal::TranscendentalCostFunction
fusionLidarCam	src/vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^void VisionLidarFusion::fusionLidarCam(const vision_unit::transformed_scanConstPtr transformed_scan)$/;"	f	class:VisionLidarFusion
g10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator10 g10_;$/;"	m	class:testing::internal::CartesianProductHolder10
g10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T10> g10_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder10
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder2
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder3
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder4
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder5
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder6
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder7
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder8
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder9
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder10
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder2
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder3
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder4
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder5
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder6
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder7
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder8
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder9
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder10
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder3
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder4
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder5
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder6
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder7
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder8
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder9
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder10
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder4
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder5
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder6
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder7
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder8
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder9
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder10
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder5
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder6
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder7
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder8
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder9
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder10
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder6
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder7
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder8
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder9
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder10
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder7
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder8
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder9
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder10
g8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder8
g8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder9
g8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder10
g9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder9
g9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g_	ceres-solver/include/ceres/loss_function.h	/^  internal::scoped_ptr<const LossFunction> f_, g_;$/;"	m	class:ceres::ComposedLoss
g_argvs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^::std::vector<testing::internal::string> g_argvs;$/;"	m	namespace:testing::internal	file:
g_captured_stderr	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static CapturedStream* g_captured_stderr = NULL;$/;"	m	namespace:testing::internal	file:
g_captured_stdout	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static CapturedStream* g_captured_stdout = NULL;$/;"	m	namespace:testing::internal	file:
g_gmock_implicit_sequence	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTEST_API_ ThreadLocal<Sequence*> g_gmock_implicit_sequence;$/;"	m	namespace:testing::internal	file:
g_gmock_mutex	ceres-solver/internal/ceres/gmock/gmock.h	/^          GTEST_LOCK_EXCLUDED_(g_gmock_mutex) = 0;$/;"	m	class:testing::internal::UntypedFunctionMockerBase
g_gmock_mutex	ceres-solver/internal/ceres/gmock/gmock.h	/^      GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) = 0;$/;"	m	class:testing::internal::UntypedFunctionMockerBase
g_help_flag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool g_help_flag = false;$/;"	m	namespace:testing::internal	file:
g_in_fast_death_test_child	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static bool g_in_fast_death_test_child = false;$/;"	m	namespace:testing::internal	file:
g_injected_test_argvs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const ::std::vector<testing::internal::string>* g_injected_test_argvs =$/;"	m	namespace:testing::internal	file:
g_mock_object_registry	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^MockObjectRegistry g_mock_object_registry;$/;"	m	namespace:testing::__anon29	file:
g_uninteresting_call_reaction	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::map<const void*, internal::CallReaction> g_uninteresting_call_reaction;$/;"	m	namespace:testing::__anon29	file:
gauss_newton_step	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector gauss_newton_step() const { return gauss_newton_step_; }$/;"	f	class:ceres::internal::DoglegStrategy
gauss_newton_step_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector gauss_newton_step_;$/;"	m	class:ceres::internal::DoglegStrategy
gen_sample	src/vision_unit/src/detect_factory/labeler.cpp	/^void labeler::gen_sample(const cv::Mat &image, std::vector<armor_info> armors) {$/;"	f	class:autocar::vision_mul::labeler
generator	ceres-solver/internal/ceres/gtest/gtest.h	/^      GeneratorCreationFunc* generator;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::InstantiationInfo
genmsg_check_deps_script	build/console/cmake/console-genmsg-context.py	/^genmsg_check_deps_script = "\/opt\/ros\/kinetic\/share\/genmsg\/cmake\/..\/..\/..\/lib\/genmsg\/genmsg_check_deps.py"$/;"	v
genmsg_check_deps_script	build/logical_core/cmake/logical_core-genmsg-context.py	/^genmsg_check_deps_script = "\/opt\/ros\/kinetic\/share\/genmsg\/cmake\/..\/..\/..\/lib\/genmsg\/genmsg_check_deps.py"$/;"	v
genmsg_check_deps_script	build/odometry/cmake/odometry-genmsg-context.py	/^genmsg_check_deps_script = "\/opt\/ros\/kinetic\/share\/genmsg\/cmake\/..\/..\/..\/lib\/genmsg\/genmsg_check_deps.py"$/;"	v
genmsg_check_deps_script	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^genmsg_check_deps_script = "\/opt\/ros\/kinetic\/share\/genmsg\/cmake\/..\/..\/..\/lib\/genmsg\/genmsg_check_deps.py"$/;"	v
genmsg_check_deps_script	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^genmsg_check_deps_script = "\/opt\/ros\/kinetic\/share\/genmsg\/cmake\/..\/..\/..\/lib\/genmsg\/genmsg_check_deps.py"$/;"	v
genmsg_check_deps_script	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^genmsg_check_deps_script = "\/opt\/ros\/kinetic\/share\/genmsg\/cmake\/..\/..\/..\/lib\/genmsg\/genmsg_check_deps.py"$/;"	v
get	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline T* get() { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
get	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline const T* get() const { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
get	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline Type* get() {$/;"	f	class:ceres::internal::ManualConstructor
get	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline const Type* get() const  {$/;"	f	class:ceres::internal::ManualConstructor
get	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C* get() const { return ptr_; }$/;"	f	class:ceres::internal::scoped_ptr
get	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C* get() const {$/;"	f	class:ceres::internal::scoped_array
get	ceres-solver/internal/ceres/gtest/gtest.h	/^      const typename ::std::tr1::tuple_element<I, Tuple>::type>::type get($/;"	f	struct:testing::internal::TuplePolicy
get	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* get() const { return ptr_; }$/;"	f	struct:std::tr1::tuple_element
get	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* get() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
get	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:std::tr1::ThreadLocal
get	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T& get() const { return value_; }$/;"	f	class:std::tr1::ThreadLocal
get	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const typename ::std::tuple_element<I, Tuple>::type& get($/;"	f	struct:testing::internal::TuplePolicy
getCameraGoal	logical_core/src/logical_core.cpp	/^    void getCameraGoal(const move_base_msgs::MoveBaseGoal::ConstPtr &msg)$/;"	f	class:Brain
getCameraGoal	src/logical_core/src/logical_core.cpp	/^void LogicalCore::getCameraGoal(const move_base_msgs::MoveBaseGoal::ConstPtr &msg)$/;"	f	class:LogicalCore
getData	src/doc/html/navtree.js	/^function getData(varName)$/;"	f
getData	src/rplidar_ros/sdk/src/hal/thread.h	/^    void *getData() { return _data;}$/;"	f	class:rp::hal::Thread
getDeviceInfo	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getDeviceInfo(rplidar_response_device_info_t & info, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getFrequency	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getFrequency(bool inExpressMode, size_t count, float & frequency, bool & is4kmode)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getHDTimer	src/rplidar_ros/sdk/src/arch/win32/timer.cpp	/^_u32 getHDTimer()$/;"	f	namespace:rp::arch
getHandle	src/rplidar_ros/sdk/src/hal/thread.h	/^    _word_size_t getHandle(){ return _handle;}$/;"	f	class:rp::hal::Thread
getHealth	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getHealth(rplidar_response_device_health_t & healthinfo, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getLockHandle	src/rplidar_ros/sdk/src/hal/locker.h	/^    HANDLE getLockHandle()$/;"	f	class:rp::hal::Locker
getLockHandle	src/rplidar_ros/sdk/src/hal/locker.h	/^    pthread_mutex_t *getLockHandle()$/;"	f	class:rp::hal::Locker
getNode	src/doc/html/navtree.js	/^function getNode(o, po)$/;"	f
getPriority	src/rplidar_ros/sdk/src/arch/linux/thread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getPriority	src/rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getPriority	src/rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getRPLIDARDeviceInfo	src/rplidar_ros/src/node.cpp	/^bool getRPLIDARDeviceInfo(RPlidarDriver * drv)$/;"	f
getRcDegree	src/vision_unit/src/detect_factory/image_utility.cpp	/^double getRcDegree(const cv::RotatedRect &box)$/;"	f	namespace:autocar::vision_mul
getSampleDuration_uS	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::getSampleDuration_uS(rplidar_response_sample_rate_t & rateInfo, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
getScript	src/doc/html/navtree.js	/^function getScript(scriptName,func,show)$/;"	f
getTermBaudBitmap	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^_u32 raw_serial::getTermBaudBitmap(_u32 baud)$/;"	f	class:rp::arch::net::raw_serial
getTermBaudBitmap	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^_u32 raw_serial::getTermBaudBitmap(_u32 baud)$/;"	f	class:rp::arch::net::raw_serial
getXPos	src/doc/html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	src/doc/html/search/search.js	/^function getYPos(item)$/;"	f
get_armor	src/vision_unit/src/detect_factory/armor_detect.cpp	/^armor_info* armor_detecter::get_armor()$/;"	f	class:autocar::vision_mul::armor_detecter
get_armor	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^armor_info* armor_detect_node::get_armor()$/;"	f	class:autocar::vision_mul::armor_detect_node
get_camera_num	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^bool armor_detect_node::get_camera_num()$/;"	f	class:autocar::vision_mul::armor_detect_node
get_linear_parameters	src/vision_unit/src/detect_factory/image_utility.cpp	/^std::pair<double, double> get_linear_parameters(T point1, T point2)$/;"	f	namespace:autocar::vision_mul
get_linear_parameters	src/vision_unit/src/detect_factory/image_utility.cpp	/^std::pair<double, double> get_linear_parameters(T x1, T y1, T x2, T y2)$/;"	f	namespace:autocar::vision_mul
get_linear_x	src/vision_unit/src/detect_factory/image_utility.cpp	/^T get_linear_x(double coefficient, double intercept, T y)$/;"	f	namespace:autocar::vision_mul
get_linear_y	src/vision_unit/src/detect_factory/image_utility.cpp	/^T get_linear_y(double coefficient, double intercept, T x)$/;"	f	namespace:autocar::vision_mul
get_major_minor	ceres-solver/jni/assert_ndk_version.sh	/^function get_major_minor() {$/;"	f
get_rotate	src/tf_tree/src/tf_factory.cpp	/^tf::Quaternion tf_factory::get_rotate()$/;"	f	class:autocar::tf_mul::tf_factory
get_rotate_matrix	src/tf_tree/src/tf_param.cpp	/^cv::Mat tf_param::get_rotate_matrix()$/;"	f	class:autocar::tf_mul::tf_param
get_transf	src/tf_tree/src/tf_factory.cpp	/^tf::Vector3 tf_factory::get_transf()$/;"	f	class:autocar::tf_mul::tf_factory
get_transf_matrix	src/tf_tree/src/tf_param.cpp	/^cv::Mat tf_param::get_transf_matrix()$/;"	f	class:autocar::tf_mul::tf_param
getms	src/rplidar_ros/sdk/src/arch/linux/timer.h	57;"	d
getms	src/rplidar_ros/sdk/src/arch/macOS/timer.h	57;"	d
getms	src/rplidar_ros/sdk/src/arch/win32/timer.h	46;"	d
getus	src/rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^_u64 getus()$/;"	f	namespace:rp::arch
global_J_local	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  Matrix global_J_local;$/;"	m	class:ceres::internal::MatrixParameterization	file:
global_size_	ceres-solver/include/ceres/local_parameterization.h	/^  int global_size_;$/;"	m	class:ceres::ProductParameterization
global_test_part_result_reporter_mutex_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::Mutex global_test_part_result_reporter_mutex_;$/;"	m	class:testing::internal::UnitTestImpl	file:
global_test_part_result_repoter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestPartResultReporterInterface* global_test_part_result_repoter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
glowEffect	src/doc/html/navtree.js	/^function glowEffect(n,duration)$/;"	f
goal	logical_core/src/logical_core.cpp	/^    move_base_msgs::MoveBaseGoal goal;$/;"	m	class:Brain	file:
goal	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    move_base_msgs::MoveBaseGoal goal;$/;"	m	class:autocar::vision_mul::armor_detect_node
goal_	src/logical_core/src/logical_core.h	/^  move_base_msgs::MoveBaseGoal goal_;$/;"	m	class:LogicalCore
goal_pose	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    move_base_msgs::MoveBaseGoal goal_pose;$/;"	m	class:autocar::vision_mul::armor_detect_node
google	ceres-solver/internal/ceres/miniglog/glog/logging.cc	/^namespace google {$/;"	n	file:
google	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^namespace google {$/;"	n
gotoAnchor	src/doc/html/navtree.js	/^function gotoAnchor(anchor,aname,updateLocation)$/;"	f
gotoNode	src/doc/html/navtree.js	/^function gotoNode(o,subIndex,root,hash,relpath)$/;"	f
grabScanData	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::grabScanData(rplidar_response_measurement_node_t * nodebuffer, size_t & count, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
gradient	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector gradient() const { return gradient_; }$/;"	f	class:ceres::internal::DoglegStrategy
gradient	ceres-solver/internal/ceres/evaluator_test_utils.h	/^  const double gradient[50];$/;"	m	struct:ceres::internal::ExpectedEvaluation
gradient	ceres-solver/internal/ceres/line_search_minimizer.h	/^    Vector gradient;$/;"	m	struct:ceres::internal::LineSearchMinimizer::State
gradient	ceres-solver/internal/ceres/polynomial.h	/^  double gradient;   \/\/ gradient = f'(x)$/;"	m	struct:ceres::internal::FunctionSample
gradient	ceres-solver/internal/ceres/program_evaluator.h	/^    scoped_array<double> gradient;$/;"	m	struct:ceres::internal::ProgramEvaluator::EvaluateScratch
gradient_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector gradient_;$/;"	m	class:ceres::internal::DoglegStrategy
gradient_	ceres-solver/internal/ceres/line_search.h	/^  Vector gradient_;$/;"	m	class:ceres::internal::LineSearchFunction
gradient_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector gradient_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
gradient_check_numeric_derivative_relative_step_size	ceres-solver/include/ceres/solver.h	/^    double gradient_check_numeric_derivative_relative_step_size;$/;"	m	struct:ceres::Solver::Options
gradient_check_relative_precision	ceres-solver/include/ceres/solver.h	/^    double gradient_check_relative_precision;$/;"	m	struct:ceres::Solver::Options
gradient_checker_	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  GradientChecker gradient_checker_;$/;"	m	class:ceres::internal::__anon8::GradientCheckingCostFunction	file:
gradient_checking_problem	ceres-solver/internal/ceres/preprocessor.h	/^  scoped_ptr<ProblemImpl> gradient_checking_problem;$/;"	m	struct:ceres::internal::PreprocessedProblem
gradient_error_detected	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^  bool gradient_error_detected() const { return gradient_error_detected_; }$/;"	f	class:ceres::internal::GradientCheckingIterationCallback
gradient_error_detected_	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^  bool gradient_error_detected_;$/;"	m	class:ceres::internal::GradientCheckingIterationCallback
gradient_evaluation_time_in_seconds	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double gradient_evaluation_time_in_seconds;$/;"	m	struct:ceres::GradientProblemSolver::Summary
gradient_evaluation_time_in_seconds	ceres-solver/internal/ceres/line_search.h	/^    double gradient_evaluation_time_in_seconds;$/;"	m	struct:ceres::internal::LineSearch::Summary
gradient_is_valid	ceres-solver/internal/ceres/polynomial.h	/^  bool gradient_is_valid;$/;"	m	struct:ceres::internal::FunctionSample
gradient_max_norm	ceres-solver/include/ceres/iteration_callback.h	/^  double gradient_max_norm;$/;"	m	struct:ceres::IterationSummary
gradient_max_norm	ceres-solver/internal/ceres/line_search_minimizer.h	/^    double gradient_max_norm;$/;"	m	struct:ceres::internal::LineSearchMinimizer::State
gradient_norm	ceres-solver/include/ceres/iteration_callback.h	/^  double gradient_norm;$/;"	m	struct:ceres::IterationSummary
gradient_squared_norm	ceres-solver/internal/ceres/line_search_minimizer.h	/^    double gradient_squared_norm;$/;"	m	struct:ceres::internal::LineSearchMinimizer::State
gradient_tolerance	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double gradient_tolerance;$/;"	m	struct:ceres::GradientProblemSolver::Options
gradient_tolerance	ceres-solver/include/ceres/solver.h	/^    double gradient_tolerance;$/;"	m	struct:ceres::Solver::Options
gradient_tolerance	ceres-solver/internal/ceres/minimizer.h	/^    double gradient_tolerance;$/;"	m	struct:ceres::internal::Minimizer::Options
graph_	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^  const WeightedGraph<int>* graph_;$/;"	m	class:ceres::internal::CanonicalViewsClustering	file:
graph_	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^  WeightedGraph<int> graph_;$/;"	m	class:ceres::internal::CanonicalViewsTest	file:
graph_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const MatchMatrix* graph_;  \/\/ not owned$/;"	m	class:testing::internal::MaxBipartiteMatchState	file:
graph_	ceres-solver/internal/ceres/graph_algorithms.h	/^  const Graph<Vertex>& graph_;$/;"	m	class:ceres::internal::VertexDegreeLessThan
graph_	ceres-solver/internal/ceres/graph_algorithms.h	/^  const Graph<Vertex>& graph_;$/;"	m	class:ceres::internal::VertexTotalOrdering
grid_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const Grid& grid_;$/;"	m	class:ceres::BiCubicInterpolator
grid_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const Grid& grid_;$/;"	m	class:ceres::CubicInterpolator
group_to_elements	ceres-solver/include/ceres/ordered_groups.h	/^  const std::map<int, std::set<T> >& group_to_elements() const {$/;"	f	class:ceres::OrderedGroups
group_to_elements_	ceres-solver/include/ceres/ordered_groups.h	/^  std::map<int, std::set<T> > group_to_elements_;$/;"	m	class:ceres::OrderedGroups
gtest_flag_saver_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const internal::scoped_ptr< GTEST_FLAG_SAVER_ > gtest_flag_saver_;$/;"	m	class:testing::Test
gtest_internal	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace gtest_internal {$/;"	n	namespace:std::tr1
gtest_trace_stack	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const std::vector<TraceInfo>& gtest_trace_stack() const {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::vector<TraceInfo>& gtest_trace_stack() {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;$/;"	m	class:testing::internal::UnitTestImpl	file:
hal	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	src/rplidar_ros/sdk/src/arch/linux/thread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	src/rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	src/rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	src/rplidar_ros/sdk/src/hal/event.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	src/rplidar_ros/sdk/src/hal/locker.h	/^namespace rp{ namespace hal{ $/;"	n	namespace:rp
hal	src/rplidar_ros/sdk/src/hal/thread.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
handle_	ceres-solver/internal/ceres/gtest/gtest.h	/^  Handle handle_;$/;"	m	class:std::tr1::AutoHandle
hardware_version	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   hardware_version;$/;"	m	struct:_rplidar_response_device_info_t
has_diagonal_appended_	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^  bool has_diagonal_appended_;$/;"	m	class:ceres::internal::DenseSparseMatrix
has_diagonal_reserved_	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^  bool has_diagonal_reserved_;$/;"	m	class:ceres::internal::DenseSparseMatrix
has_edits	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool has_edits() const { return adds_ || removes_; }$/;"	f	class:testing::internal::edit_distance::__anon19::Hunk
has_new_fatal_failure	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_owner_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool has_owner_;$/;"	m	class:std::tr1::MutexBase
hashUrl	src/doc/html/navtree.js	/^function hashUrl()$/;"	f
hashValue	src/doc/html/navtree.js	/^function hashValue()$/;"	f
height	ceres-solver/examples/pgm_image.h	/^int PGMImage<Real>::height() const {$/;"	f	class:ceres::examples::PGMImage
height_	ceres-solver/examples/pgm_image.h	/^  int height_, width_;$/;"	m	class:ceres::examples::PGMImage
hierarchy	src/doc/html/hierarchy.js	/^var hierarchy =$/;"	v
highlightAnchor	src/doc/html/navtree.js	/^function highlightAnchor()$/;"	f
highlight_blue_or_red	src/vision_unit/src/detect_factory/armor_detect.cpp	/^cv::Mat armor_detecter::highlight_blue_or_red(const cv::Mat &image, bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
host_endian_type_	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  int host_endian_type_;$/;"	m	class:__anon38::EndianAwareFileReader	file:
host_name_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    const string host_name_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter	file:
html_dir	ceres-solver/scripts/make_docs.py	/^html_dir   = build_root + '\/html'$/;"	v
html_domain_indices	ceres-solver/docs/source/conf.py	/^html_domain_indices = True$/;"	v
html_show_copyright	ceres-solver/docs/source/conf.py	/^html_show_copyright = True$/;"	v
html_show_sourcelink	ceres-solver/docs/source/conf.py	/^html_show_sourcelink = False$/;"	v
html_show_sphinx	ceres-solver/docs/source/conf.py	/^html_show_sphinx = False$/;"	v
html_split_index	ceres-solver/docs/source/conf.py	/^html_split_index = False$/;"	v
html_theme	ceres-solver/docs/source/conf.py	/^html_theme = 'sphinx_rtd_theme'$/;"	v
html_theme_path	ceres-solver/docs/source/conf.py	/^html_theme_path = ["_themes",]$/;"	v
html_theme_path	ceres-solver/docs/source/conf.py	/^html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]$/;"	v
html_title	ceres-solver/docs/source/conf.py	/^html_title = "Ceres Solver"$/;"	v
html_use_index	ceres-solver/docs/source/conf.py	/^html_use_index = True$/;"	v
html_use_smartypants	ceres-solver/docs/source/conf.py	/^html_use_smartypants = True$/;"	v
htmlhelp_basename	ceres-solver/docs/source/conf.py	/^htmlhelp_basename = 'CeresSolverdoc'$/;"	v
hunk_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
hunk_adds_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
hunk_removes_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
id_begin	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  int id_begin;$/;"	m	struct:ceres::examples::Constraint2d
id_begin	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  int id_begin;$/;"	m	struct:ceres::examples::Constraint3d
id_end	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  int id_end;$/;"	m	struct:ceres::examples::Constraint2d
id_end	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  int id_end;$/;"	m	struct:ceres::examples::Constraint3d
identity_	ceres-solver/internal/ceres/casts.h	/^struct identity_ {$/;"	s	namespace:ceres
idleState	src/logical_core/src/mission_mode.cpp	/^void MissionMode::idleState()$/;"	f	class:MissionMode
idleState	src/logical_core/src/patrol_mode.cpp	/^void PatrolMode::idleState()$/;"	f	class:PatrolMode
idleState	src/logical_core/src/point_mode.cpp	/^void PointMode::idleState()$/;"	f	class:PointMode
idleState	src/logical_core/src/shooting_mode.cpp	/^void ShootingMode::idleState()$/;"	f	class:ShootingMode
ids_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  IdMap ids_;$/;"	m	class:testing::internal::edit_distance::__anon18::InternalStrings	file:
if_detected_armor	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^bool armor_detect_node::if_detected_armor()$/;"	f	class:autocar::vision_mul::armor_detect_node
if_less_equal	src/vision_unit/include/vision_unit/detect_factory/image_utility.h	9;"	d
if_more_equal	src/vision_unit/include/vision_unit/detect_factory/image_utility.h	10;"	d
if_more_swap	src/vision_unit/include/vision_unit/detect_factory/image_utility.h	11;"	d
image	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  int image;$/;"	m	struct:__anon38::EuclideanCamera	file:
image	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  int image;$/;"	m	struct:__anon38::Marker	file:
img_dir	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^        std::string img_dir;$/;"	m	class:autocar::vision_mul::labeler
img_p	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    std::vector<cv::Point2f> img_p;$/;"	m	class:autocar::vision_mul::armor_detect_node
img_points	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat img_points;$/;"	m	class:autocar::vision_mul::armor_detect_node
immediate_prerequisites_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ExpectationSet immediate_prerequisites_;$/;"	m	class:testing::internal::ExpectationBase
impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Impl& impl() const { return impl_; }$/;"	f	class:testing::PolymorphicMatcher
impl	ceres-solver/internal/ceres/gtest/gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	ceres-solver/internal/ceres/gtest/gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl_	ceres-solver/include/ceres/covariance.h	/^  internal::scoped_ptr<internal::CovarianceImpl> impl_;$/;"	m	class:ceres::Covariance
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^    Impl impl_;$/;"	m	class:testing::PolymorphicAction::MonomorphicImpl
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Impl impl_;$/;"	m	class:testing::PolymorphicMatcher::MonomorphicImpl
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ::testing::internal::linked_ptr<const MatcherInterface<T> > impl_;$/;"	m	class:testing::internal::MatcherBase
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Impl impl_;$/;"	m	class:testing::PolymorphicAction
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Impl impl_;$/;"	m	class:testing::PolymorphicMatcher
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const internal::linked_ptr<ActionInterface<F2> > impl_;$/;"	m	class:testing::internal::ActionAdaptor
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::linked_ptr<ActionInterface<F> > impl_;$/;"	m	class:testing::Action
impl_	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::linked_ptr<const CardinalityInterface> impl_;$/;"	m	class:testing::Cardinality
impl_	ceres-solver/internal/ceres/gtest/gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	ceres-solver/internal/ceres/gtest/gtest.h	/^  linked_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	ceres-solver/internal/ceres/gtest/gtest.h	/^  scoped_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
implicit_cast	ceres-solver/internal/ceres/casts.h	/^inline To implicit_cast(typename identity_<From>::type const &f) {$/;"	f	namespace:ceres
implicit_cast	ceres-solver/internal/ceres/casts.h	/^inline To implicit_cast(typename identity_<To>::type to) {$/;"	f	namespace:ceres
imshowd	src/vision_unit/src/detect_factory/draw.cpp	/^void imshowd(const cv::String &winname, const cv::Mat &img)$/;"	f
increase_threshold_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double increase_threshold_;$/;"	m	class:ceres::internal::DoglegStrategy
increment_death_test_count	ceres-solver/internal/ceres/gtest/gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	ceres-solver/internal/ceres/gtest/gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
independent_set_offsets_	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	/^  std::vector<int> independent_set_offsets_;$/;"	m	class:ceres::internal::CoordinateDescentMinimizer
index	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  int index;$/;"	m	struct:ceres::internal::__anon34::ProductTerm	file:
index	ceres-solver/internal/ceres/gtest/gtest.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
index	ceres-solver/internal/ceres/gtest/gtest.h	/^  size_t index;$/;"	m	struct:testing::TestParamInfo
index	ceres-solver/internal/ceres/parameter_block.h	/^  int index() const { return index_; }$/;"	f	class:ceres::internal::ParameterBlock
index	ceres-solver/internal/ceres/residual_block.h	/^  int index() const { return index_; }$/;"	f	class:ceres::internal::ResidualBlock
index_	ceres-solver/internal/ceres/gtest/gtest.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
index_	ceres-solver/internal/ceres/gtest/gtest.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
index_	ceres-solver/internal/ceres/parameter_block.h	/^  int32 index_;$/;"	m	class:ceres::internal::ParameterBlock
index_	ceres-solver/internal/ceres/residual_block.h	/^  int32 index_;$/;"	m	class:ceres::internal::ResidualBlock
indices_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  std::list<int> indices_;$/;"	m	class:ceres::internal::LowRankInverseHessian
info_arch	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
information	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  Eigen::Matrix3d information;$/;"	m	struct:ceres::examples::Constraint2d
information	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  Eigen::Matrix<double, 6, 6> information;$/;"	m	struct:ceres::examples::Constraint3d
inherited	src/doc/html/classautocar_1_1serial__mul_1_1serial__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classautocar_1_1tf__mul_1_1tf__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classautocar_1_1vision__mul_1_1vision__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1CataCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	src/doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
init	src/rplidar_ros/sdk/src/hal/locker.h	/^    void    init()$/;"	f	class:rp::hal::Locker
initNavTree	src/doc/html/navtree.js	/^function initNavTree(toroot,relpath)$/;"	f
initResizable	src/doc/html/resize.js	/^function initResizable()$/;"	f
init_data	src/console/src/console.cpp	/^void init_data()$/;"	f
init_search	src/doc/html/search/search.js	/^function init_search()$/;"	f
init_yaw	src/serial_comm/include/comm_read.h	/^  int16_t init_yaw;$/;"	m	class:autocar::serial_mul::comm_read
initial_cost	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double initial_cost;$/;"	m	struct:ceres::GradientProblemSolver::Summary
initial_cost	ceres-solver/include/ceres/solver.h	/^    double initial_cost;$/;"	m	struct:ceres::Solver::Summary
initial_evaluator_jacobian_time_in_seconds	ceres-solver/internal/ceres/line_search.h	/^  double initial_evaluator_jacobian_time_in_seconds;$/;"	m	class:ceres::internal::LineSearchFunction
initial_evaluator_residual_time_in_seconds	ceres-solver/internal/ceres/line_search.h	/^  double initial_evaluator_residual_time_in_seconds;$/;"	m	class:ceres::internal::LineSearchFunction
initial_parameters	ceres-solver/examples/nist.cc	/^  Matrix initial_parameters(int start) const { return initial_parameters_.row(start); }  \/\/ NOLINT$/;"	f	class:ceres::examples::NISTProblem
initial_parameters_	ceres-solver/examples/nist.cc	/^  Matrix initial_parameters_;$/;"	m	class:ceres::examples::NISTProblem	file:
initial_radius	ceres-solver/internal/ceres/trust_region_strategy.h	/^    double initial_radius;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Options
initial_trust_region_radius	ceres-solver/include/ceres/solver.h	/^    double initial_trust_region_radius;$/;"	m	struct:ceres::Solver::Options
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem14::initial_x[] = {-3.0, -1.0, -3.0, -1.0};$/;"	m	class:ceres::examples::TestProblem14	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem18::initial_x[] = {1.0, 2.0, 1.0, 1.0, 1.0, 1.0};$/;"	m	class:ceres::examples::TestProblem18	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem10::initial_x[] = {0.02, 4000, 250};$/;"	m	class:ceres::examples::TestProblem10	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem11::initial_x[] = {5.0, 2.5, 0.15};$/;"	m	class:ceres::examples::TestProblem11	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem12::initial_x[] = {0.0, 10.0, 20.0};$/;"	m	class:ceres::examples::TestProblem12	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem13::initial_x[] = {3.0, -1.0, 0.0, 1.0};$/;"	m	class:ceres::examples::TestProblem13	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem15::initial_x[] = {0.25, 0.39, 0.415, 0.39};$/;"	m	class:ceres::examples::TestProblem15	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem16::initial_x[] = {25.0, 5.0, -5.0, -1.0};$/;"	m	class:ceres::examples::TestProblem16	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem17::initial_x[] = {0.5, 1.5, -1.0, 0.01, 0.02};$/;"	m	class:ceres::examples::TestProblem17	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem19::initial_x[] = {1.3, 0.65, 0.65, 0.7, 0.6,$/;"	m	class:ceres::examples::TestProblem19	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem1::initial_x[] = {-1.2, 1.0};$/;"	m	class:ceres::examples::TestProblem1	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem2::initial_x[] = {0.5, -2.0};$/;"	m	class:ceres::examples::TestProblem2	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem3::initial_x[] = {0.0, 1.0};$/;"	m	class:ceres::examples::TestProblem3	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem4::initial_x[] = {1.0, 1.0};$/;"	m	class:ceres::examples::TestProblem4	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem5::initial_x[] = {1.0, 1.0};$/;"	m	class:ceres::examples::TestProblem5	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem6::initial_x[] = {1.0, 1.0};$/;"	m	class:ceres::examples::TestProblem6	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem7::initial_x[] = {-1.0, 0.0, 0.0};$/;"	m	class:ceres::examples::TestProblem7	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem8::initial_x[] = {1.0, 1.0, 1.0};$/;"	m	class:ceres::examples::TestProblem8	file:
initial_x	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem9::initial_x[] = {0.4, 1.0, 0.0};$/;"	m	class:ceres::examples::TestProblem9	file:
initialized_	ceres-solver/internal/ceres/line_search_direction.cc	/^  bool initialized_;$/;"	m	class:ceres::internal::BFGS	file:
inline_space_	ceres-solver/include/ceres/internal/fixed_array.h	/^  ManualConstructor<InnerContainer> inline_space_[kInlineElements];$/;"	m	class:ceres::internal::FixedArray
inner_iteration_minimizer	ceres-solver/internal/ceres/minimizer.h	/^    shared_ptr<CoordinateDescentMinimizer> inner_iteration_minimizer;$/;"	m	struct:ceres::internal::Minimizer::Options
inner_iteration_minimizer	ceres-solver/internal/ceres/preprocessor.h	/^  shared_ptr<CoordinateDescentMinimizer> inner_iteration_minimizer;$/;"	m	struct:ceres::internal::PreprocessedProblem
inner_iteration_ordering	ceres-solver/include/ceres/solver.h	/^    shared_ptr<ParameterBlockOrdering> inner_iteration_ordering;$/;"	m	struct:ceres::Solver::Options
inner_iteration_ordering_given	ceres-solver/include/ceres/solver.h	/^    std::vector<int> inner_iteration_ordering_given;$/;"	m	struct:ceres::Solver::Summary
inner_iteration_ordering_used	ceres-solver/include/ceres/solver.h	/^    std::vector<int> inner_iteration_ordering_used;$/;"	m	struct:ceres::Solver::Summary
inner_iteration_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double inner_iteration_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
inner_iteration_tolerance	ceres-solver/include/ceres/solver.h	/^    double inner_iteration_tolerance;$/;"	m	struct:ceres::Solver::Options
inner_iteration_tolerance	ceres-solver/internal/ceres/minimizer.h	/^    double inner_iteration_tolerance;$/;"	m	struct:ceres::internal::Minimizer::Options
inner_iteration_x_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector inner_iteration_x_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
inner_iterations_are_enabled_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  bool inner_iterations_are_enabled_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
inner_iterations_given	ceres-solver/include/ceres/solver.h	/^    bool inner_iterations_given;$/;"	m	struct:ceres::Solver::Summary
inner_iterations_used	ceres-solver/include/ceres/solver.h	/^    bool inner_iterations_used;$/;"	m	struct:ceres::Solver::Summary
inner_iterations_were_useful_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  bool inner_iterations_were_useful_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
inner_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const InnerMatcher inner_matcher_;$/;"	m	class:testing::internal::ArgsMatcher
inner_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const M inner_matcher_;$/;"	m	class:testing::internal::ContainsMatcher
inner_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const M inner_matcher_;$/;"	m	class:testing::internal::EachMatcher
inner_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<const Element&> inner_matcher_;$/;"	m	class:testing::internal::QuantifierMatcherImpl
inner_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<const KeyType&> inner_matcher_;$/;"	m	class:testing::internal::KeyMatcherImpl
inner_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const MonomorphicInnerMatcher inner_matcher_;$/;"	m	class:testing::internal::ArgsMatcherImpl
instantiations_	ceres-solver/internal/ceres/gtest/gtest.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
int16_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef __int16           int16_t;$/;"	t
int32	ceres-solver/include/ceres/types.h	/^typedef int   int32;$/;"	t	namespace:ceres
int32	ceres-solver/internal/ceres/integral_types.h	/^typedef Integer<32>::type int32;$/;"	t	namespace:ceres::internal
int32_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef __int32           int32_t;$/;"	t
int64	ceres-solver/internal/ceres/integral_types.h	/^typedef Integer<64>::type int64;$/;"	t	namespace:ceres::internal
int64_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef __int64           int64_t;$/;"	t
int8	ceres-solver/internal/ceres/integral_types.h	/^typedef Integer< 8>::type int8;$/;"	t	namespace:ceres::internal
int8_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef signed   char     int8_t;$/;"	t
intercept_mode_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const InterceptMode intercept_mode_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
internal	ceres-solver/include/ceres/covariance.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/include/ceres/internal/autodiff.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/include/ceres/internal/fixed_array.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/include/ceres/internal/manual_constructor.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/include/ceres/internal/numeric_diff.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/include/ceres/internal/scoped_ptr.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/include/ceres/internal/variadic_evaluate.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/include/ceres/problem.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/array_utils.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/array_utils.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/array_utils_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/autodiff_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/blas.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/blas.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_evaluate_preparer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_evaluate_preparer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_jacobi_preconditioner.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_jacobian_writer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_jacobian_writer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_random_access_dense_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_random_access_dense_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_random_access_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_random_access_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_random_access_sparse_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_sparse_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/block_sparse_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_structure.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/block_structure.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/c_api_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/callbacks.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/callbacks.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/canonical_views_clustering.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/cgnr_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/cgnr_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/collections_port.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/compressed_row_jacobian_writer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/conjugate_gradients_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/conjugate_gradients_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/corrector.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/corrector.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/corrector_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/covariance_impl.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/covariance_impl.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/covariance_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/cxsparse.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/cxsparse.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dense_normal_cholesky_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dense_normal_cholesky_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dense_qr_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dense_qr_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/detect_structure.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/detect_structure.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/detect_structure_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dogleg_strategy.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dogleg_strategy.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dynamic_compressed_row_finalizer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/evaluator.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/evaluator.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/evaluator_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/evaluator_test_utils.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/evaluator_test_utils.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/execution_summary.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/file.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/file.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_2.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_2_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_6.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_9.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_3_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_8.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_9.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_4_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_2_d_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_2.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_4_4_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/partitioned_matrix_view_d_d_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_2.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_2_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_6.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_9.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_3_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_8.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_9.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_4_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_2_d_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_2.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_3.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_4.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_4_4_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/generated/schur_eliminator_d_d_d.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/gmock/gmock.h	/^namespace internal {$/;"	n	namespace:testing
internal	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	ceres-solver/internal/ceres/gradient_checker_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/gradient_problem_solver_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/gradient_problem_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/graph.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/graph_algorithms.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/graph_algorithms_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/graph_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal	ceres-solver/internal/ceres/householder_vector.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/householder_vector_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/implicit_schur_complement.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/integral_types.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/invert_psd_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/is_close.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/is_close.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/is_close_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/iterative_schur_complement_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/jet_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/lapack.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/lapack.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/line_search.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/line_search.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/line_search_direction.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/line_search_direction.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/line_search_minimizer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/line_search_minimizer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/line_search_minimizer_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/line_search_preprocessor.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/line_search_preprocessor.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/line_search_preprocessor_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/linear_least_squares_problems.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/linear_operator.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/linear_operator.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/linear_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/linear_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/local_parameterization_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/loss_function_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/low_rank_inverse_hessian.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/minimizer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/minimizer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/minimizer_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/mutex.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/normal_prior_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/ordered_groups_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/parameter_block.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/parameter_block_ordering.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/parameter_block_ordering.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/parameter_block_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/partitioned_matrix_view.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/polynomial.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/polynomial.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/polynomial_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/preconditioner.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/preconditioner.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/preprocessor.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/preprocessor.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/problem_impl.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/problem_impl.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/problem_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/program.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/program.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/program_evaluator.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/program_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/reorder_program.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/reorder_program.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/reorder_program_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/residual_block.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/residual_block.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/residual_block_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/residual_block_utils.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/residual_block_utils.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/residual_block_utils_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/rotation_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/schur_complement_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/schur_complement_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/schur_eliminator.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/schur_eliminator.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/schur_jacobi_preconditioner.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/schur_templates.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/schur_templates.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/scratch_evaluate_preparer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/scratch_evaluate_preparer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/single_linkage_clustering.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/single_linkage_clustering.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/single_linkage_clustering_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/small_blas.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/small_blas_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/solver_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/solver_utils.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/solver_utils.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/sparse_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/sparse_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/split.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/split.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/stringprintf.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/stringprintf.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/suitesparse.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/suitesparse.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/symmetric_linear_solver_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/system_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/test_util.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/test_util.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/triplet_sparse_matrix_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/trust_region_minimizer.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/trust_region_preprocessor.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/trust_region_step_evaluator.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/trust_region_strategy.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/trust_region_strategy.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/visibility.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/visibility.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^namespace internal {$/;"	n	namespace:ceres
internal	ceres-solver/internal/ceres/visibility_based_preconditioner_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/visibility_test.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/wall_time.cc	/^namespace internal {$/;"	n	namespace:ceres	file:
internal	ceres-solver/internal/ceres/wall_time.h	/^namespace internal {$/;"	n	namespace:ceres
internal2	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^namespace internal2 {$/;"	n	namespace:testing	file:
internal2	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace internal2 {$/;"	n	namespace:testing
internal_run_death_test_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string internal_run_death_test_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
internal_run_death_test_flag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {$/;"	f	class:testing::internal::UnitTestImpl
internal_run_death_test_flag_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::scoped_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;$/;"	m	class:testing::internal::UnitTestImpl	file:
interpolation_type	ceres-solver/internal/ceres/line_search.h	/^    LineSearchInterpolationType interpolation_type;$/;"	m	struct:ceres::internal::LineSearch::Options
interpolator_	ceres-solver/examples/sampled_function/sampled_function.cc	/^  const CubicInterpolator<Grid1D<double> >& interpolator_;$/;"	m	struct:InterpolatedCostFunctor	file:
inverse_hessian_	ceres-solver/internal/ceres/line_search_direction.cc	/^  Matrix inverse_hessian_;$/;"	m	class:ceres::internal::BFGS	file:
invoke_argument	ceres-solver/internal/ceres/gmock/gmock.h	/^namespace invoke_argument {$/;"	n	namespace:testing::internal
isConnected	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^bool RPlidarDriverSerialImpl::isConnected()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
isOpened	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    virtual bool isOpened()$/;"	f	class:rp::hal::serial_rxtx
isOpened	src/serial_communication/src/commCtrl.h	/^static int isOpened = 0;$/;"	v
is_computed_	ceres-solver/internal/ceres/covariance_impl.h	/^  bool is_computed_;$/;"	m	class:ceres::internal::CovarianceImpl
is_constant_	ceres-solver/internal/ceres/parameter_block.h	/^  bool is_constant_;$/;"	m	class:ceres::internal::ParameterBlock
is_constrained	ceres-solver/include/ceres/solver.h	/^    bool is_constrained;$/;"	m	struct:ceres::Solver::Summary
is_constrained	ceres-solver/internal/ceres/minimizer.h	/^    bool is_constrained;$/;"	m	struct:ceres::internal::Minimizer::Options
is_disabled_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool is_disabled_;                \/\/ True iff this test is disabled$/;"	m	class:testing::TestInfo
is_nan	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_not_silent_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  bool is_not_silent_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
is_pointer	ceres-solver/internal/ceres/gtest/gtest.h	/^struct is_pointer : public false_type {};$/;"	s	namespace:std::tr1
is_pointer	ceres-solver/internal/ceres/gtest/gtest.h	/^struct is_pointer<T*> : public true_type {};$/;"	s	namespace:std::tr1
is_positive_definite_	ceres-solver/internal/ceres/line_search_direction.cc	/^  bool is_positive_definite_;$/;"	m	class:ceres::internal::BFGS	file:
is_positive_definite_	ceres-solver/internal/ceres/line_search_direction.cc	/^  bool is_positive_definite_;$/;"	m	class:ceres::internal::LBFGS	file:
is_reference	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct is_reference : public false_type {};$/;"	s	namespace:testing::internal
is_reference	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct is_reference<T&> : public true_type {};$/;"	s	namespace:testing::internal
is_reportable	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool is_reportable() const {$/;"	f	class:testing::TestInfo
is_safe_	ceres-solver/internal/ceres/mutex.h	/^  volatile bool is_safe_;$/;"	m	class:ceres::internal::Mutex
is_silent	ceres-solver/internal/ceres/line_search.h	/^    bool is_silent;$/;"	m	struct:ceres::internal::LineSearch::Options
is_silent	ceres-solver/internal/ceres/minimizer.h	/^    bool is_silent;$/;"	m	struct:ceres::internal::Minimizer::Options
is_valid_	ceres-solver/internal/ceres/covariance_impl.h	/^  bool is_valid_;$/;"	m	class:ceres::internal::CovarianceImpl
is_valid_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool is_valid_;$/;"	m	class:std::tr1::RE
iteration	ceres-solver/include/ceres/iteration_callback.h	/^  int32 iteration;$/;"	m	struct:ceres::IterationSummary
iteration_start_time_in_secs_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double iteration_start_time_in_secs_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
iteration_summary_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  IterationSummary iteration_summary_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
iteration_time_in_seconds	ceres-solver/include/ceres/iteration_callback.h	/^  double iteration_time_in_seconds;$/;"	m	struct:ceres::IterationSummary
iterations	ceres-solver/include/ceres/gradient_problem_solver.h	/^    std::vector<IterationSummary> iterations;$/;"	m	struct:ceres::GradientProblemSolver::Summary
iterations	ceres-solver/include/ceres/solver.h	/^    std::vector<IterationSummary> iterations;$/;"	m	struct:ceres::Solver::Summary
iterator	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef T* iterator;$/;"	t	class:ceres::internal::FixedArray
iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iterator_	ceres-solver/internal/ceres/gtest/gtest.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
jacobi_scaling	ceres-solver/include/ceres/solver.h	/^    bool jacobi_scaling;$/;"	m	struct:ceres::Solver::Options
jacobi_scaling	ceres-solver/internal/ceres/minimizer.h	/^    bool jacobi_scaling;$/;"	m	struct:ceres::internal::Minimizer::Options
jacobian	ceres-solver/internal/ceres/evaluator_test_utils.h	/^  const double jacobian[200];$/;"	m	struct:ceres::internal::ExpectedEvaluation
jacobian	ceres-solver/internal/ceres/minimizer.h	/^    shared_ptr<SparseMatrix> jacobian;$/;"	m	struct:ceres::internal::Minimizer::Options
jacobian1_	ceres-solver/internal/ceres/covariance_test.cc	/^  vector<double> jacobian1_;$/;"	m	class:ceres::internal::BinaryCostFunction	file:
jacobian2_	ceres-solver/internal/ceres/covariance_test.cc	/^  vector<double> jacobian2_;$/;"	m	class:ceres::internal::BinaryCostFunction	file:
jacobian_	ceres-solver/internal/ceres/covariance_test.cc	/^  vector<double> jacobian_;$/;"	m	class:ceres::internal::UnaryCostFunction	file:
jacobian_	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^  scoped_ptr<DenseSparseMatrix> jacobian_;$/;"	m	class:ceres::internal::__anon36::Fixture	file:
jacobian_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  SparseMatrix* jacobian_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
jacobian_block_ptrs	ceres-solver/internal/ceres/program_evaluator.h	/^    scoped_array<double*> jacobian_block_ptrs;$/;"	m	struct:ceres::internal::ProgramEvaluator::EvaluateScratch
jacobian_evaluation_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double jacobian_evaluation_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
jacobian_layout_	ceres-solver/internal/ceres/block_evaluate_preparer.h	/^  int const* const* jacobian_layout_;$/;"	m	class:ceres::internal::BlockEvaluatePreparer
jacobian_layout_	ceres-solver/internal/ceres/block_jacobian_writer.h	/^  std::vector<int*> jacobian_layout_;$/;"	m	class:ceres::internal::BlockJacobianWriter
jacobian_layout_storage_	ceres-solver/internal/ceres/block_jacobian_writer.h	/^  std::vector<int> jacobian_layout_storage_;$/;"	m	class:ceres::internal::BlockJacobianWriter
jacobian_offsets_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  std::map<int, Matrix> jacobian_offsets_;$/;"	m	class:ceres::internal::LinearCostFunction	file:
jacobian_scaling_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector jacobian_scaling_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
jacobian_scratch_	ceres-solver/internal/ceres/scratch_evaluate_preparer.h	/^  scoped_array<double> jacobian_scratch_;$/;"	m	class:ceres::internal::ScratchEvaluatePreparer
jacobian_vect_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<vector<double> > jacobian_vect_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
jacobian_vect_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<vector<double> > jacobian_vect_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
jacobian_vect_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<vector<double> > jacobian_vect_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
jacobian_writer_	ceres-solver/internal/ceres/program_evaluator.h	/^  JacobianWriter jacobian_writer_;$/;"	m	class:ceres::internal::ProgramEvaluator
jacobians	ceres-solver/include/ceres/gradient_checker.h	/^    std::vector<Matrix> jacobians;$/;"	m	struct:ceres::GradientChecker::ProbeResults
join	src/rplidar_ros/sdk/src/arch/linux/thread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
join	src/rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
join	src/rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
join_new	ceres-solver/internal/ceres/gtest/gtest.h	/^  void join_new() {$/;"	f	class:testing::internal::linked_ptr_internal
kAdd	ceres-solver/internal/ceres/gtest/gtest.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kAfter	ceres-solver/internal/ceres/gmock/gmock.h	/^    kAfter,$/;"	e	enum:testing::internal::ExpectationBase::Clause
kAlignOrNot	ceres-solver/include/ceres/jet.h	/^  static constexpr int kAlignOrNot =$/;"	m	struct:ceres::Jet
kAlignment	ceres-solver/include/ceres/jet.h	/^  static constexpr size_t kAlignment = kAlignOrNot == Eigen::AutoAlign$/;"	m	struct:ceres::Jet
kAllow	ceres-solver/internal/ceres/gmock/gmock.h	/^  kAllow,$/;"	e	enum:testing::internal::CallReaction
kAlsoRunDisabledTestsFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kAlsoRunDisabledTestsFlag[] = "also_run_disabled_tests";$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparator	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kAlternatePathSeparator = '\/';$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparatorString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kAlternatePathSeparatorString[] = "\/";$/;"	m	namespace:testing::internal	file:
kAsIs	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  kAsIs,$/;"	e	enum:testing::internal::CharFormat	file:
kAutomaticOrdering	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^const bool kAutomaticOrdering = true;$/;"	m	namespace:ceres::internal	file:
kAutomaticOrdering	ceres-solver/internal/ceres/system_test.cc	/^const bool kAutomaticOrdering = true;$/;"	m	namespace:ceres::internal	file:
kBigEndian	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  static const long int kBigEndian = 0x00010203ul;$/;"	m	class:__anon38::EndianAwareFileReader	file:
kBitCount	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBool	ceres-solver/internal/ceres/gmock/gmock.h	/^  kBool, kInteger, kFloatingPoint, kOther$/;"	e	enum:testing::internal::TypeKind
kBreakOnFailureFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kBreakOnFailureFlag[] = "break_on_failure";$/;"	m	namespace:testing::internal	file:
kCanonicalViewsSimilarityPenaltyWeight	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^static const double kCanonicalViewsSimilarityPenaltyWeight = 0.0;$/;"	m	namespace:ceres::internal	file:
kCanonicalViewsSizePenaltyWeight	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^static const double kCanonicalViewsSizePenaltyWeight = 3.0;$/;"	m	namespace:ceres::internal	file:
kCatchExceptionsFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kCatchExceptionsFlag[] = "catch_exceptions";$/;"	m	namespace:testing::internal	file:
kCheckTypeIsNotConstOrAReference	ceres-solver/internal/ceres/gtest/gtest.h	/^    kCheckTypeIsNotConstOrAReference = StaticAssertTypeEqHelper<$/;"	e	enum:testing::internal::NativeArray::__anon35
kColorEncodedHelpMessage	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kColorEncodedHelpMessage[] =$/;"	m	namespace:testing::internal	file:
kColorFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kColorFlag[] = "color";$/;"	m	namespace:testing::internal	file:
kConvertibleToInteger	ceres-solver/internal/ceres/gtest/gtest.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kCurrentDirectoryString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kCurrentDirectoryString[] = ".\\\\";$/;"	m	namespace:testing::internal	file:
kCurrentDirectoryString	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kCurrentDirectoryString[] = "\\\\";$/;"	m	namespace:testing::internal	file:
kDeathTestCaseFilter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDeathTestCaseFilter[] = "*DeathTest:*DeathTest\/*";$/;"	m	namespace:testing	file:
kDeathTestInternalError	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDeathTestInternalError = 'I';$/;"	m	namespace:testing::internal	file:
kDeathTestLived	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDeathTestLived = 'L';$/;"	m	namespace:testing::internal	file:
kDeathTestReturned	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDeathTestReturned = 'R';$/;"	m	namespace:testing::internal	file:
kDeathTestStyleFlag	ceres-solver/internal/ceres/gtest/gtest.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestThrew	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDeathTestThrew = 'T';$/;"	m	namespace:testing::internal	file:
kDeathTestUseFork	ceres-solver/internal/ceres/gtest/gtest.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kDefault	ceres-solver/internal/ceres/gmock/gmock.h	/^  kDefault = kWarn  \/\/ By default, warn about uninteresting calls.$/;"	e	enum:testing::internal::CallReaction
kDefaultDeathTestStyle	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDefaultDeathTestStyle[] = "fast";$/;"	m	namespace:testing	file:
kDefaultOutputFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDefaultOutputFile[] = "test_detail.xml";$/;"	m	namespace:testing	file:
kDisableTestFilter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kDisableTestFilter[] = "DISABLED_*:*\/DISABLED_*";$/;"	m	namespace:testing	file:
kDoubleMax	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double kDoubleMax = std::numeric_limits<double>::max();$/;"	m	namespace:ceres::examples	file:
kDynamic	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	e	enum:std::tr1::Mutex::MutexType
kE	ceres-solver/internal/ceres/jet_test.cc	/^const double kE = 2.71828182845904523536;$/;"	m	namespace:ceres::internal	file:
kElidedFramesMarker	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static const char* const kElidedFramesMarker;$/;"	m	class:testing::internal::OsStackTraceGetterInterface	file:
kElidedFramesMarker	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* const OsStackTraceGetterInterface::kElidedFramesMarker =$/;"	m	class:testing::internal::OsStackTraceGetterInterface	file:
kEpsilon	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^const double kEpsilon = std::numeric_limits<double>::epsilon();$/;"	m	namespace:ceres::internal::__anon36	file:
kEpsilon	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^const double kEpsilon = 1e-14;$/;"	m	namespace:ceres::internal	file:
kEpsilon	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^const double kEpsilon = 1e-14;$/;"	m	namespace:ceres::internal	file:
kEpsilon	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^const double kEpsilon = 1e-14;$/;"	m	namespace:ceres::internal	file:
kEpsilon	ceres-solver/internal/ceres/polynomial_test.cc	/^const double kEpsilon = 1e-13;$/;"	m	namespace:ceres::internal::__anon7	file:
kEpsilonLoose	ceres-solver/internal/ceres/polynomial_test.cc	/^const double kEpsilonLoose = 1e-9;$/;"	m	namespace:ceres::internal::__anon7	file:
kErrorMessageNumericPrecision	ceres-solver/internal/ceres/line_search.cc	/^const int kErrorMessageNumericPrecision = 8;$/;"	m	namespace:ceres::internal::__anon9	file:
kErrorVerbosity	ceres-solver/internal/ceres/gmock/gmock.h	/^const char kErrorVerbosity[] = "error";$/;"	m	namespace:testing::internal
kExponentBitCount	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFail	ceres-solver/internal/ceres/gmock/gmock.h	/^  kFail,$/;"	e	enum:testing::internal::CallReaction
kFatalFailure	ceres-solver/internal/ceres/gtest/gtest.h	/^    kFatalFailure      \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFilterFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kFilterFlag[] = "filter";$/;"	m	namespace:testing::internal	file:
kFlagfileFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kFlagfileFlag[] = "flagfile";$/;"	m	namespace:testing::internal	file:
kFloatingPoint	ceres-solver/internal/ceres/gmock/gmock.h	/^  kBool, kInteger, kFloatingPoint, kOther$/;"	e	enum:testing::internal::TypeKind
kFractionBitCount	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kFullRank	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^static const bool kFullRank = true;$/;"	m	namespace:ceres::internal	file:
kHalfSqrt2	ceres-solver/internal/ceres/rotation_test.cc	/^const double kHalfSqrt2 = 0.707106781186547524401;$/;"	m	namespace:ceres::internal	file:
kHexEscape	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  kHexEscape,$/;"	e	enum:testing::internal::CharFormat	file:
kImpossibleValue	ceres-solver/include/ceres/types.h	/^const double kImpossibleValue = 1e302;$/;"	m	namespace:ceres
kInSequence	ceres-solver/internal/ceres/gmock/gmock.h	/^    kInSequence,$/;"	e	enum:testing::internal::ExpectationBase::Clause
kInfo	ceres-solver/internal/ceres/gmock/gmock.h	/^  kInfo = 0,$/;"	e	enum:testing::internal::LogSeverity
kInfoVerbosity	ceres-solver/internal/ceres/gmock/gmock.h	/^const char kInfoVerbosity[] = "info";$/;"	m	namespace:testing::internal
kInlineElements	ceres-solver/include/ceres/internal/fixed_array.h	/^  static const size_type kInlineElements = S2;$/;"	m	class:ceres::internal::FixedArray
kInteger	ceres-solver/internal/ceres/gmock/gmock.h	/^  kBool, kInteger, kFloatingPoint, kOther$/;"	e	enum:testing::internal::TypeKind
kInternalRunDeathTestFlag	ceres-solver/internal/ceres/gtest/gtest.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kInvalidFileAttributes	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const DWORD kInvalidFileAttributes = 0xffffffff;$/;"	m	namespace:testing::internal	file:
kLBFGSSecantConditionHessianUpdateTolerance	ceres-solver/internal/ceres/low_rank_inverse_hessian.cc	/^const double kLBFGSSecantConditionHessianUpdateTolerance = 1e-14;$/;"	m	namespace:ceres::internal	file:
kListTestsFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kListTestsFlag[] = "list_tests";$/;"	m	namespace:testing::internal	file:
kLittleEndian	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  static const long int kLittleEndian = 0x03020100ul;$/;"	m	class:__anon38::EndianAwareFileReader	file:
kLooseTolerance	ceres-solver/internal/ceres/rotation_test.cc	/^static double const kLooseTolerance = 1e-9;$/;"	m	namespace:ceres::internal	file:
kMatch	ceres-solver/internal/ceres/gtest/gtest.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kMaxAlignBytes	ceres-solver/include/ceres/internal/port.h	/^static constexpr size_t kMaxAlignBytes =$/;"	m	namespace:ceres::port_constants
kMaxBiggestInt	ceres-solver/internal/ceres/gtest/gtest.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:std::tr1
kMaxCodePoint1	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint2	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint3	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint4	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxMu	ceres-solver/internal/ceres/dogleg_strategy.cc	/^const double kMaxMu = 1.0;$/;"	m	namespace:ceres::internal::__anon2	file:
kMaxRandomSeed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const int kMaxRandomSeed = 99999;$/;"	m	namespace:testing::internal	file:
kMaxRange	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxRowBlocks	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  const int64 kMaxRowBlocks;$/;"	m	class:ceres::internal::BlockRandomAccessSparseMatrix
kMaxStackTraceDepth	ceres-solver/internal/ceres/gtest/gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kMinMu	ceres-solver/internal/ceres/dogleg_strategy.cc	/^const double kMinMu = 1e-8;$/;"	m	namespace:ceres::internal::__anon2	file:
kNoiseFactor	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^static const double kNoiseFactor = 0.01;$/;"	m	namespace:ceres::internal
kNonFatalFailure	ceres-solver/internal/ceres/gtest/gtest.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kNone	ceres-solver/internal/ceres/gmock/gmock.h	/^    kNone,$/;"	e	enum:testing::internal::ExpectationBase::Clause
kNone	ceres-solver/internal/ceres/gmock/gmock.h	/^    kNone,$/;"	e	enum:testing::internal::UntypedOnCallSpecBase::Clause
kNumColSamples	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  static const int kNumColSamples = 100;$/;"	m	class:ceres::internal::BiCubicInterpolatorTest	file:
kNumCols	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  static const int kNumCols = 10;$/;"	m	class:ceres::internal::BiCubicInterpolatorTest	file:
kNumObservations	ceres-solver/examples/curve_fitting.cc	/^const int kNumObservations = 67;$/;"	v
kNumObservations	ceres-solver/examples/robust_curve_fitting.cc	/^const int kNumObservations = 67;$/;"	v
kNumRowSamples	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  static const int kNumRowSamples = 100;$/;"	m	class:ceres::internal::BiCubicInterpolatorTest	file:
kNumRows	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  static const int kNumRows = 10;$/;"	m	class:ceres::internal::BiCubicInterpolatorTest	file:
kNumSamples	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  static const int kNumSamples = 10;$/;"	m	class:ceres::internal::CubicInterpolatorTest	file:
kNumTestSamples	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  static const int kNumTestSamples = 100;$/;"	m	class:ceres::internal::CubicInterpolatorTest	file:
kNumTrials	ceres-solver/internal/ceres/rotation_test.cc	/^static const int kNumTrials = 10000;$/;"	m	namespace:ceres::internal	file:
kOther	ceres-solver/internal/ceres/gmock/gmock.h	/^  kBool, kInteger, kFloatingPoint, kOther$/;"	e	enum:testing::internal::TypeKind
kOtherType	ceres-solver/internal/ceres/gtest/gtest.h	/^  kOtherType              \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kOutputFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kOutputFlag[] = "output";$/;"	m	namespace:testing::internal	file:
kPathSeparator	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kPathSeparator = '\\\\';$/;"	m	namespace:testing::internal	file:
kPi	ceres-solver/examples/nist.cc	/^const double kPi = 3.141592653589793238462643383279;$/;"	m	namespace:ceres::examples	file:
kPi	ceres-solver/internal/ceres/rotation_test.cc	/^const double kPi = 3.14159265358979323846;$/;"	m	namespace:ceres::internal	file:
kPrintTimeFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kPrintTimeFlag[] = "print_time";$/;"	m	namespace:testing::internal	file:
kProtobuf	ceres-solver/internal/ceres/gtest/gtest.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	ceres-solver/internal/ceres/gtest/gtest.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kRandomSeed	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^static const unsigned int kRandomSeed = 1234;$/;"	m	namespace:ceres::internal
kRandomSeedFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kRandomSeedFlag[] = "random_seed";$/;"	m	namespace:testing::internal	file:
kRankDeficient	ceres-solver/internal/ceres/invert_psd_matrix_test.cc	/^static const bool kRankDeficient = false;$/;"	m	namespace:ceres::internal	file:
kRemove	ceres-solver/internal/ceres/gtest/gtest.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kRepeatFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kRepeatFlag[] = "repeat";$/;"	m	namespace:testing::internal	file:
kReplace	ceres-solver/internal/ceres/gtest/gtest.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kReservedTestCaseAttributes	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char* const kReservedTestCaseAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuiteAttributes	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char* const kReservedTestSuiteAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuitesAttributes	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char* const kReservedTestSuitesAttributes[] = {$/;"	m	namespace:testing	file:
kResidualTolerance	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  static double kResidualTolerance;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
kResidualTolerance	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^double BundleAdjustmentProblem::kResidualTolerance = 1e-4;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
kResidualTolerance	ceres-solver/internal/ceres/system_test.cc	/^  static double kResidualTolerance;$/;"	m	class:ceres::internal::PowellsFunction	file:
kResidualTolerance	ceres-solver/internal/ceres/system_test.cc	/^double PowellsFunction::kResidualTolerance = 1e-8;$/;"	m	class:ceres::internal::PowellsFunction	file:
kRetiresOnSaturation	ceres-solver/internal/ceres/gmock/gmock.h	/^    kRetiresOnSaturation$/;"	e	enum:testing::internal::ExpectationBase::Clause
kShuffleFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kShuffleFlag[] = "shuffle";$/;"	m	namespace:testing::internal	file:
kSignBitMask	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSingleLinkageMinSimilarity	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^static const double kSingleLinkageMinSimilarity = 0.9;$/;"	m	namespace:ceres::internal	file:
kSmallTinyCutoff	ceres-solver/internal/ceres/rotation_test.cc	/^static const int kSmallTinyCutoff =$/;"	m	namespace:ceres::internal	file:
kSpecialEscape	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  kSpecialEscape$/;"	e	enum:testing::internal::CharFormat	file:
kStackTraceDepthFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kStackTraceDepthFlag[] = "stack_trace_depth";$/;"	m	namespace:testing::internal	file:
kStackTraceMarker	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kStackTraceMarker[] = "\\nStack trace:\\n";$/;"	m	namespace:testing::internal	file:
kStatic	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	e	enum:std::tr1::Mutex::MutexType
kStaticMutex	ceres-solver/internal/ceres/gtest/gtest.h	/^  enum StaticConstructorSelector { kStaticMutex = 0 };$/;"	e	enum:std::tr1::Mutex::StaticConstructorSelector
kStdErrFileno	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const int kStdErrFileno = 2;$/;"	m	namespace:testing::internal	file:
kStdOutFileno	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const int kStdOutFileno = 1;$/;"	m	namespace:testing::internal	file:
kStreamResultToFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kStreamResultToFlag[] = "stream_result_to";$/;"	m	namespace:testing::internal	file:
kStride	ceres-solver/examples/robot_pose_mle.cc	/^static const int kStride = 10;$/;"	v	file:
kSuccess	ceres-solver/internal/ceres/gtest/gtest.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
kTestCostFunctionSize	ceres-solver/internal/ceres/conditioned_cost_function_test.cc	/^static const int kTestCostFunctionSize = 3;$/;"	m	namespace:ceres::internal	file:
kTestShardIndex	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";$/;"	m	namespace:testing	file:
kTestShardStatusFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";$/;"	m	namespace:testing	file:
kTestTotalShards	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";$/;"	m	namespace:testing	file:
kTestTypeIdInGoogleTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();$/;"	m	namespace:testing::internal	file:
kThrowOnFailureFlag	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kThrowOnFailureFlag[] = "throw_on_failure";$/;"	m	namespace:testing::internal	file:
kTimes	ceres-solver/internal/ceres/gmock/gmock.h	/^    kTimes,$/;"	e	enum:testing::internal::ExpectationBase::Clause
kTinyZeroLimit	ceres-solver/internal/ceres/rotation_test.cc	/^static const int kTinyZeroLimit   =$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^const double kTolerance = 1e-18;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^static const double kTolerance = 1e-12;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^const double kTolerance = 1e-14;$/;"	m	namespace:ceres::internal::__anon36	file:
kTolerance	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^const double kTolerance = 1e-6;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/gradient_checker_test.cc	/^const double kTolerance = 1e-6;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/is_close_test.cc	/^const double kTolerance = 1e-9;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/jet_test.cc	/^double const kTolerance = 1e-13;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^const double kTolerance = 1e-16;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/rotation_test.cc	/^static double const kTolerance = numeric_limits<double>::epsilon() * 10;$/;"	m	namespace:ceres::internal	file:
kTolerance	ceres-solver/internal/ceres/small_blas_test.cc	/^const double kTolerance = 3.0 * std::numeric_limits<double>::epsilon();$/;"	m	namespace:ceres::internal	file:
kToleranceLoose	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^const double kToleranceLoose = 1e-5;$/;"	m	namespace:ceres::internal::__anon36	file:
kTypeParamLabel	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kTypeParamLabel[] = "TypeParam";$/;"	m	namespace:testing::internal	file:
kUniversalFilter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kUniversalFilter[] = "*";$/;"	m	namespace:testing	file:
kUnknownFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char kUnknownFile[] = "unknown file";$/;"	m	namespace:testing::internal	file:
kUnused	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static const size_t kUnused = static_cast<size_t>(-1);$/;"	m	class:testing::internal::MaxBipartiteMatchState	file:
kUnused	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const size_t MaxBipartiteMatchState::kUnused;$/;"	m	class:testing::internal::MaxBipartiteMatchState	file:
kUserOrdering	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^const bool kUserOrdering = false;$/;"	m	namespace:ceres::internal	file:
kValueParamLabel	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^static const char kValueParamLabel[] = "GetParam()";$/;"	m	namespace:testing::internal	file:
kVertexIds	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^const int kVertexIds[] = {0, 1, 2, 3};$/;"	m	namespace:ceres::internal	file:
kWarn	ceres-solver/internal/ceres/gmock/gmock.h	/^  kWarn,$/;"	e	enum:testing::internal::CallReaction
kWarning	ceres-solver/internal/ceres/gmock/gmock.h	/^  kWarning = 1$/;"	e	enum:testing::internal::LogSeverity
kWarningVerbosity	ceres-solver/internal/ceres/gmock/gmock.h	/^const char kWarningVerbosity[] = "warning";$/;"	m	namespace:testing::internal
kWillByDefault	ceres-solver/internal/ceres/gmock/gmock.h	/^    kWillByDefault$/;"	e	enum:testing::internal::UntypedOnCallSpecBase::Clause
kWillOnce	ceres-solver/internal/ceres/gmock/gmock.h	/^    kWillOnce,$/;"	e	enum:testing::internal::ExpectationBase::Clause
kWillRepeatedly	ceres-solver/internal/ceres/gmock/gmock.h	/^    kWillRepeatedly,$/;"	e	enum:testing::internal::ExpectationBase::Clause
kWith	ceres-solver/internal/ceres/gmock/gmock.h	/^    kWith,$/;"	e	enum:testing::internal::ExpectationBase::Clause
kWith	ceres-solver/internal/ceres/gmock/gmock.h	/^    kWith,$/;"	e	enum:testing::internal::UntypedOnCallSpecBase::Clause
kYCols	ceres-solver/examples/ellipse_approximation.cc	/^const int kYCols = 2;$/;"	v
kYData	ceres-solver/examples/ellipse_approximation.cc	/^const double kYData[kYRows * kYCols] = {$/;"	v
kYRows	ceres-solver/examples/ellipse_approximation.cc	/^const int kYRows = 212;$/;"	v
kbhit	src/console/src/console.cpp	/^void kbhit()  $/;"	f
key	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
key_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string key_;$/;"	m	class:testing::internal::TestPropertyKeyIs	file:
key_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const pthread_key_t key_;$/;"	m	class:std::tr1::ThreadLocal
key_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string key_;$/;"	m	class:testing::TestProperty
l00001	src/doc/html/BRIEF_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#ifndef __D_BRIEF__<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#define __D_BRIEF__<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &lt;boost\/dynamic_bitset.hpp&gt;<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="namespaceDVision.html">   36<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDVision.html">DVision<\/a> {<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDVision_1_1BRIEF.html">BRIEF<\/a><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;{<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">   44<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> boost::dynamic_bitset&lt;&gt; <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">bitset<\/a>;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">   47<\/a><\/span>&#160;  <span class="keyword">enum<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  {<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    RANDOM, <span class="comment">\/\/ random pairs (Calonder&#39;s original version)<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    RANDOM_CLOSE, <span class="comment">\/\/ random but close pairs (used in GalvezIROS11)<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  };<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;  <a class="code" href="classDVision_1_1BRIEF.html#ac2324e7a976fad44f6bbe0ab6ac71051">BRIEF<\/a>(<span class="keywordtype">int<\/span> nbits = 256, <span class="keywordtype">int<\/span> patch_size = 48, <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a> type = RANDOM_CLOSE);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;  <span class="keyword">virtual<\/span> ~<a class="code" href="classDVision_1_1BRIEF.html">BRIEF<\/a>();<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;  <\/div><div class="line"><a name="l00068"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a836e6bfb9cb5516b4a35d4306c31a873">   68<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a836e6bfb9cb5516b4a35d4306c31a873">getDescriptorLengthInBits<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">m_bit_length<\/a>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  }<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  <\/div><div class="line"><a name="l00076"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a429931d892784a03fd672c1d5ed053e3">   76<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a> <a class="code" href="classDVision_1_1BRIEF.html#a429931d892784a03fd672c1d5ed053e3">getType<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDVision_1_1BRIEF.html#aaf2f0e2289b6924b32ecafb7b94bd9ff">m_type<\/a>;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;  }<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;  <\/div><div class="line"><a name="l00084"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#ae5b1a84fee8a3319628685030801491a">   84<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#ae5b1a84fee8a3319628685030801491a">getPatchSize<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a73fca9548bbf58380cacedc73e4b5c0b">m_patch_size<\/a>;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;  }<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;  <\/div><div class="line"><a name="l00099"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#aca31078b105868653a6acf98a30b1f2b">   99<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#aca31078b105868653a6acf98a30b1f2b">operator() <\/a>(<span class="keyword">const<\/span> cv::Mat &amp;image, <\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;points,<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    std::vector&lt;bitset&gt; &amp;descriptors,<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="keywordtype">bool<\/span> treat_image = <span class="keyword">true<\/span>)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <a class="code" href="classDVision_1_1BRIEF.html#a8790bd315606da9fab9b796a4baf6c52">compute<\/a>(image, points, descriptors, treat_image);<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  }<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  <\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a8790bd315606da9fab9b796a4baf6c52">compute<\/a>(<span class="keyword">const<\/span> cv::Mat &amp;image,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;points,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    std::vector&lt;bitset&gt; &amp;descriptors,<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">bool<\/span> treat_image = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;  <\/div><div class="line"><a name="l00129"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#aaa011b79e2a32cb4e1398f513ec148d3">  129<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#aaa011b79e2a32cb4e1398f513ec148d3">exportPairs<\/a>(std::vector&lt;int&gt; &amp;x1, std::vector&lt;int&gt; &amp;y1,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    std::vector&lt;int&gt; &amp;x2, std::vector&lt;int&gt; &amp;y2)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    x1 = <a class="code" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">m_x1<\/a>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    y1 = m_y1;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    x2 = m_x2;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    y2 = m_y2;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;  }<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  <\/div><div class="line"><a name="l00145"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a019cd2ef2f6757da94fdb1f74d20b581">  145<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a019cd2ef2f6757da94fdb1f74d20b581">importPairs<\/a>(<span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;x1, <\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;y1, <span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;x2, <\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;int&gt; &amp;y2)<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;  {<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    <a class="code" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">m_x1<\/a> = x1;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    m_y1 = y1;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    m_x2 = x2;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    m_y2 = y2;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    <a class="code" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">m_bit_length<\/a> = x1.size();<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;  }<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;  <\/div><div class="line"><a name="l00162"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a78718071fcf2700e3a0cc304dd4e1dcc">  162<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a78718071fcf2700e3a0cc304dd4e1dcc">distance<\/a>(<span class="keyword">const<\/span> bitset &amp;a, <span class="keyword">const<\/span> bitset &amp;b)<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;  {<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    <span class="keywordflow">return<\/span> (a^b).count();<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;  }<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a421ccdcf5f526a09b843bfcc8227ae5c">generateTestPoints<\/a>();<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;  <\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">  178<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#ae49b641f3fd2f58928e1256627b4bb21">m_bit_length<\/a>;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a73fca9548bbf58380cacedc73e4b5c0b">  181<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDVision_1_1BRIEF.html#a73fca9548bbf58380cacedc73e4b5c0b">m_patch_size<\/a>;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;  <\/div><div class="line"><a name="l00184"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#aaf2f0e2289b6924b32ecafb7b94bd9ff">  184<\/a><\/span>&#160;  <a class="code" href="classDVision_1_1BRIEF.html#a0203beaaafe3aca790393cc032eeb499">Type<\/a> <a class="code" href="classDVision_1_1BRIEF.html#aaf2f0e2289b6924b32ecafb7b94bd9ff">m_type<\/a>;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno"><a class="line" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">  187<\/a><\/span>&#160;  std::vector&lt;int&gt; <a class="code" href="classDVision_1_1BRIEF.html#a406548dc5cddec3b105d6ab35beadb40">m_x1<\/a>, m_x2;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;  std::vector&lt;int&gt; m_y1, m_y2;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;};<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;} <span class="comment">\/\/ namespace DVision<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div><div class="ttc" id="classDVision_1_1BRIEF_html_aaa011b79e2a32cb4e1398f513ec148d3"><div class="ttname"><a href="classDVision_1_1BRIEF.html#aaa011b79e2a32cb4e1398f513ec148d3">DVision::BRIEF::exportPairs<\/a><\/div><div class="ttdeci">void exportPairs(std::vector&lt; int &gt; &amp;x1, std::vector&lt; int &gt; &amp;y1, std::vector&lt; int &gt; &amp;x2, std::vector&lt; int &gt; &amp;y2) const <\/div><div class="ttdef"><b>Definition:<\/b> BRIEF.h:129<\/div><\/div>$/;"	a
l00001	src/doc/html/BowVector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_BOW_VECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_BOW_VECTOR__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html">   17<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">   20<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">   23<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">double<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">   26<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">   29<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;{<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  L1,<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  L2<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">   36<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;{<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  TF_IDF,<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  TF,<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  IDF,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  BINARY<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">   45<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  L1_NORM,<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  L2_NORM,<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  CHI_SQUARE,<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  KL,<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  BHATTACHARYYA,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  DOT_PRODUCT<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;};<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1BowVector.html">   56<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a>: <\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">public<\/span> std::map&lt;WordId, WordValue&gt;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;{<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html#ac4da23e700adc4ee083d66b23ce86e90">BowVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html#a7210cac6ce006c7232f4d097faa338d0">~BowVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#a3ac92a805b252c93dc6535240d02df47">addWeight<\/a>(WordId <span class="keywordtype">id<\/span>, WordValue v);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#a5ddf10e444d10425e5bd3568dc7ffe5e">addIfNotExist<\/a>(WordId <span class="keywordtype">id<\/span>, WordValue v);<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#acd2dd34023e3053a4cc75d70c8b6ac13">normalize<\/a>(<a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> norm_type);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keyword">friend<\/span> std::ostream&amp; <a class="code" href="classDBoW2_1_1BowVector.html#a1a7d9ac0f9128538859adfea38453ae1">operator&lt;&lt;<\/a>(std::ostream &amp;out, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1BowVector.html#af15c4fde81b89e0f76a00337883b6b4a">saveM<\/a>(<span class="keyword">const<\/span> std::string &amp;filename, <span class="keywordtype">size_t<\/span> W) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;};<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDBoW2_1_1BowVector_html_ac4da23e700adc4ee083d66b23ce86e90"><div class="ttname"><a href="classDBoW2_1_1BowVector.html#ac4da23e700adc4ee083d66b23ce86e90">DBoW2::BowVector::BowVector<\/a><\/div><div class="ttdeci">BowVector(void)<\/div><\/div>$/;"	a
l00001	src/doc/html/CameraCalibration_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CAMERACALIBRATION_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CAMERACALIBRATION_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/Camera.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CameraCalibration.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CameraCalibration.html">CameraCalibration<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <a class="code" href="classcamodocal_1_1CameraCalibration.html">CameraCalibration<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    CameraCalibration(Camera::ModelType modelType,<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;                      <span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;                      <span class="keyword">const<\/span> cv::Size&amp; imageSize,<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;                      <span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                      <span class="keywordtype">float<\/span> squareSize);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> clear(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordtype">void<\/span> addChessboardData(<span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt;&amp; corners);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">bool<\/span> calibrate(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">int<\/span> sampleCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point3f&gt; &gt;&amp; scenePoints(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point3f&gt; &gt;&amp; scenePoints(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    CameraPtr&amp; camera(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">const<\/span> CameraConstPtr camera(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    Eigen::Matrix2d&amp; measurementCovariance(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Matrix2d&amp; measurementCovariance(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    cv::Mat&amp; cameraPoses(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">const<\/span> cv::Mat&amp; cameraPoses(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">void<\/span> drawResults(std::vector&lt;cv::Mat&gt;&amp; images) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">void<\/span> writeParams(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordtype">bool<\/span> writeChessboardData(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordtype">bool<\/span> readChessboardData(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">void<\/span> setVerbose(<span class="keywordtype">bool<\/span> verbose);<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordtype">bool<\/span> calibrateHelper(CameraPtr&amp; camera,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;                         std::vector&lt;cv::Mat&gt;&amp; rvecs, std::vector&lt;cv::Mat&gt;&amp; tvecs) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">void<\/span> optimize(CameraPtr&amp; camera,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                  std::vector&lt;cv::Mat&gt;&amp; rvecs, std::vector&lt;cv::Mat&gt;&amp; tvecs) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">void<\/span> readData(std::ifstream&amp; ifs, T&amp; data) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">void<\/span> writeData(std::ofstream&amp; ofs, T data) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    cv::Size m_boardSize;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keywordtype">float<\/span> m_squareSize;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    CameraPtr m_camera;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    cv::Mat m_cameraPoses;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point2f&gt; &gt; m_imagePoints;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    std::vector&lt;std::vector&lt;cv::Point3f&gt; &gt; m_scenePoints;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    Eigen::Matrix2d m_measurementCovariance;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">bool<\/span> m_verbose;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;};<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;}<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CameraCalibration_html"><div class="ttname"><a href="classcamodocal_1_1CameraCalibration.html">camodocal::CameraCalibration<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraCalibration.h:11<\/div><\/div>$/;"	a
l00001	src/doc/html/CameraFactory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CAMERAFACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CAMERAFACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/Camera.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CameraFactory.html">   12<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CameraFactory.html">CameraFactory<\/a><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classcamodocal_1_1CameraFactory.html">CameraFactory<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CameraFactory&gt; instance(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    CameraPtr generateCamera(Camera::ModelType modelType,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                             <span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;                             cv::Size imageSize) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    CameraPtr generateCameraFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CameraFactory&gt; m_instance;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;};<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CameraFactory_html"><div class="ttname"><a href="classcamodocal_1_1CameraFactory.html">camodocal::CameraFactory<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraFactory.h:12<\/div><\/div>$/;"	a
l00001	src/doc/html/CameraPoseVisualization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/ColorRGBA.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;visualization_msgs\/Marker.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;visualization_msgs\/MarkerArray.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;Eigen\/Geometry&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classCameraPoseVisualization.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a> {<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    std::string m_marker_ns;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>(<span class="keywordtype">float<\/span> r, <span class="keywordtype">float<\/span> g, <span class="keywordtype">float<\/span> b, <span class="keywordtype">float<\/span> a);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keywordtype">void<\/span> setImageBoundaryColor(<span class="keywordtype">float<\/span> r, <span class="keywordtype">float<\/span> g, <span class="keywordtype">float<\/span> b, <span class="keywordtype">float<\/span> a=1.0);<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="keywordtype">void<\/span> setOpticalCenterConnectorColor(<span class="keywordtype">float<\/span> r, <span class="keywordtype">float<\/span> g, <span class="keywordtype">float<\/span> b, <span class="keywordtype">float<\/span> a=1.0);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">void<\/span> setScale(<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">void<\/span> setLineWidth(<span class="keywordtype">double<\/span> width);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">void<\/span> add_pose(<span class="keyword">const<\/span> Eigen::Vector3d&amp; p, <span class="keyword">const<\/span> Eigen::Quaterniond&amp; q);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">void<\/span> reset();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="keywordtype">void<\/span> publish_by(ros::Publisher&amp; pub, <span class="keyword">const<\/span> std_msgs::Header&amp; header);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordtype">void<\/span> add_edge(<span class="keyword">const<\/span> Eigen::Vector3d&amp; p0, <span class="keyword">const<\/span> Eigen::Vector3d&amp; p1);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">void<\/span> add_loopedge(<span class="keyword">const<\/span> Eigen::Vector3d&amp; p0, <span class="keyword">const<\/span> Eigen::Vector3d&amp; p1);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::vector&lt;visualization_msgs::Marker&gt; m_markers;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    std_msgs::ColorRGBA m_image_boundary_color;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    std_msgs::ColorRGBA m_optical_center_connector_color;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">double<\/span> m_scale;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">double<\/span> m_line_width;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imlt;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imlb;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imrt;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d imrb;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d oc  ;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d lt0 ;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d lt1 ;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> Eigen::Vector3d lt2 ;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div><div class="ttc" id="classCameraPoseVisualization_html"><div class="ttname"><a href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraPoseVisualization.h:10<\/div><\/div>$/;"	a
l00001	src/doc/html/Camera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Camera.html">   12<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">enum<\/span> ModelType<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        KANNALA_BRANDT,<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        MEI,<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        PINHOLE,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        SCARAMUZZA<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    };<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Camera_1_1Parameters.html">   24<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Parameters<\/a><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    {<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Parameters<\/a>(ModelType modelType);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        Parameters(ModelType modelType, <span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        ModelType&amp; modelType(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        std::string&amp; cameraName(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">int<\/span>&amp; imageWidth(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">int<\/span>&amp; imageHeight(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">int<\/span> nIntrinsics(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) = 0;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        ModelType m_modelType;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordtype">int<\/span> m_nIntrinsics;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        std::string m_cameraName;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">int<\/span> m_imageWidth;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">int<\/span> m_imageHeight;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    };<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keyword">virtual<\/span> ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keyword">virtual<\/span> cv::Mat&amp; mask(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keyword">const<\/span> cv::Mat&amp; mask(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints) = 0;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> estimateExtrinsics(<span class="keyword">const<\/span> std::vector&lt;cv::Point3f&gt;&amp; objectPoints,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt;&amp; imagePoints,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                                    cv::Mat&amp; rvec, cv::Mat&amp; tvec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="comment">\/\/virtual void spaceToPlane(const Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="comment">\/\/                          Eigen::Matrix&lt;double,2,3&gt;&amp; J) const = 0;<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/virtual void initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, double fScale = 1.0) const = 0;<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keyword">virtual<\/span> cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;                                            <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;                                            cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                                            <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                                            cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameters) = 0;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameters) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="keyword">virtual<\/span> std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="classcamodocal_1_1Camera.html#a0c2a6b65d09940418cf3513b065f754a">reprojectionDist<\/a>(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P1, <span class="keyword">const<\/span> Eigen::Vector3d&amp; P2) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keywordtype">double<\/span> reprojectionError(<span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;                             <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints,<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;                             <span class="keyword">const<\/span> std::vector&lt;cv::Mat&gt;&amp; rvecs,<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;                             <span class="keyword">const<\/span> std::vector&lt;cv::Mat&gt;&amp; tvecs,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                             cv::OutputArray perViewErrors = cv::noArray()) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keywordtype">double<\/span> reprojectionError(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P,<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Quaterniond&amp; camera_q,<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Vector3d&amp; camera_t,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keywordtype">void<\/span> projectPoints(<span class="keyword">const<\/span> std::vector&lt;cv::Point3f&gt;&amp; objectPoints,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;                       <span class="keyword">const<\/span> cv::Mat&amp; rvec,<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;                       <span class="keyword">const<\/span> cv::Mat&amp; tvec,<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;                       std::vector&lt;cv::Point2f&gt;&amp; imagePoints) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    cv::Mat m_mask;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;};<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;Camera&gt; CameraPtr;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const Camera&gt; CameraConstPtr;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;}<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1Camera_html_a0c2a6b65d09940418cf3513b065f754a"><div class="ttname"><a href="classcamodocal_1_1Camera.html#a0c2a6b65d09940418cf3513b065f754a">camodocal::Camera::reprojectionDist<\/a><\/div><div class="ttdeci">double reprojectionDist(const Eigen::Vector3d &amp;P1, const Eigen::Vector3d &amp;P2) const <\/div><div class="ttdoc">Calculates the reprojection distance between points. <\/div><\/div>$/;"	a
l00001	src/doc/html/CataCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CATACAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CATACAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CataCamera.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CataCamera_1_1Parameters.html">   21<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    {<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                   <span class="keywordtype">double<\/span> xi,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                   <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                   <span class="keywordtype">double<\/span> gamma1, <span class="keywordtype">double<\/span> gamma2, <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; xi(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; gamma1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; gamma2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; u0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; v0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> xi(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> k1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">double<\/span> k2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">double<\/span> p1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">double<\/span> p2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keywordtype">double<\/span> gamma1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <span class="keywordtype">double<\/span> gamma2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keywordtype">double<\/span> u0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">double<\/span> v0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_xi;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">double<\/span> m_k1;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keywordtype">double<\/span> m_k2;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordtype">double<\/span> m_p1;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keywordtype">double<\/span> m_p2;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordtype">double<\/span> m_gamma1;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordtype">double<\/span> m_gamma2;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keywordtype">double<\/span> m_u0;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keywordtype">double<\/span> m_v0;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    };<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>();<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;               <span class="keywordtype">int<\/span> imageWidth, <span class="keywordtype">int<\/span> imageHeight,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;               <span class="keywordtype">double<\/span> xi, <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;               <span class="keywordtype">double<\/span> gamma1, <span class="keywordtype">double<\/span> gamma2, <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera.html">CataCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                      Eigen::Matrix&lt;double,2,3&gt;&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                    Eigen::Matrix2d&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    <a class="code" href="classcamodocal_1_1CataCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_K11, m_inv_K13, m_inv_K22, m_inv_K23;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keywordtype">bool<\/span> m_noDistortion;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;};<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;CataCamera&gt; CataCameraPtr;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const CataCamera&gt; CataCameraConstPtr;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;CataCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                         <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                         <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                         Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;{<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    T P_w[3];<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    P_w[0] = T(P(0));<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    P_w[1] = T(P(1));<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    P_w[2] = T(P(2));<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    P_c[0] += t[0];<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    P_c[1] += t[1];<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    P_c[2] += t[2];<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    <span class="comment">\/\/ project 3D object point to the image plane<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    T xi = params[0];<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    T k1 = params[1];<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    T k2 = params[2];<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    T p1 = params[3];<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    T p2 = params[4];<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    T gamma1 = params[5];<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    T gamma2 = params[6];<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    T alpha = T(0); <span class="comment">\/\/cameraParams.alpha();<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    T u0 = params[7];<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    T v0 = params[8];<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <span class="comment">\/\/ Transform to model plane<\/span><\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    T len = sqrt(P_c[0] * P_c[0] + P_c[1] * P_c[1] + P_c[2] * P_c[2]);<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    P_c[0] \/= len;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    P_c[1] \/= len;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    P_c[2] \/= len;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    T u = P_c[0] \/ (P_c[2] + xi);<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    T v = P_c[1] \/ (P_c[2] + xi);<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    T rho_sqr = u * u + v * v;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    T L = T(1.0) + k1 * rho_sqr + k2 * rho_sqr * rho_sqr;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    T du = T(2.0) * p1 * u * v + p2 * (rho_sqr + T(2.0) * u * u);<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    T dv = p1 * (rho_sqr + T(2.0) * v * v) + T(2.0) * p2 * u * v;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    u = L * u + du;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    v = L * v + dv;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    p(0) = gamma1 * (u + alpha * v) + u0;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    p(1) = gamma2 * v + v0;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;}<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;}<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CataCamera_html"><div class="ttname"><a href="classcamodocal_1_1CataCamera.html">camodocal::CataCamera<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CataCamera.h:18<\/div><\/div>$/;"	a
l00001	src/doc/html/ChessboardCorner_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CHESSBOARDCORNER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CHESSBOARDCORNER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">class <\/span>ChessboardCorner;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardCorner&gt; ChessboardCornerPtr;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1ChessboardCorner.html">   13<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1ChessboardCorner.html">ChessboardCorner<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classcamodocal_1_1ChessboardCorner.html">ChessboardCorner<\/a>() : row(0), column(0), needsNeighbor(<span class="keyword">true<\/span>), count(0) {}<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">float<\/span> meanDist(<span class="keywordtype">int<\/span> &amp;n)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        <span class="keywordtype">float<\/span> sum = 0;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        n = 0;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 4; ++i)<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        {<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;            <span class="keywordflow">if<\/span> (neighbors[i].<span class="keyword">get<\/span>())<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;            {<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                <span class="keywordtype">float<\/span> dx = neighbors[i]-&gt;pt.x - pt.x;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                <span class="keywordtype">float<\/span> dy = neighbors[i]-&gt;pt.y - pt.y;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                sum += sqrt(dx*dx + dy*dy);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                n++;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;            }<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        }<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordflow">return<\/span> sum \/ std::max(n, 1);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    }<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    cv::Point2f pt;                     <span class="comment">\/\/ X and y coordinates<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keywordtype">int<\/span> row;                            <span class="comment">\/\/ Row and column of the corner<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">int<\/span> column;                         <span class="comment">\/\/ in the found pattern<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">bool<\/span> needsNeighbor;                 <span class="comment">\/\/ Does the corner require a neighbor?<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">int<\/span> count;                          <span class="comment">\/\/ number of corner neighbors<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    ChessboardCornerPtr neighbors[4];   <span class="comment">\/\/ pointer to all corner neighbors<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;};<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;}<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1ChessboardCorner_html"><div class="ttname"><a href="classcamodocal_1_1ChessboardCorner.html">camodocal::ChessboardCorner<\/a><\/div><div class="ttdef"><b>Definition:<\/b> ChessboardCorner.h:13<\/div><\/div>$/;"	a
l00001	src/doc/html/ChessboardQuad_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CHESSBOARDQUAD_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CHESSBOARDQUAD_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/chessboard\/ChessboardCorner.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">class <\/span>ChessboardQuad;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardQuad&gt; ChessboardQuadPtr;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1ChessboardQuad.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1ChessboardQuad.html">ChessboardQuad<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <a class="code" href="classcamodocal_1_1ChessboardQuad.html">ChessboardQuad<\/a>() : count(0), group_idx(-1), edge_len(FLT_MAX), labeled(<span class="keyword">false<\/span>) {}<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">int<\/span> count;                         <span class="comment">\/\/ Number of quad neighbors<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">int<\/span> group_idx;                     <span class="comment">\/\/ Quad group ID<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">float<\/span> edge_len;                    <span class="comment">\/\/ Smallest side length^2<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    ChessboardCornerPtr corners[4];    <span class="comment">\/\/ Coordinates of quad corners<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ChessboardQuadPtr neighbors[4];    <span class="comment">\/\/ Pointers of quad neighbors<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="keywordtype">bool<\/span> labeled;                      <span class="comment">\/\/ Has this corner been labeled?<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;};<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;}<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1ChessboardQuad_html"><div class="ttname"><a href="classcamodocal_1_1ChessboardQuad.html">camodocal::ChessboardQuad<\/a><\/div><div class="ttdef"><b>Definition:<\/b> ChessboardQuad.h:14<\/div><\/div>$/;"	a
l00001	src/doc/html/Chessboard_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef CHESSBOARD_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define CHESSBOARD_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">\/\/ forward declarations<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">class <\/span>ChessboardCorner;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardCorner&gt; ChessboardCornerPtr;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">class <\/span>ChessboardQuad;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;ChessboardQuad&gt; ChessboardQuadPtr;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Chessboard.html">   16<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Chessboard.html">Chessboard<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <a class="code" href="classcamodocal_1_1Chessboard.html">Chessboard<\/a>(cv::Size boardSize, cv::Mat&amp; image);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">void<\/span> findCorners(<span class="keywordtype">bool<\/span> useOpenCV = <span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt;&amp; getCorners(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">bool<\/span> cornersFound(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keyword">const<\/span> cv::Mat&amp; getImage(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">const<\/span> cv::Mat&amp; getSketch(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">bool<\/span> findChessboardCorners(<span class="keyword">const<\/span> cv::Mat&amp; image,<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;                               <span class="keyword">const<\/span> cv::Size&amp; patternSize,<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;                               std::vector&lt;cv::Point2f&gt;&amp; corners,<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;                               <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> useOpenCV);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keywordtype">bool<\/span> findChessboardCornersImproved(<span class="keyword">const<\/span> cv::Mat&amp; image,<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;                                       <span class="keyword">const<\/span> cv::Size&amp; patternSize,<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;                                       std::vector&lt;cv::Point2f&gt;&amp; corners,<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;                                       <span class="keywordtype">int<\/span> flags);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> cleanFoundConnectedQuads(std::vector&lt;ChessboardQuadPtr&gt;&amp; quadGroup, cv::Size patternSize);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">void<\/span> findConnectedQuads(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                            std::vector&lt;ChessboardQuadPtr&gt;&amp; group,<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;                            <span class="keywordtype">int<\/span> group_idx, <span class="keywordtype">int<\/span> dilation);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">\/\/    int checkQuadGroup(std::vector&lt;ChessboardQuadPtr&gt;&amp; quadGroup,<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">\/\/                       std::vector&lt;ChessboardCornerPtr&gt;&amp; outCorners,<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">\/\/                       cv::Size patternSize);<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keywordtype">void<\/span> labelQuadGroup(std::vector&lt;ChessboardQuadPtr&gt;&amp; quad_group,<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;                        cv::Size patternSize, <span class="keywordtype">bool<\/span> firstRun);<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">void<\/span> findQuadNeighbors(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads, <span class="keywordtype">int<\/span> dilation);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">int<\/span> augmentBestRun(std::vector&lt;ChessboardQuadPtr&gt;&amp; candidateQuads, <span class="keywordtype">int<\/span> candidateDilation,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;                       std::vector&lt;ChessboardQuadPtr&gt;&amp; existingQuads, <span class="keywordtype">int<\/span> existingDilation);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordtype">void<\/span> generateQuads(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                       cv::Mat&amp; image, <span class="keywordtype">int<\/span> flags,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                       <span class="keywordtype">int<\/span> dilation, <span class="keywordtype">bool<\/span> firstRun);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keywordtype">bool<\/span> checkQuadGroup(std::vector&lt;ChessboardQuadPtr&gt;&amp; quads,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;                        std::vector&lt;ChessboardCornerPtr&gt;&amp; corners,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;                        cv::Size patternSize);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keywordtype">void<\/span> getQuadrangleHypotheses(<span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point&gt; &gt;&amp; contours,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                 std::vector&lt; std::pair&lt;float, int&gt; &gt;&amp; quads,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                                 <span class="keywordtype">int<\/span> classId) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordtype">bool<\/span> checkChessboard(<span class="keyword">const<\/span> cv::Mat&amp; image, cv::Size patternSize) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordtype">bool<\/span> checkBoardMonotony(std::vector&lt;ChessboardCornerPtr&gt;&amp; corners,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;                            cv::Size patternSize);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keywordtype">bool<\/span> matchCorners(ChessboardQuadPtr&amp; quad1, <span class="keywordtype">int<\/span> corner1,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                      ChessboardQuadPtr&amp; quad2, <span class="keywordtype">int<\/span> corner2) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    cv::Mat mImage;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    cv::Mat mSketch;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    std::vector&lt;cv::Point2f&gt; mCorners;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    cv::Size mBoardSize;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordtype">bool<\/span> mCornersFound;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;};<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;}<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1Chessboard_html"><div class="ttname"><a href="classcamodocal_1_1Chessboard.html">camodocal::Chessboard<\/a><\/div><div class="ttdef"><b>Definition:<\/b> Chessboard.h:16<\/div><\/div>$/;"	a
l00001	src/doc/html/CostFunctionFactory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COSTFUNCTIONFACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COSTFUNCTIONFACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/Camera.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceceres.html">ceres<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keyword">class <\/span>CostFunction;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;}<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">enum<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;{<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    CAMERA_INTRINSICS =         1 &lt;&lt; 0,<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    CAMERA_POSE =               1 &lt;&lt; 1,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    POINT_3D =                  1 &lt;&lt; 2,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    ODOMETRY_INTRINSICS =       1 &lt;&lt; 3,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ODOMETRY_3D_POSE =          1 &lt;&lt; 4,<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    ODOMETRY_6D_POSE =          1 &lt;&lt; 5,<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    CAMERA_ODOMETRY_TRANSFORM = 1 &lt;&lt; 6<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;};<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1CostFunctionFactory.html">   28<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1CostFunctionFactory.html">CostFunctionFactory<\/a><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;{<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <a class="code" href="classcamodocal_1_1CostFunctionFactory.html">CostFunctionFactory<\/a>();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CostFunctionFactory&gt; instance(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; observed_P,<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; observed_P,<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Matrix2d&amp; sqrtPrecisionMat,<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> optimize_cam_odo_z = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Matrix2d&amp; sqrtPrecisionMat,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> optimize_cam_odo_z = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_pos,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_att,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags, <span class="keywordtype">bool<\/span> optimize_cam_odo_z = <span class="keyword">true<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; camera,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Quaterniond&amp; cam_odo_q,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; cam_odo_t,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_pos,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; odo_att,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                                              <span class="keywordtype">int<\/span> flags) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    ceres::CostFunction* generateCostFunction(<span class="keyword">const<\/span> CameraConstPtr&amp; cameraLeft,<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;                                              <span class="keyword">const<\/span> CameraConstPtr&amp; cameraRight,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector3d&amp; observed_P,<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p_left,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;                                              <span class="keyword">const<\/span> Eigen::Vector2d&amp; observed_p_right) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">static<\/span> boost::shared_ptr&lt;CostFunctionFactory&gt; m_instance;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;};<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;}<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1CostFunctionFactory_html"><div class="ttname"><a href="classcamodocal_1_1CostFunctionFactory.html">camodocal::CostFunctionFactory<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CostFunctionFactory.h:28<\/div><\/div>$/;"	a
l00001	src/doc/html/DBoW2_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DBoW2.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Date: November 2011<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Description: Generic include file for the DBoW2 classes and<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> *   the specialized vocabularies and databases<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#ifndef __D_T_DBOW2__<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define __D_T_DBOW2__<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;{<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;}<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedVocabulary.h&quot;<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedDatabase.h&quot;<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#include &quot;FeatureVector.h&quot;<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#include &quot;QueryResults.h&quot;<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#include &quot;FBrief.h&quot;<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">DBoW2::TemplatedVocabulary&lt;DBoW2::FBrief::TDescriptor, DBoW2::FBrief&gt;<\/a> <\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">BriefVocabulary<\/a>;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">DBoW2::TemplatedDatabase&lt;DBoW2::FBrief::TDescriptor, DBoW2::FBrief&gt;<\/a> <\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">BriefDatabase<\/a>;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1TemplatedVocabulary_html"><div class="ttname"><a href="classDBoW2_1_1TemplatedVocabulary.html">DBoW2::TemplatedVocabulary<\/a><\/div><div class="ttdoc">Generic Vocabulary. <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedVocabulary.h:39<\/div><\/div>$/;"	a
l00001	src/doc/html/DException_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*  <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DException.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DUtils library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: October 6, 2009<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: general exception of the library<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#ifndef __D_EXCEPTION__<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#define __D_EXCEPTION__<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="namespaceDUtils.html">   20<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a> {<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html">   23<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1DException.html">DException<\/a> :<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="keyword">public<\/span> exception<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;{<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00030"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a2a7b85153de7d01a46606271c32254ce">   30<\/a><\/span>&#160;    <a class="code" href="classDUtils_1_1DException.html#a2a7b85153de7d01a46606271c32254ce">DException<\/a>(<span class="keywordtype">void<\/span>) throw(): m_message(&quot;<a class="code" href="namespaceDUtils.html">DUtils<\/a> exception&quot;){}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#aba7bdd9f0c908590dc48cfacb50efc56">   36<\/a><\/span>&#160;    <a class="code" href="classDUtils_1_1DException.html#aba7bdd9f0c908590dc48cfacb50efc56">DException<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *msg) <span class="keywordflow">throw<\/span>(): m_message(msg){}<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <\/div><div class="line"><a name="l00042"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a611f325f78d0e79b3bac5234b3f9ff99">   42<\/a><\/span>&#160;    <a class="code" href="classDUtils_1_1DException.html#a611f325f78d0e79b3bac5234b3f9ff99">DException<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;msg) <span class="keywordflow">throw<\/span>(): m_message(msg){}<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a12deb785f50e9cb2db3541ffb60a20bb">   47<\/a><\/span>&#160;    <span class="keyword">virtual<\/span> <a class="code" href="classDUtils_1_1DException.html#a12deb785f50e9cb2db3541ffb60a20bb">~DException<\/a>(<span class="keywordtype">void<\/span>) throw(){}<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#a88d1b57954fbf20051dc33764e1c9435">   52<\/a><\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* <a class="code" href="classDUtils_1_1DException.html#a88d1b57954fbf20051dc33764e1c9435">what<\/a>() <span class="keyword">const<\/span> throw()<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    {<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keywordflow">return<\/span> m_message.c_str();<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    }<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00059"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1DException.html#ab31e6216df2034af61edb32632006bfb">   59<\/a><\/span>&#160;    <span class="keywordtype">string<\/span> <a class="code" href="classDUtils_1_1DException.html#ab31e6216df2034af61edb32632006bfb">m_message<\/a>;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;};<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;}<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="ttc" id="classDUtils_1_1DException_html"><div class="ttname"><a href="classDUtils_1_1DException.html">DUtils::DException<\/a><\/div><div class="ttdoc">General exception. <\/div><div class="ttdef"><b>Definition:<\/b> DException.h:23<\/div><\/div>$/;"	a
l00001	src/doc/html/DLoopDetector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DLoopDetector.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Date: November 2011<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Description: Generic include file for the DLoopDetector classes and<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> *   the specialized loop detectors<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#ifndef __D_T_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#define __D_T_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html">   60<\/a><\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;{<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;}<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="comment">\/\/#include &quot;DBoW2.h&quot;<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedLoopDetector.h&quot;<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/FBrief.h&quot;<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">DLoopDetector::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;  &lt;FBrief::TDescriptor, <a class="code" href="classDBoW2_1_1FBrief.html">FBrief<\/a>&gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">BriefLoopDetector<\/a>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1FBrief_html"><div class="ttname"><a href="classDBoW2_1_1FBrief.html">DBoW2::FBrief<\/a><\/div><div class="ttdoc">Functions to manipulate BRIEF descriptors. <\/div><div class="ttdef"><b>Definition:<\/b> FBrief.h:23<\/div><\/div>$/;"	a
l00001	src/doc/html/DUtils_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DUtils.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DUtils library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: October 6, 2009<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: include file for including all the library functionalities<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#ifndef __D_UTILS__<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#define __D_UTILS__<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;{<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;}<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/\/ Exception<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &quot;DException.h&quot;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#include &quot;Timestamp.h&quot;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment">\/\/ Random numbers<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#include &quot;Random.h&quot;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceDUtils_html"><div class="ttname"><a href="namespaceDUtils.html">DUtils<\/a><\/div><div class="ttdoc">Several utilities for C++ programs. <\/div><div class="ttdef"><b>Definition:<\/b> DException.h:20<\/div><\/div>$/;"	a
l00001	src/doc/html/DVision_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: DVision.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DVision library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: October 4, 2010<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: several functions for computer vision<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#ifndef __D_VISION__<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#define __D_VISION__<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDVision.html">DVision<\/a><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;{<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;}<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &quot;BRIEF.h&quot;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceDVision_html"><div class="ttname"><a href="namespaceDVision.html">DVision<\/a><\/div><div class="ttdoc">Computer vision functions. <\/div><div class="ttdef"><b>Definition:<\/b> BRIEF.h:36<\/div><\/div>$/;"	a
l00001	src/doc/html/EigenQuaternionParameterization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef EIGENQUATERNIONPARAMETERIZATION_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define EIGENQUATERNIONPARAMETERIZATION_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/local_parameterization.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1EigenQuaternionParameterization.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1EigenQuaternionParameterization.html">EigenQuaternionParameterization<\/a> : <span class="keyword">public<\/span> ceres::LocalParameterization<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">virtual<\/span> ~<a class="code" href="classcamodocal_1_1EigenQuaternionParameterization.html">EigenQuaternionParameterization<\/a>() {}<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Plus(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* x,<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;                      <span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* delta,<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;                      <span class="keywordtype">double<\/span>* x_plus_delta) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> ComputeJacobian(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* x,<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;                                 <span class="keywordtype">double<\/span>* jacobian) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> GlobalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 4; }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> LocalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 3; }<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> EigenQuaternionProduct(<span class="keyword">const<\/span> T z[4], <span class="keyword">const<\/span> T w[4], T zw[4]) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;};<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;EigenQuaternionParameterization::EigenQuaternionProduct(<span class="keyword">const<\/span> T z[4], <span class="keyword">const<\/span> T w[4], T zw[4])<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    zw[0] = z[3] * w[0] + z[0] * w[3] + z[1] * w[2] - z[2] * w[1];<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    zw[1] = z[3] * w[1] - z[0] * w[2] + z[1] * w[3] + z[2] * w[0];<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    zw[2] = z[3] * w[2] + z[0] * w[1] - z[1] * w[0] + z[2] * w[3];<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    zw[3] = z[3] * w[3] - z[0] * w[0] - z[1] * w[1] - z[2] * w[2];<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;}<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;}<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="ttc" id="classcamodocal_1_1EigenQuaternionParameterization_html"><div class="ttname"><a href="classcamodocal_1_1EigenQuaternionParameterization.html">camodocal::EigenQuaternionParameterization<\/a><\/div><div class="ttdef"><b>Definition:<\/b> EigenQuaternionParameterization.h:9<\/div><\/div>$/;"	a
l00001	src/doc/html/EigenUtils_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef EIGENUTILS_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define EIGENUTILS_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/gpl\/gpl.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">\/\/ Returns the 3D cross product skew symmetric matrix of a given 3D vector<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; skew(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; vec)<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keywordflow">return<\/span> (Eigen::Matrix&lt;T, 3, 3&gt;() &lt;&lt; T(0), -vec(2), vec(1),<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;                                        vec(2), T(0), -vec(0),<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;                                        -vec(1), vec(0), T(0)).finished();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;}<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">typename<\/span> Eigen::MatrixBase&lt;Derived&gt;::PlainObject sqrtm(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt;&amp; A)<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;{<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    Eigen::SelfAdjointEigenSolver&lt;typename Derived::PlainObject&gt; es(A);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordflow">return<\/span> es.operatorSqrt();<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;}<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; AngleAxisToRotationMatrix(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec)<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    T angle = rvec.norm();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keywordflow">if<\/span> (angle == T(0))<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    {<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordflow">return<\/span> Eigen::Matrix&lt;T, 3, 3&gt;::Identity();<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    }<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; axis;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    axis = rvec.normalized();<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    rmat = Eigen::AngleAxis&lt;T&gt;(angle, axis);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordflow">return<\/span> rmat;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;}<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;Eigen::Quaternion&lt;T&gt; AngleAxisToQuaternion(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec)<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;{<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat = AngleAxisToRotationMatrix&lt;T&gt;(rvec);<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordflow">return<\/span> Eigen::Quaternion&lt;T&gt;(rmat);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;}<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keywordtype">void<\/span> AngleAxisToQuaternion(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec, T* q)<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;{<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    Eigen::Quaternion&lt;T&gt; quat = AngleAxisToQuaternion&lt;T&gt;(rvec);<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    q[0] = quat.x();<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    q[1] = quat.y();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    q[2] = quat.z();<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    q[3] = quat.w();<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;}<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;Eigen::Matrix&lt;T, 3, 1&gt; RotationToAngleAxis(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt; &amp; rmat)<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;{<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    Eigen::AngleAxis&lt;T&gt; angleaxis; <\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    angleaxis.fromRotationMatrix(rmat); <\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordflow">return<\/span> angleaxis.angle() * angleaxis.axis(); <\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;}<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keywordtype">void<\/span> QuaternionToAngleAxis(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec)<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;{<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    Eigen::Quaternion&lt;T&gt; quat(q[3], q[0], q[1], q[2]);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat = quat.toRotationMatrix();<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    Eigen::AngleAxis&lt;T&gt; angleaxis;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    angleaxis.fromRotationMatrix(rmat);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    rvec = angleaxis.angle() * angleaxis.axis();<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;}<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; QuaternionToRotation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q)<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;{<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    T R[9];<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    ceres::QuaternionToRotation(q, R);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; rmat;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 3; ++i)<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    {<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> j = 0; j &lt; 3; ++j)<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        {<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            rmat(i,j) = R[i * 3 + j];<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        }<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    }<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keywordflow">return<\/span> rmat;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;}<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="keywordtype">void<\/span> QuaternionToRotation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, T* rot)<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;{<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    ceres::QuaternionToRotation(q, rot);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;}<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;Eigen::Matrix&lt;T,4,4&gt; QuaternionMultMatLeft(<span class="keyword">const<\/span> Eigen::Quaternion&lt;T&gt;&amp; q)<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;{<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keywordflow">return<\/span> (Eigen::Matrix&lt;T,4,4&gt;() &lt;&lt; q.w(), -q.z(), q.y(), q.x(),<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                                      q.z(), q.w(), -q.x(), q.y(),<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                                      -q.y(), q.x(), q.w(), q.z(),<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                                      -q.x(), -q.y(), -q.z(), q.w()).finished();<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;}<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;Eigen::Matrix&lt;T,4,4&gt; QuaternionMultMatRight(<span class="keyword">const<\/span> Eigen::Quaternion&lt;T&gt;&amp; q)<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;{<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keywordflow">return<\/span> (Eigen::Matrix&lt;T,4,4&gt;() &lt;&lt; q.w(), q.z(), -q.y(), q.x(),<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                                      -q.z(), q.w(), q.x(), q.y(),<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                                      q.y(), -q.x(), q.w(), q.z(),<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                                      -q.x(), -q.y(), -q.z(), q.w()).finished();<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;}<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="keywordtype">void<\/span> AngleAxisAndTranslationToScrew(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; rvec,<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;                                    <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; tvec,<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                                    T&amp; theta, T&amp; d,<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                                    Eigen::Matrix&lt;T, 3, 1&gt;&amp; l,<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;                                    Eigen::Matrix&lt;T, 3, 1&gt;&amp; m)<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;{<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    theta = rvec.norm();<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <span class="keywordflow">if<\/span> (theta == 0)<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    {<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        l.setZero(); <\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        m.setZero(); <\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Warning: Undefined screw! Returned 0. &quot;<\/span> &lt;&lt; std::endl; <\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    }<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    l = rvec.normalized();<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = tvec;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    d = t.transpose() * l;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    <span class="comment">\/\/ point on screw axis - projection of origin on screw axis<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; c;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    c = 0.5 * (t - d * l + (1.0 \/ tan(theta \/ 2.0) * l).cross(t));<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    <span class="comment">\/\/ c and hence the screw axis is not defined if theta is either 0 or M_PI<\/span><\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    m = c.cross(l);<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;}<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;Eigen::Matrix&lt;T, 3, 3&gt; RPY2mat(T roll, T pitch, T yaw)<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;{<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; m;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    T cr = cos(roll);<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    T sr = sin(roll);<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    T cp = cos(pitch);<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    T sp = sin(pitch);<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    T cy = cos(yaw);<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    T sy = sin(yaw);<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    m(0,0) = cy * cp;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    m(0,1) = cy * sp * sr - sy * cr;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    m(0,2) = cy * sp * cr + sy * sr;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    m(1,0) = sy * cp;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    m(1,1) = sy * sp * sr + cy * cr;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    m(1,2) = sy * sp * cr - cy * sr;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    m(2,0) = - sp;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    m(2,1) = cp * sr;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    m(2,2) = cp * cr;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <span class="keywordflow">return<\/span> m; <\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;}<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="keywordtype">void<\/span> mat2RPY(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; m, T&amp; roll, T&amp; pitch, T&amp; yaw)<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;{<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    roll = atan2(m(2,1), m(2,2));<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    pitch = atan2(-m(2,0), sqrt(m(2,1) * m(2,1) + m(2,2) * m(2,2)));<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    yaw = atan2(m(1,0), m(0,0));<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;}<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt; homogeneousTransform(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; R, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; t)<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;{<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    Eigen::Matrix&lt;T, 4, 4&gt; H;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    H.setIdentity();<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    H.block(0,0,3,3) = R;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    H.block(0,3,3,1) = t;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="keywordflow">return<\/span> H;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;}<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt; poseWithCartesianTranslation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> p)<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;{<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    Eigen::Matrix&lt;T, 4, 4&gt; pose = Eigen::Matrix&lt;T, 4, 4&gt;::Identity();<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;    T rotation[9];<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;    ceres::QuaternionToRotation(q, rotation);<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 3; ++i)<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;    {<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> j = 0; j &lt; 3; ++j)<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;        {<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;            pose(i,j) = rotation[i * 3 + j];<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;        }<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;    }<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;    pose(0,3) = p[0];<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;    pose(1,3) = p[1];<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;    pose(2,3) = p[2];<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;    <span class="keywordflow">return<\/span> pose;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;}<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt; poseWithSphericalTranslation(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> p, <span class="keyword">const<\/span> T scale = T(1.0))<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;{<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;    Eigen::Matrix&lt;T, 4, 4&gt; pose = Eigen::Matrix&lt;T, 4, 4&gt;::Identity();<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;    T rotation[9];<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;    ceres::QuaternionToRotation(q, rotation);<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; 3; ++i)<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;    {<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> j = 0; j &lt; 3; ++j)<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;        {<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;            pose(i,j) = rotation[i * 3 + j];<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        }<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    }<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;    T theta = p[0];<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;    T phi = p[1];<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    pose(0,3) = sin(theta) * cos(phi) * scale;<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;    pose(1,3) = sin(theta) * sin(phi) * scale;<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;    pose(2,3) = cos(theta) * scale;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;    <span class="keywordflow">return<\/span> pose;<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;}<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="comment">\/\/ Returns the Sampson error of a given essential matrix and 2 image points<\/span><\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;T sampsonError(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; E,<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p1,<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p2)<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;{<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Ex1 = E * p1;<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Etx2 = E.transpose() * p2;<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    T x2tEx1 = p2.dot(Ex1);<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;    <span class="comment">\/\/ compute Sampson error<\/span><\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    T err = square(x2tEx1) \/ (square(Ex1(0,0)) + square(Ex1(1,0)) + square(Etx2(0,0)) + square(Etx2(1,0)));<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;    <span class="keywordflow">return<\/span> err;<\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;}<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<span class="comment">\/\/ Returns the Sampson error of a given rotation\/translation and 2 image points<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;T sampsonError(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 3&gt;&amp; R,<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; t,<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p1,<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p2)<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;{<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    <span class="comment">\/\/ construct essential matrix<\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; E = skew(t) * R;<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Ex1 = E * p1;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; Etx2 = E.transpose() * p2;<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;    T x2tEx1 = p2.dot(Ex1);<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;    <span class="comment">\/\/ compute Sampson error<\/span><\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;    T err = square(x2tEx1) \/ (square(Ex1(0,0)) + square(Ex1(1,0)) + square(Etx2(0,0)) + square(Etx2(1,0)));<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;    <span class="keywordflow">return<\/span> err;<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;}<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<span class="comment">\/\/ Returns the Sampson error of a given rotation\/translation and 2 image points<\/span><\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;T sampsonError(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 4, 4&gt;&amp; H,<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p1,<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;               <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; p2)<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;{<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; R = H.block(0, 0, 3, 3);<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = H.block(0, 3, 3, 1);<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;    <span class="keywordflow">return<\/span> sampsonError(R, t, p1, p2);<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;}<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;Eigen::Matrix&lt;T, 3, 1&gt;<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;transformPoint(<span class="keyword">const<\/span> Eigen::Matrix&lt;T, 4, 4&gt;&amp; H, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P)<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;{<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; P_trans = H.block(0, 0, 3, 3) * P + H.block(0, 3, 3, 1);<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;    <span class="keywordflow">return<\/span> P_trans;<\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;}<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;estimate3DRigidTransform(<span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points1,<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;                         <span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points2)<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;{<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;    <span class="comment">\/\/ compute centroids<\/span><\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; c1, c2;<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;    c1.setZero(); c2.setZero();<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;    {<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;        c1 += points1.at(i);<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        c2 += points2.at(i);<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;    }<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;    c1 \/= points1.size();<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;    c2 \/= points1.size();<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; X(3, points1.size());<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; Y(3, points1.size());<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;    {<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;        X.col(i) = points1.at(i) - c1;<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;        Y.col(i) = points2.at(i) - c2;<\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;    }<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; H = X * Y.transpose();<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    Eigen::JacobiSVD&lt; Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; svd(H, Eigen::ComputeFullU | Eigen::ComputeFullV);<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; U = svd.matrixU();<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; V = svd.matrixV();<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;    <span class="keywordflow">if<\/span> (U.determinant() * V.determinant() &lt; 0.0)<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;    {<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;        V.col(2) *= -1.0;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;    }<\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; R = V * U.transpose();<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = c2 - R * c1;<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;    <span class="keywordflow">return<\/span> homogeneousTransform(R, t);<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;}<\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;<\/div><div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;Eigen::Matrix&lt;T, 4, 4&gt;<\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;estimate3DRigidSimilarityTransform(<span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points1,<\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;                                   <span class="keyword">const<\/span> std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt;&amp; points2)<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;{<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;    <span class="comment">\/\/ compute centroids<\/span><\/div><div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; c1, c2;<\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;    c1.setZero(); c2.setZero();<\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    {<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;        c1 += points1.at(i);<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;        c2 += points2.at(i);<\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;    }<\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;<\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;    c1 \/= points1.size();<\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;    c2 \/= points1.size();<\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; X(3, points1.size());<\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;    Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; Y(3, points1.size());<\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;    {<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;        X.col(i) = points1.at(i) - c1;<\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;        Y.col(i) = points2.at(i) - c2;<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;    }<\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; H = X * Y.transpose();<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;    Eigen::JacobiSVD&lt; Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; svd(H, Eigen::ComputeFullU | Eigen::ComputeFullV);<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; U = svd.matrixU();<\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; V = svd.matrixV();<\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;    <span class="keywordflow">if<\/span> (U.determinant() * V.determinant() &lt; 0.0)<\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;    {<\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;        V.col(2) *= -1.0;<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;    }<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; R = V * U.transpose();<\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    std::vector&lt;Eigen::Matrix&lt;T, 3, 1&gt;, Eigen::aligned_allocator&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; &gt; rotatedPoints1(points1.size());<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;    {<\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;        rotatedPoints1.at(i) = R * (points1.at(i) - c1);<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;    }<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;<\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;    <span class="keywordtype">double<\/span> sum_ss = 0.0, sum_tt = 0.0;<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; points1.size(); ++i)<\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;    {<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;        sum_ss += (points1.at(i) - c1).squaredNorm();<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;        sum_tt += (points2.at(i) - c2).dot(rotatedPoints1.at(i));<\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;    }<\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;    <span class="keywordtype">double<\/span> scale = sum_tt \/ sum_ss;<\/div><div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;<\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;    Eigen::Matrix&lt;T, 3, 3&gt; sR = scale * R;<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;    Eigen::Matrix&lt;T, 3, 1&gt; t = c2 - sR * c1;<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;    <span class="keywordflow">return<\/span> homogeneousTransform(sR, t);<\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;}<\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;<\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;}<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacecamodocal_html"><div class="ttname"><a href="namespacecamodocal.html">camodocal<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraCalibration.h:8<\/div><\/div>$/;"	a
l00001	src/doc/html/EquidistantCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef EQUIDISTANTCAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define EQUIDISTANTCAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1EquidistantCamera.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">   21<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    {<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                   <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> k3, <span class="keywordtype">double<\/span> k4, <span class="keywordtype">double<\/span> k5,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                   <span class="keywordtype">double<\/span> mu, <span class="keywordtype">double<\/span> mv,<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                   <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k3(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k4(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k5(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; mu(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; mv(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; u0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; v0(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">double<\/span> k2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> k3(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> k4(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">double<\/span> k5(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">double<\/span> mu(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">double<\/span> mv(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keywordtype">double<\/span> u0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <span class="keywordtype">double<\/span> v0(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="comment">\/\/ projection<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordtype">double<\/span> m_k2;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_k3;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">double<\/span> m_k4;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keywordtype">double<\/span> m_k5;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keywordtype">double<\/span> m_mu;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordtype">double<\/span> m_mv;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordtype">double<\/span> m_u0;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keywordtype">double<\/span> m_v0;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    };<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;                      <span class="keywordtype">int<\/span> imageWidth, <span class="keywordtype">int<\/span> imageHeight,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                      <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> k3, <span class="keywordtype">double<\/span> k4, <span class="keywordtype">double<\/span> k5,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;                      <span class="keywordtype">double<\/span> mu, <span class="keywordtype">double<\/span> mv,<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;                      <span class="keywordtype">double<\/span> u0, <span class="keywordtype">double<\/span> v0);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera.html">EquidistantCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                      Eigen::Matrix&lt;double,2,3&gt;&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <span class="keyword">static<\/span> T r(T k2, T k3, T k4, T k5, T theta);<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    <span class="keywordtype">void<\/span> fitOddPoly(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; x, <span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; y,<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                    <span class="keywordtype">int<\/span> n, std::vector&lt;double&gt;&amp; coeffs) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keywordtype">void<\/span> backprojectSymmetric(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u,<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;                              <span class="keywordtype">double<\/span>&amp; theta, <span class="keywordtype">double<\/span>&amp; phi) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    <a class="code" href="classcamodocal_1_1EquidistantCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_K11, m_inv_K13, m_inv_K22, m_inv_K23;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;};<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;EquidistantCamera&gt; EquidistantCameraPtr;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const EquidistantCamera&gt; EquidistantCameraConstPtr;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;T<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;EquidistantCamera::r(T k2, T k3, T k4, T k5, T theta)<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;{<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    <span class="comment">\/\/ k1 = 1<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    <span class="keywordflow">return<\/span> theta +<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;           k2 * theta * theta * theta +<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;           k3 * theta * theta * theta * theta * theta +<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;           k4 * theta * theta * theta * theta * theta * theta * theta +<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;           k5 * theta * theta * theta * theta * theta * theta * theta * theta * theta;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;}<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;EquidistantCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;                                <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;                                <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;                                Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;{<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    T P_w[3];<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    P_w[0] = T(P(0));<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    P_w[1] = T(P(1));<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    P_w[2] = T(P(2));<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    P_c[0] += t[0];<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    P_c[1] += t[1];<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    P_c[2] += t[2];<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    <span class="comment">\/\/ project 3D object point to the image plane;<\/span><\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    T k2 = params[0];<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    T k3 = params[1];<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    T k4 = params[2];<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    T k5 = params[3];<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    T mu = params[4];<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    T mv = params[5];<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    T u0 = params[6];<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    T v0 = params[7];<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    T len = sqrt(P_c[0] * P_c[0] + P_c[1] * P_c[1] + P_c[2] * P_c[2]);<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    T theta = acos(P_c[2] \/ len);<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    T phi = atan2(P_c[1], P_c[0]);<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    Eigen::Matrix&lt;T,2,1&gt; p_u = r(k2, k3, k4, k5, theta) * Eigen::Matrix&lt;T,2,1&gt;(cos(phi), sin(phi));<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    p(0) = mu * p_u(0) + u0;<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;    p(1) = mv * p_u(1) + v0;<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;}<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;}<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1EquidistantCamera_html"><div class="ttname"><a href="classcamodocal_1_1EquidistantCamera.html">camodocal::EquidistantCamera<\/a><\/div><div class="ttdef"><b>Definition:<\/b> EquidistantCamera.h:18<\/div><\/div>$/;"	a
l00001	src/doc/html/FBrief_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_F_BRIEF__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_F_BRIEF__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;FClass.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;..\/DVision\/DVision.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1FBrief.html">   23<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1FBrief.html">FBrief<\/a>: <span class="keyword">protected<\/span> <a class="code" href="classDBoW2_1_1FClass.html">FClass<\/a><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;{<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">typedef<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">DVision::BRIEF::bitset<\/a> TDescriptor;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> TDescriptor *pDescriptor;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#a60a0a5143f4362666bd1b4bbac69a780">meanValue<\/a>(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    TDescriptor &amp;mean);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  <\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#a4ad4e20b0126bfff17c67e55568671d5">distance<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;a, <span class="keyword">const<\/span> TDescriptor &amp;b);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  <span class="keyword">static<\/span> std::string <a class="code" href="classDBoW2_1_1FBrief.html#ad692682949e1254e0bdd4d4b8295210b">toString<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;a);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#addb2ce6ad66fbe1106dd5c267205fd26">fromString<\/a>(TDescriptor &amp;a, <span class="keyword">const<\/span> std::string &amp;s);<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;  <\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FBrief.html#ac0f3eca8514bfcc4fecf19e794ccdaf4">toMat32F<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    cv::Mat &amp;mat);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;};<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1FBrief_html_ad692682949e1254e0bdd4d4b8295210b"><div class="ttname"><a href="classDBoW2_1_1FBrief.html#ad692682949e1254e0bdd4d4b8295210b">DBoW2::FBrief::toString<\/a><\/div><div class="ttdeci">static std::string toString(const TDescriptor &amp;a)<\/div><\/div>$/;"	a
l00001	src/doc/html/FClass_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_FCLASS__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_FCLASS__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1FClass.html">   25<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1FClass.html">FClass<\/a><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;{<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">class <\/span>TDescriptor;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> TDescriptor *pDescriptor;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  <\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> meanValue(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    TDescriptor &amp;mean) = 0;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  <\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">double<\/span> distance(<span class="keyword">const<\/span> TDescriptor &amp;a, <span class="keyword">const<\/span> TDescriptor &amp;b);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  <span class="keyword">static<\/span> std::string toString(<span class="keyword">const<\/span> TDescriptor &amp;a);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> fromString(TDescriptor &amp;a, <span class="keyword">const<\/span> std::string &amp;s);<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> toMat32F(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    cv::Mat &amp;mat);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;};<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceDBoW2_html"><div class="ttname"><a href="namespaceDBoW2.html">DBoW2<\/a><\/div><div class="ttdoc">Includes all the data structures to manage vocabularies and image databases. <\/div><div class="ttdef"><b>Definition:<\/b> BowVector.h:17<\/div><\/div>$/;"	a
l00001	src/doc/html/FeatureVector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_FEATURE_VECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_FEATURE_VECTOR__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1FeatureVector.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>: <\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <span class="keyword">public<\/span> std::map&lt;NodeId, std::vector&lt;unsigned int&gt; &gt;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;{<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  <a class="code" href="classDBoW2_1_1FeatureVector.html#a66c069d269c8c98dcf3ae39cbc6f861b">FeatureVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  <\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;  <a class="code" href="classDBoW2_1_1FeatureVector.html#a44514a020719b7e5ac552332a9922bd9">~FeatureVector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html#ae9554bfcbebc85439616de08f47f2238">addFeature<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span>, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_feature);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <span class="keyword">friend<\/span> std::ostream&amp; <a class="code" href="classDBoW2_1_1FeatureVector.html#a34aa65c93dc5f6be269610e3f238d9b1">operator&lt;&lt;<\/a>(std::ostream &amp;out, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;v);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;};<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1FeatureVector_html_a66c069d269c8c98dcf3ae39cbc6f861b"><div class="ttname"><a href="classDBoW2_1_1FeatureVector.html#a66c069d269c8c98dcf3ae39cbc6f861b">DBoW2::FeatureVector::FeatureVector<\/a><\/div><div class="ttdeci">FeatureVector(void)<\/div><\/div>$/;"	a
l00001	src/doc/html/PinholeCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef PINHOLECAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define PINHOLECAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1PinholeCamera.html">   13<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">   16<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                   <span class="keywordtype">int<\/span> w, <span class="keywordtype">int<\/span> h,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;                   <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;                   <span class="keywordtype">double<\/span> fx, <span class="keywordtype">double<\/span> fy, <span class="keywordtype">double<\/span> cx, <span class="keywordtype">double<\/span> cy);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; k2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p1(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; p2(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; fx(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; fy(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; cx(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; cy(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <span class="keywordtype">double<\/span> xi(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span> k1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span> k2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keywordtype">double<\/span> p1(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span> p2(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keywordtype">double<\/span> fx(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">double<\/span> fy(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> cx(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> cy(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">double<\/span> m_k1;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">double<\/span> m_k2;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">double<\/span> m_p1;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keywordtype">double<\/span> m_p2;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keywordtype">double<\/span> m_fx;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keywordtype">double<\/span> m_fy;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordtype">double<\/span> m_cx;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_cy;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    };<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>(<span class="keyword">const<\/span> std::string&amp; cameraName,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                  <span class="keywordtype">int<\/span> imageWidth, <span class="keywordtype">int<\/span> imageHeight,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                  <span class="keywordtype">double<\/span> k1, <span class="keywordtype">double<\/span> k2, <span class="keywordtype">double<\/span> p1, <span class="keywordtype">double<\/span> p2,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                  <span class="keywordtype">double<\/span> fx, <span class="keywordtype">double<\/span> fy, <span class="keywordtype">double<\/span> cx, <span class="keywordtype">double<\/span> cy);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera.html">PinholeCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;                      Eigen::Matrix&lt;double,2,3&gt;&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="keywordtype">void<\/span> distortion(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; d_u,<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                    Eigen::Matrix2d&amp; J) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <a class="code" href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_K11, m_inv_K13, m_inv_K22, m_inv_K23;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <span class="keywordtype">bool<\/span> m_noDistortion;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;};<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;PinholeCamera&gt; PinholeCameraPtr;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const PinholeCamera&gt; PinholeCameraConstPtr;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;PinholeCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;                            <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;                            Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;{<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    T P_w[3];<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    P_w[0] = T(P(0));<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    P_w[1] = T(P(1));<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    P_w[2] = T(P(2));<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;    T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    P_c[0] += t[0];<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    P_c[1] += t[1];<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    P_c[2] += t[2];<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;    <span class="comment">\/\/ project 3D object point to the image plane<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    T k1 = params[0];<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    T k2 = params[1];<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    T p1 = params[2];<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    T p2 = params[3];<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    T fx = params[4];<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    T fy = params[5];<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    T alpha = T(0); <span class="comment">\/\/cameraParams.alpha();<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    T cx = params[6];<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    T cy = params[7];<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    <span class="comment">\/\/ Transform to model plane<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    T u = P_c[0] \/ P_c[2];<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    T v = P_c[1] \/ P_c[2];<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    T rho_sqr = u * u + v * v;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    T L = T(1.0) + k1 * rho_sqr + k2 * rho_sqr * rho_sqr;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    T du = T(2.0) * p1 * u * v + p2 * (rho_sqr + T(2.0) * u * u);<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    T dv = p1 * (rho_sqr + T(2.0) * v * v) + T(2.0) * p2 * u * v;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    u = L * u + du;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    v = L * v + dv;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    p(0) = fx * (u + alpha * v) + cx;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    p(1) = fy * v + cy;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;}<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;}<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1PinholeCamera_1_1Parameters_html"><div class="ttname"><a href="classcamodocal_1_1PinholeCamera_1_1Parameters.html">camodocal::PinholeCamera::Parameters<\/a><\/div><div class="ttdef"><b>Definition:<\/b> PinholeCamera.h:16<\/div><\/div>$/;"	a
l00001	src/doc/html/QueryResults_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_QUERY_RESULTS__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_QUERY_RESULTS__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">   18<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1Result.html">Result<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">   26<\/a><\/span>&#160;  EntryId <a class="code" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">Id<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">   29<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  <\/div><div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#ad13eee018380c45ca2d69138f41607af">   32<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1Result.html#ad13eee018380c45ca2d69138f41607af">nWords<\/a>; <span class="comment">\/\/ words in common<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;  <span class="comment">\/\/ !!! this is filled only by Bhatt score!<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;  <span class="comment">\/\/ (and for BCMatching, BCThresholding then)<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  <span class="keywordtype">double<\/span> bhatScore, chiScore;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  <\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="comment">\/\/ only done by ChiSq and BCThresholding <\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a82985e53f548cd26044dc2d7281d6b36">   40<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1Result.html#a82985e53f548cd26044dc2d7281d6b36">sumCommonVi<\/a>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keywordtype">double<\/span> sumCommonWi;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keywordtype">double<\/span> expectedChiScore;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a3cd1ea537745f0f76042d08033629f4a">   48<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="classDBoW2_1_1Result.html#a3cd1ea537745f0f76042d08033629f4a">Result<\/a>(){}<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <\/div><div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a5ca2977e7a2646f886ef92cb7f64352a">   55<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="classDBoW2_1_1Result.html#a5ca2977e7a2646f886ef92cb7f64352a">Result<\/a>(EntryId _id, <span class="keywordtype">double<\/span> _score): Id(_id), Score(_score){}<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a55a1e40b299c525e4aad3fdbe61f8a33">   61<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a55a1e40b299c525e4aad3fdbe61f8a33">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;r)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &lt; r.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#aea5b5e52f1ebce9be7f35a22ef18a574">   70<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#aea5b5e52f1ebce9be7f35a22ef18a574">operator&gt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;r)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &gt; r.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;  }<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a504b0a516459692a0f8ffcc097c01732">   79<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a504b0a516459692a0f8ffcc097c01732">operator==<\/a>(EntryId <span class="keywordtype">id<\/span>)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Id == id;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;  }<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;  <\/div><div class="line"><a name="l00089"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a4b13db14e169e9df03b030b67e66d3b8">   89<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a4b13db14e169e9df03b030b67e66d3b8">operator&lt;<\/a>(<span class="keywordtype">double<\/span> s)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &lt; s;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;  }<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;  <\/div><div class="line"><a name="l00099"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#af9898c347504a5d3a9fd2a840c9b188c">   99<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#af9898c347504a5d3a9fd2a840c9b188c">operator&gt;<\/a>(<span class="keywordtype">double<\/span> s)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keywordflow">return<\/span> this-&gt;Score &gt; s;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;  }<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;  <\/div><div class="line"><a name="l00110"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">  110<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">gt<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;  {<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt; b.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;  }<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;  <\/div><div class="line"><a name="l00119"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#ab24992db21ed95d77fa5fc040d45940b">  119<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#ab24992db21ed95d77fa5fc040d45940b">ge<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;  {<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt; b.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;  }<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <\/div><div class="line"><a name="l00130"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#afe1567c5a010ebf492a558f60e0f7275">  130<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#afe1567c5a010ebf492a558f60e0f7275">geq<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;  {<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt;= b.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  }<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;  <\/div><div class="line"><a name="l00141"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#a2cb32089cbe5dffaa5b60fb1b410a713">  141<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#a2cb32089cbe5dffaa5b60fb1b410a713">geqv<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keywordtype">double<\/span> s)<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  {<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a3932f93c1494a43592b3cfee06e98f72">Score<\/a> &gt;= s;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;  }<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;  <\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;  <\/div><div class="line"><a name="l00153"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1Result.html#ac8b4e2a21806b48a042168936c44e6bd">  153<\/a><\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1Result.html#ac8b4e2a21806b48a042168936c44e6bd">ltId<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> &amp;b)<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;  {<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    <span class="keywordflow">return<\/span> a.<a class="code" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">Id<\/a> &lt; b.<a class="code" href="classDBoW2_1_1Result.html#a383272245ea89ff18858704dd6325510">Id<\/a>;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;  }<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;  <\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;  <span class="keyword">friend<\/span> std::ostream &amp; <a class="code" href="classDBoW2_1_1Result.html#adcb074a444887749ca1ce08b25b73a48">operator&lt;&lt;<\/a>(std::ostream&amp; os, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1Result.html">Result<\/a>&amp; ret );<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;};<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1QueryResults.html">  167<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a>: <span class="keyword">public<\/span> std::vector&lt;Result&gt;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;{<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> scaleScores(<span class="keywordtype">double<\/span> factor);<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;  <\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;  <span class="keyword">friend<\/span> std::ostream &amp; <a class="code" href="classDBoW2_1_1Result.html#adcb074a444887749ca1ce08b25b73a48">operator&lt;&lt;<\/a>(std::ostream&amp; os, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a>&amp; ret );<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;  <\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;  <span class="keywordtype">void<\/span> saveM(<span class="keyword">const<\/span> std::string &amp;filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;  <\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;};<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1QueryResults.html#aa47048267696191c070545c935e28b47">  194<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html#aa47048267696191c070545c935e28b47">QueryResults::scaleScores<\/a>(<span class="keywordtype">double<\/span> factor)<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;{<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;  <span class="keywordflow">for<\/span>(QueryResults::iterator qit = begin(); qit != end(); ++qit) <\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    qit-&gt;Score *= factor;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;}<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;} <span class="comment">\/\/ namespace TemplatedBoW<\/span><\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;  <\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1Result_html_a3cd1ea537745f0f76042d08033629f4a"><div class="ttname"><a href="classDBoW2_1_1Result.html#a3cd1ea537745f0f76042d08033629f4a">DBoW2::Result::Result<\/a><\/div><div class="ttdeci">Result()<\/div><div class="ttdoc">debug <\/div><div class="ttdef"><b>Definition:<\/b> QueryResults.h:48<\/div><\/div>$/;"	a
l00001	src/doc/html/Random_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*  <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: Random.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Project: DUtils library<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Date: April 2010, November 2011<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Description: manages pseudo-random numbers<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#ifndef __D_RANDOM__<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#define __D_RANDOM__<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a> {<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Random.html">Random<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  <\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#ab5fdbc0a1dec22ea1b3365ac16508b4d">SeedRand<\/a>();<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#a91926937ff5c31ca4aa3948de8b4d788">SeedRandOnce<\/a>();<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#ab5fdbc0a1dec22ea1b3365ac16508b4d">SeedRand<\/a>(<span class="keywordtype">int<\/span> seed);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Random.html#a91926937ff5c31ca4aa3948de8b4d788">SeedRandOnce<\/a>(<span class="keywordtype">int<\/span> seed);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html#ac5d2e4d977afdec30071c531a7a96d88">   56<\/a><\/span>&#160;    <span class="keyword">static<\/span> T <a class="code" href="classDUtils_1_1Random.html#ac5d2e4d977afdec30071c531a7a96d88">RandomValue<\/a>(){<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordflow">return<\/span> (T)rand()\/(T)RAND_MAX;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    }<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html#a13760f5d6d4b866fbcc350dbb0d39d02">   67<\/a><\/span>&#160;    <span class="keyword">static<\/span> T <a class="code" href="classDUtils_1_1Random.html#a13760f5d6d4b866fbcc350dbb0d39d02">RandomValue<\/a>(T min, T max){<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordflow">return<\/span> Random::RandomValue&lt;T&gt;() * (max - min) + min;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    }<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random.html#a39e456a640b660d7ef06460822685dc3">RandomInt<\/a>(<span class="keywordtype">int<\/span> min, <span class="keywordtype">int<\/span> max);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random.html#a2c769bcd60a08fc3eba3ef4abf9761d5">   85<\/a><\/span>&#160;    <span class="keyword">static<\/span> T <a class="code" href="classDUtils_1_1Random.html#a2c769bcd60a08fc3eba3ef4abf9761d5">RandomGaussianValue<\/a>(T mean, T sigma)<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    {<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="comment">\/\/ Box-Muller transformation<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    T x1, x2, w, y1;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordflow">do<\/span> {<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;      x1 = (T)2. * RandomValue&lt;T&gt;() - (T)1.;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;      x2 = (T)2. * RandomValue&lt;T&gt;() - (T)1.;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;      w = x1 * x1 + x2 * x2;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    } <span class="keywordflow">while<\/span> ( w &gt;= (T)1. || w == (T)0. );<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    w = sqrt( ((T)-2.0 * log( w ) ) \/ w );<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    y1 = x1 * w;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keywordflow">return<\/span>( mean + y1 * sigma );<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    }<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">bool<\/span> m_already_seeded;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  <\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;};<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">  112<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">Random::UnrepeatedRandomizer<\/a><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;{<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;  <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>(<span class="keywordtype">int<\/span> min, <span class="keywordtype">int<\/span> max);<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;  ~<a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>(){}<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;  <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>&amp; rnd);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;  <\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;  <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html">UnrepeatedRandomizer<\/a>&amp; rnd);<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;  <\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;  <span class="keywordtype">int<\/span> <span class="keyword">get<\/span>();<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  <\/div><div class="line"><a name="l00149"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a70d6ff7e510b11fde4640033963e8627">  149<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a70d6ff7e510b11fde4640033963e8627">empty<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_values.empty(); }<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;  <\/div><div class="line"><a name="l00155"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a29599dcd4c885298736d46086dad6485">  155<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a29599dcd4c885298736d46086dad6485">left<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_values.size(); }<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;  <\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;  <span class="keywordtype">void<\/span> reset();<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;  <\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;  <span class="keywordtype">void<\/span> createValues();<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00172"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a7b59cc2afb7d7db20aa048ea95365134">  172<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a7b59cc2afb7d7db20aa048ea95365134">m_min<\/a>;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a5c2d23ba34589d23ac131e37feac6f6b">  174<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#a5c2d23ba34589d23ac131e37feac6f6b">m_max<\/a>;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#adbe23146bfc61994e361d356282ce6c4">  177<\/a><\/span>&#160;  std::vector&lt;int&gt; <a class="code" href="classDUtils_1_1Random_1_1UnrepeatedRandomizer.html#adbe23146bfc61994e361d356282ce6c4">m_values<\/a>;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;};<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;}<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<\/div><div class="ttc" id="classDUtils_1_1Random_html"><div class="ttname"><a href="classDUtils_1_1Random.html">DUtils::Random<\/a><\/div><div class="ttdoc">Functions to generate pseudo-random numbers. <\/div><div class="ttdef"><b>Definition:<\/b> Random.h:21<\/div><\/div>$/;"	a
l00001	src/doc/html/ScaramuzzaCamera_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef SCARAMUZZACAMERA_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define SCARAMUZZACAMERA_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;ceres\/rotation.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;Camera.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#define SCARAMUZZA_POLY_SIZE 5<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#define SCARAMUZZA_INV_POLY_SIZE 20<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#define SCARAMUZZA_CAMERA_NUM_PARAMS (SCARAMUZZA_POLY_SIZE + SCARAMUZZA_INV_POLY_SIZE + 2 <\/span><span class="comment">\/*center*\/<\/span><span class="preprocessor"> + 3 <\/span><span class="comment">\/*affine*\/<\/span><span class="preprocessor">)<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1OCAMCamera.html">   23<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1OCAMCamera.html">OCAMCamera<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera.html">Camera<\/a><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;{<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">   26<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>: <span class="keyword">public<\/span> <a class="code" href="classcamodocal_1_1Camera_1_1Parameters.html">Camera::Parameters<\/a><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    {<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; C(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_C; }<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; D(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_D; }<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; E(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_E; }<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; center_x(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_center_x; }<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; center_y(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> m_center_y; }<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; poly(<span class="keywordtype">int<\/span> idx) { <span class="keywordflow">return<\/span> m_poly[idx]; }<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keywordtype">double<\/span>&amp; inv_poly(<span class="keywordtype">int<\/span> idx) { <span class="keywordflow">return<\/span> m_inv_poly[idx]; }<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordtype">double<\/span> C(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_C; }<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">double<\/span> D(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_D; }<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">double<\/span> E(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_E; }<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">double<\/span> center_x(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_center_x; }<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keywordtype">double<\/span> center_y(<span class="keywordtype">void<\/span>)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_center_y; }<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keywordtype">double<\/span> poly(<span class="keywordtype">int<\/span> idx)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_poly[idx]; }<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">double<\/span> inv_poly(<span class="keywordtype">int<\/span> idx)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> m_inv_poly[idx]; }<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">bool<\/span> readFromYamlFile(<span class="keyword">const<\/span> std::string&amp; filename);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">void<\/span> writeToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; other);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">double<\/span> m_poly[SCARAMUZZA_POLY_SIZE];<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">double<\/span> m_inv_poly[SCARAMUZZA_INV_POLY_SIZE];<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keywordtype">double<\/span> m_C;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordtype">double<\/span> m_D;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keywordtype">double<\/span> m_E;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordtype">double<\/span> m_center_x;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordtype">double<\/span> m_center_y;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    };<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <a class="code" href="classcamodocal_1_1OCAMCamera.html">OCAMCamera<\/a>();<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <a class="code" href="classcamodocal_1_1OCAMCamera.html">OCAMCamera<\/a>(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; params);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    Camera::ModelType modelType(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="keyword">const<\/span> std::string&amp; cameraName(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">int<\/span> imageWidth(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">int<\/span> imageHeight(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">void<\/span> estimateIntrinsics(<span class="keyword">const<\/span> cv::Size&amp; boardSize,<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point3f&gt; &gt;&amp; objectPoints,<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                            <span class="keyword">const<\/span> std::vector&lt; std::vector&lt;cv::Point2f&gt; &gt;&amp; imagePoints);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the sphere<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">void<\/span> liftSphere(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="comment">\/\/ Lift points from the image plane to the projective space<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">void<\/span> liftProjective(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p, Eigen::Vector3d&amp; P) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="comment">\/\/%output P<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="comment">\/\/ Projects 3D points to the image plane (Pi function)<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    <span class="comment">\/\/ and calculates jacobian<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/void spaceToPlane(const Eigen::Vector3d&amp; P, Eigen::Vector2d&amp; p,<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/                  Eigen::Matrix&lt;double,2,3&gt;&amp; J) const;<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/%output J<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="keywordtype">void<\/span> undistToPlane(<span class="keyword">const<\/span> Eigen::Vector2d&amp; p_u, Eigen::Vector2d&amp; p) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="comment">\/\/%output p<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                             <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                             <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                             Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> spaceToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;                              <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;                              <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                              Eigen::Matrix&lt;T, 3, 1&gt;&amp; P_s);<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> LiftToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                              <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 2, 1&gt;&amp; p,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                              Eigen::Matrix&lt;T, 3, 1&gt;&amp; P);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> SphereToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                               Eigen::Matrix&lt;T, 2, 1&gt;&amp; p);<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordtype">void<\/span> initUndistortMap(cv::Mat&amp; map1, cv::Mat&amp; map2, <span class="keywordtype">double<\/span> fScale = 1.0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    cv::Mat initUndistortRectifyMap(cv::Mat&amp; map1, cv::Mat&amp; map2,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                                    <span class="keywordtype">float<\/span> fx = -1.0f, <span class="keywordtype">float<\/span> fy = -1.0f,<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                                    cv::Size imageSize = cv::Size(0, 0),<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                                    <span class="keywordtype">float<\/span> cx = -1.0f, <span class="keywordtype">float<\/span> cy = -1.0f,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;                                    cv::Mat rmat = cv::Mat::eye(3, 3, CV_32F)) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">int<\/span> parameterCount(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; getParameters(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keywordtype">void<\/span> setParameters(<span class="keyword">const<\/span> <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a>&amp; parameters);<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keywordtype">void<\/span> readParameters(<span class="keyword">const<\/span> std::vector&lt;double&gt;&amp; parameterVec);<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <span class="keywordtype">void<\/span> writeParameters(std::vector&lt;double&gt;&amp; parameterVec) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    <span class="keywordtype">void<\/span> writeParametersToYamlFile(<span class="keyword">const<\/span> std::string&amp; filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    std::string parametersToString(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    <a class="code" href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">Parameters<\/a> mParameters;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keywordtype">double<\/span> m_inv_scale;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;};<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;OCAMCamera&gt; OCAMCameraPtr;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;const OCAMCamera&gt; OCAMCameraConstPtr;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;OCAMCamera::spaceToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                         <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                         <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                         Eigen::Matrix&lt;T, 2, 1&gt;&amp; p)<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;{<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    {<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;        T P_w[3];<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        P_w[0] = T(P(0));<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;        P_w[1] = T(P(1));<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        P_w[2] = T(P(2));<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;        <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        P_c[0] += t[0];<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        P_c[1] += t[1];<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        P_c[2] += t[2];<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    }<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    T c = params[0];<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    T d = params[1];<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    T e = params[2];<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    T xc[2] = { params[3], params[4] };<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <span class="comment">\/\/T poly[SCARAMUZZA_POLY_SIZE];<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    <span class="comment">\/\/for (int i=0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <span class="comment">\/\/    poly[i] = params[5+i];<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    T inv_poly[SCARAMUZZA_INV_POLY_SIZE];<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i=0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++)<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;        inv_poly[i] = params[5 + SCARAMUZZA_POLY_SIZE + i];<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    T norm_sqr = P_c[0] * P_c[0] + P_c[1] * P_c[1];<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    T norm = T(0.0);<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    <span class="keywordflow">if<\/span> (norm_sqr &gt; T(0.0))<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        norm = sqrt(norm_sqr);<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    T theta = atan2(-P_c[2], norm);<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    T rho = T(0.0);<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    T theta_i = T(1.0);<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++)<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    {<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;        rho += theta_i * inv_poly[i];<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        theta_i *= theta;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    }<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;    T invNorm = T(1.0) \/ norm;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    T xn[2] = {<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        P_c[0] * invNorm * rho,<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        P_c[1] * invNorm * rho<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;    };<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;    p(0) = xn[0] * c + xn[1] * d + xc[0];<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;    p(1) = xn[0] * e + xn[1]     + xc[1];<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;}<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;OCAMCamera::spaceToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;                          <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> q, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> t,<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;                          <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;                          Eigen::Matrix&lt;T, 3, 1&gt;&amp; P_s)<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;{<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;    {<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;        T P_w[3];<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;        P_w[0] = T(P(0));<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;        P_w[1] = T(P(1));<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;        P_w[2] = T(P(2));<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <span class="comment">\/\/ Convert quaternion from Eigen convention (x, y, z, w)<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;        <span class="comment">\/\/ to Ceres convention (w, x, y, z)<\/span><\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;        T q_ceres[4] = {q[3], q[0], q[1], q[2]};<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;        ceres::QuaternionRotatePoint(q_ceres, P_w, P_c);<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        P_c[0] += t[0];<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;        P_c[1] += t[1];<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;        P_c[2] += t[2];<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;    }<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    <span class="comment">\/\/T poly[SCARAMUZZA_POLY_SIZE];<\/span><\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;    <span class="comment">\/\/for (int i=0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/span><\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    <span class="comment">\/\/    poly[i] = params[5+i];<\/span><\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;    T norm_sqr = P_c[0] * P_c[0] + P_c[1] * P_c[1] + P_c[2] * P_c[2];<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;    T norm = T(0.0);<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    <span class="keywordflow">if<\/span> (norm_sqr &gt; T(0.0))<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;        norm = sqrt(norm_sqr);<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;    P_s(0) = P_c[0] \/ norm;<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;    P_s(1) = P_c[1] \/ norm;<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;    P_s(2) = P_c[2] \/ norm;<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;}<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<span class="keywordtype">void<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;OCAMCamera::LiftToSphere(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params,<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;                          <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 2, 1&gt;&amp; p,<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;                          Eigen::Matrix&lt;T, 3, 1&gt;&amp; P)<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;{<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;    T c = params[0];<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;    T d = params[1];<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    T e = params[2];<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;    T cc[2] = { params[3], params[4] };<\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;    T poly[SCARAMUZZA_POLY_SIZE];<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i=0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;       poly[i] = params[5+i];<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;<\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;    <span class="comment">\/\/ Relative to Center<\/span><\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;    T p_2d[2];<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;    p_2d[0] = T(p(0));<\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;    p_2d[1] = T(p(1));<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;    T xc[2] = { p_2d[0] - cc[0], p_2d[1] - cc[1]};<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;    T inv_scale = T(1.0) \/ (c - d * e);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    <span class="comment">\/\/ Affine Transformation<\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;    T xc_a[2];<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;    xc_a[0] = inv_scale * (xc[0] - d * xc[1]);<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;    xc_a[1] = inv_scale * (-e * xc[0] + c * xc[1]);<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;    T norm_sqr = xc_a[0] * xc_a[0] + xc_a[1] * xc_a[1];<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;    T phi = sqrt(norm_sqr);<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;    T phi_i = T(1.0);<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;    T z = T(0.0);<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_POLY_SIZE; i++)<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;    {<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;        <span class="keywordflow">if<\/span> (i!=1) {<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;            z += phi_i * poly[i];<\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;        }<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;        phi_i *= phi;<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;    }<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;    T p_3d[3];<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;    p_3d[0] = xc[0];<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;    p_3d[1] = xc[1];<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;    p_3d[2] = -z;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;    T p_3d_norm_sqr = p_3d[0] * p_3d[0] + p_3d[1] * p_3d[1] + p_3d[2] * p_3d[2];<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;    T p_3d_norm = sqrt(p_3d_norm_sqr);<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;    P &lt;&lt; p_3d[0] \/ p_3d_norm, p_3d[1] \/ p_3d_norm, p_3d[2] \/ p_3d_norm;<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;}<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<span class="keywordtype">void<\/span> OCAMCamera::SphereToPlane(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> params, <span class="keyword">const<\/span> Eigen::Matrix&lt;T, 3, 1&gt;&amp; P,<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;                               Eigen::Matrix&lt;T, 2, 1&gt;&amp; p) {<\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;    T P_c[3];<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;    {<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;        P_c[0] = T(P(0));<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        P_c[1] = T(P(1));<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        P_c[2] = T(P(2));<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;    }<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;    T c = params[0];<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;    T d = params[1];<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;    T e = params[2];<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;    T xc[2] = {params[3], params[4]};<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;    T inv_poly[SCARAMUZZA_INV_POLY_SIZE];<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++)<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        inv_poly[i] = params[5 + SCARAMUZZA_POLY_SIZE + i];<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;    T norm_sqr = P_c[0] * P_c[0] + P_c[1] * P_c[1];<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;    T norm = T(0.0);<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;    <span class="keywordflow">if<\/span> (norm_sqr &gt; T(0.0)) norm = sqrt(norm_sqr);<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    T theta = atan2(-P_c[2], norm);<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    T rho = T(0.0);<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;    T theta_i = T(1.0);<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; SCARAMUZZA_INV_POLY_SIZE; i++) {<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;        rho += theta_i * inv_poly[i];<\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;        theta_i *= theta;<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;    }<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;    T invNorm = T(1.0) \/ norm;<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    T xn[2] = {P_c[0] * invNorm * rho, P_c[1] * invNorm * rho};<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    p(0) = xn[0] * c + xn[1] * d + xc[0];<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;    p(1) = xn[0] * e + xn[1] + xc[1];<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;}<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;}<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1OCAMCamera_1_1Parameters_html"><div class="ttname"><a href="classcamodocal_1_1OCAMCamera_1_1Parameters.html">camodocal::OCAMCamera::Parameters<\/a><\/div><div class="ttdef"><b>Definition:<\/b> ScaramuzzaCamera.h:26<\/div><\/div>$/;"	a
l00001	src/doc/html/ScoringObject_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_SCORING_OBJECT__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_SCORING_OBJECT__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1GeneralScoring.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1GeneralScoring.html">GeneralScoring<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#a43b3f5fedb19e6a19e17b9813efd17e8">score<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;w) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#ab0cadafd50b0f2f559f6325a6944f72f">mustNormalize<\/a>(<a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> &amp;norm) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1GeneralScoring.html#a4e9388752852ebc9e247ad50bf6d128e">   39<\/a><\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#a4e9388752852ebc9e247ad50bf6d128e">LOG_EPS<\/a>; <\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="comment">\/\/ If you change the type of WordValue, make sure you change also the<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="comment">\/\/ epsilon value (this is needed by the KL method)<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <\/div><div class="line"><a name="l00043"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1GeneralScoring.html#a1796812280a5188e06d8137baa977776">   43<\/a><\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="classDBoW2_1_1GeneralScoring.html#a1796812280a5188e06d8137baa977776">~GeneralScoring<\/a>() {} <\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;};<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#define __SCORING_CLASS(NAME, MUSTNORMALIZE, NORM) \\<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">  NAME: public GeneralScoring \\<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">  { public: \\<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor"> \\<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">    virtual double score(const BowVector &amp;v, const BowVector &amp;w) const; \\<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">    \\<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor"> \\<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">    virtual inline bool mustNormalize(LNorm &amp;norm) const  \\<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">      { norm = NORM; return MUSTNORMALIZE; } \\<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">  }<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  <\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(L1Scoring, true, L1);<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(L2Scoring, true, L2);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(ChiSquareScoring, true, L1);<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(KLScoring, true, L1);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(BhattacharyyaScoring, true, L1);<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="namespaceDBoW2.html#a75539718457109a0efbd4778f7fa7369">__SCORING_CLASS<\/a>(DotProductScoring, false, L1);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#undef __SCORING_CLASS<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;  <\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div><div class="ttc" id="classDBoW2_1_1GeneralScoring_html_a1796812280a5188e06d8137baa977776"><div class="ttname"><a href="classDBoW2_1_1GeneralScoring.html#a1796812280a5188e06d8137baa977776">DBoW2::GeneralScoring::~GeneralScoring<\/a><\/div><div class="ttdeci">virtual ~GeneralScoring()<\/div><div class="ttdoc">Required for virtual base classes. <\/div><div class="ttdef"><b>Definition:<\/b> ScoringObject.h:43<\/div><\/div>$/;"	a
l00001	src/doc/html/Spline_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*  dynamo:- Event driven molecular dynamics simulator<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">    http:\/\/www.marcusbannerman.co.uk\/dynamo<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">    Copyright (C) 2011  Marcus N Campbell Bannerman &lt;m.bannerman@gmail.com&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">    This program is free software: you can redistribute it and\/or<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">    modify it under the terms of the GNU General Public License<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">    version 3 as published by the Free Software Foundation.<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment">    This program is distributed in the hope that it will be useful,<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">    GNU General Public License for more details.<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">    along with this program.  If not, see &lt;http:\/\/www.gnu.org\/licenses\/&gt;.<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/vector.hpp&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/vector_proxy.hpp&gt;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/matrix.hpp&gt;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/triangular.hpp&gt;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &lt;boost\/numeric\/ublas\/lu.hpp&gt;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &lt;exception&gt;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">namespace <\/span>ublas = boost::numeric::ublas;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno"><a class="line" href="classSpline.html">   29<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSpline.html">Spline<\/a> : <span class="keyword">private<\/span> std::vector&lt;std::pair&lt;double, double&gt; &gt;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;{<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <span class="comment">\/\/The boundary conditions available<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;  <span class="keyword">enum<\/span> BC_type {<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    FIXED_1ST_DERIV_BC,<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    FIXED_2ND_DERIV_BC,<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    PARABOLIC_RUNOUT_BC<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  };<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="keyword">enum<\/span> Spline_type {<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    LINEAR,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    CUBIC<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  };<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="comment">\/\/Constructor takes the boundary conditions as arguments, this<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <span class="comment">\/\/sets the first derivative (gradient) at the lower and upper<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;  <span class="comment">\/\/end points<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  <a class="code" href="classSpline.html">Spline<\/a>():<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    _valid(<span class="keyword">false<\/span>),<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    _BCLow(FIXED_2ND_DERIV_BC), _BCHigh(FIXED_2ND_DERIV_BC),<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    _BCLowVal(0), _BCHighVal(0),<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    _type(CUBIC)<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  {}<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keyword">typedef<\/span> std::vector&lt;std::pair&lt;double, double&gt; &gt; base;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;  <span class="keyword">typedef<\/span> base::const_iterator const_iterator;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <span class="comment">\/\/Standard STL read-only container stuff<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  const_iterator begin()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::begin(); }<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;  const_iterator end()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::end(); }<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;  <span class="keywordtype">void<\/span> clear() { _valid = <span class="keyword">false<\/span>; base::clear(); _data.clear(); }<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;  <span class="keywordtype">size_t<\/span> size()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::size(); }<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;  <span class="keywordtype">size_t<\/span> max_size()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::max_size(); }<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;  <span class="keywordtype">size_t<\/span> capacity()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::capacity(); }<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  <span class="keywordtype">bool<\/span> empty()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> base::empty(); }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;  <span class="comment">\/\/Add a point to the spline, and invalidate it so its<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;  <span class="comment">\/\/recalculated on the next access<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> addPoint(<span class="keywordtype">double<\/span> x, <span class="keywordtype">double<\/span> y)<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;  {<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    _valid = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    base::push_back(std::pair&lt;double, double&gt;(x,y));<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  }<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;  <span class="comment">\/\/Reset the boundary conditions<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setLowBC(BC_type BC, <span class="keywordtype">double<\/span> val = 0)<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  { _BCLow = BC; _BCLowVal = val; _valid = <span class="keyword">false<\/span>; }<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setHighBC(BC_type BC, <span class="keywordtype">double<\/span> val = 0)<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;  { _BCHigh = BC; _BCHighVal = val; _valid = <span class="keyword">false<\/span>; }<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;  <span class="keywordtype">void<\/span> setType(Spline_type type) { _type = type; _valid = <span class="keyword">false<\/span>; }<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;  <span class="comment">\/\/Check if the spline has been calculated, then generate the<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;  <span class="comment">\/\/spline interpolated value<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;  <span class="keywordtype">double<\/span> operator()(<span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;  {<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keywordflow">if<\/span> (!_valid) generate();<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="comment">\/\/Special cases when we&#39;re outside the range of the spline points<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordflow">if<\/span> (xval &lt;= x(0)) <span class="keywordflow">return<\/span> lowCalc(xval);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keywordflow">if<\/span> (xval &gt;= x(size()-1)) <span class="keywordflow">return<\/span> highCalc(xval);<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/Check all intervals except the last one<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keywordflow">for<\/span> (std::vector&lt;SplineData&gt;::const_iterator iPtr = _data.begin();<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;         iPtr != _data.end()-1; ++iPtr)<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keywordflow">if<\/span> ((xval &gt;= iPtr-&gt;x) &amp;&amp; (xval &lt;= (iPtr+1)-&gt;x))<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;          <span class="keywordflow">return<\/span> splineCalc(iPtr, xval);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keywordflow">return<\/span> splineCalc(_data.end() - 1, xval);<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;  }<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  <span class="keyword">struct <\/span>SplineData { <span class="keywordtype">double<\/span> x,a,b,c,d; };<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  <span class="comment">\/\/vector of calculated spline data<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;  std::vector&lt;SplineData&gt; _data;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;  <span class="comment">\/\/Second derivative at each point<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;  ublas::vector&lt;double&gt; _ddy;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;  <span class="comment">\/\/Tracks whether the spline parameters have been calculated for<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;  <span class="comment">\/\/the current set of points<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  <span class="keywordtype">bool<\/span> _valid;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;  <span class="comment">\/\/The boundary conditions<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;  BC_type _BCLow, _BCHigh;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;  <span class="comment">\/\/The values of the boundary conditions<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;  <span class="keywordtype">double<\/span> _BCLowVal, _BCHighVal;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  Spline_type _type;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;  <span class="comment">\/\/Function to calculate the value of a given spline at a point xval<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> splineCalc(std::vector&lt;SplineData&gt;::const_iterator i, <span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  {<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> lx = xval - i-&gt;x;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordflow">return<\/span> ((i-&gt;a * lx + i-&gt;b) * lx + i-&gt;c) * lx + i-&gt;d;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;  }<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> lowCalc(<span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;  {<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> lx = xval - x(0);<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordflow">if<\/span> (_type == LINEAR)<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;      <span class="keywordflow">return<\/span> lx * _BCHighVal + y(0);<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> firstDeriv = (y(1) - y(0)) \/ h(0) - 2 * h(0) * (_data[0].b + 2 * _data[1].b) \/ 6;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keywordflow">switch<\/span>(_BCLow)<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;      {<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;        <span class="keywordflow">return<\/span> lx * _BCLowVal + y(0);<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;          <span class="keywordflow">return<\/span> lx * lx * _BCLowVal + firstDeriv * lx + y(0);<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;      <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <span class="keywordflow">return<\/span> lx * lx * _ddy[0] + lx * firstDeriv  + y(0);<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;      }<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Unknown BC&quot;<\/span>);<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;  }<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> highCalc(<span class="keywordtype">double<\/span> xval)<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;  {<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> lx = xval - x(size() - 1);<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    <span class="keywordflow">if<\/span> (_type == LINEAR)<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;      <span class="keywordflow">return<\/span> lx * _BCHighVal + y(size() - 1);<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> firstDeriv = 2 * h(size() - 2) * (_ddy[size() - 2] + 2 * _ddy[size() - 1]) \/ 6 + (y(size() - 1) - y(size() - 2)) \/ h(size() - 2);<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <span class="keywordflow">switch<\/span>(_BCHigh)<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;      {<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        <span class="keywordflow">return<\/span> lx * _BCHighVal + y(size() - 1);<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;      <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        <span class="keywordflow">return<\/span> lx * lx * _BCHighVal + firstDeriv * lx + y(size() - 1);<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;      <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="keywordflow">return<\/span> lx * lx * _ddy[size()-1] + lx * firstDeriv  + y(size() - 1);<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;      }<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Unknown BC&quot;<\/span>);<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;  }<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;  <span class="comment">\/\/These just provide access to the point data in a clean way<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> x(<span class="keywordtype">size_t<\/span> i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> operator[](i).first; }<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> y(<span class="keywordtype">size_t<\/span> i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> operator[](i).second; }<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> h(<span class="keywordtype">size_t<\/span> i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> x(i+1) - x(i); }<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <span class="comment">\/\/Invert a arbitrary matrix using the boost ublas library<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;  <span class="keywordtype">bool<\/span> InvertMatrix(ublas::matrix&lt;T&gt; A,<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        ublas::matrix&lt;T&gt;&amp; inverse)<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;  {<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    <span class="keyword">using namespace <\/span>ublas;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="comment">\/\/ create a permutation matrix for the LU-factorization<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    permutation_matrix&lt;std::size_t&gt; pm(A.size1());<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <span class="comment">\/\/ perform LU-factorization<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    <span class="keywordtype">int<\/span> res = lu_factorize(A,pm);<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        <span class="keywordflow">if<\/span>( res != 0 ) <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    <span class="comment">\/\/ create identity matrix of &quot;inverse&quot;<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    inverse.assign(ublas::identity_matrix&lt;T&gt;(A.size1()));<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <span class="comment">\/\/ backsubstitute to get the inverse<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    lu_substitute(A, pm, inverse);<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;  }<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;  <span class="comment">\/\/This function will recalculate the spline parameters and store<\/span><\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  <span class="comment">\/\/them in _data, ready for spline interpolation<\/span><\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;  <span class="keywordtype">void<\/span> generate()<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;  {<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    <span class="keywordflow">if<\/span> (size() &lt; 2)<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;      <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Spline requires at least 2 points&quot;<\/span>);<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="comment">\/\/If any spline points are at the same x location, we have to<\/span><\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;    <span class="comment">\/\/just slightly seperate them<\/span><\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    {<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;      <span class="keywordtype">bool<\/span> testPassed(<span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;      <span class="keywordflow">while<\/span> (!testPassed)<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;        {<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;          testPassed = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;          std::sort(base::begin(), base::end());<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;          <span class="keywordflow">for<\/span> (base::iterator iPtr = base::begin(); iPtr != base::end() - 1; ++iPtr)<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;        <span class="keywordflow">if<\/span> (iPtr-&gt;first == (iPtr+1)-&gt;first)<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;          {<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;            <span class="keywordflow">if<\/span> ((iPtr+1)-&gt;first != 0)<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;              (iPtr+1)-&gt;first += (iPtr+1)-&gt;first<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;            * std::numeric_limits&lt;double&gt;::epsilon() * 10;<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;            <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;              (iPtr+1)-&gt;first = std::numeric_limits&lt;double&gt;::epsilon() * 10;<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;            testPassed = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;            <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;          }<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;        }<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;    }<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">size_t<\/span> e = size() - 1;<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;    <span class="keywordflow">switch<\/span> (_type)<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;      {<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;      <span class="keywordflow">case<\/span> LINEAR:<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;        {<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;          _data.resize(e);<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(0); i &lt; e; ++i)<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        {<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;          _data[i].x = x(i);<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;          _data[i].a = 0;<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;          _data[i].b = 0;<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;          _data[i].c = (y(i+1) - y(i)) \/ (x(i+1) - x(i));<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;          _data[i].d = y(i);<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        }<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        }<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;      <span class="keywordflow">case<\/span> CUBIC:<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        {<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;          ublas::matrix&lt;double&gt; A(size(), size());<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> yv(0); yv &lt;= e; ++yv)<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> xv(0); xv &lt;= e; ++xv)<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;          A(xv,yv) = 0;<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(1); i &lt; e; ++i)<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;        {<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;          A(i-1,i) = h(i-1);<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;          A(i,i) = 2 * (h(i-1) + h(i));<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;          A(i+1,i) = h(i);<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;        }<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;          ublas::vector&lt;double&gt; C(size());<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> xv(0); xv &lt;= e; ++xv)<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;        C(xv) = 0;<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(1); i &lt; e; ++i)<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;        C(i) = 6 *<\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;          ((y(i+1) - y(i)) \/ h(i)<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;           - (y(i) - y(i-1)) \/ h(i-1));<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;          <span class="comment">\/\/Boundary conditions<\/span><\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;          <span class="keywordflow">switch<\/span>(_BCLow)<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;        {<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;          C(0) = 6 * ((y(1) - y(0)) \/ h(0) - _BCLowVal);<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;          A(0,0) = 2 * h(0);<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;          A(1,0) = h(0);<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;          C(0) = _BCLowVal;<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;          A(0,0) = 1;<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;        <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;          C(0) = 0; A(0,0) = 1; A(1,0) = -1;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        }<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;          <span class="keywordflow">switch<\/span>(_BCHigh)<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        {<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_1ST_DERIV_BC:<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;          C(e) = 6 * (_BCHighVal - (y(e) - y(e-1)) \/ h(e-1));<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;          A(e,e) = 2 * h(e - 1);<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;          A(e-1,e) = h(e - 1);<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;        <span class="keywordflow">case<\/span> FIXED_2ND_DERIV_BC:<\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;          C(e) = _BCHighVal;<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;          A(e,e) = 1;<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;        <span class="keywordflow">case<\/span> PARABOLIC_RUNOUT_BC:<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;          C(e) = 0; A(e,e) = 1; A(e-1,e) = -1;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;        }<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;          ublas::matrix&lt;double&gt; AInv(size(), size());<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;          InvertMatrix(A,AInv);<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;          _ddy = ublas::prod(C, AInv);<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;          _data.resize(size()-1);<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;          <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i(0); i &lt; e; ++i)<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;        {<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;          _data[i].x = x(i);<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;          _data[i].a = (_ddy(i+1) - _ddy(i)) \/ (6 * h(i));<\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;          _data[i].b = _ddy(i) \/ 2;<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;          _data[i].c = (y(i+1) - y(i)) \/ h(i) - _ddy(i+1) * h(i) \/ 6 - _ddy(i) * h(i) \/ 3;<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;          _data[i].d = y(i);<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        }<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        }<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;      }<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;    _valid = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;  }<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;};<\/div><div class="ttc" id="classSpline_html"><div class="ttname"><a href="classSpline.html">Spline<\/a><\/div><div class="ttdef"><b>Definition:<\/b> Spline.h:29<\/div><\/div>$/;"	a
l00001	src/doc/html/TemplatedDatabase_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_TEMPLATED_DATABASE__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_TEMPLATED_DATABASE__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;set&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &quot;TemplatedVocabulary.h&quot;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &quot;QueryResults.h&quot;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;ScoringObject.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &quot;FeatureVector.h&quot;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &quot;..\/DUtils\/DUtils.h&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">\/\/ For query functions<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">static<\/span> <span class="keywordtype">int<\/span> MIN_COMMON_WORDS = 5;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html">   37<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase<\/a><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;{<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  <span class="keyword">explicit<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keywordtype">bool<\/span> use_di = <span class="keyword">true<\/span>, <span class="keywordtype">int<\/span> di_levels = 0);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keyword">explicit<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> T &amp;voc, <span class="keywordtype">bool<\/span> use_di = <span class="keyword">true<\/span>, <\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordtype">int<\/span> di_levels = 0);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a> &amp;db);<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aca2f045e0974babd7ef5b491b5e24c25">~TemplatedDatabase<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a654d8d3c7f80172be1e091663e47535d">operator=<\/a>(<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db);<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(<span class="keyword">const<\/span> T &amp;voc);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;  <\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(<span class="keyword">const<\/span> T&amp; voc, <span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels = 0);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;  <\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;<\/a>* <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">getVocabulary<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a5b410217ede05dc0920e2adc1e20b4b5">allocate<\/a>(<span class="keywordtype">int<\/span> nd = 0, <span class="keywordtype">int<\/span> ni = 0);<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features,<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> *bowvec = NULL, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> *fvec = NULL);<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fec = <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>() );<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;  <span class="keywordtype">void<\/span> delete_entry(<span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id);<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">size<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;  <\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">usingDirectIndex<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;  <\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">getDirectIndexLevels<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;  <\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">query<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret,<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    <span class="keywordtype">int<\/span> max_results = 1, <span class="keywordtype">int<\/span> max_id = -1) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;  <\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">query<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    <span class="keywordtype">int<\/span> max_results = 1, <span class="keywordtype">int<\/span> max_id = -1) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa2517a2f5b946741bd6a9932c60f75a1">retrieveFeatures<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <span class="keywordtype">id<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;  <\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;  <\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">save<\/a>(cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;database&quot;<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;  <\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;database&quot;<\/span>);<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;  <\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">queryL1<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;  <\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">queryL2<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">queryChiSquare<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;  <\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a">queryBhattacharyya<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;  <\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">queryKL<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;  <\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d">queryDotProduct<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;    <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;  <span class="comment">\/* Inverted file declaration *\/<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <\/div><div class="line"><a name="l00259"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html">  259<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html">IFPair<\/a><\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;  {<\/div><div class="line"><a name="l00262"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">  262<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    <\/div><div class="line"><a name="l00265"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#adf30c55dc6ff22de69c360bcb8961a0c">  265<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#adf30c55dc6ff22de69c360bcb8961a0c">word_weight<\/a>;<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    <\/div><div class="line"><a name="l00270"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">  270<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">IFPair<\/a>(){}<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;    <\/div><div class="line"><a name="l00277"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4d449ba7e48cab711302bd5752d65b1e">  277<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4d449ba7e48cab711302bd5752d65b1e">IFPair<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid, <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> wv): entry_id(eid), word_weight(wv) {}<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    <\/div><div class="line"><a name="l00284"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#acb96ccc36e3791518163cac1537800a1">  284<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#acb96ccc36e3791518163cac1537800a1">operator==<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> entry_id == eid; }<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;  };<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;  <\/div><div class="line"><a name="l00288"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">  288<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> std::list&lt;IFPair&gt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;  <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;  <\/div><div class="line"><a name="l00292"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ad16f54a326cfb827de3af1d979c52768">  292<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> std::vector&lt;IFRow&gt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad16f54a326cfb827de3af1d979c52768">InvertedFile<\/a>; <\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;  <span class="comment">\/\/ InvertedFile[word_id] --&gt; inverted file of that word<\/span><\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;  <\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;  <span class="comment">\/* Direct file declaration *\/<\/span><\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa74effa19eeb016d54e256861938aac9">  298<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> std::vector&lt;FeatureVector&gt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa74effa19eeb016d54e256861938aac9">DirectFile<\/a>;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;  <span class="comment">\/\/ DirectFile[entry_id] --&gt; [ directentry, ... ]<\/span><\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<\/div><div class="line"><a name="l00304"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">  304<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> *<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;  <\/div><div class="line"><a name="l00307"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">  307<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>;<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;  <\/div><div class="line"><a name="l00311"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">  311<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;  <\/div><div class="line"><a name="l00314"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">  314<\/a><\/span>&#160;  InvertedFile <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;  <\/div><div class="line"><a name="l00318"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">  318<\/a><\/span>&#160;  DirectFile <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>;<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;  <\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;  std::vector&lt;BowVector&gt; m_dBowfile;<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">  323<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;  <\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;};<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00331"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">  331<\/a><\/span>&#160;  (<span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels)<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>(use_di), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>(di_levels), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>(0)<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;{<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;}<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00341"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a00022acf352915aa913488fb56fb3506">  341<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T &amp;voc, <span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels)<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>(use_di), <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>(di_levels)<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;{<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(voc);<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;}<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor,F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00352"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a8ae59817af3251f63c0345d9b814b23f">  352<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db)<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL)<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;{<\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;  *<span class="keyword">this<\/span> = db;<\/div><div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;}<\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;<\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00362"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a811328512cdcb50220ca4f38a8982132">  362<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;filename)<\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL)<\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;{<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(filename);<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;}<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;<\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a1353c2b87638fc27696fcc87b09d65cb">TemplatedDatabase&lt;TDescriptor, F&gt;::TemplatedDatabase<\/a><\/div><div class="line"><a name="l00372"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a4e93c45263abda6bd1870e1baae820b0">  372<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename)<\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>(NULL)<\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;{<\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(filename);<\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;}<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00381"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aca2f045e0974babd7ef5b491b5e24c25">  381<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aca2f045e0974babd7ef5b491b5e24c25">TemplatedDatabase&lt;TDescriptor, F&gt;::~TemplatedDatabase<\/a>(<span class="keywordtype">void<\/span>)<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;{<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;}<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;<\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;::operator<\/a>=<\/div><div class="line"><a name="l00390"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a654d8d3c7f80172be1e091663e47535d">  390<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db)<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;{<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;  <span class="keywordflow">if<\/span>(<span class="keyword">this<\/span> != &amp;db)<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;  {<\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    m_dBowfile = db.m_dBowfile;<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>;<\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> = db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>;<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">setVocabulary<\/a>(*db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>);<\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;  }<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;  <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;}<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;<\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00408"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">  408<\/a><\/span>&#160;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">TemplatedDatabase&lt;TDescriptor, F&gt;::add<\/a>(<\/div><div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features,<\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> *bowvec, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> *fvec)<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;{<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> aux;<\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a>&amp; v = (bowvec ? *bowvec : aux);<\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;  <\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> &amp;&amp; fvec != NULL)<\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;  {<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v, *fvec, <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v, *fvec);<\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;  }<\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>)<\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;  {<\/div><div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;    <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> fv;<\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v, fv, <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v, fv);<\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;  }<\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(fvec != NULL)<\/div><div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;  {<\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v, *fvec, <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v);<\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;  }<\/div><div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;  {<\/div><div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, v); <span class="comment">\/\/ with features<\/span><\/div><div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;    <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">add<\/a>(v);<\/div><div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;  }<\/div><div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;}<\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;<\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;<\/div><div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00441"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa4e2521632542181e40930faffc8fee9">  441<\/a><\/span>&#160;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7a3af9e631370017d1e54da43d9b790b">TemplatedDatabase&lt;TDescriptor, F&gt;::add<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v,<\/div><div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fv)<\/div><div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;{<\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a> = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>++;<\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;  std::vector&lt;unsigned int&gt;::const_iterator iit;<\/div><div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;<\/div><div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>)<\/div><div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;  {<\/div><div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;    <span class="comment">\/\/ update direct file<\/span><\/div><div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;    <span class="keywordflow">if<\/span>(entry_id == <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.size())<\/div><div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;    {<\/div><div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.push_back(fv);<\/div><div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;      m_dBowfile.push_back(v);<\/div><div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;    }<\/div><div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;    {<\/div><div class="line"><a name="l00459"><\/a><span class="lineno">  459<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>] = fv;<\/div><div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;      m_dBowfile[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>] = v;<\/div><div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;    }<\/div><div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;  }<\/div><div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;  <\/div><div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;  <span class="comment">\/\/ update inverted file<\/span><\/div><div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = v.begin(); vit != v.end(); ++vit)<\/div><div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;  {<\/div><div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a>&amp; word_id = vit-&gt;first;<\/div><div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#adf30c55dc6ff22de69c360bcb8961a0c">word_weight<\/a> = vit-&gt;second;<\/div><div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;    <\/div><div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; ifrow = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;    ifrow.push_back(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">IFPair<\/a>(entry_id, word_weight));<\/div><div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;  }<\/div><div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;  <\/div><div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>;<\/div><div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;}<\/div><div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;<\/div><div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;<\/div><div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;::delete_entry<\/a>(<span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>)<\/div><div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;{<\/div><div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> v = m_dBowfile[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>];<\/div><div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;<\/div><div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;<\/div><div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;  <span class="keywordflow">for<\/span> (vit = v.begin(); vit != v.end(); ++vit)<\/div><div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;  {<\/div><div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a>&amp; word_id = vit-&gt;first;<\/div><div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; ifrow = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;    <span class="keyword">typename<\/span> IFRow::iterator rit;<\/div><div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;    <span class="keywordflow">for<\/span> (rit = ifrow.begin(); rit != ifrow.end(); ++rit)<\/div><div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;    {<\/div><div class="line"><a name="l00493"><\/a><span class="lineno">  493<\/span>&#160;      <span class="keywordflow">if<\/span> (rit-&gt;entry_id == entry_id)<\/div><div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;      {<\/div><div class="line"><a name="l00495"><\/a><span class="lineno">  495<\/span>&#160;        ifrow.erase(rit);<\/div><div class="line"><a name="l00496"><\/a><span class="lineno">  496<\/span>&#160;        <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00497"><\/a><span class="lineno">  497<\/span>&#160;      }<\/div><div class="line"><a name="l00498"><\/a><span class="lineno">  498<\/span>&#160;    }<\/div><div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;  }<\/div><div class="line"><a name="l00500"><\/a><span class="lineno">  500<\/span>&#160;  m_dBowfile[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>].clear();<\/div><div class="line"><a name="l00501"><\/a><span class="lineno">  501<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>].clear();<\/div><div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;}<\/div><div class="line"><a name="l00503"><\/a><span class="lineno">  503<\/span>&#160;<\/div><div class="line"><a name="l00504"><\/a><span class="lineno">  504<\/span>&#160;<\/div><div class="line"><a name="l00505"><\/a><span class="lineno">  505<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00506"><\/a><span class="lineno">  506<\/span>&#160;<\/div><div class="line"><a name="l00507"><\/a><span class="lineno">  507<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00509"><\/a><span class="lineno">  509<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">TemplatedDatabase&lt;TDescriptor, F&gt;::setVocabulary<\/a><\/div><div class="line"><a name="l00510"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">  510<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T&amp; voc)<\/div><div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;{<\/div><div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00513"><\/a><span class="lineno">  513<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a> = <span class="keyword">new<\/span> T(voc);<\/div><div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;}<\/div><div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;<\/div><div class="line"><a name="l00517"><\/a><span class="lineno">  517<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;<\/div><div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7d282bfdd4a6883b282fc71d0fd5dcb4">TemplatedDatabase&lt;TDescriptor, F&gt;::setVocabulary<\/a><\/div><div class="line"><a name="l00522"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aaf1d0ecfdab16ff0609386e2638e76b6">  522<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T&amp; voc, <span class="keywordtype">bool<\/span> use_di, <span class="keywordtype">int<\/span> di_levels)<\/div><div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;{<\/div><div class="line"><a name="l00524"><\/a><span class="lineno">  524<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> = use_di;<\/div><div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a> = di_levels;<\/div><div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00527"><\/a><span class="lineno">  527<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a> = <span class="keyword">new<\/span> T(voc);<\/div><div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>();<\/div><div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;}<\/div><div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;<\/div><div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;<\/div><div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00534"><\/a><span class="lineno">  534<\/span>&#160;<span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;<\/a>* <\/div><div class="line"><a name="l00535"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">  535<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">TemplatedDatabase&lt;TDescriptor, F&gt;::getVocabulary<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>;<\/div><div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;}<\/div><div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;<\/div><div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;<\/div><div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00543"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">  543<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">TemplatedDatabase&lt;TDescriptor, F&gt;::clear<\/a>()<\/div><div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;{<\/div><div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;  <span class="comment">\/\/ resize vectors<\/span><\/div><div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.resize(0);<\/div><div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.resize(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;size());<\/div><div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.resize(0);<\/div><div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;  m_dBowfile.resize(0);<\/div><div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> = 0;<\/div><div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;}<\/div><div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;<\/div><div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;<\/div><div class="line"><a name="l00555"><\/a><span class="lineno">  555<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00556"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a5b410217ede05dc0920e2adc1e20b4b5">  556<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a5b410217ede05dc0920e2adc1e20b4b5">TemplatedDatabase&lt;TDescriptor, F&gt;::allocate<\/a>(<span class="keywordtype">int<\/span> nd, <span class="keywordtype">int<\/span> ni)<\/div><div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;{<\/div><div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;  <span class="comment">\/\/ m_ifile already contains |words| items<\/span><\/div><div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;  <span class="keywordflow">if<\/span>(ni &gt; 0)<\/div><div class="line"><a name="l00560"><\/a><span class="lineno">  560<\/span>&#160;  {<\/div><div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;IFRow&gt;::iterator rit;<\/div><div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.begin(); rit != <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.end(); ++rit)<\/div><div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;    {<\/div><div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;      <span class="keywordtype">int<\/span> n = (int)rit-&gt;size();<\/div><div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;      <span class="keywordflow">if<\/span>(ni &gt; n)<\/div><div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;      {<\/div><div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;        rit-&gt;resize(ni);<\/div><div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;        rit-&gt;resize(n);<\/div><div class="line"><a name="l00569"><\/a><span class="lineno">  569<\/span>&#160;      }<\/div><div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;    }<\/div><div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;  }<\/div><div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;  <\/div><div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> &amp;&amp; (<span class="keywordtype">int<\/span>)<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.size() &lt; nd)<\/div><div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;  {<\/div><div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.resize(nd);<\/div><div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;    m_dBowfile.resize(nd);<\/div><div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;  }<\/div><div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;}<\/div><div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;<\/div><div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;<\/div><div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00583"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">  583<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">TemplatedDatabase&lt;TDescriptor, F&gt;::size<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00584"><\/a><span class="lineno">  584<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;}<\/div><div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;<\/div><div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00589"><\/a><span class="lineno">  589<\/span>&#160;<\/div><div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00591"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">  591<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">TemplatedDatabase&lt;TDescriptor, F&gt;::usingDirectIndex<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>;<\/div><div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;}<\/div><div class="line"><a name="l00595"><\/a><span class="lineno">  595<\/span>&#160;<\/div><div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;<\/div><div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00599"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">  599<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">TemplatedDatabase&lt;TDescriptor, F&gt;::getDirectIndexLevels<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l00602"><\/a><span class="lineno">  602<\/span>&#160;}<\/div><div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;<\/div><div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;<\/div><div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00607"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">  607<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">TemplatedDatabase&lt;TDescriptor, F&gt;::query<\/a>(<\/div><div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;features,<\/div><div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> vec;<\/div><div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;transform(features, vec);<\/div><div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">query<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;}<\/div><div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;<\/div><div class="line"><a name="l00616"><\/a><span class="lineno">  616<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;<\/div><div class="line"><a name="l00618"><\/a><span class="lineno">  618<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00619"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a5f7e3a3f5a63e9cb75ca37c4f1729296">  619<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0b717c7b082519705b35672731795695">TemplatedDatabase&lt;TDescriptor, F&gt;::query<\/a>(<\/div><div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;  ret.resize(0);<\/div><div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;  <\/div><div class="line"><a name="l00625"><\/a><span class="lineno">  625<\/span>&#160;  <span class="keywordflow">switch<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;getScoringType())<\/div><div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;  {<\/div><div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;    <span class="keywordflow">case<\/span> L1_NORM:<\/div><div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">queryL1<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;      <\/div><div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;    <span class="keywordflow">case<\/span> L2_NORM:<\/div><div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">queryL2<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;      <\/div><div class="line"><a name="l00635"><\/a><span class="lineno">  635<\/span>&#160;    <span class="keywordflow">case<\/span> CHI_SQUARE:<\/div><div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">queryChiSquare<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;      <\/div><div class="line"><a name="l00639"><\/a><span class="lineno">  639<\/span>&#160;    <span class="keywordflow">case<\/span> KL:<\/div><div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">queryKL<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;      <\/div><div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;    <span class="keywordflow">case<\/span> BHATTACHARYYA:<\/div><div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a">queryBhattacharyya<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00645"><\/a><span class="lineno">  645<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00646"><\/a><span class="lineno">  646<\/span>&#160;      <\/div><div class="line"><a name="l00647"><\/a><span class="lineno">  647<\/span>&#160;    <span class="keywordflow">case<\/span> DOT_PRODUCT:<\/div><div class="line"><a name="l00648"><\/a><span class="lineno">  648<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d">queryDotProduct<\/a>(vec, ret, max_results, max_id);<\/div><div class="line"><a name="l00649"><\/a><span class="lineno">  649<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00650"><\/a><span class="lineno">  650<\/span>&#160;  }<\/div><div class="line"><a name="l00651"><\/a><span class="lineno">  651<\/span>&#160;}<\/div><div class="line"><a name="l00652"><\/a><span class="lineno">  652<\/span>&#160;<\/div><div class="line"><a name="l00653"><\/a><span class="lineno">  653<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00654"><\/a><span class="lineno">  654<\/span>&#160;<\/div><div class="line"><a name="l00655"><\/a><span class="lineno">  655<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00656"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">  656<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a6a6f2a362e8189c8e28f9ae5bbd02c23">TemplatedDatabase&lt;TDescriptor, F&gt;::queryL1<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00657"><\/a><span class="lineno">  657<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00658"><\/a><span class="lineno">  658<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00659"><\/a><span class="lineno">  659<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00660"><\/a><span class="lineno">  660<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00661"><\/a><span class="lineno">  661<\/span>&#160;    <\/div><div class="line"><a name="l00662"><\/a><span class="lineno">  662<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l00663"><\/a><span class="lineno">  663<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l00664"><\/a><span class="lineno">  664<\/span>&#160;  <\/div><div class="line"><a name="l00665"><\/a><span class="lineno">  665<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00666"><\/a><span class="lineno">  666<\/span>&#160;  {<\/div><div class="line"><a name="l00667"><\/a><span class="lineno">  667<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00668"><\/a><span class="lineno">  668<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l00669"><\/a><span class="lineno">  669<\/span>&#160;        <\/div><div class="line"><a name="l00670"><\/a><span class="lineno">  670<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00671"><\/a><span class="lineno">  671<\/span>&#160;    <\/div><div class="line"><a name="l00672"><\/a><span class="lineno">  672<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00673"><\/a><span class="lineno">  673<\/span>&#160;    <\/div><div class="line"><a name="l00674"><\/a><span class="lineno">  674<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00675"><\/a><span class="lineno">  675<\/span>&#160;    {<\/div><div class="line"><a name="l00676"><\/a><span class="lineno">  676<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00677"><\/a><span class="lineno">  677<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l00678"><\/a><span class="lineno">  678<\/span>&#160;      <\/div><div class="line"><a name="l00679"><\/a><span class="lineno">  679<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00680"><\/a><span class="lineno">  680<\/span>&#160;      {<\/div><div class="line"><a name="l00681"><\/a><span class="lineno">  681<\/span>&#160;        <span class="keywordtype">double<\/span> value = fabs(qvalue - dvalue) - fabs(qvalue) - fabs(dvalue);<\/div><div class="line"><a name="l00682"><\/a><span class="lineno">  682<\/span>&#160;        <\/div><div class="line"><a name="l00683"><\/a><span class="lineno">  683<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00684"><\/a><span class="lineno">  684<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00685"><\/a><span class="lineno">  685<\/span>&#160;        {<\/div><div class="line"><a name="l00686"><\/a><span class="lineno">  686<\/span>&#160;          pit-&gt;second += value;<\/div><div class="line"><a name="l00687"><\/a><span class="lineno">  687<\/span>&#160;        }<\/div><div class="line"><a name="l00688"><\/a><span class="lineno">  688<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00689"><\/a><span class="lineno">  689<\/span>&#160;        {<\/div><div class="line"><a name="l00690"><\/a><span class="lineno">  690<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00691"><\/a><span class="lineno">  691<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l00692"><\/a><span class="lineno">  692<\/span>&#160;        }<\/div><div class="line"><a name="l00693"><\/a><span class="lineno">  693<\/span>&#160;      }<\/div><div class="line"><a name="l00694"><\/a><span class="lineno">  694<\/span>&#160;      <\/div><div class="line"><a name="l00695"><\/a><span class="lineno">  695<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00696"><\/a><span class="lineno">  696<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00697"><\/a><span class="lineno">  697<\/span>&#160;    <\/div><div class="line"><a name="l00698"><\/a><span class="lineno">  698<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l00699"><\/a><span class="lineno">  699<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00700"><\/a><span class="lineno">  700<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l00701"><\/a><span class="lineno">  701<\/span>&#160;  {<\/div><div class="line"><a name="l00702"><\/a><span class="lineno">  702<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<\/div><div class="line"><a name="l00703"><\/a><span class="lineno">  703<\/span>&#160;  }<\/div><div class="line"><a name="l00704"><\/a><span class="lineno">  704<\/span>&#160;    <\/div><div class="line"><a name="l00705"><\/a><span class="lineno">  705<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-2 best .. 0 worst] <\/span><\/div><div class="line"><a name="l00706"><\/a><span class="lineno">  706<\/span>&#160;  <\/div><div class="line"><a name="l00707"><\/a><span class="lineno">  707<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order of score<\/span><\/div><div class="line"><a name="l00708"><\/a><span class="lineno">  708<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l00709"><\/a><span class="lineno">  709<\/span>&#160;  <span class="comment">\/\/ (ret is inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l00710"><\/a><span class="lineno">  710<\/span>&#160;<\/div><div class="line"><a name="l00711"><\/a><span class="lineno">  711<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l00712"><\/a><span class="lineno">  712<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l00713"><\/a><span class="lineno">  713<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l00714"><\/a><span class="lineno">  714<\/span>&#160;  <\/div><div class="line"><a name="l00715"><\/a><span class="lineno">  715<\/span>&#160;  <span class="comment">\/\/ complete and scale score to [0 worst .. 1 best]<\/span><\/div><div class="line"><a name="l00716"><\/a><span class="lineno">  716<\/span>&#160;  <span class="comment">\/\/ ||v - w||_{L1} = 2 + Sum(|v_i - w_i| - |v_i| - |w_i|) <\/span><\/div><div class="line"><a name="l00717"><\/a><span class="lineno">  717<\/span>&#160;  <span class="comment">\/\/        for all i | v_i != 0 and w_i != 0 <\/span><\/div><div class="line"><a name="l00718"><\/a><span class="lineno">  718<\/span>&#160;  <span class="comment">\/\/ (Nister, 2006)<\/span><\/div><div class="line"><a name="l00719"><\/a><span class="lineno">  719<\/span>&#160;  <span class="comment">\/\/ scaled_||v - w||_{L1} = 1 - 0.5 * ||v - w||_{L1}<\/span><\/div><div class="line"><a name="l00720"><\/a><span class="lineno">  720<\/span>&#160;  QueryResults::iterator qit;<\/div><div class="line"><a name="l00721"><\/a><span class="lineno">  721<\/span>&#160;  <span class="keywordflow">for<\/span>(qit = ret.begin(); qit != ret.end(); qit++) <\/div><div class="line"><a name="l00722"><\/a><span class="lineno">  722<\/span>&#160;    qit-&gt;Score = -qit-&gt;Score\/2.0;<\/div><div class="line"><a name="l00723"><\/a><span class="lineno">  723<\/span>&#160;}<\/div><div class="line"><a name="l00724"><\/a><span class="lineno">  724<\/span>&#160;<\/div><div class="line"><a name="l00725"><\/a><span class="lineno">  725<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00726"><\/a><span class="lineno">  726<\/span>&#160;<\/div><div class="line"><a name="l00727"><\/a><span class="lineno">  727<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00728"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">  728<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">TemplatedDatabase&lt;TDescriptor, F&gt;::queryL2<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00729"><\/a><span class="lineno">  729<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00730"><\/a><span class="lineno">  730<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00731"><\/a><span class="lineno">  731<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00732"><\/a><span class="lineno">  732<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00733"><\/a><span class="lineno">  733<\/span>&#160;  <\/div><div class="line"><a name="l00734"><\/a><span class="lineno">  734<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l00735"><\/a><span class="lineno">  735<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l00736"><\/a><span class="lineno">  736<\/span>&#160;  <\/div><div class="line"><a name="l00737"><\/a><span class="lineno">  737<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, int&gt; counters;<\/span><\/div><div class="line"><a name="l00738"><\/a><span class="lineno">  738<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, int&gt;::iterator cit;<\/span><\/div><div class="line"><a name="l00739"><\/a><span class="lineno">  739<\/span>&#160;  <\/div><div class="line"><a name="l00740"><\/a><span class="lineno">  740<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00741"><\/a><span class="lineno">  741<\/span>&#160;  {<\/div><div class="line"><a name="l00742"><\/a><span class="lineno">  742<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00743"><\/a><span class="lineno">  743<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l00744"><\/a><span class="lineno">  744<\/span>&#160;    <\/div><div class="line"><a name="l00745"><\/a><span class="lineno">  745<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00746"><\/a><span class="lineno">  746<\/span>&#160;    <\/div><div class="line"><a name="l00747"><\/a><span class="lineno">  747<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00748"><\/a><span class="lineno">  748<\/span>&#160;    <\/div><div class="line"><a name="l00749"><\/a><span class="lineno">  749<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00750"><\/a><span class="lineno">  750<\/span>&#160;    {<\/div><div class="line"><a name="l00751"><\/a><span class="lineno">  751<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00752"><\/a><span class="lineno">  752<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l00753"><\/a><span class="lineno">  753<\/span>&#160;      <\/div><div class="line"><a name="l00754"><\/a><span class="lineno">  754<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00755"><\/a><span class="lineno">  755<\/span>&#160;      {<\/div><div class="line"><a name="l00756"><\/a><span class="lineno">  756<\/span>&#160;        <span class="keywordtype">double<\/span> value = - qvalue * dvalue; <span class="comment">\/\/ minus sign for sorting trick<\/span><\/div><div class="line"><a name="l00757"><\/a><span class="lineno">  757<\/span>&#160;        <\/div><div class="line"><a name="l00758"><\/a><span class="lineno">  758<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00759"><\/a><span class="lineno">  759<\/span>&#160;        <span class="comment">\/\/cit = counters.lower_bound(entry_id);<\/span><\/div><div class="line"><a name="l00760"><\/a><span class="lineno">  760<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00761"><\/a><span class="lineno">  761<\/span>&#160;        {<\/div><div class="line"><a name="l00762"><\/a><span class="lineno">  762<\/span>&#160;          pit-&gt;second += value; <\/div><div class="line"><a name="l00763"><\/a><span class="lineno">  763<\/span>&#160;          <span class="comment">\/\/cit-&gt;second += 1;<\/span><\/div><div class="line"><a name="l00764"><\/a><span class="lineno">  764<\/span>&#160;        }<\/div><div class="line"><a name="l00765"><\/a><span class="lineno">  765<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00766"><\/a><span class="lineno">  766<\/span>&#160;        {<\/div><div class="line"><a name="l00767"><\/a><span class="lineno">  767<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00768"><\/a><span class="lineno">  768<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l00769"><\/a><span class="lineno">  769<\/span>&#160;          <\/div><div class="line"><a name="l00770"><\/a><span class="lineno">  770<\/span>&#160;          <span class="comment">\/\/counters.insert(cit, <\/span><\/div><div class="line"><a name="l00771"><\/a><span class="lineno">  771<\/span>&#160;          <span class="comment">\/\/  map&lt;EntryId, int&gt;::value_type(entry_id, 1));<\/span><\/div><div class="line"><a name="l00772"><\/a><span class="lineno">  772<\/span>&#160;        }<\/div><div class="line"><a name="l00773"><\/a><span class="lineno">  773<\/span>&#160;      }<\/div><div class="line"><a name="l00774"><\/a><span class="lineno">  774<\/span>&#160;      <\/div><div class="line"><a name="l00775"><\/a><span class="lineno">  775<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00776"><\/a><span class="lineno">  776<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00777"><\/a><span class="lineno">  777<\/span>&#160;    <\/div><div class="line"><a name="l00778"><\/a><span class="lineno">  778<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l00779"><\/a><span class="lineno">  779<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00780"><\/a><span class="lineno">  780<\/span>&#160;  <span class="comment">\/\/cit = counters.begin();<\/span><\/div><div class="line"><a name="l00781"><\/a><span class="lineno">  781<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<span class="comment">\/\/, ++cit)<\/span><\/div><div class="line"><a name="l00782"><\/a><span class="lineno">  782<\/span>&#160;  {<\/div><div class="line"><a name="l00783"><\/a><span class="lineno">  783<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<span class="comment">\/\/ \/ cit-&gt;second));<\/span><\/div><div class="line"><a name="l00784"><\/a><span class="lineno">  784<\/span>&#160;  }<\/div><div class="line"><a name="l00785"><\/a><span class="lineno">  785<\/span>&#160;    <\/div><div class="line"><a name="l00786"><\/a><span class="lineno">  786<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-1 best .. 0 worst] <\/span><\/div><div class="line"><a name="l00787"><\/a><span class="lineno">  787<\/span>&#160;  <\/div><div class="line"><a name="l00788"><\/a><span class="lineno">  788<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order of score<\/span><\/div><div class="line"><a name="l00789"><\/a><span class="lineno">  789<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l00790"><\/a><span class="lineno">  790<\/span>&#160;  <span class="comment">\/\/ (ret is inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l00791"><\/a><span class="lineno">  791<\/span>&#160;<\/div><div class="line"><a name="l00792"><\/a><span class="lineno">  792<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l00793"><\/a><span class="lineno">  793<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l00794"><\/a><span class="lineno">  794<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l00795"><\/a><span class="lineno">  795<\/span>&#160;<\/div><div class="line"><a name="l00796"><\/a><span class="lineno">  796<\/span>&#160;  <span class="comment">\/\/ complete and scale score to [0 worst .. 1 best]<\/span><\/div><div class="line"><a name="l00797"><\/a><span class="lineno">  797<\/span>&#160;  <span class="comment">\/\/ ||v - w||_{L2} = sqrt( 2 - 2 * Sum(v_i * w_i) <\/span><\/div><div class="line"><a name="l00798"><\/a><span class="lineno">  798<\/span>&#160;    <span class="comment">\/\/      for all i | v_i != 0 and w_i != 0 )<\/span><\/div><div class="line"><a name="l00799"><\/a><span class="lineno">  799<\/span>&#160;    <span class="comment">\/\/ (Nister, 2006)<\/span><\/div><div class="line"><a name="l00800"><\/a><span class="lineno">  800<\/span>&#160;    QueryResults::iterator qit;<\/div><div class="line"><a name="l00801"><\/a><span class="lineno">  801<\/span>&#160;  <span class="keywordflow">for<\/span>(qit = ret.begin(); qit != ret.end(); qit++) <\/div><div class="line"><a name="l00802"><\/a><span class="lineno">  802<\/span>&#160;  {<\/div><div class="line"><a name="l00803"><\/a><span class="lineno">  803<\/span>&#160;    <span class="keywordflow">if<\/span>(qit-&gt;Score &lt;= -1.0) <span class="comment">\/\/ rounding error<\/span><\/div><div class="line"><a name="l00804"><\/a><span class="lineno">  804<\/span>&#160;      qit-&gt;Score = 1.0;<\/div><div class="line"><a name="l00805"><\/a><span class="lineno">  805<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00806"><\/a><span class="lineno">  806<\/span>&#160;      qit-&gt;Score = 1.0 - sqrt(1.0 + qit-&gt;Score); <span class="comment">\/\/ [0..1]<\/span><\/div><div class="line"><a name="l00807"><\/a><span class="lineno">  807<\/span>&#160;      <span class="comment">\/\/ the + sign is ok, it is due to - sign in <\/span><\/div><div class="line"><a name="l00808"><\/a><span class="lineno">  808<\/span>&#160;      <span class="comment">\/\/ value = - qvalue * dvalue<\/span><\/div><div class="line"><a name="l00809"><\/a><span class="lineno">  809<\/span>&#160;  }<\/div><div class="line"><a name="l00810"><\/a><span class="lineno">  810<\/span>&#160;  <\/div><div class="line"><a name="l00811"><\/a><span class="lineno">  811<\/span>&#160;}<\/div><div class="line"><a name="l00812"><\/a><span class="lineno">  812<\/span>&#160;<\/div><div class="line"><a name="l00813"><\/a><span class="lineno">  813<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00814"><\/a><span class="lineno">  814<\/span>&#160;<\/div><div class="line"><a name="l00815"><\/a><span class="lineno">  815<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00816"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">  816<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#af015048fa88b2f37bc81d92e7fa9d8a3">TemplatedDatabase&lt;TDescriptor, F&gt;::queryChiSquare<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00817"><\/a><span class="lineno">  817<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00818"><\/a><span class="lineno">  818<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00819"><\/a><span class="lineno">  819<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00820"><\/a><span class="lineno">  820<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00821"><\/a><span class="lineno">  821<\/span>&#160;  <\/div><div class="line"><a name="l00822"><\/a><span class="lineno">  822<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt; pairs;<\/div><div class="line"><a name="l00823"><\/a><span class="lineno">  823<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt;::iterator pit;<\/div><div class="line"><a name="l00824"><\/a><span class="lineno">  824<\/span>&#160;  <\/div><div class="line"><a name="l00825"><\/a><span class="lineno">  825<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, double&gt; &gt; sums; <span class="comment">\/\/ &lt; sum vi, sum wi &gt;<\/span><\/div><div class="line"><a name="l00826"><\/a><span class="lineno">  826<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, double&gt; &gt;::iterator sit;<\/div><div class="line"><a name="l00827"><\/a><span class="lineno">  827<\/span>&#160;  <\/div><div class="line"><a name="l00828"><\/a><span class="lineno">  828<\/span>&#160;  <span class="comment">\/\/ In the current implementation, we suppose vec is not normalized<\/span><\/div><div class="line"><a name="l00829"><\/a><span class="lineno">  829<\/span>&#160;  <\/div><div class="line"><a name="l00830"><\/a><span class="lineno">  830<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt; expected;<\/span><\/div><div class="line"><a name="l00831"><\/a><span class="lineno">  831<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt;::iterator eit;<\/span><\/div><div class="line"><a name="l00832"><\/a><span class="lineno">  832<\/span>&#160;  <\/div><div class="line"><a name="l00833"><\/a><span class="lineno">  833<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00834"><\/a><span class="lineno">  834<\/span>&#160;  {<\/div><div class="line"><a name="l00835"><\/a><span class="lineno">  835<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00836"><\/a><span class="lineno">  836<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l00837"><\/a><span class="lineno">  837<\/span>&#160;    <\/div><div class="line"><a name="l00838"><\/a><span class="lineno">  838<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00839"><\/a><span class="lineno">  839<\/span>&#160;    <\/div><div class="line"><a name="l00840"><\/a><span class="lineno">  840<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00841"><\/a><span class="lineno">  841<\/span>&#160;    <\/div><div class="line"><a name="l00842"><\/a><span class="lineno">  842<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00843"><\/a><span class="lineno">  843<\/span>&#160;    {<\/div><div class="line"><a name="l00844"><\/a><span class="lineno">  844<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00845"><\/a><span class="lineno">  845<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l00846"><\/a><span class="lineno">  846<\/span>&#160;      <\/div><div class="line"><a name="l00847"><\/a><span class="lineno">  847<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00848"><\/a><span class="lineno">  848<\/span>&#160;      {<\/div><div class="line"><a name="l00849"><\/a><span class="lineno">  849<\/span>&#160;        <span class="comment">\/\/ (v-w)^2\/(v+w) - v - w = -4 vw\/(v+w)<\/span><\/div><div class="line"><a name="l00850"><\/a><span class="lineno">  850<\/span>&#160;        <span class="comment">\/\/ we move the 4 out<\/span><\/div><div class="line"><a name="l00851"><\/a><span class="lineno">  851<\/span>&#160;        <span class="keywordtype">double<\/span> value = 0;<\/div><div class="line"><a name="l00852"><\/a><span class="lineno">  852<\/span>&#160;        <span class="keywordflow">if<\/span>(qvalue + dvalue != 0.0) <span class="comment">\/\/ words may have weight zero<\/span><\/div><div class="line"><a name="l00853"><\/a><span class="lineno">  853<\/span>&#160;          value = - qvalue * dvalue \/ (qvalue + dvalue);<\/div><div class="line"><a name="l00854"><\/a><span class="lineno">  854<\/span>&#160;        <\/div><div class="line"><a name="l00855"><\/a><span class="lineno">  855<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00856"><\/a><span class="lineno">  856<\/span>&#160;        sit = sums.lower_bound(entry_id);<\/div><div class="line"><a name="l00857"><\/a><span class="lineno">  857<\/span>&#160;        <span class="comment">\/\/eit = expected.lower_bound(entry_id);<\/span><\/div><div class="line"><a name="l00858"><\/a><span class="lineno">  858<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00859"><\/a><span class="lineno">  859<\/span>&#160;        {<\/div><div class="line"><a name="l00860"><\/a><span class="lineno">  860<\/span>&#160;          pit-&gt;second.first += value;<\/div><div class="line"><a name="l00861"><\/a><span class="lineno">  861<\/span>&#160;          pit-&gt;second.second += 1;<\/div><div class="line"><a name="l00862"><\/a><span class="lineno">  862<\/span>&#160;          <span class="comment">\/\/eit-&gt;second += dvalue;<\/span><\/div><div class="line"><a name="l00863"><\/a><span class="lineno">  863<\/span>&#160;          sit-&gt;second.first += qvalue;<\/div><div class="line"><a name="l00864"><\/a><span class="lineno">  864<\/span>&#160;          sit-&gt;second.second += dvalue;<\/div><div class="line"><a name="l00865"><\/a><span class="lineno">  865<\/span>&#160;        }<\/div><div class="line"><a name="l00866"><\/a><span class="lineno">  866<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00867"><\/a><span class="lineno">  867<\/span>&#160;        {<\/div><div class="line"><a name="l00868"><\/a><span class="lineno">  868<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00869"><\/a><span class="lineno">  869<\/span>&#160;            std::map&lt;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>, std::pair&lt;double, int&gt; &gt;::value_type(entry_id,<\/div><div class="line"><a name="l00870"><\/a><span class="lineno">  870<\/span>&#160;              std::make_pair(value, 1) ));<\/div><div class="line"><a name="l00871"><\/a><span class="lineno">  871<\/span>&#160;          <span class="comment">\/\/expected.insert(eit, <\/span><\/div><div class="line"><a name="l00872"><\/a><span class="lineno">  872<\/span>&#160;          <span class="comment">\/\/  map&lt;EntryId, double&gt;::value_type(entry_id, dvalue));<\/span><\/div><div class="line"><a name="l00873"><\/a><span class="lineno">  873<\/span>&#160;          <\/div><div class="line"><a name="l00874"><\/a><span class="lineno">  874<\/span>&#160;          sums.insert(sit, <\/div><div class="line"><a name="l00875"><\/a><span class="lineno">  875<\/span>&#160;            std::map&lt;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>, std::pair&lt;double, double&gt; &gt;::value_type(entry_id,<\/div><div class="line"><a name="l00876"><\/a><span class="lineno">  876<\/span>&#160;              std::make_pair(qvalue, dvalue) ));<\/div><div class="line"><a name="l00877"><\/a><span class="lineno">  877<\/span>&#160;        }<\/div><div class="line"><a name="l00878"><\/a><span class="lineno">  878<\/span>&#160;      }<\/div><div class="line"><a name="l00879"><\/a><span class="lineno">  879<\/span>&#160;      <\/div><div class="line"><a name="l00880"><\/a><span class="lineno">  880<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00881"><\/a><span class="lineno">  881<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00882"><\/a><span class="lineno">  882<\/span>&#160;    <\/div><div class="line"><a name="l00883"><\/a><span class="lineno">  883<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l00884"><\/a><span class="lineno">  884<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00885"><\/a><span class="lineno">  885<\/span>&#160;  sit = sums.begin();<\/div><div class="line"><a name="l00886"><\/a><span class="lineno">  886<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit, ++sit)<\/div><div class="line"><a name="l00887"><\/a><span class="lineno">  887<\/span>&#160;  {<\/div><div class="line"><a name="l00888"><\/a><span class="lineno">  888<\/span>&#160;    <span class="keywordflow">if<\/span>(pit-&gt;second.second &gt;= MIN_COMMON_WORDS)<\/div><div class="line"><a name="l00889"><\/a><span class="lineno">  889<\/span>&#160;    {<\/div><div class="line"><a name="l00890"><\/a><span class="lineno">  890<\/span>&#160;      ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second.first));<\/div><div class="line"><a name="l00891"><\/a><span class="lineno">  891<\/span>&#160;      ret.back().nWords = pit-&gt;second.second;<\/div><div class="line"><a name="l00892"><\/a><span class="lineno">  892<\/span>&#160;      ret.back().sumCommonVi = sit-&gt;second.first;<\/div><div class="line"><a name="l00893"><\/a><span class="lineno">  893<\/span>&#160;      ret.back().sumCommonWi = sit-&gt;second.second;<\/div><div class="line"><a name="l00894"><\/a><span class="lineno">  894<\/span>&#160;      ret.back().expectedChiScore = <\/div><div class="line"><a name="l00895"><\/a><span class="lineno">  895<\/span>&#160;        2 * sit-&gt;second.second \/ (1 + sit-&gt;second.second);<\/div><div class="line"><a name="l00896"><\/a><span class="lineno">  896<\/span>&#160;    }<\/div><div class="line"><a name="l00897"><\/a><span class="lineno">  897<\/span>&#160;  <\/div><div class="line"><a name="l00898"><\/a><span class="lineno">  898<\/span>&#160;    <span class="comment">\/\/ret.push_back(Result(pit-&gt;first, pit-&gt;second));<\/span><\/div><div class="line"><a name="l00899"><\/a><span class="lineno">  899<\/span>&#160;  }<\/div><div class="line"><a name="l00900"><\/a><span class="lineno">  900<\/span>&#160;    <\/div><div class="line"><a name="l00901"><\/a><span class="lineno">  901<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-2 best .. 0 worst] <\/span><\/div><div class="line"><a name="l00902"><\/a><span class="lineno">  902<\/span>&#160;  <span class="comment">\/\/ we have to add +2 to the scores to obtain the chi square score<\/span><\/div><div class="line"><a name="l00903"><\/a><span class="lineno">  903<\/span>&#160;  <\/div><div class="line"><a name="l00904"><\/a><span class="lineno">  904<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order of score<\/span><\/div><div class="line"><a name="l00905"><\/a><span class="lineno">  905<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l00906"><\/a><span class="lineno">  906<\/span>&#160;  <span class="comment">\/\/ (ret is inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l00907"><\/a><span class="lineno">  907<\/span>&#160;<\/div><div class="line"><a name="l00908"><\/a><span class="lineno">  908<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l00909"><\/a><span class="lineno">  909<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l00910"><\/a><span class="lineno">  910<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l00911"><\/a><span class="lineno">  911<\/span>&#160;<\/div><div class="line"><a name="l00912"><\/a><span class="lineno">  912<\/span>&#160;  <span class="comment">\/\/ complete and scale score to [0 worst .. 1 best]<\/span><\/div><div class="line"><a name="l00913"><\/a><span class="lineno">  913<\/span>&#160;  QueryResults::iterator qit;<\/div><div class="line"><a name="l00914"><\/a><span class="lineno">  914<\/span>&#160;  <span class="keywordflow">for<\/span>(qit = ret.begin(); qit != ret.end(); qit++)<\/div><div class="line"><a name="l00915"><\/a><span class="lineno">  915<\/span>&#160;  {<\/div><div class="line"><a name="l00916"><\/a><span class="lineno">  916<\/span>&#160;    <span class="comment">\/\/ this takes the 4 into account<\/span><\/div><div class="line"><a name="l00917"><\/a><span class="lineno">  917<\/span>&#160;    qit-&gt;Score = - 2. * qit-&gt;Score; <span class="comment">\/\/ [0..1]<\/span><\/div><div class="line"><a name="l00918"><\/a><span class="lineno">  918<\/span>&#160;    <\/div><div class="line"><a name="l00919"><\/a><span class="lineno">  919<\/span>&#160;    qit-&gt;chiScore = qit-&gt;Score;<\/div><div class="line"><a name="l00920"><\/a><span class="lineno">  920<\/span>&#160;  }<\/div><div class="line"><a name="l00921"><\/a><span class="lineno">  921<\/span>&#160;  <\/div><div class="line"><a name="l00922"><\/a><span class="lineno">  922<\/span>&#160;}<\/div><div class="line"><a name="l00923"><\/a><span class="lineno">  923<\/span>&#160;<\/div><div class="line"><a name="l00924"><\/a><span class="lineno">  924<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00925"><\/a><span class="lineno">  925<\/span>&#160;<\/div><div class="line"><a name="l00926"><\/a><span class="lineno">  926<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00927"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">  927<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a131c8d8df940fd5add6c5e86e6af2f2d">TemplatedDatabase&lt;TDescriptor, F&gt;::queryKL<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <\/div><div class="line"><a name="l00928"><\/a><span class="lineno">  928<\/span>&#160;  <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00929"><\/a><span class="lineno">  929<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00930"><\/a><span class="lineno">  930<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l00931"><\/a><span class="lineno">  931<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l00932"><\/a><span class="lineno">  932<\/span>&#160;  <\/div><div class="line"><a name="l00933"><\/a><span class="lineno">  933<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l00934"><\/a><span class="lineno">  934<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l00935"><\/a><span class="lineno">  935<\/span>&#160;  <\/div><div class="line"><a name="l00936"><\/a><span class="lineno">  936<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00937"><\/a><span class="lineno">  937<\/span>&#160;  {<\/div><div class="line"><a name="l00938"><\/a><span class="lineno">  938<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l00939"><\/a><span class="lineno">  939<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; vi = vit-&gt;second;<\/div><div class="line"><a name="l00940"><\/a><span class="lineno">  940<\/span>&#160;    <\/div><div class="line"><a name="l00941"><\/a><span class="lineno">  941<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l00942"><\/a><span class="lineno">  942<\/span>&#160;    <\/div><div class="line"><a name="l00943"><\/a><span class="lineno">  943<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l00944"><\/a><span class="lineno">  944<\/span>&#160;    <\/div><div class="line"><a name="l00945"><\/a><span class="lineno">  945<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l00946"><\/a><span class="lineno">  946<\/span>&#160;    {    <\/div><div class="line"><a name="l00947"><\/a><span class="lineno">  947<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l00948"><\/a><span class="lineno">  948<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; wi = rit-&gt;word_weight;<\/div><div class="line"><a name="l00949"><\/a><span class="lineno">  949<\/span>&#160;      <\/div><div class="line"><a name="l00950"><\/a><span class="lineno">  950<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l00951"><\/a><span class="lineno">  951<\/span>&#160;      {<\/div><div class="line"><a name="l00952"><\/a><span class="lineno">  952<\/span>&#160;        <span class="keywordtype">double<\/span> value = 0;<\/div><div class="line"><a name="l00953"><\/a><span class="lineno">  953<\/span>&#160;        <span class="keywordflow">if<\/span>(vi != 0 &amp;&amp; wi != 0) value = vi * log(vi\/wi);<\/div><div class="line"><a name="l00954"><\/a><span class="lineno">  954<\/span>&#160;        <\/div><div class="line"><a name="l00955"><\/a><span class="lineno">  955<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l00956"><\/a><span class="lineno">  956<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l00957"><\/a><span class="lineno">  957<\/span>&#160;        {<\/div><div class="line"><a name="l00958"><\/a><span class="lineno">  958<\/span>&#160;          pit-&gt;second += value;<\/div><div class="line"><a name="l00959"><\/a><span class="lineno">  959<\/span>&#160;        }<\/div><div class="line"><a name="l00960"><\/a><span class="lineno">  960<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00961"><\/a><span class="lineno">  961<\/span>&#160;        {<\/div><div class="line"><a name="l00962"><\/a><span class="lineno">  962<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l00963"><\/a><span class="lineno">  963<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l00964"><\/a><span class="lineno">  964<\/span>&#160;        }<\/div><div class="line"><a name="l00965"><\/a><span class="lineno">  965<\/span>&#160;      }<\/div><div class="line"><a name="l00966"><\/a><span class="lineno">  966<\/span>&#160;      <\/div><div class="line"><a name="l00967"><\/a><span class="lineno">  967<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l00968"><\/a><span class="lineno">  968<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l00969"><\/a><span class="lineno">  969<\/span>&#160;    <\/div><div class="line"><a name="l00970"><\/a><span class="lineno">  970<\/span>&#160;  <span class="comment">\/\/ resulting &quot;scores&quot; are now in [-X worst .. 0 best .. X worst]<\/span><\/div><div class="line"><a name="l00971"><\/a><span class="lineno">  971<\/span>&#160;  <span class="comment">\/\/ but we cannot make sure which ones are better without calculating<\/span><\/div><div class="line"><a name="l00972"><\/a><span class="lineno">  972<\/span>&#160;  <span class="comment">\/\/ the complete score<\/span><\/div><div class="line"><a name="l00973"><\/a><span class="lineno">  973<\/span>&#160;<\/div><div class="line"><a name="l00974"><\/a><span class="lineno">  974<\/span>&#160;  <span class="comment">\/\/ complete scores and move to vector<\/span><\/div><div class="line"><a name="l00975"><\/a><span class="lineno">  975<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l00976"><\/a><span class="lineno">  976<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l00977"><\/a><span class="lineno">  977<\/span>&#160;  {<\/div><div class="line"><a name="l00978"><\/a><span class="lineno">  978<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid = pit-&gt;first;<\/div><div class="line"><a name="l00979"><\/a><span class="lineno">  979<\/span>&#160;    <span class="keywordtype">double<\/span> value = 0.0;<\/div><div class="line"><a name="l00980"><\/a><span class="lineno">  980<\/span>&#160;<\/div><div class="line"><a name="l00981"><\/a><span class="lineno">  981<\/span>&#160;    <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l00982"><\/a><span class="lineno">  982<\/span>&#160;    {<\/div><div class="line"><a name="l00983"><\/a><span class="lineno">  983<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> &amp;vi = vit-&gt;second;<\/div><div class="line"><a name="l00984"><\/a><span class="lineno">  984<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[vit-&gt;first];<\/div><div class="line"><a name="l00985"><\/a><span class="lineno">  985<\/span>&#160;<\/div><div class="line"><a name="l00986"><\/a><span class="lineno">  986<\/span>&#160;      <span class="keywordflow">if<\/span>(vi != 0)<\/div><div class="line"><a name="l00987"><\/a><span class="lineno">  987<\/span>&#160;      {<\/div><div class="line"><a name="l00988"><\/a><span class="lineno">  988<\/span>&#160;        <span class="keywordflow">if<\/span>(row.end() == find(row.begin(), row.end(), eid ))<\/div><div class="line"><a name="l00989"><\/a><span class="lineno">  989<\/span>&#160;        {<\/div><div class="line"><a name="l00990"><\/a><span class="lineno">  990<\/span>&#160;          value += vi * (log(vi) - <a class="code" href="classDBoW2_1_1GeneralScoring.html#a4e9388752852ebc9e247ad50bf6d128e">GeneralScoring::LOG_EPS<\/a>);<\/div><div class="line"><a name="l00991"><\/a><span class="lineno">  991<\/span>&#160;        }<\/div><div class="line"><a name="l00992"><\/a><span class="lineno">  992<\/span>&#160;      }<\/div><div class="line"><a name="l00993"><\/a><span class="lineno">  993<\/span>&#160;    }<\/div><div class="line"><a name="l00994"><\/a><span class="lineno">  994<\/span>&#160;    <\/div><div class="line"><a name="l00995"><\/a><span class="lineno">  995<\/span>&#160;    pit-&gt;second += value;<\/div><div class="line"><a name="l00996"><\/a><span class="lineno">  996<\/span>&#160;    <\/div><div class="line"><a name="l00997"><\/a><span class="lineno">  997<\/span>&#160;    <span class="comment">\/\/ to vector<\/span><\/div><div class="line"><a name="l00998"><\/a><span class="lineno">  998<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<\/div><div class="line"><a name="l00999"><\/a><span class="lineno">  999<\/span>&#160;  }<\/div><div class="line"><a name="l01000"><\/a><span class="lineno"> 1000<\/span>&#160;  <\/div><div class="line"><a name="l01001"><\/a><span class="lineno"> 1001<\/span>&#160;  <span class="comment">\/\/ real scores are now in [0 best .. X worst]<\/span><\/div><div class="line"><a name="l01002"><\/a><span class="lineno"> 1002<\/span>&#160;<\/div><div class="line"><a name="l01003"><\/a><span class="lineno"> 1003<\/span>&#160;  <span class="comment">\/\/ sort vector in ascending order<\/span><\/div><div class="line"><a name="l01004"><\/a><span class="lineno"> 1004<\/span>&#160;  <span class="comment">\/\/ (scores are inverted now --the lower the better--)<\/span><\/div><div class="line"><a name="l01005"><\/a><span class="lineno"> 1005<\/span>&#160;  std::sort(ret.begin(), ret.end());<\/div><div class="line"><a name="l01006"><\/a><span class="lineno"> 1006<\/span>&#160;<\/div><div class="line"><a name="l01007"><\/a><span class="lineno"> 1007<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l01008"><\/a><span class="lineno"> 1008<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l01009"><\/a><span class="lineno"> 1009<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l01010"><\/a><span class="lineno"> 1010<\/span>&#160;<\/div><div class="line"><a name="l01011"><\/a><span class="lineno"> 1011<\/span>&#160;  <span class="comment">\/\/ cannot scale scores<\/span><\/div><div class="line"><a name="l01012"><\/a><span class="lineno"> 1012<\/span>&#160;    <\/div><div class="line"><a name="l01013"><\/a><span class="lineno"> 1013<\/span>&#160;}<\/div><div class="line"><a name="l01014"><\/a><span class="lineno"> 1014<\/span>&#160;<\/div><div class="line"><a name="l01015"><\/a><span class="lineno"> 1015<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01016"><\/a><span class="lineno"> 1016<\/span>&#160;<\/div><div class="line"><a name="l01017"><\/a><span class="lineno"> 1017<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01018"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a"> 1018<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a9ab1146585c378815af88522dfe8119a">TemplatedDatabase&lt;TDescriptor, F&gt;::queryBhattacharyya<\/a>(<\/div><div class="line"><a name="l01019"><\/a><span class="lineno"> 1019<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01020"><\/a><span class="lineno"> 1020<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01021"><\/a><span class="lineno"> 1021<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l01022"><\/a><span class="lineno"> 1022<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l01023"><\/a><span class="lineno"> 1023<\/span>&#160;  <\/div><div class="line"><a name="l01024"><\/a><span class="lineno"> 1024<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt; pairs;<\/span><\/div><div class="line"><a name="l01025"><\/a><span class="lineno"> 1025<\/span>&#160;  <span class="comment">\/\/map&lt;EntryId, double&gt;::iterator pit;<\/span><\/div><div class="line"><a name="l01026"><\/a><span class="lineno"> 1026<\/span>&#160;  <\/div><div class="line"><a name="l01027"><\/a><span class="lineno"> 1027<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt; pairs; <span class="comment">\/\/ &lt;eid, &lt;score, counter&gt; &gt;<\/span><\/div><div class="line"><a name="l01028"><\/a><span class="lineno"> 1028<\/span>&#160;  std::map&lt;EntryId, std::pair&lt;double, int&gt; &gt;::iterator pit;<\/div><div class="line"><a name="l01029"><\/a><span class="lineno"> 1029<\/span>&#160;  <\/div><div class="line"><a name="l01030"><\/a><span class="lineno"> 1030<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l01031"><\/a><span class="lineno"> 1031<\/span>&#160;  {<\/div><div class="line"><a name="l01032"><\/a><span class="lineno"> 1032<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l01033"><\/a><span class="lineno"> 1033<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l01034"><\/a><span class="lineno"> 1034<\/span>&#160;    <\/div><div class="line"><a name="l01035"><\/a><span class="lineno"> 1035<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l01036"><\/a><span class="lineno"> 1036<\/span>&#160;    <\/div><div class="line"><a name="l01037"><\/a><span class="lineno"> 1037<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l01038"><\/a><span class="lineno"> 1038<\/span>&#160;    <\/div><div class="line"><a name="l01039"><\/a><span class="lineno"> 1039<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l01040"><\/a><span class="lineno"> 1040<\/span>&#160;    {<\/div><div class="line"><a name="l01041"><\/a><span class="lineno"> 1041<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l01042"><\/a><span class="lineno"> 1042<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l01043"><\/a><span class="lineno"> 1043<\/span>&#160;      <\/div><div class="line"><a name="l01044"><\/a><span class="lineno"> 1044<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l01045"><\/a><span class="lineno"> 1045<\/span>&#160;      {<\/div><div class="line"><a name="l01046"><\/a><span class="lineno"> 1046<\/span>&#160;        <span class="keywordtype">double<\/span> value = sqrt(qvalue * dvalue);<\/div><div class="line"><a name="l01047"><\/a><span class="lineno"> 1047<\/span>&#160;        <\/div><div class="line"><a name="l01048"><\/a><span class="lineno"> 1048<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l01049"><\/a><span class="lineno"> 1049<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l01050"><\/a><span class="lineno"> 1050<\/span>&#160;        {<\/div><div class="line"><a name="l01051"><\/a><span class="lineno"> 1051<\/span>&#160;          pit-&gt;second.first += value;<\/div><div class="line"><a name="l01052"><\/a><span class="lineno"> 1052<\/span>&#160;          pit-&gt;second.second += 1;<\/div><div class="line"><a name="l01053"><\/a><span class="lineno"> 1053<\/span>&#160;        }<\/div><div class="line"><a name="l01054"><\/a><span class="lineno"> 1054<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01055"><\/a><span class="lineno"> 1055<\/span>&#160;        {<\/div><div class="line"><a name="l01056"><\/a><span class="lineno"> 1056<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l01057"><\/a><span class="lineno"> 1057<\/span>&#160;            std::map&lt;<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a>, std::pair&lt;double, int&gt; &gt;::value_type(entry_id,<\/div><div class="line"><a name="l01058"><\/a><span class="lineno"> 1058<\/span>&#160;              std::make_pair(value, 1)));<\/div><div class="line"><a name="l01059"><\/a><span class="lineno"> 1059<\/span>&#160;        }<\/div><div class="line"><a name="l01060"><\/a><span class="lineno"> 1060<\/span>&#160;      }<\/div><div class="line"><a name="l01061"><\/a><span class="lineno"> 1061<\/span>&#160;      <\/div><div class="line"><a name="l01062"><\/a><span class="lineno"> 1062<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l01063"><\/a><span class="lineno"> 1063<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l01064"><\/a><span class="lineno"> 1064<\/span>&#160;    <\/div><div class="line"><a name="l01065"><\/a><span class="lineno"> 1065<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l01066"><\/a><span class="lineno"> 1066<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l01067"><\/a><span class="lineno"> 1067<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l01068"><\/a><span class="lineno"> 1068<\/span>&#160;  {<\/div><div class="line"><a name="l01069"><\/a><span class="lineno"> 1069<\/span>&#160;    <span class="keywordflow">if<\/span>(pit-&gt;second.second &gt;= MIN_COMMON_WORDS)<\/div><div class="line"><a name="l01070"><\/a><span class="lineno"> 1070<\/span>&#160;    {<\/div><div class="line"><a name="l01071"><\/a><span class="lineno"> 1071<\/span>&#160;      ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second.first));<\/div><div class="line"><a name="l01072"><\/a><span class="lineno"> 1072<\/span>&#160;      ret.back().nWords = pit-&gt;second.second;<\/div><div class="line"><a name="l01073"><\/a><span class="lineno"> 1073<\/span>&#160;      ret.back().bhatScore = pit-&gt;second.first;<\/div><div class="line"><a name="l01074"><\/a><span class="lineno"> 1074<\/span>&#160;    }<\/div><div class="line"><a name="l01075"><\/a><span class="lineno"> 1075<\/span>&#160;  }<\/div><div class="line"><a name="l01076"><\/a><span class="lineno"> 1076<\/span>&#160;    <\/div><div class="line"><a name="l01077"><\/a><span class="lineno"> 1077<\/span>&#160;  <span class="comment">\/\/ scores are already in [0..1]<\/span><\/div><div class="line"><a name="l01078"><\/a><span class="lineno"> 1078<\/span>&#160;<\/div><div class="line"><a name="l01079"><\/a><span class="lineno"> 1079<\/span>&#160;  <span class="comment">\/\/ sort vector in descending order<\/span><\/div><div class="line"><a name="l01080"><\/a><span class="lineno"> 1080<\/span>&#160;  std::sort(ret.begin(), ret.end(), <a class="code" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">Result::gt<\/a>);<\/div><div class="line"><a name="l01081"><\/a><span class="lineno"> 1081<\/span>&#160;<\/div><div class="line"><a name="l01082"><\/a><span class="lineno"> 1082<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l01083"><\/a><span class="lineno"> 1083<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l01084"><\/a><span class="lineno"> 1084<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l01085"><\/a><span class="lineno"> 1085<\/span>&#160;<\/div><div class="line"><a name="l01086"><\/a><span class="lineno"> 1086<\/span>&#160;}<\/div><div class="line"><a name="l01087"><\/a><span class="lineno"> 1087<\/span>&#160;<\/div><div class="line"><a name="l01088"><\/a><span class="lineno"> 1088<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01089"><\/a><span class="lineno"> 1089<\/span>&#160;<\/div><div class="line"><a name="l01090"><\/a><span class="lineno"> 1090<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01091"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d"> 1091<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a37886bd9d47899d14bc5738aba9f298d">TemplatedDatabase&lt;TDescriptor, F&gt;::queryDotProduct<\/a>(<\/div><div class="line"><a name="l01092"><\/a><span class="lineno"> 1092<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;vec, <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;ret, <span class="keywordtype">int<\/span> max_results, <span class="keywordtype">int<\/span> max_id)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01093"><\/a><span class="lineno"> 1093<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01094"><\/a><span class="lineno"> 1094<\/span>&#160;  BowVector::const_iterator vit;<\/div><div class="line"><a name="l01095"><\/a><span class="lineno"> 1095<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator rit;<\/div><div class="line"><a name="l01096"><\/a><span class="lineno"> 1096<\/span>&#160;  <\/div><div class="line"><a name="l01097"><\/a><span class="lineno"> 1097<\/span>&#160;  std::map&lt;EntryId, double&gt; pairs;<\/div><div class="line"><a name="l01098"><\/a><span class="lineno"> 1098<\/span>&#160;  std::map&lt;EntryId, double&gt;::iterator pit;<\/div><div class="line"><a name="l01099"><\/a><span class="lineno"> 1099<\/span>&#160;  <\/div><div class="line"><a name="l01100"><\/a><span class="lineno"> 1100<\/span>&#160;  <span class="keywordflow">for<\/span>(vit = vec.begin(); vit != vec.end(); ++vit)<\/div><div class="line"><a name="l01101"><\/a><span class="lineno"> 1101<\/span>&#160;  {<\/div><div class="line"><a name="l01102"><\/a><span class="lineno"> 1102<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id = vit-&gt;first;<\/div><div class="line"><a name="l01103"><\/a><span class="lineno"> 1103<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; qvalue = vit-&gt;second;<\/div><div class="line"><a name="l01104"><\/a><span class="lineno"> 1104<\/span>&#160;    <\/div><div class="line"><a name="l01105"><\/a><span class="lineno"> 1105<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ae1837c4f89c6c55b460b761f8b79b568">IFRow<\/a>&amp; row = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[word_id];<\/div><div class="line"><a name="l01106"><\/a><span class="lineno"> 1106<\/span>&#160;    <\/div><div class="line"><a name="l01107"><\/a><span class="lineno"> 1107<\/span>&#160;    <span class="comment">\/\/ IFRows are sorted in ascending entry_id order<\/span><\/div><div class="line"><a name="l01108"><\/a><span class="lineno"> 1108<\/span>&#160;    <\/div><div class="line"><a name="l01109"><\/a><span class="lineno"> 1109<\/span>&#160;    <span class="keywordflow">for<\/span>(rit = row.begin(); rit != row.end(); ++rit)<\/div><div class="line"><a name="l01110"><\/a><span class="lineno"> 1110<\/span>&#160;    {<\/div><div class="line"><a name="l01111"><\/a><span class="lineno"> 1111<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = rit-&gt;entry_id;<\/div><div class="line"><a name="l01112"><\/a><span class="lineno"> 1112<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>&amp; dvalue = rit-&gt;word_weight;<\/div><div class="line"><a name="l01113"><\/a><span class="lineno"> 1113<\/span>&#160;      <\/div><div class="line"><a name="l01114"><\/a><span class="lineno"> 1114<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt; max_id || max_id == -1)<\/div><div class="line"><a name="l01115"><\/a><span class="lineno"> 1115<\/span>&#160;      {<\/div><div class="line"><a name="l01116"><\/a><span class="lineno"> 1116<\/span>&#160;        <span class="keywordtype">double<\/span> value; <\/div><div class="line"><a name="l01117"><\/a><span class="lineno"> 1117<\/span>&#160;        <span class="keywordflow">if<\/span>(this-&gt;<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;getWeightingType() == BINARY)<\/div><div class="line"><a name="l01118"><\/a><span class="lineno"> 1118<\/span>&#160;          value = 1;<\/div><div class="line"><a name="l01119"><\/a><span class="lineno"> 1119<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01120"><\/a><span class="lineno"> 1120<\/span>&#160;          value = qvalue * dvalue;<\/div><div class="line"><a name="l01121"><\/a><span class="lineno"> 1121<\/span>&#160;        <\/div><div class="line"><a name="l01122"><\/a><span class="lineno"> 1122<\/span>&#160;        pit = pairs.lower_bound(entry_id);<\/div><div class="line"><a name="l01123"><\/a><span class="lineno"> 1123<\/span>&#160;        <span class="keywordflow">if<\/span>(pit != pairs.end() &amp;&amp; !(pairs.key_comp()(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#a4077b6061cdbb2afa1700b103f68f12e">entry_id<\/a>, pit-&gt;first)))<\/div><div class="line"><a name="l01124"><\/a><span class="lineno"> 1124<\/span>&#160;        {<\/div><div class="line"><a name="l01125"><\/a><span class="lineno"> 1125<\/span>&#160;          pit-&gt;second += value;<\/div><div class="line"><a name="l01126"><\/a><span class="lineno"> 1126<\/span>&#160;        }<\/div><div class="line"><a name="l01127"><\/a><span class="lineno"> 1127<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01128"><\/a><span class="lineno"> 1128<\/span>&#160;        {<\/div><div class="line"><a name="l01129"><\/a><span class="lineno"> 1129<\/span>&#160;          pairs.insert(pit, <\/div><div class="line"><a name="l01130"><\/a><span class="lineno"> 1130<\/span>&#160;            std::map&lt;EntryId, double&gt;::value_type(entry_id, value));<\/div><div class="line"><a name="l01131"><\/a><span class="lineno"> 1131<\/span>&#160;        }<\/div><div class="line"><a name="l01132"><\/a><span class="lineno"> 1132<\/span>&#160;      }<\/div><div class="line"><a name="l01133"><\/a><span class="lineno"> 1133<\/span>&#160;      <\/div><div class="line"><a name="l01134"><\/a><span class="lineno"> 1134<\/span>&#160;    } <span class="comment">\/\/ for each inverted row<\/span><\/div><div class="line"><a name="l01135"><\/a><span class="lineno"> 1135<\/span>&#160;  } <span class="comment">\/\/ for each query word<\/span><\/div><div class="line"><a name="l01136"><\/a><span class="lineno"> 1136<\/span>&#160;    <\/div><div class="line"><a name="l01137"><\/a><span class="lineno"> 1137<\/span>&#160;  <span class="comment">\/\/ move to vector<\/span><\/div><div class="line"><a name="l01138"><\/a><span class="lineno"> 1138<\/span>&#160;  ret.reserve(pairs.size());<\/div><div class="line"><a name="l01139"><\/a><span class="lineno"> 1139<\/span>&#160;  <span class="keywordflow">for<\/span>(pit = pairs.begin(); pit != pairs.end(); ++pit)<\/div><div class="line"><a name="l01140"><\/a><span class="lineno"> 1140<\/span>&#160;  {<\/div><div class="line"><a name="l01141"><\/a><span class="lineno"> 1141<\/span>&#160;    ret.push_back(<a class="code" href="classDBoW2_1_1Result.html">Result<\/a>(pit-&gt;first, pit-&gt;second));<\/div><div class="line"><a name="l01142"><\/a><span class="lineno"> 1142<\/span>&#160;  }<\/div><div class="line"><a name="l01143"><\/a><span class="lineno"> 1143<\/span>&#160;    <\/div><div class="line"><a name="l01144"><\/a><span class="lineno"> 1144<\/span>&#160;  <span class="comment">\/\/ scores are the greater the better<\/span><\/div><div class="line"><a name="l01145"><\/a><span class="lineno"> 1145<\/span>&#160;<\/div><div class="line"><a name="l01146"><\/a><span class="lineno"> 1146<\/span>&#160;  <span class="comment">\/\/ sort vector in descending order<\/span><\/div><div class="line"><a name="l01147"><\/a><span class="lineno"> 1147<\/span>&#160;  std::sort(ret.begin(), ret.end(), <a class="code" href="classDBoW2_1_1Result.html#a6af72ce2de8c7e1707550520d9c7e422">Result::gt<\/a>);<\/div><div class="line"><a name="l01148"><\/a><span class="lineno"> 1148<\/span>&#160;<\/div><div class="line"><a name="l01149"><\/a><span class="lineno"> 1149<\/span>&#160;  <span class="comment">\/\/ cut vector<\/span><\/div><div class="line"><a name="l01150"><\/a><span class="lineno"> 1150<\/span>&#160;  <span class="keywordflow">if<\/span>(max_results &gt; 0 &amp;&amp; (<span class="keywordtype">int<\/span>)ret.size() &gt; max_results)<\/div><div class="line"><a name="l01151"><\/a><span class="lineno"> 1151<\/span>&#160;    ret.resize(max_results);<\/div><div class="line"><a name="l01152"><\/a><span class="lineno"> 1152<\/span>&#160;<\/div><div class="line"><a name="l01153"><\/a><span class="lineno"> 1153<\/span>&#160;  <span class="comment">\/\/ these scores cannot be scaled<\/span><\/div><div class="line"><a name="l01154"><\/a><span class="lineno"> 1154<\/span>&#160;}<\/div><div class="line"><a name="l01155"><\/a><span class="lineno"> 1155<\/span>&#160;<\/div><div class="line"><a name="l01156"><\/a><span class="lineno"> 1156<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01157"><\/a><span class="lineno"> 1157<\/span>&#160;<\/div><div class="line"><a name="l01158"><\/a><span class="lineno"> 1158<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01159"><\/a><span class="lineno"> 1159<\/span>&#160;<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa2517a2f5b946741bd6a9932c60f75a1">TemplatedDatabase&lt;TDescriptor, F&gt;::retrieveFeatures<\/a><\/div><div class="line"><a name="l01160"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aa2517a2f5b946741bd6a9932c60f75a1"> 1160<\/a><\/span>&#160;  (<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <span class="keywordtype">id<\/span>) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01161"><\/a><span class="lineno"> 1161<\/span>&#160;{<\/div><div class="line"><a name="l01162"><\/a><span class="lineno"> 1162<\/span>&#160;  assert(<span class="keywordtype">id<\/span> &lt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">size<\/a>());<\/div><div class="line"><a name="l01163"><\/a><span class="lineno"> 1163<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[id];<\/div><div class="line"><a name="l01164"><\/a><span class="lineno"> 1164<\/span>&#160;}<\/div><div class="line"><a name="l01165"><\/a><span class="lineno"> 1165<\/span>&#160;<\/div><div class="line"><a name="l01166"><\/a><span class="lineno"> 1166<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01167"><\/a><span class="lineno"> 1167<\/span>&#160;<\/div><div class="line"><a name="l01168"><\/a><span class="lineno"> 1168<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01169"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878"> 1169<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">TemplatedDatabase&lt;TDescriptor, F&gt;::save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01170"><\/a><span class="lineno"> 1170<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01171"><\/a><span class="lineno"> 1171<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::WRITE);<\/div><div class="line"><a name="l01172"><\/a><span class="lineno"> 1172<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01173"><\/a><span class="lineno"> 1173<\/span>&#160;  <\/div><div class="line"><a name="l01174"><\/a><span class="lineno"> 1174<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">save<\/a>(fs);<\/div><div class="line"><a name="l01175"><\/a><span class="lineno"> 1175<\/span>&#160;}<\/div><div class="line"><a name="l01176"><\/a><span class="lineno"> 1176<\/span>&#160;<\/div><div class="line"><a name="l01177"><\/a><span class="lineno"> 1177<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01178"><\/a><span class="lineno"> 1178<\/span>&#160;<\/div><div class="line"><a name="l01179"><\/a><span class="lineno"> 1179<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01180"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a3fab0f045b002b1052f217c3f8648fe5"> 1180<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42a5b7ce544016335011cb088fc2a878">TemplatedDatabase&lt;TDescriptor, F&gt;::save<\/a>(cv::FileStorage &amp;fs,<\/div><div class="line"><a name="l01181"><\/a><span class="lineno"> 1181<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01182"><\/a><span class="lineno"> 1182<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01183"><\/a><span class="lineno"> 1183<\/span>&#160;  <span class="comment">\/\/ Format YAML:<\/span><\/div><div class="line"><a name="l01184"><\/a><span class="lineno"> 1184<\/span>&#160;  <span class="comment">\/\/ vocabulary { ... see TemplatedVocabulary::save }<\/span><\/div><div class="line"><a name="l01185"><\/a><span class="lineno"> 1185<\/span>&#160;  <span class="comment">\/\/ database <\/span><\/div><div class="line"><a name="l01186"><\/a><span class="lineno"> 1186<\/span>&#160;  <span class="comment">\/\/ {<\/span><\/div><div class="line"><a name="l01187"><\/a><span class="lineno"> 1187<\/span>&#160;  <span class="comment">\/\/   nEntries: <\/span><\/div><div class="line"><a name="l01188"><\/a><span class="lineno"> 1188<\/span>&#160;  <span class="comment">\/\/   usingDI: <\/span><\/div><div class="line"><a name="l01189"><\/a><span class="lineno"> 1189<\/span>&#160;  <span class="comment">\/\/   diLevels: <\/span><\/div><div class="line"><a name="l01190"><\/a><span class="lineno"> 1190<\/span>&#160;  <span class="comment">\/\/   invertedIndex<\/span><\/div><div class="line"><a name="l01191"><\/a><span class="lineno"> 1191<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01192"><\/a><span class="lineno"> 1192<\/span>&#160;  <span class="comment">\/\/     [<\/span><\/div><div class="line"><a name="l01193"><\/a><span class="lineno"> 1193<\/span>&#160;  <span class="comment">\/\/        { <\/span><\/div><div class="line"><a name="l01194"><\/a><span class="lineno"> 1194<\/span>&#160;  <span class="comment">\/\/          imageId: <\/span><\/div><div class="line"><a name="l01195"><\/a><span class="lineno"> 1195<\/span>&#160;  <span class="comment">\/\/          weight: <\/span><\/div><div class="line"><a name="l01196"><\/a><span class="lineno"> 1196<\/span>&#160;  <span class="comment">\/\/        }<\/span><\/div><div class="line"><a name="l01197"><\/a><span class="lineno"> 1197<\/span>&#160;  <span class="comment">\/\/     ]<\/span><\/div><div class="line"><a name="l01198"><\/a><span class="lineno"> 1198<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01199"><\/a><span class="lineno"> 1199<\/span>&#160;  <span class="comment">\/\/   directIndex<\/span><\/div><div class="line"><a name="l01200"><\/a><span class="lineno"> 1200<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01201"><\/a><span class="lineno"> 1201<\/span>&#160;  <span class="comment">\/\/      [<\/span><\/div><div class="line"><a name="l01202"><\/a><span class="lineno"> 1202<\/span>&#160;  <span class="comment">\/\/        {<\/span><\/div><div class="line"><a name="l01203"><\/a><span class="lineno"> 1203<\/span>&#160;  <span class="comment">\/\/          nodeId:<\/span><\/div><div class="line"><a name="l01204"><\/a><span class="lineno"> 1204<\/span>&#160;  <span class="comment">\/\/          features: [ ]<\/span><\/div><div class="line"><a name="l01205"><\/a><span class="lineno"> 1205<\/span>&#160;  <span class="comment">\/\/        }<\/span><\/div><div class="line"><a name="l01206"><\/a><span class="lineno"> 1206<\/span>&#160;  <span class="comment">\/\/      ]<\/span><\/div><div class="line"><a name="l01207"><\/a><span class="lineno"> 1207<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01208"><\/a><span class="lineno"> 1208<\/span>&#160;<\/div><div class="line"><a name="l01209"><\/a><span class="lineno"> 1209<\/span>&#160;  <span class="comment">\/\/ invertedIndex[i] is for the i-th word<\/span><\/div><div class="line"><a name="l01210"><\/a><span class="lineno"> 1210<\/span>&#160;  <span class="comment">\/\/ directIndex[i] is for the i-th entry<\/span><\/div><div class="line"><a name="l01211"><\/a><span class="lineno"> 1211<\/span>&#160;  <span class="comment">\/\/ directIndex may be empty if not using direct index<\/span><\/div><div class="line"><a name="l01212"><\/a><span class="lineno"> 1212<\/span>&#160;  <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l01213"><\/a><span class="lineno"> 1213<\/span>&#160;  <span class="comment">\/\/ imageId&#39;s and nodeId&#39;s must be stored in ascending order<\/span><\/div><div class="line"><a name="l01214"><\/a><span class="lineno"> 1214<\/span>&#160;  <span class="comment">\/\/ (according to the construction of the indexes)<\/span><\/div><div class="line"><a name="l01215"><\/a><span class="lineno"> 1215<\/span>&#160;<\/div><div class="line"><a name="l01216"><\/a><span class="lineno"> 1216<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;save(fs);<\/div><div class="line"><a name="l01217"><\/a><span class="lineno"> 1217<\/span>&#160; <\/div><div class="line"><a name="l01218"><\/a><span class="lineno"> 1218<\/span>&#160;  fs &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;{&quot;<\/span>;<\/div><div class="line"><a name="l01219"><\/a><span class="lineno"> 1219<\/span>&#160;  <\/div><div class="line"><a name="l01220"><\/a><span class="lineno"> 1220<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;nEntries&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a>;<\/div><div class="line"><a name="l01221"><\/a><span class="lineno"> 1221<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;usingDI&quot;<\/span> &lt;&lt; (<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> ? 1 : 0);<\/div><div class="line"><a name="l01222"><\/a><span class="lineno"> 1222<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;diLevels&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a>;<\/div><div class="line"><a name="l01223"><\/a><span class="lineno"> 1223<\/span>&#160;  <\/div><div class="line"><a name="l01224"><\/a><span class="lineno"> 1224<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;invertedIndex&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01225"><\/a><span class="lineno"> 1225<\/span>&#160;  <\/div><div class="line"><a name="l01226"><\/a><span class="lineno"> 1226<\/span>&#160;  <span class="keyword">typename<\/span> InvertedFile::const_iterator iit;<\/div><div class="line"><a name="l01227"><\/a><span class="lineno"> 1227<\/span>&#160;  <span class="keyword">typename<\/span> IFRow::const_iterator irit;<\/div><div class="line"><a name="l01228"><\/a><span class="lineno"> 1228<\/span>&#160;  <span class="keywordflow">for<\/span>(iit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.begin(); iit != <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>.end(); ++iit)<\/div><div class="line"><a name="l01229"><\/a><span class="lineno"> 1229<\/span>&#160;  {<\/div><div class="line"><a name="l01230"><\/a><span class="lineno"> 1230<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>; <span class="comment">\/\/ word of IF<\/span><\/div><div class="line"><a name="l01231"><\/a><span class="lineno"> 1231<\/span>&#160;    <span class="keywordflow">for<\/span>(irit = iit-&gt;begin(); irit != iit-&gt;end(); ++irit)<\/div><div class="line"><a name="l01232"><\/a><span class="lineno"> 1232<\/span>&#160;    {<\/div><div class="line"><a name="l01233"><\/a><span class="lineno"> 1233<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;{:&quot;<\/span> <\/div><div class="line"><a name="l01234"><\/a><span class="lineno"> 1234<\/span>&#160;        &lt;&lt; <span class="stringliteral">&quot;imageId&quot;<\/span> &lt;&lt; (int)irit-&gt;entry_id<\/div><div class="line"><a name="l01235"><\/a><span class="lineno"> 1235<\/span>&#160;        &lt;&lt; <span class="stringliteral">&quot;weight&quot;<\/span> &lt;&lt; irit-&gt;word_weight<\/div><div class="line"><a name="l01236"><\/a><span class="lineno"> 1236<\/span>&#160;        &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01237"><\/a><span class="lineno"> 1237<\/span>&#160;    }<\/div><div class="line"><a name="l01238"><\/a><span class="lineno"> 1238<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ word of IF<\/span><\/div><div class="line"><a name="l01239"><\/a><span class="lineno"> 1239<\/span>&#160;  }<\/div><div class="line"><a name="l01240"><\/a><span class="lineno"> 1240<\/span>&#160;  <\/div><div class="line"><a name="l01241"><\/a><span class="lineno"> 1241<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ invertedIndex<\/span><\/div><div class="line"><a name="l01242"><\/a><span class="lineno"> 1242<\/span>&#160;  <\/div><div class="line"><a name="l01243"><\/a><span class="lineno"> 1243<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;directIndex&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01244"><\/a><span class="lineno"> 1244<\/span>&#160;  <\/div><div class="line"><a name="l01245"><\/a><span class="lineno"> 1245<\/span>&#160;  <span class="keyword">typename<\/span> DirectFile::const_iterator dit;<\/div><div class="line"><a name="l01246"><\/a><span class="lineno"> 1246<\/span>&#160;  <span class="keyword">typename<\/span> FeatureVector::const_iterator drit;<\/div><div class="line"><a name="l01247"><\/a><span class="lineno"> 1247<\/span>&#160;  <span class="keywordflow">for<\/span>(dit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.begin(); dit != <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.end(); ++dit)<\/div><div class="line"><a name="l01248"><\/a><span class="lineno"> 1248<\/span>&#160;  {<\/div><div class="line"><a name="l01249"><\/a><span class="lineno"> 1249<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>; <span class="comment">\/\/ entry of DF<\/span><\/div><div class="line"><a name="l01250"><\/a><span class="lineno"> 1250<\/span>&#160;    <\/div><div class="line"><a name="l01251"><\/a><span class="lineno"> 1251<\/span>&#160;    <span class="keywordflow">for<\/span>(drit = dit-&gt;begin(); drit != dit-&gt;end(); ++drit)<\/div><div class="line"><a name="l01252"><\/a><span class="lineno"> 1252<\/span>&#160;    {<\/div><div class="line"><a name="l01253"><\/a><span class="lineno"> 1253<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = drit-&gt;first;<\/div><div class="line"><a name="l01254"><\/a><span class="lineno"> 1254<\/span>&#160;      <span class="keyword">const<\/span> std::vector&lt;unsigned int&gt;&amp; features = drit-&gt;second;<\/div><div class="line"><a name="l01255"><\/a><span class="lineno"> 1255<\/span>&#160;      <\/div><div class="line"><a name="l01256"><\/a><span class="lineno"> 1256<\/span>&#160;      <span class="comment">\/\/ save info of last_nid<\/span><\/div><div class="line"><a name="l01257"><\/a><span class="lineno"> 1257<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;{&quot;<\/span>;<\/div><div class="line"><a name="l01258"><\/a><span class="lineno"> 1258<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;nodeId&quot;<\/span> &lt;&lt; (int)nid;<\/div><div class="line"><a name="l01259"><\/a><span class="lineno"> 1259<\/span>&#160;      <span class="comment">\/\/ msvc++ 2010 with opencv 2.3.1 does not allow FileStorage::operator&lt;&lt;<\/span><\/div><div class="line"><a name="l01260"><\/a><span class="lineno"> 1260<\/span>&#160;      <span class="comment">\/\/ with vectors of unsigned int<\/span><\/div><div class="line"><a name="l01261"><\/a><span class="lineno"> 1261<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;features&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span> <\/div><div class="line"><a name="l01262"><\/a><span class="lineno"> 1262<\/span>&#160;        &lt;&lt; *(<span class="keyword">const<\/span> std::vector&lt;int&gt;*)(&amp;features) &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>;<\/div><div class="line"><a name="l01263"><\/a><span class="lineno"> 1263<\/span>&#160;      fs &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01264"><\/a><span class="lineno"> 1264<\/span>&#160;    }<\/div><div class="line"><a name="l01265"><\/a><span class="lineno"> 1265<\/span>&#160;    <\/div><div class="line"><a name="l01266"><\/a><span class="lineno"> 1266<\/span>&#160;    fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ entry of DF<\/span><\/div><div class="line"><a name="l01267"><\/a><span class="lineno"> 1267<\/span>&#160;  }<\/div><div class="line"><a name="l01268"><\/a><span class="lineno"> 1268<\/span>&#160;  <\/div><div class="line"><a name="l01269"><\/a><span class="lineno"> 1269<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ directIndex<\/span><\/div><div class="line"><a name="l01270"><\/a><span class="lineno"> 1270<\/span>&#160;  <\/div><div class="line"><a name="l01271"><\/a><span class="lineno"> 1271<\/span>&#160;  fs &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>; <span class="comment">\/\/ database<\/span><\/div><div class="line"><a name="l01272"><\/a><span class="lineno"> 1272<\/span>&#160;}<\/div><div class="line"><a name="l01273"><\/a><span class="lineno"> 1273<\/span>&#160;<\/div><div class="line"><a name="l01274"><\/a><span class="lineno"> 1274<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01275"><\/a><span class="lineno"> 1275<\/span>&#160;<\/div><div class="line"><a name="l01276"><\/a><span class="lineno"> 1276<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01277"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345"> 1277<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">TemplatedDatabase&lt;TDescriptor, F&gt;::load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<\/div><div class="line"><a name="l01278"><\/a><span class="lineno"> 1278<\/span>&#160;{<\/div><div class="line"><a name="l01279"><\/a><span class="lineno"> 1279<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::READ);<\/div><div class="line"><a name="l01280"><\/a><span class="lineno"> 1280<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01281"><\/a><span class="lineno"> 1281<\/span>&#160;  <\/div><div class="line"><a name="l01282"><\/a><span class="lineno"> 1282<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">load<\/a>(fs);<\/div><div class="line"><a name="l01283"><\/a><span class="lineno"> 1283<\/span>&#160;}<\/div><div class="line"><a name="l01284"><\/a><span class="lineno"> 1284<\/span>&#160;<\/div><div class="line"><a name="l01285"><\/a><span class="lineno"> 1285<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01286"><\/a><span class="lineno"> 1286<\/span>&#160;<\/div><div class="line"><a name="l01287"><\/a><span class="lineno"> 1287<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01288"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedDatabase.html#a9aef0b11da757aba5f07deb2f5b66097"> 1288<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aff1528af5cff047539eb1e2c75fb6345">TemplatedDatabase&lt;TDescriptor, F&gt;::load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs,<\/div><div class="line"><a name="l01289"><\/a><span class="lineno"> 1289<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<\/div><div class="line"><a name="l01290"><\/a><span class="lineno"> 1290<\/span>&#160;{ <\/div><div class="line"><a name="l01291"><\/a><span class="lineno"> 1291<\/span>&#160;  <span class="comment">\/\/ load voc first<\/span><\/div><div class="line"><a name="l01292"><\/a><span class="lineno"> 1292<\/span>&#160;  <span class="comment">\/\/ subclasses must instantiate m_voc before calling this ::load<\/span><\/div><div class="line"><a name="l01293"><\/a><span class="lineno"> 1293<\/span>&#160;  <span class="keywordflow">if<\/span>(!<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>) <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>;<\/div><div class="line"><a name="l01294"><\/a><span class="lineno"> 1294<\/span>&#160;  <\/div><div class="line"><a name="l01295"><\/a><span class="lineno"> 1295<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ab0c5f84016743f6829c80041cd54391d">m_voc<\/a>-&gt;load(fs);<\/div><div class="line"><a name="l01296"><\/a><span class="lineno"> 1296<\/span>&#160;<\/div><div class="line"><a name="l01297"><\/a><span class="lineno"> 1297<\/span>&#160;  <span class="comment">\/\/ load database now<\/span><\/div><div class="line"><a name="l01298"><\/a><span class="lineno"> 1298<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a88fe9b880f9b753de1ea6e07fe42808b">clear<\/a>(); <span class="comment">\/\/ resizes inverted file <\/span><\/div><div class="line"><a name="l01299"><\/a><span class="lineno"> 1299<\/span>&#160;    <\/div><div class="line"><a name="l01300"><\/a><span class="lineno"> 1300<\/span>&#160;  cv::FileNode fdb = fs[name];<\/div><div class="line"><a name="l01301"><\/a><span class="lineno"> 1301<\/span>&#160;  <\/div><div class="line"><a name="l01302"><\/a><span class="lineno"> 1302<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> = (int)fdb[<span class="stringliteral">&quot;nEntries&quot;<\/span>]; <\/div><div class="line"><a name="l01303"><\/a><span class="lineno"> 1303<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a> = (int)fdb[<span class="stringliteral">&quot;usingDI&quot;<\/span>] != 0;<\/div><div class="line"><a name="l01304"><\/a><span class="lineno"> 1304<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a0cd32f1e5a9a0a6c61d976da754d507d">m_dilevels<\/a> = (int)fdb[<span class="stringliteral">&quot;diLevels&quot;<\/span>];<\/div><div class="line"><a name="l01305"><\/a><span class="lineno"> 1305<\/span>&#160;  <\/div><div class="line"><a name="l01306"><\/a><span class="lineno"> 1306<\/span>&#160;  cv::FileNode fn = fdb[<span class="stringliteral">&quot;invertedIndex&quot;<\/span>];<\/div><div class="line"><a name="l01307"><\/a><span class="lineno"> 1307<\/span>&#160;  <span class="keywordflow">for<\/span>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid = 0; wid &lt; fn.size(); ++wid)<\/div><div class="line"><a name="l01308"><\/a><span class="lineno"> 1308<\/span>&#160;  {<\/div><div class="line"><a name="l01309"><\/a><span class="lineno"> 1309<\/span>&#160;    cv::FileNode fw = fn[wid];<\/div><div class="line"><a name="l01310"><\/a><span class="lineno"> 1310<\/span>&#160;    <\/div><div class="line"><a name="l01311"><\/a><span class="lineno"> 1311<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fw.size(); ++i)<\/div><div class="line"><a name="l01312"><\/a><span class="lineno"> 1312<\/span>&#160;    {<\/div><div class="line"><a name="l01313"><\/a><span class="lineno"> 1313<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid = (int)fw[i][<span class="stringliteral">&quot;imageId&quot;<\/span>];<\/div><div class="line"><a name="l01314"><\/a><span class="lineno"> 1314<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> v = fw[i][<span class="stringliteral">&quot;weight&quot;<\/span>];<\/div><div class="line"><a name="l01315"><\/a><span class="lineno"> 1315<\/span>&#160;      <\/div><div class="line"><a name="l01316"><\/a><span class="lineno"> 1316<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a27c2c9247ba8872a997c5dcf49ba4098">m_ifile<\/a>[wid].push_back(<a class="code" href="structDBoW2_1_1TemplatedDatabase_1_1IFPair.html#af01918e869de76b592637b0fb4c55401">IFPair<\/a>(eid, v));<\/div><div class="line"><a name="l01317"><\/a><span class="lineno"> 1317<\/span>&#160;    }<\/div><div class="line"><a name="l01318"><\/a><span class="lineno"> 1318<\/span>&#160;  }<\/div><div class="line"><a name="l01319"><\/a><span class="lineno"> 1319<\/span>&#160;  <\/div><div class="line"><a name="l01320"><\/a><span class="lineno"> 1320<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a3131f1682a80fd704221eaa88e45d59f">m_use_di<\/a>)<\/div><div class="line"><a name="l01321"><\/a><span class="lineno"> 1321<\/span>&#160;  {<\/div><div class="line"><a name="l01322"><\/a><span class="lineno"> 1322<\/span>&#160;    fn = fdb[<span class="stringliteral">&quot;directIndex&quot;<\/span>];<\/div><div class="line"><a name="l01323"><\/a><span class="lineno"> 1323<\/span>&#160;    <\/div><div class="line"><a name="l01324"><\/a><span class="lineno"> 1324<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>.resize(fn.size());<\/div><div class="line"><a name="l01325"><\/a><span class="lineno"> 1325<\/span>&#160;    m_dBowfile.resize(fn.size());<\/div><div class="line"><a name="l01326"><\/a><span class="lineno"> 1326<\/span>&#160;    assert(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a42e3e42a79ffeb46b5020c477567324d">m_nentries<\/a> == (<span class="keywordtype">int<\/span>)fn.size());<\/div><div class="line"><a name="l01327"><\/a><span class="lineno"> 1327<\/span>&#160;    <\/div><div class="line"><a name="l01328"><\/a><span class="lineno"> 1328<\/span>&#160;    FeatureVector::iterator dit;<\/div><div class="line"><a name="l01329"><\/a><span class="lineno"> 1329<\/span>&#160;    <span class="keywordflow">for<\/span>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> eid = 0; eid &lt; fn.size(); ++eid)<\/div><div class="line"><a name="l01330"><\/a><span class="lineno"> 1330<\/span>&#160;    {<\/div><div class="line"><a name="l01331"><\/a><span class="lineno"> 1331<\/span>&#160;      cv::FileNode fe = fn[eid];<\/div><div class="line"><a name="l01332"><\/a><span class="lineno"> 1332<\/span>&#160;      <\/div><div class="line"><a name="l01333"><\/a><span class="lineno"> 1333<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[eid].clear();<\/div><div class="line"><a name="l01334"><\/a><span class="lineno"> 1334<\/span>&#160;      m_dBowfile[eid].clear();<\/div><div class="line"><a name="l01335"><\/a><span class="lineno"> 1335<\/span>&#160;      <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fe.size(); ++i)<\/div><div class="line"><a name="l01336"><\/a><span class="lineno"> 1336<\/span>&#160;      {<\/div><div class="line"><a name="l01337"><\/a><span class="lineno"> 1337<\/span>&#160;        <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (int)fe[i][<span class="stringliteral">&quot;nodeId&quot;<\/span>];<\/div><div class="line"><a name="l01338"><\/a><span class="lineno"> 1338<\/span>&#160;        <\/div><div class="line"><a name="l01339"><\/a><span class="lineno"> 1339<\/span>&#160;        dit = <a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[eid].insert(<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a7c9d56812538121c9f6cf930eea54c1f">m_dfile<\/a>[eid].end(), <\/div><div class="line"><a name="l01340"><\/a><span class="lineno"> 1340<\/span>&#160;          make_pair(nid, std::vector&lt;unsigned int&gt;() ));<\/div><div class="line"><a name="l01341"><\/a><span class="lineno"> 1341<\/span>&#160;        <\/div><div class="line"><a name="l01342"><\/a><span class="lineno"> 1342<\/span>&#160;        <span class="comment">\/\/ this failed to compile with some opencv versions (2.3.1)<\/span><\/div><div class="line"><a name="l01343"><\/a><span class="lineno"> 1343<\/span>&#160;        <span class="comment">\/\/fe[i][&quot;features&quot;] &gt;&gt; dit-&gt;second;<\/span><\/div><div class="line"><a name="l01344"><\/a><span class="lineno"> 1344<\/span>&#160;        <\/div><div class="line"><a name="l01345"><\/a><span class="lineno"> 1345<\/span>&#160;        <span class="comment">\/\/ this was ok until OpenCV 2.4.1<\/span><\/div><div class="line"><a name="l01346"><\/a><span class="lineno"> 1346<\/span>&#160;        <span class="comment">\/\/std::vector&lt;int&gt; aux;<\/span><\/div><div class="line"><a name="l01347"><\/a><span class="lineno"> 1347<\/span>&#160;        <span class="comment">\/\/fe[i][&quot;features&quot;] &gt;&gt; aux; \/\/ OpenCV &lt; 2.4.1<\/span><\/div><div class="line"><a name="l01348"><\/a><span class="lineno"> 1348<\/span>&#160;        <span class="comment">\/\/dit-&gt;second.resize(aux.size());<\/span><\/div><div class="line"><a name="l01349"><\/a><span class="lineno"> 1349<\/span>&#160;        <span class="comment">\/\/std::copy(aux.begin(), aux.end(), dit-&gt;second.begin());<\/span><\/div><div class="line"><a name="l01350"><\/a><span class="lineno"> 1350<\/span>&#160;        <\/div><div class="line"><a name="l01351"><\/a><span class="lineno"> 1351<\/span>&#160;        cv::FileNode ff = fe[i][<span class="stringliteral">&quot;features&quot;<\/span>][0];<\/div><div class="line"><a name="l01352"><\/a><span class="lineno"> 1352<\/span>&#160;        dit-&gt;second.reserve(ff.size());<\/div><div class="line"><a name="l01353"><\/a><span class="lineno"> 1353<\/span>&#160;                <\/div><div class="line"><a name="l01354"><\/a><span class="lineno"> 1354<\/span>&#160;        cv::FileNodeIterator ffit;<\/div><div class="line"><a name="l01355"><\/a><span class="lineno"> 1355<\/span>&#160;        <span class="keywordflow">for<\/span>(ffit = ff.begin(); ffit != ff.end(); ++ffit)<\/div><div class="line"><a name="l01356"><\/a><span class="lineno"> 1356<\/span>&#160;        {<\/div><div class="line"><a name="l01357"><\/a><span class="lineno"> 1357<\/span>&#160;          dit-&gt;second.push_back((<span class="keywordtype">int<\/span>)*ffit); <\/div><div class="line"><a name="l01358"><\/a><span class="lineno"> 1358<\/span>&#160;        }<\/div><div class="line"><a name="l01359"><\/a><span class="lineno"> 1359<\/span>&#160;      }<\/div><div class="line"><a name="l01360"><\/a><span class="lineno"> 1360<\/span>&#160;    } <span class="comment">\/\/ for each entry<\/span><\/div><div class="line"><a name="l01361"><\/a><span class="lineno"> 1361<\/span>&#160;  } <span class="comment">\/\/ if use_id<\/span><\/div><div class="line"><a name="l01362"><\/a><span class="lineno"> 1362<\/span>&#160;  <\/div><div class="line"><a name="l01363"><\/a><span class="lineno"> 1363<\/span>&#160;}<\/div><div class="line"><a name="l01364"><\/a><span class="lineno"> 1364<\/span>&#160;<\/div><div class="line"><a name="l01365"><\/a><span class="lineno"> 1365<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01366"><\/a><span class="lineno"> 1366<\/span>&#160;<\/div><div class="line"><a name="l01372"><\/a><span class="lineno"> 1372<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01373"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#ac1f00f5484f61d6ab3b1f650955210d8"> 1373<\/a><\/span>&#160;std::ostream&amp; <a class="code" href="namespaceDBoW2.html#ac1f00f5484f61d6ab3b1f650955210d8">operator&lt;&lt;<\/a>(std::ostream &amp;os, <\/div><div class="line"><a name="l01374"><\/a><span class="lineno"> 1374<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> &amp;db)<\/div><div class="line"><a name="l01375"><\/a><span class="lineno"> 1375<\/span>&#160;{<\/div><div class="line"><a name="l01376"><\/a><span class="lineno"> 1376<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;Database: Entries = &quot;<\/span> &lt;&lt; db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#aa7599ed9dd774d86c5398da151467b2a">size<\/a>() &lt;&lt; <span class="stringliteral">&quot;, &quot;<\/span><\/div><div class="line"><a name="l01377"><\/a><span class="lineno"> 1377<\/span>&#160;    <span class="stringliteral">&quot;Using direct index = &quot;<\/span> &lt;&lt; (db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">usingDirectIndex<\/a>() ? <span class="stringliteral">&quot;yes&quot;<\/span> : <span class="stringliteral">&quot;no&quot;<\/span>);<\/div><div class="line"><a name="l01378"><\/a><span class="lineno"> 1378<\/span>&#160;  <\/div><div class="line"><a name="l01379"><\/a><span class="lineno"> 1379<\/span>&#160;  <span class="keywordflow">if<\/span>(db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#ad1be7a1f2643aa02996917215f40ee8f">usingDirectIndex<\/a>())<\/div><div class="line"><a name="l01380"><\/a><span class="lineno"> 1380<\/span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;, Direct index levels = &quot;<\/span> &lt;&lt; db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a41470afc9a878356a8bdd46473e58427">getDirectIndexLevels<\/a>();<\/div><div class="line"><a name="l01381"><\/a><span class="lineno"> 1381<\/span>&#160;  <\/div><div class="line"><a name="l01382"><\/a><span class="lineno"> 1382<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;. &quot;<\/span> &lt;&lt; *db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">getVocabulary<\/a>();<\/div><div class="line"><a name="l01383"><\/a><span class="lineno"> 1383<\/span>&#160;  <span class="keywordflow">return<\/span> os;<\/div><div class="line"><a name="l01384"><\/a><span class="lineno"> 1384<\/span>&#160;}<\/div><div class="line"><a name="l01385"><\/a><span class="lineno"> 1385<\/span>&#160;<\/div><div class="line"><a name="l01386"><\/a><span class="lineno"> 1386<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01387"><\/a><span class="lineno"> 1387<\/span>&#160;<\/div><div class="line"><a name="l01388"><\/a><span class="lineno"> 1388<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l01389"><\/a><span class="lineno"> 1389<\/span>&#160;<\/div><div class="line"><a name="l01390"><\/a><span class="lineno"> 1390<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDBoW2_1_1TemplatedDatabase_html_a89b2578484a457a8be1df89002c73759"><div class="ttname"><a href="classDBoW2_1_1TemplatedDatabase.html#a89b2578484a457a8be1df89002c73759">DBoW2::TemplatedDatabase::queryL2<\/a><\/div><div class="ttdeci">void queryL2(const BowVector &amp;vec, QueryResults &amp;ret, int max_results, int max_id) const <\/div><div class="ttdoc">Query with L2 scoring. <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedDatabase.h:728<\/div><\/div>$/;"	a
l00001	src/doc/html/TemplatedLoopDetector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_TEMPLATED_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_TEMPLATED_LOOP_DETECTOR__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/cv.h&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/TemplatedVocabulary.h&quot;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/TemplatedDatabase.h&quot;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/QueryResults.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CameraFactory.h&quot;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CataCamera.h&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/EquidistantCamera.h&quot;<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/PinholeCamera.h&quot;<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/ScaramuzzaCamera.h&quot;<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a>;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a>;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a> {<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">   39<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;{<\/div><div class="line"><a name="l00042"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a32f99a75bfaf9e565f4d63ff45ffbbe0">   42<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a32f99a75bfaf9e565f4d63ff45ffbbe0">GEOM_EXHAUSTIVE<\/a>,<\/div><div class="line"><a name="l00044"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">   44<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>,<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a52ebdc9ac2e54624873c53e2f6ab8302">   46<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a52ebdc9ac2e54624873c53e2f6ab8302">GEOM_FLANN<\/a>,<\/div><div class="line"><a name="l00048"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1ab1c44a055487f98740617940702f7b23">   48<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1ab1c44a055487f98740617940702f7b23">GEOM_NONE<\/a><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;};<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19">   52<\/a><\/span>&#160;<span class="keyword">enum<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19">DetectionStatus<\/a><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;{<\/div><div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">   55<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">LOOP_DETECTED<\/a>,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">   57<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">CLOSE_MATCHES_ONLY<\/a>,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">   59<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">NO_DB_RESULTS<\/a>,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">   61<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">LOW_NSS_FACTOR<\/a>,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">   63<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">LOW_SCORES<\/a>,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">   65<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">NO_GROUPS<\/a>,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">   67<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">NO_TEMPORAL_CONSISTENCY<\/a>,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno"><a class="line" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">   69<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">NO_GEOMETRICAL_CONSISTENCY<\/a><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;};<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html">   73<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;{<\/div><div class="line"><a name="l00076"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">   76<\/a><\/span>&#160;  <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19">DetectionStatus<\/a> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a>;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#a9ee6596916c8cae553caa9b2a4285364">   78<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#a9ee6596916c8cae553caa9b2a4285364">query<\/a>;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">   80<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a>;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;  <\/div><div class="line"><a name="l00086"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">   86<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">detection<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordflow">return<\/span> status == <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">LOOP_DETECTED<\/a>;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;  }<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;};<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html">   96<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;{<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;  <\/div><div class="line"><a name="l00101"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">  101<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;  {<\/div><div class="line"><a name="l00104"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6cf68c94f27c7b1e484ae51657688aab">  104<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6cf68c94f27c7b1e484ae51657688aab">image_rows<\/a>;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a5ee6d007400bcb7229a5b2a2aa059d2d">  106<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a5ee6d007400bcb7229a5b2a2aa059d2d">image_cols<\/a>;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/ Main loop detector parameters<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <\/div><div class="line"><a name="l00111"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">  111<\/a><\/span>&#160;    <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">  113<\/a><\/span>&#160;    <span class="keywordtype">float<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">alpha<\/a>;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">  115<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">k<\/a>;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">  117<\/a><\/span>&#160;    <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a>;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">  119<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="comment">\/\/ These are less deciding parameters of the system<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    <\/div><div class="line"><a name="l00124"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">  124<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">  126<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">max_db_results<\/a>;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">  128<\/a><\/span>&#160;    <span class="keywordtype">float<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">min_nss_factor<\/a>;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">  130<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a>; <\/div><div class="line"><a name="l00132"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">  132<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">max_intragroup_gap<\/a>; <\/div><div class="line"><a name="l00134"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">  134<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">max_distance_between_groups<\/a>;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">  136<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">max_distance_between_queries<\/a>; <\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  <\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <span class="comment">\/\/ These are for the RANSAC to compute the F<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <\/div><div class="line"><a name="l00141"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">  141<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">min_Fpoints<\/a>;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a19f6d5a5466236cb77cdb48a0c4adce5">  143<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a19f6d5a5466236cb77cdb48a0c4adce5">max_ransac_iterations<\/a>;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab86afbea2f5a4fbc08838ed41558eff5">  145<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab86afbea2f5a4fbc08838ed41558eff5">ransac_probability<\/a>;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a91f2b298d2cb2f7e92c4b824ad457513">  147<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a91f2b298d2cb2f7e92c4b824ad457513">max_reprojection_error<\/a>;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    <\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    <span class="comment">\/\/ This is to compute correspondences<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    <\/div><div class="line"><a name="l00152"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">  152<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">max_neighbor_ratio<\/a>;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;  <\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>();<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>(<span class="keywordtype">int<\/span> height, <span class="keywordtype">int<\/span> width, <span class="keywordtype">float<\/span> frequency = 1, <span class="keywordtype">bool<\/span> nss = <span class="keyword">true<\/span>,<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;      <span class="keywordtype">float<\/span> _alpha = 0.3, <span class="keywordtype">int<\/span> _k = 1, <\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;      <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a> geom = GEOM_DI, <span class="keywordtype">int<\/span> dilevels = 2);<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;      <\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    <span class="keywordtype">void<\/span> <span class="keyword">set<\/span>(<span class="keywordtype">float<\/span> frequency);<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;  };<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;  <span class="comment">\/\/camera param<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;  camodocal::CameraPtr m_camera;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;  <\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc,<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;  <\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a> &amp;db,<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keyword">const<\/span> T &amp;db, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params = <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a>());<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;  <span class="keyword">virtual<\/span> ~<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;  <\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>&amp; getDatabase() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;  <\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; getVocabulary() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;  <span class="keywordtype">void<\/span> initCameraModel(<span class="keyword">const<\/span> std::string &amp;calib_file);<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;  <\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;  <span class="keywordtype">void<\/span> setDatabase(<span class="keyword">const<\/span> T &amp;db);<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;  <\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;  <span class="keywordtype">void<\/span> setVocabulary(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; voc);<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;  <span class="keywordtype">void<\/span> allocate(<span class="keywordtype">int<\/span> nentries, <span class="keywordtype">int<\/span> nkeys = 0);<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;  <span class="keywordtype">bool<\/span> detectLoop(<span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a> &amp;match,std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;                          std::vector&lt;cv::Point2f&gt; &amp;old_pts);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> clear();<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;  <span class="keywordtype">void<\/span> eraseIndex(std::vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;  <\/div><div class="line"><a name="l00289"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">  289<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a><\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;  {<\/div><div class="line"><a name="l00292"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">  292<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00294"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">  294<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">last<\/a>;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">  296<\/a><\/span>&#160;    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>; <span class="comment">\/\/ score of island<\/span><\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;    <\/div><div class="line"><a name="l00299"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">  299<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">best_entry<\/a>; <span class="comment">\/\/ id and score of the entry with the highest score<\/span><\/div><div class="line"><a name="l00301"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a10190b75ad3a4ceee52699d8c61c400d">  301<\/a><\/span>&#160;<span class="comment"><\/span>    <span class="keywordtype">double<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a10190b75ad3a4ceee52699d8c61c400d">best_score<\/a>;  <span class="comment">\/\/ in the island<\/span><\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;    <\/div><div class="line"><a name="l00306"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4d38a7f200dc46436fc90d096fdb924e">  306<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4d38a7f200dc46436fc90d096fdb924e">tIsland<\/a>(){}<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;    <\/div><div class="line"><a name="l00313"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a5299d5dce7178c27cdc851c1dd93c9bd">  313<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a5299d5dce7178c27cdc851c1dd93c9bd">tIsland<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> f, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> l): first(f), last(l){}<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;    <\/div><div class="line"><a name="l00321"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a2c2f47ac565ac76c57e5a4a740c2031f">  321<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a2c2f47ac565ac76c57e5a4a740c2031f">tIsland<\/a>(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> f, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> l, <span class="keywordtype">double<\/span> s): first(f), last(l), score(s){}<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;    <\/div><div class="line"><a name="l00328"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a78f037960a95272d5d197187ebcf99f8">  328<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator &lt; (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;      <span class="keywordflow">return<\/span> this-&gt;score &lt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>;<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    }<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    <\/div><div class="line"><a name="l00338"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#ac3076fa14d3c35d2ab3dd58ec9036c58">  338<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator &gt; (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;      <span class="keywordflow">return<\/span> this-&gt;score &gt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>;<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    }<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;    <\/div><div class="line"><a name="l00350"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a491aec3dbf528587553872ca642742b5">  350<\/a><\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a491aec3dbf528587553872ca642742b5">gt<\/a>(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;    {<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;      <span class="keywordflow">return<\/span> a.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a> &gt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a4eaef7404aa7a4185cbb25cc0ede2e0f">score<\/a>;<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;    }<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;        <\/div><div class="line"><a name="l00362"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a3c7d27e0815b04445b117319997860a9">  362<\/a><\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a3c7d27e0815b04445b117319997860a9">ltId<\/a>(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;b)<\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;    {<\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;      <span class="keywordflow">return<\/span> a.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a> &lt; b.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;    }<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    <\/div><div class="line"><a name="l00371"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a69f4e48ea09ced098eab959062f39922">  371<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a69f4e48ea09ced098eab959062f39922">length<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> last - first + 1; }<\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;    <\/div><div class="line"><a name="l00377"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#ac628bec67fcd4ac2b6f19aeb20ad08c2">  377<\/a><\/span>&#160;    std::string <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#ac628bec67fcd4ac2b6f19aeb20ad08c2">toString<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;      stringstream ss;<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;      ss &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span> &lt;&lt; first &lt;&lt; <span class="stringliteral">&quot;-&quot;<\/span> &lt;&lt; last &lt;&lt; <span class="stringliteral">&quot;: &quot;<\/span> &lt;&lt; score &lt;&lt; <span class="stringliteral">&quot; | best: &lt;&quot;<\/span><\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;        &lt;&lt; best_entry &lt;&lt; <span class="stringliteral">&quot;: &quot;<\/span> &lt;&lt; best_score &lt;&lt; <span class="stringliteral">&quot;&gt; ] &quot;<\/span>;<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;      <span class="keywordflow">return<\/span> ss.str();<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;    }<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;  };<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;  <\/div><div class="line"><a name="l00387"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html">  387<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html">tTemporalWindow<\/a><\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;  {<\/div><div class="line"><a name="l00390"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">  390<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a>;<\/div><div class="line"><a name="l00392"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">  392<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">last_query_id<\/a>;<\/div><div class="line"><a name="l00394"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">  394<\/a><\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a>;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    <\/div><div class="line"><a name="l00399"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#ad87f2dd259470e67312d0a073cb3da4b">  399<\/a><\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#ad87f2dd259470e67312d0a073cb3da4b">tTemporalWindow<\/a>(): nentries(0) {}<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;  };<\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;  <\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;  <\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;  <\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;  <span class="keywordtype">void<\/span> removeLowScores(<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, <span class="keywordtype">double<\/span> threshold) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;  <\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;  <span class="keywordtype">void<\/span> computeIslands(<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, vector&lt;tIsland&gt; &amp;islands) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;  <\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;  <span class="keywordtype">double<\/span> calculateIslandScore(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_first, <\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_last) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;  <span class="keywordtype">void<\/span> updateTemporalWindow(<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;matched_island, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id);<\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;  <\/div><div class="line"><a name="l00443"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a2d0aa5277cfa3ee57a00ade950c4592c">  443<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a2d0aa5277cfa3ee57a00ade950c4592c">getConsistentEntries<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<span class="keyword">  <\/span>{<\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;    <span class="keywordflow">return<\/span> m_window.nentries;<\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;  }<\/div><div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;  <\/div><div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;  <span class="keywordtype">void<\/span> reduceInputToOutput(vector&lt;cv::Point2f&gt; v_in, vector&lt;cv::Point2f&gt; &amp;v_out, vector&lt;uchar&gt; status);<\/div><div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;  <span class="keywordtype">bool<\/span> checkFoundamental(vector&lt;cv::Point2f&gt; cur_input_pts,<\/div><div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;                   vector&lt;cv::Point2f&gt; old_input_pts,<\/div><div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;                   vector&lt;cv::Point2f&gt; &amp;cur_output_pts,<\/div><div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;                   vector&lt;cv::Point2f&gt; &amp;old_output_pts);<\/div><div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;  <span class="keywordtype">bool<\/span> isGeometricallyConsistent_DI(<a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> old_entry, <\/div><div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;curvec,<\/div><div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;    std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;    std::vector&lt;cv::Point2f&gt; &amp;old_pts);<\/div><div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;<\/div><div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;  <span class="keywordtype">void<\/span> getFlannStructure(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;    cv::FlannBasedMatcher &amp;flann_structure) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;<\/div><div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;  <span class="keywordtype">void<\/span> getMatches_neighratio(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;A, <\/div><div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;    <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_A, <span class="keyword">const<\/span> vector&lt;TDescriptor&gt; &amp;B,<\/div><div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;    <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_B,<\/div><div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;    vector&lt;unsigned int&gt; &amp;i_match_A, vector&lt;unsigned int&gt; &amp;i_match_B) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;<\/div><div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;<\/div><div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;  <span class="comment">\/\/ The loop detector stores its own copy of the database<\/span><\/div><div class="line"><a name="l00495"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">  495<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor,F&gt;<\/a> *<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00496"><\/a><span class="lineno">  496<\/span>&#160;  <\/div><div class="line"><a name="l00498"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">  498<\/a><\/span>&#160;  vector&lt;vector&lt;cv::KeyPoint&gt; &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>;<\/div><div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;  <\/div><div class="line"><a name="l00501"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">  501<\/a><\/span>&#160;  vector&lt;vector&lt;TDescriptor&gt; &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>;<\/div><div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;  <\/div><div class="line"><a name="l00504"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">  504<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">m_last_bowvec<\/a>;<\/div><div class="line"><a name="l00505"><\/a><span class="lineno">  505<\/span>&#160;  <\/div><div class="line"><a name="l00507"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">  507<\/a><\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html">tTemporalWindow<\/a> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>;<\/div><div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;  <\/div><div class="line"><a name="l00510"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">  510<\/a><\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>;<\/div><div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;  <\/div><div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;};<\/div><div class="line"><a name="l00513"><\/a><span class="lineno">  513<\/span>&#160;<\/div><div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;<\/div><div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l00517"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a04ac2c7658738ffc2b15ca252ed46faa">  517<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor,F&gt;::Parameters::Parameters<\/a>():<\/div><div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;  use_nss(true), alpha(0.3), k(4), geom_check(<a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>), di_levels(0)<\/div><div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;{<\/div><div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;  <span class="keyword">set<\/span>(1);<\/div><div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;}<\/div><div class="line"><a name="l00522"><\/a><span class="lineno">  522<\/span>&#160;<\/div><div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00524"><\/a><span class="lineno">  524<\/span>&#160;<\/div><div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a04ac2c7658738ffc2b15ca252ed46faa">TemplatedLoopDetector&lt;TDescriptor,F&gt;::Parameters::Parameters<\/a><\/div><div class="line"><a name="l00527"><\/a><span class="lineno"><a class="line" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab9ad27bd831c8718fd1f6a9d3052c050">  527<\/a><\/span>&#160;  (<span class="keywordtype">int<\/span> height, <span class="keywordtype">int<\/span> width, <span class="keywordtype">float<\/span> frequency, <span class="keywordtype">bool<\/span> nss, <span class="keywordtype">float<\/span> _alpha, <\/div><div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;  <span class="keywordtype">int<\/span> _k, <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1">GeometricalCheck<\/a> geom, <span class="keywordtype">int<\/span> dilevels)<\/div><div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;  : <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6cf68c94f27c7b1e484ae51657688aab">image_rows<\/a>(height), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a5ee6d007400bcb7229a5b2a2aa059d2d">image_cols<\/a>(width), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a>(nss), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">alpha<\/a>(_alpha), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">k<\/a>(_k),<\/div><div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;    <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a>(geom), <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>(dilevels)<\/div><div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;{<\/div><div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;  <span class="keyword">set<\/span>(frequency);<\/div><div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;}<\/div><div class="line"><a name="l00534"><\/a><span class="lineno">  534<\/span>&#160;<\/div><div class="line"><a name="l00535"><\/a><span class="lineno">  535<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;<\/div><div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor,F&gt;::Parameters::set<\/a>(<span class="keywordtype">float<\/span> f)<\/div><div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;{<\/div><div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a> = 20 * f;<\/div><div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">max_db_results<\/a> = 50 * f;<\/div><div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">min_nss_factor<\/a> = 0.005;<\/div><div class="line"><a name="l00543"><\/a><span class="lineno">  543<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a> = f;<\/div><div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">max_intragroup_gap<\/a> = 3 * f;<\/div><div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">max_distance_between_groups<\/a> = 3 * f;<\/div><div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">max_distance_between_queries<\/a> = 2 * f; <\/div><div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;<\/div><div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">min_Fpoints<\/a> = 12;<\/div><div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a19f6d5a5466236cb77cdb48a0c4adce5">max_ransac_iterations<\/a> = 500;<\/div><div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ab86afbea2f5a4fbc08838ed41558eff5">ransac_probability<\/a> = 0.99;<\/div><div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a91f2b298d2cb2f7e92c4b824ad457513">max_reprojection_error<\/a> = 2.0;<\/div><div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;  <\/div><div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">max_neighbor_ratio<\/a> = 0.6;<\/div><div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;}<\/div><div class="line"><a name="l00555"><\/a><span class="lineno">  555<\/span>&#160;<\/div><div class="line"><a name="l00556"><\/a><span class="lineno">  556<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;<\/div><div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor,F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00560"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">  560<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>(NULL), <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params)<\/div><div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;{<\/div><div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;}<\/div><div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;<\/div><div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;<\/div><div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor,F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00569"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ac229b21e58c4e81fd423948e2ea88274">  569<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params) <\/div><div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;{<\/div><div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>(voc, <\/div><div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;    params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>, params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;  <\/div><div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;  <span class="comment">\/\/TODO change param trans method<\/span><\/div><div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;  <span class="comment">\/\/m_camera = CameraFactory::instance()-&gt;generateCameraFromYamlFile(calib_file);<\/span><\/div><div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;  <span class="comment">\/\/printf(&quot;loop set camera model finish\\n&quot;);<\/span><\/div><div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;}<\/div><div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;<\/div><div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;<\/div><div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00583"><\/a><span class="lineno">  583<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ae0593a0fe2addcad517bc628cfad8172">TemplatedLoopDetector&lt;TDescriptor,F&gt;::setVocabulary<\/a><\/div><div class="line"><a name="l00584"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ae0593a0fe2addcad517bc628cfad8172">  584<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; voc)<\/div><div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;{<\/div><div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>(voc, <\/div><div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00589"><\/a><span class="lineno">  589<\/span>&#160;}<\/div><div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;<\/div><div class="line"><a name="l00591"><\/a><span class="lineno">  591<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;<\/div><div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor, F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00595"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a36b159374671ae656c18819506c7b004">  595<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a> &amp;db, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params)<\/div><div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;{<\/div><div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>(db.<a class="code" href="classDBoW2_1_1TemplatedDatabase.html#a16700a6009377f817593435b062a47b5">getVocabulary<\/a>(),<\/div><div class="line"><a name="l00599"><\/a><span class="lineno">  599<\/span>&#160;    params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>, params.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;}<\/div><div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;<\/div><div class="line"><a name="l00602"><\/a><span class="lineno">  602<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;<\/div><div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a04261c49c2077a828deaa51c557423fd">TemplatedLoopDetector&lt;TDescriptor, F&gt;::TemplatedLoopDetector<\/a><\/div><div class="line"><a name="l00607"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a51b2b7065aa977d2588e65a1bafdd330">  607<\/a><\/span>&#160;  (<span class="keyword">const<\/span> T &amp;db, <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html">Parameters<\/a> &amp;params)<\/div><div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;  : <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>(params)<\/div><div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;{<\/div><div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> T(db);<\/div><div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;clear();<\/div><div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;}<\/div><div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;<\/div><div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00616"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a95d09e6aa486c87c55629740c8539143">  616<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a95d09e6aa486c87c55629740c8539143">TemplatedLoopDetector&lt;TDescriptor, F&gt;::initCameraModel<\/a>(<span class="keyword">const<\/span> std::string &amp;calib_file)<\/div><div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;{<\/div><div class="line"><a name="l00618"><\/a><span class="lineno">  618<\/span>&#160;  m_camera = CameraFactory::instance()-&gt;generateCameraFromYamlFile(calib_file);<\/div><div class="line"><a name="l00619"><\/a><span class="lineno">  619<\/span>&#160;}<\/div><div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;<\/div><div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;<\/div><div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00625"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a305441ce97f526d2d35e62919c512d8c">  625<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a305441ce97f526d2d35e62919c512d8c">TemplatedLoopDetector&lt;TDescriptor, F&gt;::setDatabase<\/a>(<span class="keyword">const<\/span> T &amp;db)<\/div><div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;{<\/div><div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = <span class="keyword">new<\/span> T(db);<\/div><div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">clear<\/a>();<\/div><div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;}<\/div><div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;<\/div><div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;<\/div><div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00635"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab5af43aae37b3a4781854f7c71a650ab">  635<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab5af43aae37b3a4781854f7c71a650ab">TemplatedLoopDetector&lt;TDescriptor, F&gt;::~TemplatedLoopDetector<\/a>(<span class="keywordtype">void<\/span>)<\/div><div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;{<\/div><div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a> = NULL;<\/div><div class="line"><a name="l00639"><\/a><span class="lineno">  639<\/span>&#160;}<\/div><div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;<\/div><div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;<\/div><div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad5f4641228ce4c00085ac26af5dc72bd">TemplatedLoopDetector&lt;TDescriptor,F&gt;::allocate<\/a><\/div><div class="line"><a name="l00645"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad5f4641228ce4c00085ac26af5dc72bd">  645<\/a><\/span>&#160;  (<span class="keywordtype">int<\/span> nentries, <span class="keywordtype">int<\/span> nkeys)<\/div><div class="line"><a name="l00646"><\/a><span class="lineno">  646<\/span>&#160;{<\/div><div class="line"><a name="l00647"><\/a><span class="lineno">  647<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> sz = (<span class="keyword">const<\/span> int)<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.size();<\/div><div class="line"><a name="l00648"><\/a><span class="lineno">  648<\/span>&#160;  <\/div><div class="line"><a name="l00649"><\/a><span class="lineno">  649<\/span>&#160;  <span class="keywordflow">if<\/span>(sz &lt; nentries)<\/div><div class="line"><a name="l00650"><\/a><span class="lineno">  650<\/span>&#160;  {<\/div><div class="line"><a name="l00651"><\/a><span class="lineno">  651<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.resize(nentries);<\/div><div class="line"><a name="l00652"><\/a><span class="lineno">  652<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>.resize(nentries);<\/div><div class="line"><a name="l00653"><\/a><span class="lineno">  653<\/span>&#160;  }<\/div><div class="line"><a name="l00654"><\/a><span class="lineno">  654<\/span>&#160;  <\/div><div class="line"><a name="l00655"><\/a><span class="lineno">  655<\/span>&#160;  <span class="keywordflow">if<\/span>(nkeys &gt; 0)<\/div><div class="line"><a name="l00656"><\/a><span class="lineno">  656<\/span>&#160;  {<\/div><div class="line"><a name="l00657"><\/a><span class="lineno">  657<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">int<\/span> i = sz; i &lt; nentries; ++i)<\/div><div class="line"><a name="l00658"><\/a><span class="lineno">  658<\/span>&#160;    {<\/div><div class="line"><a name="l00659"><\/a><span class="lineno">  659<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>[i].reserve(nkeys);<\/div><div class="line"><a name="l00660"><\/a><span class="lineno">  660<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>[i].reserve(nkeys);<\/div><div class="line"><a name="l00661"><\/a><span class="lineno">  661<\/span>&#160;    }<\/div><div class="line"><a name="l00662"><\/a><span class="lineno">  662<\/span>&#160;  }<\/div><div class="line"><a name="l00663"><\/a><span class="lineno">  663<\/span>&#160;  <\/div><div class="line"><a name="l00664"><\/a><span class="lineno">  664<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;allocate(nentries, nkeys);<\/div><div class="line"><a name="l00665"><\/a><span class="lineno">  665<\/span>&#160;}<\/div><div class="line"><a name="l00666"><\/a><span class="lineno">  666<\/span>&#160;<\/div><div class="line"><a name="l00667"><\/a><span class="lineno">  667<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00668"><\/a><span class="lineno">  668<\/span>&#160;<\/div><div class="line"><a name="l00669"><\/a><span class="lineno">  669<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00670"><\/a><span class="lineno">  670<\/span>&#160;<span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedDatabase.html">TemplatedDatabase&lt;TDescriptor, F&gt;<\/a>&amp; <\/div><div class="line"><a name="l00671"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#abbe0dfa97f566c35181754b9a4d482ed">  671<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#abbe0dfa97f566c35181754b9a4d482ed">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getDatabase<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00672"><\/a><span class="lineno">  672<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00673"><\/a><span class="lineno">  673<\/span>&#160;  <span class="keywordflow">return<\/span> *<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>;<\/div><div class="line"><a name="l00674"><\/a><span class="lineno">  674<\/span>&#160;}<\/div><div class="line"><a name="l00675"><\/a><span class="lineno">  675<\/span>&#160;<\/div><div class="line"><a name="l00676"><\/a><span class="lineno">  676<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00677"><\/a><span class="lineno">  677<\/span>&#160;<\/div><div class="line"><a name="l00678"><\/a><span class="lineno">  678<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00679"><\/a><span class="lineno">  679<\/span>&#160;<span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; <\/div><div class="line"><a name="l00680"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a832895a63630aacfdbc387c143215fef">  680<\/a><\/span>&#160;<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a832895a63630aacfdbc387c143215fef">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getVocabulary<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00681"><\/a><span class="lineno">  681<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00682"><\/a><span class="lineno">  682<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary();<\/div><div class="line"><a name="l00683"><\/a><span class="lineno">  683<\/span>&#160;}<\/div><div class="line"><a name="l00684"><\/a><span class="lineno">  684<\/span>&#160;<\/div><div class="line"><a name="l00685"><\/a><span class="lineno">  685<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00686"><\/a><span class="lineno">  686<\/span>&#160;<\/div><div class="line"><a name="l00687"><\/a><span class="lineno">  687<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00688"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a7d5adc7de1fe6f329d83c91cfa6e18c4">  688<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a7d5adc7de1fe6f329d83c91cfa6e18c4">TemplatedLoopDetector&lt;TDescriptor, F&gt;::detectLoop<\/a>(<\/div><div class="line"><a name="l00689"><\/a><span class="lineno">  689<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00690"><\/a><span class="lineno">  690<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00691"><\/a><span class="lineno">  691<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a> &amp;match,<\/div><div class="line"><a name="l00692"><\/a><span class="lineno">  692<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00693"><\/a><span class="lineno">  693<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;old_pts)<\/div><div class="line"><a name="l00694"><\/a><span class="lineno">  694<\/span>&#160;{<\/div><div class="line"><a name="l00695"><\/a><span class="lineno">  695<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;size();<\/div><div class="line"><a name="l00696"><\/a><span class="lineno">  696<\/span>&#160;  match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#a9ee6596916c8cae553caa9b2a4285364">query<\/a> = entry_id;<\/div><div class="line"><a name="l00697"><\/a><span class="lineno">  697<\/span>&#160;  <\/div><div class="line"><a name="l00698"><\/a><span class="lineno">  698<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> bowvec;<\/div><div class="line"><a name="l00699"><\/a><span class="lineno">  699<\/span>&#160;  <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> featvec;<\/div><div class="line"><a name="l00700"><\/a><span class="lineno">  700<\/span>&#160;  <\/div><div class="line"><a name="l00701"><\/a><span class="lineno">  701<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>)<\/div><div class="line"><a name="l00702"><\/a><span class="lineno">  702<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary()-&gt;transform(descriptors, bowvec, featvec,<\/div><div class="line"><a name="l00703"><\/a><span class="lineno">  703<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a497d9e1fc87af65ae2a5633316435d6e">di_levels<\/a>);<\/div><div class="line"><a name="l00704"><\/a><span class="lineno">  704<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00705"><\/a><span class="lineno">  705<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary()-&gt;transform(descriptors, bowvec);<\/div><div class="line"><a name="l00706"><\/a><span class="lineno">  706<\/span>&#160;<\/div><div class="line"><a name="l00707"><\/a><span class="lineno">  707<\/span>&#160;  <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)entry_id &lt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>)<\/div><div class="line"><a name="l00708"><\/a><span class="lineno">  708<\/span>&#160;  {<\/div><div class="line"><a name="l00709"><\/a><span class="lineno">  709<\/span>&#160;    <span class="comment">\/\/ only add the entry to the database and finish<\/span><\/div><div class="line"><a name="l00710"><\/a><span class="lineno">  710<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;add(bowvec, featvec);<\/div><div class="line"><a name="l00711"><\/a><span class="lineno">  711<\/span>&#160;    match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">CLOSE_MATCHES_ONLY<\/a>;<\/div><div class="line"><a name="l00712"><\/a><span class="lineno">  712<\/span>&#160;    <span class="comment">\/\/printf(&quot;entry_id %d &lt;= m_params.dislocal %d\\n&quot;,entry_id,m_params.dislocal);<\/span><\/div><div class="line"><a name="l00713"><\/a><span class="lineno">  713<\/span>&#160;  }<\/div><div class="line"><a name="l00714"><\/a><span class="lineno">  714<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00715"><\/a><span class="lineno">  715<\/span>&#160;  {<\/div><div class="line"><a name="l00716"><\/a><span class="lineno">  716<\/span>&#160;    <span class="comment">\/\/printf(&quot;entry_id %d &gt; m_params.dislocal %d\\n&quot;,entry_id,m_params.dislocal);<\/span><\/div><div class="line"><a name="l00717"><\/a><span class="lineno">  717<\/span>&#160;    <span class="keywordtype">int<\/span> max_id = (int)entry_id - <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>;<\/div><div class="line"><a name="l00718"><\/a><span class="lineno">  718<\/span>&#160;    <\/div><div class="line"><a name="l00719"><\/a><span class="lineno">  719<\/span>&#160;    <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> qret;<\/div><div class="line"><a name="l00720"><\/a><span class="lineno">  720<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;query(bowvec, qret, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a59a5a73d2423036fd1513cdd629c983b">max_db_results<\/a>, max_id);<\/div><div class="line"><a name="l00721"><\/a><span class="lineno">  721<\/span>&#160;<\/div><div class="line"><a name="l00722"><\/a><span class="lineno">  722<\/span>&#160;    <span class="comment">\/\/ update database<\/span><\/div><div class="line"><a name="l00723"><\/a><span class="lineno">  723<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;add(bowvec, featvec); <span class="comment">\/\/ returns entry_id<\/span><\/div><div class="line"><a name="l00724"><\/a><span class="lineno">  724<\/span>&#160;    <\/div><div class="line"><a name="l00725"><\/a><span class="lineno">  725<\/span>&#160;    <span class="keywordflow">if<\/span>(!qret.empty())<\/div><div class="line"><a name="l00726"><\/a><span class="lineno">  726<\/span>&#160;    {<\/div><div class="line"><a name="l00727"><\/a><span class="lineno">  727<\/span>&#160;      <span class="comment">\/\/printf(&quot;qret not empty\\n&quot;);<\/span><\/div><div class="line"><a name="l00728"><\/a><span class="lineno">  728<\/span>&#160;      <span class="comment">\/\/ factor to compute normalized similarity score, if necessary<\/span><\/div><div class="line"><a name="l00729"><\/a><span class="lineno">  729<\/span>&#160;      <span class="keywordtype">double<\/span> ns_factor = 1.0;<\/div><div class="line"><a name="l00730"><\/a><span class="lineno">  730<\/span>&#160;      <\/div><div class="line"><a name="l00731"><\/a><span class="lineno">  731<\/span>&#160;      <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a>)<\/div><div class="line"><a name="l00732"><\/a><span class="lineno">  732<\/span>&#160;      {<\/div><div class="line"><a name="l00733"><\/a><span class="lineno">  733<\/span>&#160;        ns_factor = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;getVocabulary()-&gt;score(bowvec, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">m_last_bowvec<\/a>);<\/div><div class="line"><a name="l00734"><\/a><span class="lineno">  734<\/span>&#160;        <span class="comment">\/\/printf(&quot;use_nss, ns_factor : %lf\\n&quot;, ns_factor);<\/span><\/div><div class="line"><a name="l00735"><\/a><span class="lineno">  735<\/span>&#160;      }<\/div><div class="line"><a name="l00736"><\/a><span class="lineno">  736<\/span>&#160;      <\/div><div class="line"><a name="l00737"><\/a><span class="lineno">  737<\/span>&#160;      <span class="keywordflow">if<\/span>(!<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a> || ns_factor &gt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a1cf57b48a11fe53044ffef308cdf04b4">min_nss_factor<\/a>)<\/div><div class="line"><a name="l00738"><\/a><span class="lineno">  738<\/span>&#160;      {<\/div><div class="line"><a name="l00739"><\/a><span class="lineno">  739<\/span>&#160;        <span class="comment">\/\/ scores in qret must be divided by ns_factor to obtain the<\/span><\/div><div class="line"><a name="l00740"><\/a><span class="lineno">  740<\/span>&#160;        <span class="comment">\/\/ normalized similarity score, but we can<\/span><\/div><div class="line"><a name="l00741"><\/a><span class="lineno">  741<\/span>&#160;        <span class="comment">\/\/ speed this up by moving ns_factor to alpha&#39;s<\/span><\/div><div class="line"><a name="l00742"><\/a><span class="lineno">  742<\/span>&#160;        <\/div><div class="line"><a name="l00743"><\/a><span class="lineno">  743<\/span>&#160;        <span class="comment">\/\/ remove those scores whose nss is lower than alpha<\/span><\/div><div class="line"><a name="l00744"><\/a><span class="lineno">  744<\/span>&#160;        <span class="comment">\/\/ (ret is sorted in descending score order now)<\/span><\/div><div class="line"><a name="l00745"><\/a><span class="lineno">  745<\/span>&#160;        <span class="comment">\/\/printf(&quot;ns_factor %lf &gt;= m_params.min_nss_factor %lf\\n&quot;,ns_factor,m_params.min_nss_factor);<\/span><\/div><div class="line"><a name="l00746"><\/a><span class="lineno">  746<\/span>&#160;        <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a19d0e02c4bd382993867d97929ef93ac">removeLowScores<\/a>(qret, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">alpha<\/a> * ns_factor);<\/div><div class="line"><a name="l00747"><\/a><span class="lineno">  747<\/span>&#160;        <\/div><div class="line"><a name="l00748"><\/a><span class="lineno">  748<\/span>&#160;        <span class="keywordflow">if<\/span>(!qret.empty())<\/div><div class="line"><a name="l00749"><\/a><span class="lineno">  749<\/span>&#160;        {<\/div><div class="line"><a name="l00750"><\/a><span class="lineno">  750<\/span>&#160;          <span class="comment">\/\/printf(&quot;qret not empty\\n&quot;);<\/span><\/div><div class="line"><a name="l00751"><\/a><span class="lineno">  751<\/span>&#160;          <span class="comment">\/\/ the best candidate is the one with highest score by now<\/span><\/div><div class="line"><a name="l00752"><\/a><span class="lineno">  752<\/span>&#160;          match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a> = qret[0].Id;<\/div><div class="line"><a name="l00753"><\/a><span class="lineno">  753<\/span>&#160;          <\/div><div class="line"><a name="l00754"><\/a><span class="lineno">  754<\/span>&#160;          <span class="comment">\/\/ compute islands<\/span><\/div><div class="line"><a name="l00755"><\/a><span class="lineno">  755<\/span>&#160;          vector&lt;tIsland&gt; islands;<\/div><div class="line"><a name="l00756"><\/a><span class="lineno">  756<\/span>&#160;          <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a1b155d3b8092016c1275c8879a52d62e">computeIslands<\/a>(qret, islands); <\/div><div class="line"><a name="l00757"><\/a><span class="lineno">  757<\/span>&#160;          <span class="comment">\/\/ this modifies qret and changes the score order<\/span><\/div><div class="line"><a name="l00758"><\/a><span class="lineno">  758<\/span>&#160;          <\/div><div class="line"><a name="l00759"><\/a><span class="lineno">  759<\/span>&#160;          <span class="comment">\/\/ get best island<\/span><\/div><div class="line"><a name="l00760"><\/a><span class="lineno">  760<\/span>&#160;          <span class="keywordflow">if<\/span>(!islands.empty())<\/div><div class="line"><a name="l00761"><\/a><span class="lineno">  761<\/span>&#160;          {<\/div><div class="line"><a name="l00762"><\/a><span class="lineno">  762<\/span>&#160;            <span class="comment">\/\/printf(&quot;island is not empty\\n&quot;);<\/span><\/div><div class="line"><a name="l00763"><\/a><span class="lineno">  763<\/span>&#160;            <span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>&amp; island = <\/div><div class="line"><a name="l00764"><\/a><span class="lineno">  764<\/span>&#160;              *std::max_element(islands.begin(), islands.end());<\/div><div class="line"><a name="l00765"><\/a><span class="lineno">  765<\/span>&#160;           <\/div><div class="line"><a name="l00766"><\/a><span class="lineno">  766<\/span>&#160;            <span class="comment">\/\/printf(&quot;loop chose id:%d socre:%f------------\\n&quot;,island.best_entry, island.best_score);<\/span><\/div><div class="line"><a name="l00767"><\/a><span class="lineno">  767<\/span>&#160;            <span class="comment">\/\/ check temporal consistency of this island<\/span><\/div><div class="line"><a name="l00768"><\/a><span class="lineno">  768<\/span>&#160;            <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a56ac4a355101e495322b288f56bde0c3">updateTemporalWindow<\/a>(island, entry_id);<\/div><div class="line"><a name="l00769"><\/a><span class="lineno">  769<\/span>&#160;            <\/div><div class="line"><a name="l00770"><\/a><span class="lineno">  770<\/span>&#160;            <span class="comment">\/\/ get the best candidate (maybe match)<\/span><\/div><div class="line"><a name="l00771"><\/a><span class="lineno">  771<\/span>&#160;            match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a> = island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">best_entry<\/a>;<\/div><div class="line"><a name="l00772"><\/a><span class="lineno">  772<\/span>&#160;            <\/div><div class="line"><a name="l00773"><\/a><span class="lineno">  773<\/span>&#160;            <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a2d0aa5277cfa3ee57a00ade950c4592c">getConsistentEntries<\/a>() &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ae4c0e8e21572f3ba5fbad1cb33d93e2c">k<\/a>)<\/div><div class="line"><a name="l00774"><\/a><span class="lineno">  774<\/span>&#160;            {<\/div><div class="line"><a name="l00775"><\/a><span class="lineno">  775<\/span>&#160;              <span class="comment">\/\/printf(&quot;temporal consistent entries:%d &gt; n_params.k:%d\\n&quot;, getConsistentEntries(),m_params.k);<\/span><\/div><div class="line"><a name="l00776"><\/a><span class="lineno">  776<\/span>&#160;              <span class="comment">\/\/ candidate loop detected<\/span><\/div><div class="line"><a name="l00777"><\/a><span class="lineno">  777<\/span>&#160;              <span class="comment">\/\/ check geometry<\/span><\/div><div class="line"><a name="l00778"><\/a><span class="lineno">  778<\/span>&#160;              <span class="keywordtype">bool<\/span> detection;<\/div><div class="line"><a name="l00779"><\/a><span class="lineno">  779<\/span>&#160;<\/div><div class="line"><a name="l00780"><\/a><span class="lineno">  780<\/span>&#160;              <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a2445ab887775b394943b2fd2ec9a095f">geom_check<\/a> == <a class="code" href="namespaceDLoopDetector.html#a1d154197d19db964e59ef3a6d12370d1a5eb9f1ac3ac85b0b9fa5756e6693d430">GEOM_DI<\/a>)<\/div><div class="line"><a name="l00781"><\/a><span class="lineno">  781<\/span>&#160;              {<\/div><div class="line"><a name="l00782"><\/a><span class="lineno">  782<\/span>&#160;                <span class="comment">\/\/printf(&quot;loop use direct index for geometrical checking\\n&quot;);<\/span><\/div><div class="line"><a name="l00783"><\/a><span class="lineno">  783<\/span>&#160;                <span class="comment">\/\/ all the DI stuff is implicit in the database<\/span><\/div><div class="line"><a name="l00784"><\/a><span class="lineno">  784<\/span>&#160;                detection = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af6cac8c4f44154d60647b2e82921ed53">isGeometricallyConsistent_DI<\/a>(island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a7ebcc9bb90c4200bc37ab96a86a2a7ee">best_entry<\/a>, <\/div><div class="line"><a name="l00785"><\/a><span class="lineno">  785<\/span>&#160;                  keys, descriptors, featvec, cur_pts, old_pts);<\/div><div class="line"><a name="l00786"><\/a><span class="lineno">  786<\/span>&#160;              }<\/div><div class="line"><a name="l00787"><\/a><span class="lineno">  787<\/span>&#160;              <span class="keywordflow">else<\/span> <span class="comment">\/\/ GEOM_NONE, accept the match<\/span><\/div><div class="line"><a name="l00788"><\/a><span class="lineno">  788<\/span>&#160;              {<\/div><div class="line"><a name="l00789"><\/a><span class="lineno">  789<\/span>&#160;                detection = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00790"><\/a><span class="lineno">  790<\/span>&#160;                <span class="comment">\/\/printf(&quot;don&#39;t check detec true\\n&quot;);<\/span><\/div><div class="line"><a name="l00791"><\/a><span class="lineno">  791<\/span>&#160;              }<\/div><div class="line"><a name="l00792"><\/a><span class="lineno">  792<\/span>&#160;              <\/div><div class="line"><a name="l00793"><\/a><span class="lineno">  793<\/span>&#160;              <span class="keywordflow">if<\/span>(detection)<\/div><div class="line"><a name="l00794"><\/a><span class="lineno">  794<\/span>&#160;              {<\/div><div class="line"><a name="l00795"><\/a><span class="lineno">  795<\/span>&#160;                match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a414f2f0054e1371c5d5e8fd72e2561ee">LOOP_DETECTED<\/a>;<\/div><div class="line"><a name="l00796"><\/a><span class="lineno">  796<\/span>&#160;                <span class="comment">\/\/printf(&quot;LOOP_DETECTED\\n&quot;);<\/span><\/div><div class="line"><a name="l00797"><\/a><span class="lineno">  797<\/span>&#160;              }<\/div><div class="line"><a name="l00798"><\/a><span class="lineno">  798<\/span>&#160;              <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00799"><\/a><span class="lineno">  799<\/span>&#160;              {<\/div><div class="line"><a name="l00800"><\/a><span class="lineno">  800<\/span>&#160;                match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">NO_GEOMETRICAL_CONSISTENCY<\/a>;<\/div><div class="line"><a name="l00801"><\/a><span class="lineno">  801<\/span>&#160;                <span class="comment">\/\/printf(&quot;no geometry consistentcy\\n&quot;);<\/span><\/div><div class="line"><a name="l00802"><\/a><span class="lineno">  802<\/span>&#160;              }<\/div><div class="line"><a name="l00803"><\/a><span class="lineno">  803<\/span>&#160;              <\/div><div class="line"><a name="l00804"><\/a><span class="lineno">  804<\/span>&#160;            } <span class="comment">\/\/ if enough temporal matches<\/span><\/div><div class="line"><a name="l00805"><\/a><span class="lineno">  805<\/span>&#160;            <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00806"><\/a><span class="lineno">  806<\/span>&#160;            {<\/div><div class="line"><a name="l00807"><\/a><span class="lineno">  807<\/span>&#160;              match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">NO_TEMPORAL_CONSISTENCY<\/a>;<\/div><div class="line"><a name="l00808"><\/a><span class="lineno">  808<\/span>&#160;              <span class="comment">\/\/printf(&quot;no temporal consistentcy\\n&quot;);<\/span><\/div><div class="line"><a name="l00809"><\/a><span class="lineno">  809<\/span>&#160;            }<\/div><div class="line"><a name="l00810"><\/a><span class="lineno">  810<\/span>&#160;            <\/div><div class="line"><a name="l00811"><\/a><span class="lineno">  811<\/span>&#160;          } <span class="comment">\/\/ if there is some island<\/span><\/div><div class="line"><a name="l00812"><\/a><span class="lineno">  812<\/span>&#160;          <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00813"><\/a><span class="lineno">  813<\/span>&#160;          {<\/div><div class="line"><a name="l00814"><\/a><span class="lineno">  814<\/span>&#160;            match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">NO_GROUPS<\/a>;<\/div><div class="line"><a name="l00815"><\/a><span class="lineno">  815<\/span>&#160;            <span class="comment">\/\/printf(&quot;in island\\n&quot;);<\/span><\/div><div class="line"><a name="l00816"><\/a><span class="lineno">  816<\/span>&#160;          }<\/div><div class="line"><a name="l00817"><\/a><span class="lineno">  817<\/span>&#160;        } <span class="comment">\/\/ if !qret empty after removing low scores<\/span><\/div><div class="line"><a name="l00818"><\/a><span class="lineno">  818<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00819"><\/a><span class="lineno">  819<\/span>&#160;        {<\/div><div class="line"><a name="l00820"><\/a><span class="lineno">  820<\/span>&#160;          match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">LOW_SCORES<\/a>;<\/div><div class="line"><a name="l00821"><\/a><span class="lineno">  821<\/span>&#160;          <span class="comment">\/\/printf(&quot;query empty after remove low score\\n&quot;);<\/span><\/div><div class="line"><a name="l00822"><\/a><span class="lineno">  822<\/span>&#160;        }<\/div><div class="line"><a name="l00823"><\/a><span class="lineno">  823<\/span>&#160;      } <span class="comment">\/\/ if (ns_factor &gt; min normal score)<\/span><\/div><div class="line"><a name="l00824"><\/a><span class="lineno">  824<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00825"><\/a><span class="lineno">  825<\/span>&#160;      {<\/div><div class="line"><a name="l00826"><\/a><span class="lineno">  826<\/span>&#160;        <span class="comment">\/\/printf(&quot;low nss factor may be rotation\\n&quot;);<\/span><\/div><div class="line"><a name="l00827"><\/a><span class="lineno">  827<\/span>&#160;        match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">LOW_NSS_FACTOR<\/a>;<\/div><div class="line"><a name="l00828"><\/a><span class="lineno">  828<\/span>&#160;      }<\/div><div class="line"><a name="l00829"><\/a><span class="lineno">  829<\/span>&#160;    } <span class="comment">\/\/ if(!qret.empty())<\/span><\/div><div class="line"><a name="l00830"><\/a><span class="lineno">  830<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00831"><\/a><span class="lineno">  831<\/span>&#160;    {<\/div><div class="line"><a name="l00832"><\/a><span class="lineno">  832<\/span>&#160;      match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a> = <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">NO_DB_RESULTS<\/a>;<\/div><div class="line"><a name="l00833"><\/a><span class="lineno">  833<\/span>&#160;      <span class="comment">\/\/printf(&quot;data base no result\\n&quot;);<\/span><\/div><div class="line"><a name="l00834"><\/a><span class="lineno">  834<\/span>&#160;    }<\/div><div class="line"><a name="l00835"><\/a><span class="lineno">  835<\/span>&#160;  }<\/div><div class="line"><a name="l00836"><\/a><span class="lineno">  836<\/span>&#160;<\/div><div class="line"><a name="l00837"><\/a><span class="lineno">  837<\/span>&#160;  <span class="comment">\/\/ update record<\/span><\/div><div class="line"><a name="l00838"><\/a><span class="lineno">  838<\/span>&#160;  <span class="comment">\/\/ m_image_keys and m_image_descriptors have the same length<\/span><\/div><div class="line"><a name="l00839"><\/a><span class="lineno">  839<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.size() == entry_id)<\/div><div class="line"><a name="l00840"><\/a><span class="lineno">  840<\/span>&#160;  {<\/div><div class="line"><a name="l00841"><\/a><span class="lineno">  841<\/span>&#160;    <span class="comment">\/\/printf(&quot;image size = entry_id %d\\n&quot;, entry_id);<\/span><\/div><div class="line"><a name="l00842"><\/a><span class="lineno">  842<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>.push_back(keys);<\/div><div class="line"><a name="l00843"><\/a><span class="lineno">  843<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>.push_back(descriptors);<\/div><div class="line"><a name="l00844"><\/a><span class="lineno">  844<\/span>&#160;  }<\/div><div class="line"><a name="l00845"><\/a><span class="lineno">  845<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00846"><\/a><span class="lineno">  846<\/span>&#160;  {<\/div><div class="line"><a name="l00847"><\/a><span class="lineno">  847<\/span>&#160;    <span class="comment">\/\/printf(&quot;image size != entry_id %d\\n&quot;, entry_id);<\/span><\/div><div class="line"><a name="l00848"><\/a><span class="lineno">  848<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>[entry_id] = keys;<\/div><div class="line"><a name="l00849"><\/a><span class="lineno">  849<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>[entry_id] = descriptors;<\/div><div class="line"><a name="l00850"><\/a><span class="lineno">  850<\/span>&#160;  }<\/div><div class="line"><a name="l00851"><\/a><span class="lineno">  851<\/span>&#160;  <\/div><div class="line"><a name="l00852"><\/a><span class="lineno">  852<\/span>&#160;  <span class="comment">\/\/ store this bowvec if we are going to use it in next iteratons<\/span><\/div><div class="line"><a name="l00853"><\/a><span class="lineno">  853<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ada06bb9599e5ea62240685644e7f59c7">use_nss<\/a> &amp;&amp; (<span class="keywordtype">int<\/span>)entry_id + 1 &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a248a2636611357136ac4adbb96c6d5a6">dislocal<\/a>)<\/div><div class="line"><a name="l00854"><\/a><span class="lineno">  854<\/span>&#160;  {<\/div><div class="line"><a name="l00855"><\/a><span class="lineno">  855<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a20ffa01508b3fb53397beea3769b9785">m_last_bowvec<\/a> = bowvec;<\/div><div class="line"><a name="l00856"><\/a><span class="lineno">  856<\/span>&#160;  }<\/div><div class="line"><a name="l00857"><\/a><span class="lineno">  857<\/span>&#160;<\/div><div class="line"><a name="l00858"><\/a><span class="lineno">  858<\/span>&#160;  <span class="keywordflow">return<\/span> match.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">detection<\/a>();<\/div><div class="line"><a name="l00859"><\/a><span class="lineno">  859<\/span>&#160;}<\/div><div class="line"><a name="l00860"><\/a><span class="lineno">  860<\/span>&#160;<\/div><div class="line"><a name="l00861"><\/a><span class="lineno">  861<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00862"><\/a><span class="lineno">  862<\/span>&#160;<\/div><div class="line"><a name="l00863"><\/a><span class="lineno">  863<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00864"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">  864<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">TemplatedLoopDetector&lt;TDescriptor, F&gt;::clear<\/a>()<\/div><div class="line"><a name="l00865"><\/a><span class="lineno">  865<\/span>&#160;{<\/div><div class="line"><a name="l00866"><\/a><span class="lineno">  866<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;clear();<\/div><div class="line"><a name="l00867"><\/a><span class="lineno">  867<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> = 0;<\/div><div class="line"><a name="l00868"><\/a><span class="lineno">  868<\/span>&#160;}<\/div><div class="line"><a name="l00869"><\/a><span class="lineno">  869<\/span>&#160;<\/div><div class="line"><a name="l00870"><\/a><span class="lineno">  870<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00871"><\/a><span class="lineno">  871<\/span>&#160;<\/div><div class="line"><a name="l00872"><\/a><span class="lineno">  872<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00873"><\/a><span class="lineno">  873<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a1b155d3b8092016c1275c8879a52d62e">TemplatedLoopDetector&lt;TDescriptor, F&gt;::computeIslands<\/a><\/div><div class="line"><a name="l00874"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a1b155d3b8092016c1275c8879a52d62e">  874<\/a><\/span>&#160;  (<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, vector&lt;tIsland&gt; &amp;islands) <span class="keyword">const<\/span><\/div><div class="line"><a name="l00875"><\/a><span class="lineno">  875<\/span>&#160;{<\/div><div class="line"><a name="l00876"><\/a><span class="lineno">  876<\/span>&#160;  islands.clear();<\/div><div class="line"><a name="l00877"><\/a><span class="lineno">  877<\/span>&#160;  <\/div><div class="line"><a name="l00878"><\/a><span class="lineno">  878<\/span>&#160;  <span class="keywordflow">if<\/span>(q.size() == 1)<\/div><div class="line"><a name="l00879"><\/a><span class="lineno">  879<\/span>&#160;  {<\/div><div class="line"><a name="l00880"><\/a><span class="lineno">  880<\/span>&#160;    islands.push_back(<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>(q[0].Id, q[0].Id, <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">calculateIslandScore<\/a>(q, 0, 0)));<\/div><div class="line"><a name="l00881"><\/a><span class="lineno">  881<\/span>&#160;    islands.back().best_entry = q[0].Id;<\/div><div class="line"><a name="l00882"><\/a><span class="lineno">  882<\/span>&#160;    islands.back().best_score = q[0].Score;<\/div><div class="line"><a name="l00883"><\/a><span class="lineno">  883<\/span>&#160;  }<\/div><div class="line"><a name="l00884"><\/a><span class="lineno">  884<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(!q.empty())<\/div><div class="line"><a name="l00885"><\/a><span class="lineno">  885<\/span>&#160;  {<\/div><div class="line"><a name="l00886"><\/a><span class="lineno">  886<\/span>&#160;    <span class="comment">\/\/ sort query results in ascending order of ids<\/span><\/div><div class="line"><a name="l00887"><\/a><span class="lineno">  887<\/span>&#160;    std::sort(q.begin(), q.end(), Result::ltId);<\/div><div class="line"><a name="l00888"><\/a><span class="lineno">  888<\/span>&#160;    <\/div><div class="line"><a name="l00889"><\/a><span class="lineno">  889<\/span>&#160;    <span class="comment">\/\/ create long enough islands<\/span><\/div><div class="line"><a name="l00890"><\/a><span class="lineno">  890<\/span>&#160;    QueryResults::const_iterator dit = q.begin();<\/div><div class="line"><a name="l00891"><\/a><span class="lineno">  891<\/span>&#160;    <span class="keywordtype">int<\/span> first_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00892"><\/a><span class="lineno">  892<\/span>&#160;    <span class="keywordtype">int<\/span> last_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00893"><\/a><span class="lineno">  893<\/span>&#160;    <\/div><div class="line"><a name="l00894"><\/a><span class="lineno">  894<\/span>&#160;    <span class="comment">\/\/ these are indices of q<\/span><\/div><div class="line"><a name="l00895"><\/a><span class="lineno">  895<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_first = 0;<\/div><div class="line"><a name="l00896"><\/a><span class="lineno">  896<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_last = 0;<\/div><div class="line"><a name="l00897"><\/a><span class="lineno">  897<\/span>&#160;    <\/div><div class="line"><a name="l00898"><\/a><span class="lineno">  898<\/span>&#160;    <span class="keywordtype">double<\/span> best_score = dit-&gt;Score;<\/div><div class="line"><a name="l00899"><\/a><span class="lineno">  899<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> best_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00900"><\/a><span class="lineno">  900<\/span>&#160;<\/div><div class="line"><a name="l00901"><\/a><span class="lineno">  901<\/span>&#160;    ++dit;<\/div><div class="line"><a name="l00902"><\/a><span class="lineno">  902<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> idx = 1; dit != q.end(); ++dit, ++idx)<\/div><div class="line"><a name="l00903"><\/a><span class="lineno">  903<\/span>&#160;    {<\/div><div class="line"><a name="l00904"><\/a><span class="lineno">  904<\/span>&#160;      <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)dit-&gt;Id - last_island_entry &lt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a37e2b42d43f6132e0117575fc4337d39">max_intragroup_gap<\/a>)<\/div><div class="line"><a name="l00905"><\/a><span class="lineno">  905<\/span>&#160;      {<\/div><div class="line"><a name="l00906"><\/a><span class="lineno">  906<\/span>&#160;        <span class="comment">\/\/ go on until find the end of the island<\/span><\/div><div class="line"><a name="l00907"><\/a><span class="lineno">  907<\/span>&#160;        last_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00908"><\/a><span class="lineno">  908<\/span>&#160;        i_last = idx;<\/div><div class="line"><a name="l00909"><\/a><span class="lineno">  909<\/span>&#160;        <span class="keywordflow">if<\/span>(dit-&gt;Score &gt; best_score)<\/div><div class="line"><a name="l00910"><\/a><span class="lineno">  910<\/span>&#160;        {<\/div><div class="line"><a name="l00911"><\/a><span class="lineno">  911<\/span>&#160;          best_score = dit-&gt;Score;<\/div><div class="line"><a name="l00912"><\/a><span class="lineno">  912<\/span>&#160;          best_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00913"><\/a><span class="lineno">  913<\/span>&#160;        }<\/div><div class="line"><a name="l00914"><\/a><span class="lineno">  914<\/span>&#160;      }<\/div><div class="line"><a name="l00915"><\/a><span class="lineno">  915<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00916"><\/a><span class="lineno">  916<\/span>&#160;      {<\/div><div class="line"><a name="l00917"><\/a><span class="lineno">  917<\/span>&#160;        <span class="comment">\/\/ end of island reached<\/span><\/div><div class="line"><a name="l00918"><\/a><span class="lineno">  918<\/span>&#160;        <span class="keywordtype">int<\/span> length = last_island_entry - first_island_entry + 1;<\/div><div class="line"><a name="l00919"><\/a><span class="lineno">  919<\/span>&#160;        <span class="keywordflow">if<\/span>(length &gt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a>)<\/div><div class="line"><a name="l00920"><\/a><span class="lineno">  920<\/span>&#160;        {<\/div><div class="line"><a name="l00921"><\/a><span class="lineno">  921<\/span>&#160;          islands.push_back( <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>(first_island_entry, last_island_entry,<\/div><div class="line"><a name="l00922"><\/a><span class="lineno">  922<\/span>&#160;            <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">calculateIslandScore<\/a>(q, i_first, i_last)) );<\/div><div class="line"><a name="l00923"><\/a><span class="lineno">  923<\/span>&#160;          <\/div><div class="line"><a name="l00924"><\/a><span class="lineno">  924<\/span>&#160;          islands.back().best_score = best_score;<\/div><div class="line"><a name="l00925"><\/a><span class="lineno">  925<\/span>&#160;          islands.back().best_entry = best_entry;<\/div><div class="line"><a name="l00926"><\/a><span class="lineno">  926<\/span>&#160;        }<\/div><div class="line"><a name="l00927"><\/a><span class="lineno">  927<\/span>&#160;        <\/div><div class="line"><a name="l00928"><\/a><span class="lineno">  928<\/span>&#160;        <span class="comment">\/\/ prepare next island<\/span><\/div><div class="line"><a name="l00929"><\/a><span class="lineno">  929<\/span>&#160;        first_island_entry = last_island_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00930"><\/a><span class="lineno">  930<\/span>&#160;        i_first = i_last = idx;<\/div><div class="line"><a name="l00931"><\/a><span class="lineno">  931<\/span>&#160;        best_score = dit-&gt;Score;<\/div><div class="line"><a name="l00932"><\/a><span class="lineno">  932<\/span>&#160;        best_entry = dit-&gt;Id;<\/div><div class="line"><a name="l00933"><\/a><span class="lineno">  933<\/span>&#160;      }<\/div><div class="line"><a name="l00934"><\/a><span class="lineno">  934<\/span>&#160;    }<\/div><div class="line"><a name="l00935"><\/a><span class="lineno">  935<\/span>&#160;    <span class="comment">\/\/ add last island<\/span><\/div><div class="line"><a name="l00936"><\/a><span class="lineno">  936<\/span>&#160;    <span class="keywordflow">if<\/span>(last_island_entry - first_island_entry + 1 &gt;= <\/div><div class="line"><a name="l00937"><\/a><span class="lineno">  937<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a87501a0d855c7d40863e5da28a570a0f">min_matches_per_group<\/a>)<\/div><div class="line"><a name="l00938"><\/a><span class="lineno">  938<\/span>&#160;    {<\/div><div class="line"><a name="l00939"><\/a><span class="lineno">  939<\/span>&#160;      islands.push_back( <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a>(first_island_entry, last_island_entry,<\/div><div class="line"><a name="l00940"><\/a><span class="lineno">  940<\/span>&#160;        <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">calculateIslandScore<\/a>(q, i_first, i_last)) );<\/div><div class="line"><a name="l00941"><\/a><span class="lineno">  941<\/span>&#160;        <\/div><div class="line"><a name="l00942"><\/a><span class="lineno">  942<\/span>&#160;      islands.back().best_score = best_score;<\/div><div class="line"><a name="l00943"><\/a><span class="lineno">  943<\/span>&#160;      islands.back().best_entry = best_entry;<\/div><div class="line"><a name="l00944"><\/a><span class="lineno">  944<\/span>&#160;    }<\/div><div class="line"><a name="l00945"><\/a><span class="lineno">  945<\/span>&#160;  }<\/div><div class="line"><a name="l00946"><\/a><span class="lineno">  946<\/span>&#160;  <\/div><div class="line"><a name="l00947"><\/a><span class="lineno">  947<\/span>&#160;}<\/div><div class="line"><a name="l00948"><\/a><span class="lineno">  948<\/span>&#160;<\/div><div class="line"><a name="l00949"><\/a><span class="lineno">  949<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00950"><\/a><span class="lineno">  950<\/span>&#160;<\/div><div class="line"><a name="l00951"><\/a><span class="lineno">  951<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00952"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">  952<\/a><\/span>&#160;<span class="keywordtype">double<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af653d0af62d3974e75ca2c6f9604c8da">TemplatedLoopDetector&lt;TDescriptor, F&gt;::calculateIslandScore<\/a>(<\/div><div class="line"><a name="l00953"><\/a><span class="lineno">  953<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_first, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_last)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00954"><\/a><span class="lineno">  954<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00955"><\/a><span class="lineno">  955<\/span>&#160;  <span class="comment">\/\/ get the sum of the scores<\/span><\/div><div class="line"><a name="l00956"><\/a><span class="lineno">  956<\/span>&#160;  <span class="keywordtype">double<\/span> sum = 0;<\/div><div class="line"><a name="l00957"><\/a><span class="lineno">  957<\/span>&#160;  <span class="keywordflow">while<\/span>(i_first &lt;= i_last) sum += q[i_first++].Score;<\/div><div class="line"><a name="l00958"><\/a><span class="lineno">  958<\/span>&#160;  <span class="keywordflow">return<\/span> sum;<\/div><div class="line"><a name="l00959"><\/a><span class="lineno">  959<\/span>&#160;}<\/div><div class="line"><a name="l00960"><\/a><span class="lineno">  960<\/span>&#160;<\/div><div class="line"><a name="l00961"><\/a><span class="lineno">  961<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00962"><\/a><span class="lineno">  962<\/span>&#160;<\/div><div class="line"><a name="l00963"><\/a><span class="lineno">  963<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00964"><\/a><span class="lineno">  964<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a56ac4a355101e495322b288f56bde0c3">TemplatedLoopDetector&lt;TDescriptor, F&gt;::updateTemporalWindow<\/a><\/div><div class="line"><a name="l00965"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a56ac4a355101e495322b288f56bde0c3">  965<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html">tIsland<\/a> &amp;matched_island, <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> entry_id)<\/div><div class="line"><a name="l00966"><\/a><span class="lineno">  966<\/span>&#160;{<\/div><div class="line"><a name="l00967"><\/a><span class="lineno">  967<\/span>&#160;  <span class="comment">\/\/ if m_window.nentries &gt; 0, island &gt; m_window.last_matched_island and<\/span><\/div><div class="line"><a name="l00968"><\/a><span class="lineno">  968<\/span>&#160;  <span class="comment">\/\/ entry_id &gt; m_window.last_query_id hold<\/span><\/div><div class="line"><a name="l00969"><\/a><span class="lineno">  969<\/span>&#160;  <\/div><div class="line"><a name="l00970"><\/a><span class="lineno">  970<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> == 0 || <span class="keywordtype">int<\/span>(entry_id - <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">last_query_id<\/a>)<\/div><div class="line"><a name="l00971"><\/a><span class="lineno">  971<\/span>&#160;    &gt; <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#acedcebe61d2be359162225edcf29d60b">max_distance_between_queries<\/a>)<\/div><div class="line"><a name="l00972"><\/a><span class="lineno">  972<\/span>&#160;  {<\/div><div class="line"><a name="l00973"><\/a><span class="lineno">  973<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> = 1;<\/div><div class="line"><a name="l00974"><\/a><span class="lineno">  974<\/span>&#160;  }<\/div><div class="line"><a name="l00975"><\/a><span class="lineno">  975<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00976"><\/a><span class="lineno">  976<\/span>&#160;  {<\/div><div class="line"><a name="l00977"><\/a><span class="lineno">  977<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> a1 = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00978"><\/a><span class="lineno">  978<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> a2 = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">last<\/a>;<\/div><div class="line"><a name="l00979"><\/a><span class="lineno">  979<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> b1 = matched_island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a9472269e0b14d7dbe9acb66655ae7134">first<\/a>;<\/div><div class="line"><a name="l00980"><\/a><span class="lineno">  980<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> b2 = matched_island.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html#a13e0399a4c0bd2b9b08b5072ca996862">last<\/a>;<\/div><div class="line"><a name="l00981"><\/a><span class="lineno">  981<\/span>&#160;    <\/div><div class="line"><a name="l00982"><\/a><span class="lineno">  982<\/span>&#160;    <span class="keywordtype">bool<\/span> fit = (b1 &lt;= a1 &amp;&amp; a1 &lt;= b2) || (a1 &lt;= b1 &amp;&amp; b1 &lt;= a2);<\/div><div class="line"><a name="l00983"><\/a><span class="lineno">  983<\/span>&#160;<\/div><div class="line"><a name="l00984"><\/a><span class="lineno">  984<\/span>&#160;    <span class="keywordflow">if<\/span>(!fit)<\/div><div class="line"><a name="l00985"><\/a><span class="lineno">  985<\/span>&#160;    {<\/div><div class="line"><a name="l00986"><\/a><span class="lineno">  986<\/span>&#160;      <span class="keywordtype">int<\/span> d1 = (int)a1 - (<span class="keywordtype">int<\/span>)b2;<\/div><div class="line"><a name="l00987"><\/a><span class="lineno">  987<\/span>&#160;      <span class="keywordtype">int<\/span> d2 = (int)b1 - (<span class="keywordtype">int<\/span>)a2;<\/div><div class="line"><a name="l00988"><\/a><span class="lineno">  988<\/span>&#160;      <span class="keywordtype">int<\/span> gap = (d1 &gt; d2 ? d1 : d2);<\/div><div class="line"><a name="l00989"><\/a><span class="lineno">  989<\/span>&#160;      <\/div><div class="line"><a name="l00990"><\/a><span class="lineno">  990<\/span>&#160;      fit = (gap &lt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#ac9b4a382cb528e3411434d116941dd46">max_distance_between_groups<\/a>);<\/div><div class="line"><a name="l00991"><\/a><span class="lineno">  991<\/span>&#160;    }<\/div><div class="line"><a name="l00992"><\/a><span class="lineno">  992<\/span>&#160;    <\/div><div class="line"><a name="l00993"><\/a><span class="lineno">  993<\/span>&#160;    <span class="keywordflow">if<\/span>(fit) <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a>++;<\/div><div class="line"><a name="l00994"><\/a><span class="lineno">  994<\/span>&#160;    <span class="keywordflow">else<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#a47d504a868c04ab9bbcc8b07eaffab70">nentries<\/a> = 1;<\/div><div class="line"><a name="l00995"><\/a><span class="lineno">  995<\/span>&#160;  }<\/div><div class="line"><a name="l00996"><\/a><span class="lineno">  996<\/span>&#160;  <\/div><div class="line"><a name="l00997"><\/a><span class="lineno">  997<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#afe32399bf4b041636e300e9541a5fb27">last_matched_island<\/a> = matched_island;<\/div><div class="line"><a name="l00998"><\/a><span class="lineno">  998<\/span>&#160;  <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a3045d1febc527192efc756bb97eaa184">m_window<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html#af2bc0e353f938ea4b17f103af77c1adf">last_query_id<\/a> = entry_id;<\/div><div class="line"><a name="l00999"><\/a><span class="lineno">  999<\/span>&#160;}<\/div><div class="line"><a name="l01000"><\/a><span class="lineno"> 1000<\/span>&#160;<\/div><div class="line"><a name="l01001"><\/a><span class="lineno"> 1001<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01002"><\/a><span class="lineno"> 1002<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01003"><\/a><span class="lineno"> 1003<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor, F&gt;::reduceInputToOutput<\/a>(vector&lt;cv::Point2f&gt; v_in, vector&lt;cv::Point2f&gt; &amp;v_out, vector&lt;uchar&gt; status)<\/div><div class="line"><a name="l01004"><\/a><span class="lineno"> 1004<\/span>&#160;{<\/div><div class="line"><a name="l01005"><\/a><span class="lineno"> 1005<\/span>&#160;    v_out.<a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#aaea99eecbd14b04f24a7c531b717cbbc">clear<\/a>();<\/div><div class="line"><a name="l01006"><\/a><span class="lineno"> 1006<\/span>&#160;    <span class="comment">\/\/v_out.reserve(v_in.size());<\/span><\/div><div class="line"><a name="l01007"><\/a><span class="lineno"> 1007<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; int(v_in.size()); i++)<\/div><div class="line"><a name="l01008"><\/a><span class="lineno"> 1008<\/span>&#160;        <span class="keywordflow">if<\/span> (status[i])<\/div><div class="line"><a name="l01009"><\/a><span class="lineno"> 1009<\/span>&#160;            v_out.push_back(v_in[i]);<\/div><div class="line"><a name="l01010"><\/a><span class="lineno"> 1010<\/span>&#160;}<\/div><div class="line"><a name="l01011"><\/a><span class="lineno"> 1011<\/span>&#160;<\/div><div class="line"><a name="l01012"><\/a><span class="lineno"> 1012<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01013"><\/a><span class="lineno"> 1013<\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor, F&gt;::checkFoundamental<\/a>(vector&lt;cv::Point2f&gt; cur_input_pts,<\/div><div class="line"><a name="l01014"><\/a><span class="lineno"> 1014<\/span>&#160;                                                              vector&lt;cv::Point2f&gt; old_input_pts,<\/div><div class="line"><a name="l01015"><\/a><span class="lineno"> 1015<\/span>&#160;                                                              vector&lt;cv::Point2f&gt; &amp;cur_output_pts,<\/div><div class="line"><a name="l01016"><\/a><span class="lineno"> 1016<\/span>&#160;                                                              vector&lt;cv::Point2f&gt; &amp;old_output_pts)<\/div><div class="line"><a name="l01017"><\/a><span class="lineno"> 1017<\/span>&#160;{<\/div><div class="line"><a name="l01018"><\/a><span class="lineno"> 1018<\/span>&#160;    <span class="keywordflow">if<\/span> (cur_input_pts.size() &gt;= 8)<\/div><div class="line"><a name="l01019"><\/a><span class="lineno"> 1019<\/span>&#160;    {<\/div><div class="line"><a name="l01020"><\/a><span class="lineno"> 1020<\/span>&#160;        <span class="keywordtype">double<\/span> ROW = 480.0;<\/div><div class="line"><a name="l01021"><\/a><span class="lineno"> 1021<\/span>&#160;        <span class="keywordtype">double<\/span> COL = 752.0;<\/div><div class="line"><a name="l01022"><\/a><span class="lineno"> 1022<\/span>&#160;        <span class="keywordtype">double<\/span> FOCAL_LENGTH = 460.0;<\/div><div class="line"><a name="l01023"><\/a><span class="lineno"> 1023<\/span>&#160;        vector&lt;cv::Point2f&gt; un_cur_pts(cur_input_pts.size()), un_old_pts(cur_input_pts.size());<\/div><div class="line"><a name="l01024"><\/a><span class="lineno"> 1024<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; cur_input_pts.size(); i++)<\/div><div class="line"><a name="l01025"><\/a><span class="lineno"> 1025<\/span>&#160;        {<\/div><div class="line"><a name="l01026"><\/a><span class="lineno"> 1026<\/span>&#160;            Eigen::Vector3d tmp_p;<\/div><div class="line"><a name="l01027"><\/a><span class="lineno"> 1027<\/span>&#160;            m_camera-&gt;liftProjective(Eigen::Vector2d(old_input_pts[i].x, old_input_pts[i].y), tmp_p);<\/div><div class="line"><a name="l01028"><\/a><span class="lineno"> 1028<\/span>&#160;            tmp_p.x() = FOCAL_LENGTH * tmp_p.x() \/ tmp_p.z() + COL \/ 2.0;<\/div><div class="line"><a name="l01029"><\/a><span class="lineno"> 1029<\/span>&#160;            tmp_p.y() = FOCAL_LENGTH * tmp_p.y() \/ tmp_p.z() + ROW \/ 2.0;<\/div><div class="line"><a name="l01030"><\/a><span class="lineno"> 1030<\/span>&#160;            un_old_pts[i] = cv::Point2f(tmp_p.x(), tmp_p.y());<\/div><div class="line"><a name="l01031"><\/a><span class="lineno"> 1031<\/span>&#160;<\/div><div class="line"><a name="l01032"><\/a><span class="lineno"> 1032<\/span>&#160;            m_camera-&gt;liftProjective(Eigen::Vector2d(cur_input_pts[i].x, cur_input_pts[i].y), tmp_p);<\/div><div class="line"><a name="l01033"><\/a><span class="lineno"> 1033<\/span>&#160;            tmp_p.x() = FOCAL_LENGTH * tmp_p.x() \/ tmp_p.z() + COL \/ 2.0;<\/div><div class="line"><a name="l01034"><\/a><span class="lineno"> 1034<\/span>&#160;            tmp_p.y() = FOCAL_LENGTH * tmp_p.y() \/ tmp_p.z() + ROW \/ 2.0;<\/div><div class="line"><a name="l01035"><\/a><span class="lineno"> 1035<\/span>&#160;            un_cur_pts[i] = cv::Point2f(tmp_p.x(), tmp_p.y());<\/div><div class="line"><a name="l01036"><\/a><span class="lineno"> 1036<\/span>&#160;        }<\/div><div class="line"><a name="l01037"><\/a><span class="lineno"> 1037<\/span>&#160;        vector&lt;uchar&gt; status;<\/div><div class="line"><a name="l01038"><\/a><span class="lineno"> 1038<\/span>&#160;        cv::findFundamentalMat(un_old_pts, un_cur_pts, cv::FM_RANSAC, 1.0, 0.99, status);<\/div><div class="line"><a name="l01039"><\/a><span class="lineno"> 1039<\/span>&#160;        cur_output_pts = cur_input_pts;<\/div><div class="line"><a name="l01040"><\/a><span class="lineno"> 1040<\/span>&#160;        old_output_pts = old_input_pts;<\/div><div class="line"><a name="l01041"><\/a><span class="lineno"> 1041<\/span>&#160;        reduceInputToOutput( cur_input_pts, cur_output_pts, status);<\/div><div class="line"><a name="l01042"><\/a><span class="lineno"> 1042<\/span>&#160;        reduceInputToOutput( old_input_pts, old_output_pts, status);<\/div><div class="line"><a name="l01043"><\/a><span class="lineno"> 1043<\/span>&#160;        <span class="keywordflow">if<\/span>(cur_output_pts.size()&gt;20)<\/div><div class="line"><a name="l01044"><\/a><span class="lineno"> 1044<\/span>&#160;        {<\/div><div class="line"><a name="l01045"><\/a><span class="lineno"> 1045<\/span>&#160;          <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l01046"><\/a><span class="lineno"> 1046<\/span>&#160;        }<\/div><div class="line"><a name="l01047"><\/a><span class="lineno"> 1047<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01048"><\/a><span class="lineno"> 1048<\/span>&#160;          <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01049"><\/a><span class="lineno"> 1049<\/span>&#160;    }<\/div><div class="line"><a name="l01050"><\/a><span class="lineno"> 1050<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01051"><\/a><span class="lineno"> 1051<\/span>&#160;    {<\/div><div class="line"><a name="l01052"><\/a><span class="lineno"> 1052<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01053"><\/a><span class="lineno"> 1053<\/span>&#160;    }<\/div><div class="line"><a name="l01054"><\/a><span class="lineno"> 1054<\/span>&#160;}<\/div><div class="line"><a name="l01055"><\/a><span class="lineno"> 1055<\/span>&#160;<\/div><div class="line"><a name="l01056"><\/a><span class="lineno"> 1056<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01057"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af6cac8c4f44154d60647b2e82921ed53"> 1057<\/a><\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#af6cac8c4f44154d60647b2e82921ed53">TemplatedLoopDetector&lt;TDescriptor, F&gt;::isGeometricallyConsistent_DI<\/a>(<\/div><div class="line"><a name="l01058"><\/a><span class="lineno"> 1058<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">EntryId<\/a> old_entry, <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l01059"><\/a><span class="lineno"> 1059<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l01060"><\/a><span class="lineno"> 1060<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;bowvec,<\/div><div class="line"><a name="l01061"><\/a><span class="lineno"> 1061<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l01062"><\/a><span class="lineno"> 1062<\/span>&#160;  std::vector&lt;cv::Point2f&gt; &amp;old_pts)<\/div><div class="line"><a name="l01063"><\/a><span class="lineno"> 1063<\/span>&#160;{<\/div><div class="line"><a name="l01064"><\/a><span class="lineno"> 1064<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;oldvec = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;retrieveFeatures(old_entry);<\/div><div class="line"><a name="l01065"><\/a><span class="lineno"> 1065<\/span>&#160;  <\/div><div class="line"><a name="l01066"><\/a><span class="lineno"> 1066<\/span>&#160;  <span class="comment">\/\/ for each word in common, get the closest descriptors<\/span><\/div><div class="line"><a name="l01067"><\/a><span class="lineno"> 1067<\/span>&#160;  <\/div><div class="line"><a name="l01068"><\/a><span class="lineno"> 1068<\/span>&#160;  vector&lt;unsigned int&gt; i_old, i_cur;<\/div><div class="line"><a name="l01069"><\/a><span class="lineno"> 1069<\/span>&#160;  <\/div><div class="line"><a name="l01070"><\/a><span class="lineno"> 1070<\/span>&#160;  FeatureVector::const_iterator old_it, cur_it; <\/div><div class="line"><a name="l01071"><\/a><span class="lineno"> 1071<\/span>&#160;  <span class="keyword">const<\/span> FeatureVector::const_iterator old_end = oldvec.end();<\/div><div class="line"><a name="l01072"><\/a><span class="lineno"> 1072<\/span>&#160;  <span class="keyword">const<\/span> FeatureVector::const_iterator cur_end = bowvec.end();<\/div><div class="line"><a name="l01073"><\/a><span class="lineno"> 1073<\/span>&#160;  <\/div><div class="line"><a name="l01074"><\/a><span class="lineno"> 1074<\/span>&#160;  old_it = oldvec.begin();<\/div><div class="line"><a name="l01075"><\/a><span class="lineno"> 1075<\/span>&#160;  cur_it = bowvec.begin();<\/div><div class="line"><a name="l01076"><\/a><span class="lineno"> 1076<\/span>&#160;  <\/div><div class="line"><a name="l01077"><\/a><span class="lineno"> 1077<\/span>&#160;  <span class="keywordflow">while<\/span>(old_it != old_end &amp;&amp; cur_it != cur_end)<\/div><div class="line"><a name="l01078"><\/a><span class="lineno"> 1078<\/span>&#160;  {<\/div><div class="line"><a name="l01079"><\/a><span class="lineno"> 1079<\/span>&#160;    <span class="keywordflow">if<\/span>(old_it-&gt;first == cur_it-&gt;first)<\/div><div class="line"><a name="l01080"><\/a><span class="lineno"> 1080<\/span>&#160;    {<\/div><div class="line"><a name="l01081"><\/a><span class="lineno"> 1081<\/span>&#160;      <span class="comment">\/\/ compute matches between <\/span><\/div><div class="line"><a name="l01082"><\/a><span class="lineno"> 1082<\/span>&#160;      <span class="comment">\/\/ features old_it-&gt;second of m_image_keys[old_entry] and<\/span><\/div><div class="line"><a name="l01083"><\/a><span class="lineno"> 1083<\/span>&#160;      <span class="comment">\/\/ features cur_it-&gt;second of keys<\/span><\/div><div class="line"><a name="l01084"><\/a><span class="lineno"> 1084<\/span>&#160;      vector&lt;unsigned int&gt; i_old_now, i_cur_now;<\/div><div class="line"><a name="l01085"><\/a><span class="lineno"> 1085<\/span>&#160;      <\/div><div class="line"><a name="l01086"><\/a><span class="lineno"> 1086<\/span>&#160;      <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8bf352394253d900b3b097a9786bd8ac">getMatches_neighratio<\/a>(<\/div><div class="line"><a name="l01087"><\/a><span class="lineno"> 1087<\/span>&#160;        <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a6296f121a00de08b222e28850227d512">m_image_descriptors<\/a>[old_entry], old_it-&gt;second, <\/div><div class="line"><a name="l01088"><\/a><span class="lineno"> 1088<\/span>&#160;        descriptors, cur_it-&gt;second,  <\/div><div class="line"><a name="l01089"><\/a><span class="lineno"> 1089<\/span>&#160;        i_old_now, i_cur_now);<\/div><div class="line"><a name="l01090"><\/a><span class="lineno"> 1090<\/span>&#160;      <\/div><div class="line"><a name="l01091"><\/a><span class="lineno"> 1091<\/span>&#160;      i_old.insert(i_old.end(), i_old_now.begin(), i_old_now.end());<\/div><div class="line"><a name="l01092"><\/a><span class="lineno"> 1092<\/span>&#160;      i_cur.insert(i_cur.end(), i_cur_now.begin(), i_cur_now.end());<\/div><div class="line"><a name="l01093"><\/a><span class="lineno"> 1093<\/span>&#160;      <\/div><div class="line"><a name="l01094"><\/a><span class="lineno"> 1094<\/span>&#160;      <span class="comment">\/\/ move old_it and cur_it forward<\/span><\/div><div class="line"><a name="l01095"><\/a><span class="lineno"> 1095<\/span>&#160;      ++old_it;<\/div><div class="line"><a name="l01096"><\/a><span class="lineno"> 1096<\/span>&#160;      ++cur_it;<\/div><div class="line"><a name="l01097"><\/a><span class="lineno"> 1097<\/span>&#160;    }<\/div><div class="line"><a name="l01098"><\/a><span class="lineno"> 1098<\/span>&#160;    <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(old_it-&gt;first &lt; cur_it-&gt;first)<\/div><div class="line"><a name="l01099"><\/a><span class="lineno"> 1099<\/span>&#160;    {<\/div><div class="line"><a name="l01100"><\/a><span class="lineno"> 1100<\/span>&#160;      <span class="comment">\/\/ move old_it forward<\/span><\/div><div class="line"><a name="l01101"><\/a><span class="lineno"> 1101<\/span>&#160;      old_it = oldvec.lower_bound(cur_it-&gt;first);<\/div><div class="line"><a name="l01102"><\/a><span class="lineno"> 1102<\/span>&#160;      <span class="comment">\/\/ old_it = (first element &gt;= cur_it.id)<\/span><\/div><div class="line"><a name="l01103"><\/a><span class="lineno"> 1103<\/span>&#160;    }<\/div><div class="line"><a name="l01104"><\/a><span class="lineno"> 1104<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01105"><\/a><span class="lineno"> 1105<\/span>&#160;    {<\/div><div class="line"><a name="l01106"><\/a><span class="lineno"> 1106<\/span>&#160;      <span class="comment">\/\/ move cur_it forward<\/span><\/div><div class="line"><a name="l01107"><\/a><span class="lineno"> 1107<\/span>&#160;      cur_it = bowvec.lower_bound(old_it-&gt;first);<\/div><div class="line"><a name="l01108"><\/a><span class="lineno"> 1108<\/span>&#160;      <span class="comment">\/\/ cur_it = (first element &gt;= old_it.id)<\/span><\/div><div class="line"><a name="l01109"><\/a><span class="lineno"> 1109<\/span>&#160;    }<\/div><div class="line"><a name="l01110"><\/a><span class="lineno"> 1110<\/span>&#160;  }<\/div><div class="line"><a name="l01111"><\/a><span class="lineno"> 1111<\/span>&#160;  <\/div><div class="line"><a name="l01112"><\/a><span class="lineno"> 1112<\/span>&#160;  <span class="comment">\/\/ calculate now the fundamental matrix<\/span><\/div><div class="line"><a name="l01113"><\/a><span class="lineno"> 1113<\/span>&#160;  <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)i_old.size() &gt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999">min_Fpoints<\/a>)<\/div><div class="line"><a name="l01114"><\/a><span class="lineno"> 1114<\/span>&#160;  {<\/div><div class="line"><a name="l01115"><\/a><span class="lineno"> 1115<\/span>&#160;    vector&lt;cv::Point2f&gt; old_points, cur_points;<\/div><div class="line"><a name="l01116"><\/a><span class="lineno"> 1116<\/span>&#160;    <\/div><div class="line"><a name="l01117"><\/a><span class="lineno"> 1117<\/span>&#160;    <span class="comment">\/\/ add matches to the vectors to calculate the fundamental matrix<\/span><\/div><div class="line"><a name="l01118"><\/a><span class="lineno"> 1118<\/span>&#160;    vector&lt;unsigned int&gt;::const_iterator oit, cit;<\/div><div class="line"><a name="l01119"><\/a><span class="lineno"> 1119<\/span>&#160;    oit = i_old.begin();<\/div><div class="line"><a name="l01120"><\/a><span class="lineno"> 1120<\/span>&#160;    cit = i_cur.begin();<\/div><div class="line"><a name="l01121"><\/a><span class="lineno"> 1121<\/span>&#160;    <\/div><div class="line"><a name="l01122"><\/a><span class="lineno"> 1122<\/span>&#160;    <span class="keywordflow">for<\/span>(; oit != i_old.end(); ++oit, ++cit)<\/div><div class="line"><a name="l01123"><\/a><span class="lineno"> 1123<\/span>&#160;    {<\/div><div class="line"><a name="l01124"><\/a><span class="lineno"> 1124<\/span>&#160;      <span class="keyword">const<\/span> cv::KeyPoint &amp;old_k = <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8f40c985b384e42aeb235fc58bb922fc">m_image_keys<\/a>[old_entry][*oit];<\/div><div class="line"><a name="l01125"><\/a><span class="lineno"> 1125<\/span>&#160;      <span class="keyword">const<\/span> cv::KeyPoint &amp;cur_k = keys[*cit];<\/div><div class="line"><a name="l01126"><\/a><span class="lineno"> 1126<\/span>&#160;      <\/div><div class="line"><a name="l01127"><\/a><span class="lineno"> 1127<\/span>&#160;      old_points.push_back(old_k.pt);<\/div><div class="line"><a name="l01128"><\/a><span class="lineno"> 1128<\/span>&#160;      cur_points.push_back(cur_k.pt);<\/div><div class="line"><a name="l01129"><\/a><span class="lineno"> 1129<\/span>&#160;    }<\/div><div class="line"><a name="l01130"><\/a><span class="lineno"> 1130<\/span>&#160;  <\/div><div class="line"><a name="l01131"><\/a><span class="lineno"> 1131<\/span>&#160;    cv::Mat oldMat(old_points.size(), 2, CV_32F, &amp;old_points[0]);<\/div><div class="line"><a name="l01132"><\/a><span class="lineno"> 1132<\/span>&#160;    cv::Mat curMat(cur_points.size(), 2, CV_32F, &amp;cur_points[0]);<\/div><div class="line"><a name="l01133"><\/a><span class="lineno"> 1133<\/span>&#160;    <span class="comment">\/\/printf(&quot;-old size %d current size %d\\n&quot;,old_points.size(),cur_points.size());<\/span><\/div><div class="line"><a name="l01134"><\/a><span class="lineno"> 1134<\/span>&#160;    <span class="keywordtype">bool<\/span> find_fundamental_suss = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01135"><\/a><span class="lineno"> 1135<\/span>&#160;    find_fundamental_suss =  checkFoundamental(cur_points, old_points, cur_pts, old_pts);<\/div><div class="line"><a name="l01136"><\/a><span class="lineno"> 1136<\/span>&#160;    <span class="keywordflow">if<\/span>(find_fundamental_suss)<\/div><div class="line"><a name="l01137"><\/a><span class="lineno"> 1137<\/span>&#160;    {<\/div><div class="line"><a name="l01138"><\/a><span class="lineno"> 1138<\/span>&#160;      <span class="comment">\/\/cur_pts = cur_points;<\/span><\/div><div class="line"><a name="l01139"><\/a><span class="lineno"> 1139<\/span>&#160;      <span class="comment">\/\/old_pts = old_points;<\/span><\/div><div class="line"><a name="l01140"><\/a><span class="lineno"> 1140<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l01141"><\/a><span class="lineno"> 1141<\/span>&#160;    }<\/div><div class="line"><a name="l01142"><\/a><span class="lineno"> 1142<\/span>&#160;  }<\/div><div class="line"><a name="l01143"><\/a><span class="lineno"> 1143<\/span>&#160;  <\/div><div class="line"><a name="l01144"><\/a><span class="lineno"> 1144<\/span>&#160;  <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l01145"><\/a><span class="lineno"> 1145<\/span>&#160;} <\/div><div class="line"><a name="l01146"><\/a><span class="lineno"> 1146<\/span>&#160;<\/div><div class="line"><a name="l01147"><\/a><span class="lineno"> 1147<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01148"><\/a><span class="lineno"> 1148<\/span>&#160;<\/div><div class="line"><a name="l01149"><\/a><span class="lineno"> 1149<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01150"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab37c7cfa44d5f35fd51f3fa65243e404"> 1150<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab37c7cfa44d5f35fd51f3fa65243e404">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getFlannStructure<\/a>(<\/div><div class="line"><a name="l01151"><\/a><span class="lineno"> 1151<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors, <\/div><div class="line"><a name="l01152"><\/a><span class="lineno"> 1152<\/span>&#160;  cv::FlannBasedMatcher &amp;flann_structure)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01153"><\/a><span class="lineno"> 1153<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01154"><\/a><span class="lineno"> 1154<\/span>&#160;  vector&lt;cv::Mat&gt; features(1);<\/div><div class="line"><a name="l01155"><\/a><span class="lineno"> 1155<\/span>&#160;  F::toMat32F(descriptors, features[0]);<\/div><div class="line"><a name="l01156"><\/a><span class="lineno"> 1156<\/span>&#160;  <\/div><div class="line"><a name="l01157"><\/a><span class="lineno"> 1157<\/span>&#160;  flann_structure.clear();<\/div><div class="line"><a name="l01158"><\/a><span class="lineno"> 1158<\/span>&#160;  flann_structure.add(features);<\/div><div class="line"><a name="l01159"><\/a><span class="lineno"> 1159<\/span>&#160;  flann_structure.train();<\/div><div class="line"><a name="l01160"><\/a><span class="lineno"> 1160<\/span>&#160;}<\/div><div class="line"><a name="l01161"><\/a><span class="lineno"> 1161<\/span>&#160;<\/div><div class="line"><a name="l01162"><\/a><span class="lineno"> 1162<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01163"><\/a><span class="lineno"> 1163<\/span>&#160;<\/div><div class="line"><a name="l01164"><\/a><span class="lineno"> 1164<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01165"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8bf352394253d900b3b097a9786bd8ac"> 1165<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a8bf352394253d900b3b097a9786bd8ac">TemplatedLoopDetector&lt;TDescriptor, F&gt;::getMatches_neighratio<\/a>(<\/div><div class="line"><a name="l01166"><\/a><span class="lineno"> 1166<\/span>&#160;  <span class="keyword">const<\/span> vector&lt;TDescriptor&gt; &amp;A, <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_A,<\/div><div class="line"><a name="l01167"><\/a><span class="lineno"> 1167<\/span>&#160;  <span class="keyword">const<\/span> vector&lt;TDescriptor&gt; &amp;B, <span class="keyword">const<\/span> vector&lt;unsigned int&gt; &amp;i_B,<\/div><div class="line"><a name="l01168"><\/a><span class="lineno"> 1168<\/span>&#160;  vector&lt;unsigned int&gt; &amp;i_match_A, vector&lt;unsigned int&gt; &amp;i_match_B)<span class="keyword"> const <\/span><\/div><div class="line"><a name="l01169"><\/a><span class="lineno"> 1169<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01170"><\/a><span class="lineno"> 1170<\/span>&#160;  i_match_A.resize(0);<\/div><div class="line"><a name="l01171"><\/a><span class="lineno"> 1171<\/span>&#160;  i_match_B.resize(0);<\/div><div class="line"><a name="l01172"><\/a><span class="lineno"> 1172<\/span>&#160;  i_match_A.reserve( min(i_A.size(), i_B.size()) );<\/div><div class="line"><a name="l01173"><\/a><span class="lineno"> 1173<\/span>&#160;  i_match_B.reserve( min(i_A.size(), i_B.size()) );<\/div><div class="line"><a name="l01174"><\/a><span class="lineno"> 1174<\/span>&#160;  <\/div><div class="line"><a name="l01175"><\/a><span class="lineno"> 1175<\/span>&#160;  vector&lt;unsigned int&gt;::const_iterator ait, bit;<\/div><div class="line"><a name="l01176"><\/a><span class="lineno"> 1176<\/span>&#160;  <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i, j;<\/div><div class="line"><a name="l01177"><\/a><span class="lineno"> 1177<\/span>&#160;  i = 0;<\/div><div class="line"><a name="l01178"><\/a><span class="lineno"> 1178<\/span>&#160;  <span class="keywordflow">for<\/span>(ait = i_A.begin(); ait != i_A.end(); ++ait, ++i)<\/div><div class="line"><a name="l01179"><\/a><span class="lineno"> 1179<\/span>&#160;  {<\/div><div class="line"><a name="l01180"><\/a><span class="lineno"> 1180<\/span>&#160;    <span class="keywordtype">int<\/span> best_j_now = -1;<\/div><div class="line"><a name="l01181"><\/a><span class="lineno"> 1181<\/span>&#160;    <span class="keywordtype">double<\/span> best_dist_1 = 1e9;<\/div><div class="line"><a name="l01182"><\/a><span class="lineno"> 1182<\/span>&#160;    <span class="keywordtype">double<\/span> best_dist_2 = 1e9;<\/div><div class="line"><a name="l01183"><\/a><span class="lineno"> 1183<\/span>&#160;    <\/div><div class="line"><a name="l01184"><\/a><span class="lineno"> 1184<\/span>&#160;    j = 0;<\/div><div class="line"><a name="l01185"><\/a><span class="lineno"> 1185<\/span>&#160;    <span class="keywordflow">for<\/span>(bit = i_B.begin(); bit != i_B.end(); ++bit, ++j)<\/div><div class="line"><a name="l01186"><\/a><span class="lineno"> 1186<\/span>&#160;    {<\/div><div class="line"><a name="l01187"><\/a><span class="lineno"> 1187<\/span>&#160;      <span class="keywordtype">double<\/span> d = F::distance(A[*ait], B[*bit]);<\/div><div class="line"><a name="l01188"><\/a><span class="lineno"> 1188<\/span>&#160;            <\/div><div class="line"><a name="l01189"><\/a><span class="lineno"> 1189<\/span>&#160;      <span class="comment">\/\/ in i<\/span><\/div><div class="line"><a name="l01190"><\/a><span class="lineno"> 1190<\/span>&#160;      <span class="keywordflow">if<\/span>(d &lt; best_dist_1)<\/div><div class="line"><a name="l01191"><\/a><span class="lineno"> 1191<\/span>&#160;      {<\/div><div class="line"><a name="l01192"><\/a><span class="lineno"> 1192<\/span>&#160;        best_j_now = j;<\/div><div class="line"><a name="l01193"><\/a><span class="lineno"> 1193<\/span>&#160;        best_dist_2 = best_dist_1;<\/div><div class="line"><a name="l01194"><\/a><span class="lineno"> 1194<\/span>&#160;        best_dist_1 = d;<\/div><div class="line"><a name="l01195"><\/a><span class="lineno"> 1195<\/span>&#160;      }<\/div><div class="line"><a name="l01196"><\/a><span class="lineno"> 1196<\/span>&#160;      <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(d &lt; best_dist_2)<\/div><div class="line"><a name="l01197"><\/a><span class="lineno"> 1197<\/span>&#160;      {<\/div><div class="line"><a name="l01198"><\/a><span class="lineno"> 1198<\/span>&#160;        best_dist_2 = d;<\/div><div class="line"><a name="l01199"><\/a><span class="lineno"> 1199<\/span>&#160;      }<\/div><div class="line"><a name="l01200"><\/a><span class="lineno"> 1200<\/span>&#160;    }<\/div><div class="line"><a name="l01201"><\/a><span class="lineno"> 1201<\/span>&#160;    <\/div><div class="line"><a name="l01202"><\/a><span class="lineno"> 1202<\/span>&#160;    <span class="keywordflow">if<\/span>(best_dist_1 \/ best_dist_2 &lt;= <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ab3d719b87828d213e1d0589f21db9e54">m_params<\/a>.<a class="code" href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a6808069771aab74fffb363101945af07">max_neighbor_ratio<\/a>)<\/div><div class="line"><a name="l01203"><\/a><span class="lineno"> 1203<\/span>&#160;    {<\/div><div class="line"><a name="l01204"><\/a><span class="lineno"> 1204<\/span>&#160;      <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> idx_B = i_B[best_j_now];<\/div><div class="line"><a name="l01205"><\/a><span class="lineno"> 1205<\/span>&#160;      bit = find(i_match_B.begin(), i_match_B.end(), idx_B);<\/div><div class="line"><a name="l01206"><\/a><span class="lineno"> 1206<\/span>&#160;      <\/div><div class="line"><a name="l01207"><\/a><span class="lineno"> 1207<\/span>&#160;      <span class="keywordflow">if<\/span>(bit == i_match_B.end())<\/div><div class="line"><a name="l01208"><\/a><span class="lineno"> 1208<\/span>&#160;      {<\/div><div class="line"><a name="l01209"><\/a><span class="lineno"> 1209<\/span>&#160;        i_match_B.push_back(idx_B);<\/div><div class="line"><a name="l01210"><\/a><span class="lineno"> 1210<\/span>&#160;        i_match_A.push_back(*ait);<\/div><div class="line"><a name="l01211"><\/a><span class="lineno"> 1211<\/span>&#160;      }<\/div><div class="line"><a name="l01212"><\/a><span class="lineno"> 1212<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01213"><\/a><span class="lineno"> 1213<\/span>&#160;      {<\/div><div class="line"><a name="l01214"><\/a><span class="lineno"> 1214<\/span>&#160;        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> idx_A = i_match_A[ bit - i_match_B.begin() ];<\/div><div class="line"><a name="l01215"><\/a><span class="lineno"> 1215<\/span>&#160;        <span class="keywordtype">double<\/span> d = F::distance(A[idx_A], B[idx_B]);<\/div><div class="line"><a name="l01216"><\/a><span class="lineno"> 1216<\/span>&#160;        <span class="keywordflow">if<\/span>(best_dist_1 &lt; d)<\/div><div class="line"><a name="l01217"><\/a><span class="lineno"> 1217<\/span>&#160;        {<\/div><div class="line"><a name="l01218"><\/a><span class="lineno"> 1218<\/span>&#160;          i_match_A[ bit - i_match_B.begin() ] = *ait;<\/div><div class="line"><a name="l01219"><\/a><span class="lineno"> 1219<\/span>&#160;        }<\/div><div class="line"><a name="l01220"><\/a><span class="lineno"> 1220<\/span>&#160;      }<\/div><div class="line"><a name="l01221"><\/a><span class="lineno"> 1221<\/span>&#160;        <\/div><div class="line"><a name="l01222"><\/a><span class="lineno"> 1222<\/span>&#160;    }<\/div><div class="line"><a name="l01223"><\/a><span class="lineno"> 1223<\/span>&#160;  }<\/div><div class="line"><a name="l01224"><\/a><span class="lineno"> 1224<\/span>&#160;}<\/div><div class="line"><a name="l01225"><\/a><span class="lineno"> 1225<\/span>&#160;<\/div><div class="line"><a name="l01226"><\/a><span class="lineno"> 1226<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01227"><\/a><span class="lineno"> 1227<\/span>&#160;<\/div><div class="line"><a name="l01228"><\/a><span class="lineno"> 1228<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01229"><\/a><span class="lineno"><a class="line" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a19d0e02c4bd382993867d97929ef93ac"> 1229<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#a19d0e02c4bd382993867d97929ef93ac">TemplatedLoopDetector&lt;TDescriptor, F&gt;::removeLowScores<\/a>(<a class="code" href="classDBoW2_1_1QueryResults.html">QueryResults<\/a> &amp;q,<\/div><div class="line"><a name="l01230"><\/a><span class="lineno"> 1230<\/span>&#160;  <span class="keywordtype">double<\/span> threshold)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01231"><\/a><span class="lineno"> 1231<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01232"><\/a><span class="lineno"> 1232<\/span>&#160;  <span class="comment">\/\/ remember scores in q are in descending order now<\/span><\/div><div class="line"><a name="l01233"><\/a><span class="lineno"> 1233<\/span>&#160;  <span class="comment">\/\/QueryResults::iterator qit = <\/span><\/div><div class="line"><a name="l01234"><\/a><span class="lineno"> 1234<\/span>&#160;  <span class="comment">\/\/  lower_bound(q.begin(), q.end(), threshold, Result::geqv);<\/span><\/div><div class="line"><a name="l01235"><\/a><span class="lineno"> 1235<\/span>&#160;  <\/div><div class="line"><a name="l01236"><\/a><span class="lineno"> 1236<\/span>&#160;  <a class="code" href="classDBoW2_1_1Result.html">Result<\/a> aux(0, threshold);<\/div><div class="line"><a name="l01237"><\/a><span class="lineno"> 1237<\/span>&#160;  QueryResults::iterator qit = <\/div><div class="line"><a name="l01238"><\/a><span class="lineno"> 1238<\/span>&#160;    lower_bound(q.begin(), q.end(), aux, Result::geq);<\/div><div class="line"><a name="l01239"><\/a><span class="lineno"> 1239<\/span>&#160;  <\/div><div class="line"><a name="l01240"><\/a><span class="lineno"> 1240<\/span>&#160;  <span class="comment">\/\/ qit = first element &lt; m_alpha_minus || end<\/span><\/div><div class="line"><a name="l01241"><\/a><span class="lineno"> 1241<\/span>&#160;  <\/div><div class="line"><a name="l01242"><\/a><span class="lineno"> 1242<\/span>&#160;  <span class="keywordflow">if<\/span>(qit != q.end())<\/div><div class="line"><a name="l01243"><\/a><span class="lineno"> 1243<\/span>&#160;  {<\/div><div class="line"><a name="l01244"><\/a><span class="lineno"> 1244<\/span>&#160;    <span class="keywordtype">int<\/span> valid_entries = qit - q.begin();<\/div><div class="line"><a name="l01245"><\/a><span class="lineno"> 1245<\/span>&#160;    q.resize(valid_entries);<\/div><div class="line"><a name="l01246"><\/a><span class="lineno"> 1246<\/span>&#160;  }<\/div><div class="line"><a name="l01247"><\/a><span class="lineno"> 1247<\/span>&#160;}<\/div><div class="line"><a name="l01248"><\/a><span class="lineno"> 1248<\/span>&#160;<\/div><div class="line"><a name="l01249"><\/a><span class="lineno"> 1249<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01250"><\/a><span class="lineno"> 1250<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01251"><\/a><span class="lineno"> 1251<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html">TemplatedLoopDetector&lt;TDescriptor, F&gt;::eraseIndex<\/a><\/div><div class="line"><a name="l01252"><\/a><span class="lineno"> 1252<\/span>&#160;(std::vector&lt;int&gt; &amp;erase_index)<\/div><div class="line"><a name="l01253"><\/a><span class="lineno"> 1253<\/span>&#160;{<\/div><div class="line"><a name="l01254"><\/a><span class="lineno"> 1254<\/span>&#160;  <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; (int)erase_index.size(); i++)<\/div><div class="line"><a name="l01255"><\/a><span class="lineno"> 1255<\/span>&#160;  {<\/div><div class="line"><a name="l01256"><\/a><span class="lineno"> 1256<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a060a36cf320e6e831ee98915c19c1623">DBoW2::EntryId<\/a> entry;<\/div><div class="line"><a name="l01257"><\/a><span class="lineno"> 1257<\/span>&#160;    entry = (<span class="keywordtype">unsigned<\/span> int)erase_index[i];<\/div><div class="line"><a name="l01258"><\/a><span class="lineno"> 1258<\/span>&#160;    <a class="code" href="classDLoopDetector_1_1TemplatedLoopDetector.html#ad468e9777ae11b2a7c2590c92555ed89">m_database<\/a>-&gt;delete_entry(entry);<\/div><div class="line"><a name="l01259"><\/a><span class="lineno"> 1259<\/span>&#160;  }<\/div><div class="line"><a name="l01260"><\/a><span class="lineno"> 1260<\/span>&#160;}<\/div><div class="line"><a name="l01261"><\/a><span class="lineno"> 1261<\/span>&#160;} <span class="comment">\/\/ namespace DLoopDetector<\/span><\/div><div class="line"><a name="l01262"><\/a><span class="lineno"> 1262<\/span>&#160;<\/div><div class="line"><a name="l01263"><\/a><span class="lineno"> 1263<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters_html_a41e29466a9eeda56f213f43cdd6f393e"><div class="ttname"><a href="structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a41e29466a9eeda56f213f43cdd6f393e">DLoopDetector::TemplatedLoopDetector::Parameters::alpha<\/a><\/div><div class="ttdeci">float alpha<\/div><div class="ttdoc">Alpha threshold. <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedLoopDetector.h:113<\/div><\/div>$/;"	a
l00001	src/doc/html/TemplatedVocabulary_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_T_TEMPLATED_VOCABULARY__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_T_TEMPLATED_VOCABULARY__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;cassert&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;FeatureVector.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &quot;BowVector.h&quot;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &quot;ScoringObject.h&quot;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &quot;..\/DUtils\/DUtils.h&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">\/\/ Added by VINS [[[<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;..\/VocabularyBinary.hpp&quot;<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;boost\/dynamic_bitset.hpp&gt;<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/\/ Added by VINS ]]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a> {<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;{       <\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keywordtype">int<\/span> k = 10, <span class="keywordtype">int<\/span> L = 5, <\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting = TF_IDF, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring = L1_NORM);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  <\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;  <\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9d15f985a0c3badc1518be0fbe663099">~TemplatedVocabulary<\/a>();<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;  <\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a5355c25b6f37c11acffe48996e19323f">operator=<\/a>(<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;  <\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features);<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;  <\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features, <\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;      <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L);<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;      <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L, <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  <\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features, <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v) <\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  <\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features,<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fv, <span class="keywordtype">int<\/span> levelsup) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> TDescriptor&amp; feature) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;  <\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9">score<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;b) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;  <\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;  <span class="keyword">virtual<\/span> <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa59e9b47d05bce5ecd4e90afbcd63727">getParentNode<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid, <span class="keywordtype">int<\/span> levelsup) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;  <\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a916015cc8e6cd6f53c6e067c7b829f75">getWordsFromNode<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid, std::vector&lt;WordId&gt; &amp;words) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;  <\/div><div class="line"><a name="l00180"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#afadb7942a23548903deb4548ca1d6e7d">  180<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afadb7942a23548903deb4548ca1d6e7d">getBranchingFactor<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>; }<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;  <\/div><div class="line"><a name="l00186"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a60d5e4d240d69042c47473d4c6497e01">  186<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a60d5e4d240d69042c47473d4c6497e01">getDepthLevels<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>; }<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;  <\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;  <span class="keywordtype">float<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#acee6fb9313d844fbcf05f470379c6dc3">getEffectiveLevels<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;  <\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> TDescriptor <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aed50a053fac7e270bf8369a8667cf2c6">getWord<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;  <\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keyword">inline<\/span> <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a95edc3ffa594ac7a798aec0808997b4a">getWordWeight<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;  <\/div><div class="line"><a name="l00212"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa1b7c6f984353736ecf4a2483b1c1b6b">  212<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa1b7c6f984353736ecf4a2483b1c1b6b">getWeightingType<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>; }<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;  <\/div><div class="line"><a name="l00218"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#adca2e844333011cd9341d42be9cec5e3">  218<\/a><\/span>&#160;  <span class="keyword">inline<\/span> <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#adca2e844333011cd9341d42be9cec5e3">getScoringType<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>; }<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;  <\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa8f63a3379debd40214899d996cfc733">setWeightingType<\/a>(<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> type);<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;  <\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a05a6c2f46184618c9ea8368f53e6980c">setScoringType<\/a>(<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> type);<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;  <\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;  <\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">save<\/a>(cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;vocabulary&quot;<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;  <\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs, <\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;    <span class="keyword">const<\/span> std::string &amp;name = <span class="stringliteral">&quot;vocabulary&quot;<\/span>);<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;    <\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;  <span class="comment">\/\/ Added by VINS [[[<\/span><\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> loadBin(<span class="keyword">const<\/span> std::string &amp;filename);<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;  <span class="comment">\/\/ Added by VINS ]]]<\/span><\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    <\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0b6721fde54bd8cd008f6a120398741e">stopWords<\/a>(<span class="keywordtype">double<\/span> minWeight);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a40913d67e369e6993c2eab80a968f829">  281<\/a><\/span>&#160;  <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> TDescriptor *<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a40913d67e369e6993c2eab80a968f829">pDescriptor<\/a>;<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<\/div><div class="line"><a name="l00284"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">  284<\/a><\/span>&#160;  <span class="keyword">struct <\/span><a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a> <\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;  {<\/div><div class="line"><a name="l00287"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">  287<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">id<\/a>;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">  289<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">weight<\/a>;<\/div><div class="line"><a name="l00291"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a54acc0958e378306cc03f20a186c1fdc">  291<\/a><\/span>&#160;    std::vector&lt;NodeId&gt; <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a54acc0958e378306cc03f20a186c1fdc">children<\/a>;<\/div><div class="line"><a name="l00293"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a082fba9dcf272b78354ffd5b1d58f5fa">  293<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a082fba9dcf272b78354ffd5b1d58f5fa">parent<\/a>;<\/div><div class="line"><a name="l00295"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ab785e994eeae8e6c1d67ee45ad4c8450">  295<\/a><\/span>&#160;    TDescriptor <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ab785e994eeae8e6c1d67ee45ad4c8450">descriptor<\/a>;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#aa56418d848932be4583fac6b3021c708">  298<\/a><\/span>&#160;    <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#aa56418d848932be4583fac6b3021c708">word_id<\/a>;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<\/div><div class="line"><a name="l00303"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a1339ee00108c4c652cd1ca55a37c3fd3">  303<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a1339ee00108c4c652cd1ca55a37c3fd3">Node<\/a>(): id(0), weight(0), parent(0), word_id(0){}<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;    <\/div><div class="line"><a name="l00309"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a9f1fcb620025ba6103a47e5c2b169cd6">  309<\/a><\/span>&#160;    <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a9f1fcb620025ba6103a47e5c2b169cd6">Node<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> _id): id(_id), weight(0), parent(0), word_id(0){}<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno"><a class="line" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">  315<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">isLeaf<\/a>()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> children.empty(); }<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;  };<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">getFeatures<\/a>(<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;    std::vector&lt;pDescriptor&gt; &amp;features) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;feature, <\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;<span class="keywordtype">id<\/span>, <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> &amp;<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">weight<\/a>, <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a>* nid = NULL, <span class="keywordtype">int<\/span> levelsup = 0) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;feature, <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;<span class="keywordtype">id<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;      <\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">HKmeansStep<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> parent_id, <span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;    <span class="keywordtype">int<\/span> current_level);<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">initiateClusters<\/a>(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;    std::vector&lt;TDescriptor&gt; &amp;clusters) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;  <\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">initiateClustersKMpp<\/a>(<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;    std::vector&lt;TDescriptor&gt; &amp;clusters) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;  <\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">createWords<\/a>();<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;  <\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">setNodeWeights<\/a>(<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;features);<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;  <\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;<\/div><div class="line"><a name="l00395"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">  395<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>;<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;  <\/div><div class="line"><a name="l00398"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">  398<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>;<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;  <\/div><div class="line"><a name="l00401"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">  401<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>;<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;  <\/div><div class="line"><a name="l00404"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">  404<\/a><\/span>&#160;  <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>;<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;  <\/div><div class="line"><a name="l00407"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">  407<\/a><\/span>&#160;  <a class="code" href="classDBoW2_1_1GeneralScoring.html">GeneralScoring<\/a>* <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>;<\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;  <\/div><div class="line"><a name="l00410"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">  410<\/a><\/span>&#160;  std::vector&lt;Node&gt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>;<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;  <\/div><div class="line"><a name="l00414"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">  414<\/a><\/span>&#160;  std::vector&lt;Node*&gt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>;<\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;  <\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;};<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00422"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">  422<\/a><\/span>&#160;  (<span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L, <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring)<\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>(k), <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>(L), <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>(weighting), <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>(scoring),<\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;{<\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;  <span class="comment">\/\/printf(&quot;loop start load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;}<\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;<\/div><div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00434"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a72fc6a164a5174003d19bd3c54615de6">  434<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;filename): <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;{<\/div><div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;    <span class="comment">\/\/m_scoring = KL;<\/span><\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;    <span class="comment">\/\/ Changed by VINS [[[<\/span><\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;    <span class="comment">\/\/printf(&quot;loop start load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;    loadBin(filename);<\/div><div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;    <span class="comment">\/\/ Changed by VINS ]]]<\/span><\/div><div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;}<\/div><div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;<\/div><div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a><\/div><div class="line"><a name="l00447"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a255d68e7b4235487f8d2d8ea0cbaf43a">  447<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename): <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;{<\/div><div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;    <span class="comment">\/\/m_scoring = KL;<\/span><\/div><div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;    <span class="comment">\/\/ Changed by VINS [[[<\/span><\/div><div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;    <span class="comment">\/\/printf(&quot;loop start load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;    loadBin(filename);<\/div><div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;    <span class="comment">\/\/ Changed by VINS ]]]<\/span><\/div><div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;}<\/div><div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;<\/div><div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;<\/div><div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00459"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">  459<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">TemplatedVocabulary&lt;TDescriptor,F&gt;::createScoringObject<\/a>()<\/div><div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;{<\/div><div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>;<\/div><div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = NULL;<\/div><div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;  <\/div><div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;  <span class="keywordflow">switch<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>)<\/div><div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;  {<\/div><div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;    <span class="keywordflow">case<\/span> L1_NORM: <\/div><div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> L1Scoring;<\/div><div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;      <\/div><div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;    <span class="keywordflow">case<\/span> L2_NORM:<\/div><div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> L2Scoring;<\/div><div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;    <\/div><div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;    <span class="keywordflow">case<\/span> CHI_SQUARE:<\/div><div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> ChiSquareScoring;<\/div><div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;      <\/div><div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;    <span class="keywordflow">case<\/span> KL:<\/div><div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> KLScoring;<\/div><div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;      <\/div><div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;    <span class="keywordflow">case<\/span> BHATTACHARYYA:<\/div><div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> BhattacharyyaScoring;<\/div><div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;      <\/div><div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;    <span class="keywordflow">case<\/span> DOT_PRODUCT:<\/div><div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a> = <span class="keyword">new<\/span> DotProductScoring;<\/div><div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;    <\/div><div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;  }<\/div><div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;}<\/div><div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;<\/div><div class="line"><a name="l00493"><\/a><span class="lineno">  493<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;<\/div><div class="line"><a name="l00495"><\/a><span class="lineno">  495<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00496"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a05a6c2f46184618c9ea8368f53e6980c">  496<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a05a6c2f46184618c9ea8368f53e6980c">TemplatedVocabulary&lt;TDescriptor,F&gt;::setScoringType<\/a>(<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> type)<\/div><div class="line"><a name="l00497"><\/a><span class="lineno">  497<\/span>&#160;{<\/div><div class="line"><a name="l00498"><\/a><span class="lineno">  498<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = type;<\/div><div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00500"><\/a><span class="lineno">  500<\/span>&#160;}<\/div><div class="line"><a name="l00501"><\/a><span class="lineno">  501<\/span>&#160;<\/div><div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00503"><\/a><span class="lineno">  503<\/span>&#160;<\/div><div class="line"><a name="l00504"><\/a><span class="lineno">  504<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00505"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa8f63a3379debd40214899d996cfc733">  505<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa8f63a3379debd40214899d996cfc733">TemplatedVocabulary&lt;TDescriptor,F&gt;::setWeightingType<\/a>(<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> type)<\/div><div class="line"><a name="l00506"><\/a><span class="lineno">  506<\/span>&#160;{<\/div><div class="line"><a name="l00507"><\/a><span class="lineno">  507<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = type;<\/div><div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;}<\/div><div class="line"><a name="l00509"><\/a><span class="lineno">  509<\/span>&#160;<\/div><div class="line"><a name="l00510"><\/a><span class="lineno">  510<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;<\/div><div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00513"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aac48ee5331b5d88a4db1a3c93cb0f6a5">  513<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0dbbcb6bf766b09f08d945a2af0dbea8">TemplatedVocabulary&lt;TDescriptor,F&gt;::TemplatedVocabulary<\/a>(<\/div><div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc)<\/div><div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;  : <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>(NULL)<\/div><div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;{<\/div><div class="line"><a name="l00517"><\/a><span class="lineno">  517<\/span>&#160;  printf(<span class="stringliteral">&quot;loop start load vocabulary\\n&quot;<\/span>);<\/div><div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;  *<span class="keyword">this<\/span> = voc;<\/div><div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;}<\/div><div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;<\/div><div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00522"><\/a><span class="lineno">  522<\/span>&#160;<\/div><div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00524"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a9d15f985a0c3badc1518be0fbe663099">  524<\/a><\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9d15f985a0c3badc1518be0fbe663099">TemplatedVocabulary&lt;TDescriptor,F&gt;::~TemplatedVocabulary<\/a>()<\/div><div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;{<\/div><div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;  <span class="keyword">delete<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>;<\/div><div class="line"><a name="l00527"><\/a><span class="lineno">  527<\/span>&#160;}<\/div><div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;<\/div><div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;<\/div><div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a>&amp; <\/div><div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;::operator<\/a>=<\/div><div class="line"><a name="l00534"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a5355c25b6f37c11acffe48996e19323f">  534<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor, F&gt;<\/a> &amp;voc)<\/div><div class="line"><a name="l00535"><\/a><span class="lineno">  535<\/span>&#160;{  <\/div><div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = voc.m_k;<\/div><div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = voc.m_L;<\/div><div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = voc.m_scoring;<\/div><div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = voc.m_weighting;<\/div><div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;<\/div><div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;  <\/div><div class="line"><a name="l00543"><\/a><span class="lineno">  543<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;  <\/div><div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a> = voc.m_nodes;<\/div><div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">createWords<\/a>();<\/div><div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;  <\/div><div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;  <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;}<\/div><div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;<\/div><div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;<\/div><div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00555"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">  555<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">TemplatedVocabulary&lt;TDescriptor,F&gt;::create<\/a>(<\/div><div class="line"><a name="l00556"><\/a><span class="lineno">  556<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features)<\/div><div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;{<\/div><div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l00560"><\/a><span class="lineno">  560<\/span>&#160;  <\/div><div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;  <span class="comment">\/\/ expected_nodes = Sum_{i=0..L} ( k^i )<\/span><\/div><div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;    <span class="keywordtype">int<\/span> expected_nodes = <\/div><div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;        (int)((pow((<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>, (<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> + 1) - 1)\/(m_k - 1));<\/div><div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;<\/div><div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.reserve(expected_nodes); <span class="comment">\/\/ avoid allocations when creating the tree<\/span><\/div><div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;  <\/div><div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;  <\/div><div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;  std::vector&lt;pDescriptor&gt; features;<\/div><div class="line"><a name="l00569"><\/a><span class="lineno">  569<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">getFeatures<\/a>(training_features, features);<\/div><div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;<\/div><div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;<\/div><div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;  <span class="comment">\/\/ create root  <\/span><\/div><div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.push_back(<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>(0)); <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;  <\/div><div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;  <span class="comment">\/\/ create the tree<\/span><\/div><div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">HKmeansStep<\/a>(0, features, 1);<\/div><div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;<\/div><div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;  <span class="comment">\/\/ create the words<\/span><\/div><div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">createWords<\/a>();<\/div><div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;<\/div><div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;  <span class="comment">\/\/ and set the weight of each node of the tree<\/span><\/div><div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">setNodeWeights<\/a>(training_features);<\/div><div class="line"><a name="l00583"><\/a><span class="lineno">  583<\/span>&#160;  <\/div><div class="line"><a name="l00584"><\/a><span class="lineno">  584<\/span>&#160;}<\/div><div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;<\/div><div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;<\/div><div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00589"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a94d48231b043a1102af4c35e256f2054">  589<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">TemplatedVocabulary&lt;TDescriptor,F&gt;::create<\/a>(<\/div><div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00591"><\/a><span class="lineno">  591<\/span>&#160;  <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L)<\/div><div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;{<\/div><div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = k;<\/div><div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = L;<\/div><div class="line"><a name="l00595"><\/a><span class="lineno">  595<\/span>&#160;  <\/div><div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a>(training_features);<\/div><div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;}<\/div><div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;<\/div><div class="line"><a name="l00599"><\/a><span class="lineno">  599<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;<\/div><div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00602"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a1e4a3e90f4aa1e6b6ea4d7491c223fd4">  602<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">TemplatedVocabulary&lt;TDescriptor,F&gt;::create<\/a>(<\/div><div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;  <span class="keywordtype">int<\/span> k, <span class="keywordtype">int<\/span> L, <a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a> weighting, <a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a> scoring)<\/div><div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;{<\/div><div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = k;<\/div><div class="line"><a name="l00607"><\/a><span class="lineno">  607<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = L;<\/div><div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = weighting;<\/div><div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = scoring;<\/div><div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;  <\/div><div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3679b5a8f2043021a4faab99ccfe4ebe">create<\/a>(training_features);<\/div><div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;}<\/div><div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;<\/div><div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00616"><\/a><span class="lineno">  616<\/span>&#160;<\/div><div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00618"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">  618<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0ebeb5912d25b4acdb486d8983884545">TemplatedVocabulary&lt;TDescriptor,F&gt;::getFeatures<\/a>(<\/div><div class="line"><a name="l00619"><\/a><span class="lineno">  619<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features,<\/div><div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;  std::vector&lt;pDescriptor&gt; &amp;features)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;  features.resize(0);<\/div><div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;  <\/div><div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt;::const_iterator vvit;<\/div><div class="line"><a name="l00625"><\/a><span class="lineno">  625<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator vit;<\/div><div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;  <span class="keywordflow">for<\/span>(vvit = training_features.begin(); vvit != training_features.end(); ++vvit)<\/div><div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;  {<\/div><div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;    features.reserve(features.size() + vvit-&gt;size());<\/div><div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;    <span class="keywordflow">for<\/span>(vit = vvit-&gt;begin(); vit != vvit-&gt;end(); ++vit)<\/div><div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;    {<\/div><div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;      features.push_back(&amp;(*vit));<\/div><div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;    }<\/div><div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;  }<\/div><div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;}<\/div><div class="line"><a name="l00635"><\/a><span class="lineno">  635<\/span>&#160;<\/div><div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;<\/div><div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00639"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">  639<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">TemplatedVocabulary&lt;TDescriptor,F&gt;::HKmeansStep<\/a>(<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> parent_id, <\/div><div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors, <span class="keywordtype">int<\/span> current_level)<\/div><div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;{<\/div><div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;  <span class="keywordflow">if<\/span>(descriptors.empty()) <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;        <\/div><div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;  <span class="comment">\/\/ features associated to each cluster<\/span><\/div><div class="line"><a name="l00645"><\/a><span class="lineno">  645<\/span>&#160;  std::vector&lt;TDescriptor&gt; clusters;<\/div><div class="line"><a name="l00646"><\/a><span class="lineno">  646<\/span>&#160;  std::vector&lt;std::vector&lt;unsigned int&gt; &gt; groups; <span class="comment">\/\/ groups[i] = [j1, j2, ...]<\/span><\/div><div class="line"><a name="l00647"><\/a><span class="lineno">  647<\/span>&#160;    <span class="comment">\/\/ j1, j2, ... indices of descriptors associated to cluster i<\/span><\/div><div class="line"><a name="l00648"><\/a><span class="lineno">  648<\/span>&#160;<\/div><div class="line"><a name="l00649"><\/a><span class="lineno">  649<\/span>&#160;  clusters.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>);<\/div><div class="line"><a name="l00650"><\/a><span class="lineno">  650<\/span>&#160;    groups.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>);<\/div><div class="line"><a name="l00651"><\/a><span class="lineno">  651<\/span>&#160;  <\/div><div class="line"><a name="l00652"><\/a><span class="lineno">  652<\/span>&#160;  <span class="comment">\/\/const int msizes[] = { m_k, descriptors.size() };<\/span><\/div><div class="line"><a name="l00653"><\/a><span class="lineno">  653<\/span>&#160;  <span class="comment">\/\/cv::SparseMat assoc(2, msizes, CV_8U);<\/span><\/div><div class="line"><a name="l00654"><\/a><span class="lineno">  654<\/span>&#160;  <span class="comment">\/\/cv::SparseMat last_assoc(2, msizes, CV_8U);  <\/span><\/div><div class="line"><a name="l00656"><\/a><span class="lineno">  656<\/span>&#160;<span class="comment"><\/span>  <\/div><div class="line"><a name="l00657"><\/a><span class="lineno">  657<\/span>&#160;  <span class="keywordflow">if<\/span>((<span class="keywordtype">int<\/span>)descriptors.size() &lt;= <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>)<\/div><div class="line"><a name="l00658"><\/a><span class="lineno">  658<\/span>&#160;  {<\/div><div class="line"><a name="l00659"><\/a><span class="lineno">  659<\/span>&#160;    <span class="comment">\/\/ trivial case: one cluster per feature<\/span><\/div><div class="line"><a name="l00660"><\/a><span class="lineno">  660<\/span>&#160;    groups.resize(descriptors.size());<\/div><div class="line"><a name="l00661"><\/a><span class="lineno">  661<\/span>&#160;<\/div><div class="line"><a name="l00662"><\/a><span class="lineno">  662<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; descriptors.size(); i++)<\/div><div class="line"><a name="l00663"><\/a><span class="lineno">  663<\/span>&#160;    {<\/div><div class="line"><a name="l00664"><\/a><span class="lineno">  664<\/span>&#160;      groups[i].push_back(i);<\/div><div class="line"><a name="l00665"><\/a><span class="lineno">  665<\/span>&#160;      clusters.push_back(*descriptors[i]);<\/div><div class="line"><a name="l00666"><\/a><span class="lineno">  666<\/span>&#160;    }<\/div><div class="line"><a name="l00667"><\/a><span class="lineno">  667<\/span>&#160;  }<\/div><div class="line"><a name="l00668"><\/a><span class="lineno">  668<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00669"><\/a><span class="lineno">  669<\/span>&#160;  {<\/div><div class="line"><a name="l00670"><\/a><span class="lineno">  670<\/span>&#160;    <span class="comment">\/\/ select clusters and groups with kmeans<\/span><\/div><div class="line"><a name="l00671"><\/a><span class="lineno">  671<\/span>&#160;    <\/div><div class="line"><a name="l00672"><\/a><span class="lineno">  672<\/span>&#160;    <span class="keywordtype">bool<\/span> first_time = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00673"><\/a><span class="lineno">  673<\/span>&#160;    <span class="keywordtype">bool<\/span> goon = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00674"><\/a><span class="lineno">  674<\/span>&#160;    <\/div><div class="line"><a name="l00675"><\/a><span class="lineno">  675<\/span>&#160;    <span class="comment">\/\/ to check if clusters move after iterations<\/span><\/div><div class="line"><a name="l00676"><\/a><span class="lineno">  676<\/span>&#160;    std::vector&lt;int&gt; last_association, current_association;<\/div><div class="line"><a name="l00677"><\/a><span class="lineno">  677<\/span>&#160;<\/div><div class="line"><a name="l00678"><\/a><span class="lineno">  678<\/span>&#160;    <span class="keywordflow">while<\/span>(goon)<\/div><div class="line"><a name="l00679"><\/a><span class="lineno">  679<\/span>&#160;    {<\/div><div class="line"><a name="l00680"><\/a><span class="lineno">  680<\/span>&#160;      <span class="comment">\/\/ 1. Calculate clusters<\/span><\/div><div class="line"><a name="l00681"><\/a><span class="lineno">  681<\/span>&#160;<\/div><div class="line"><a name="l00682"><\/a><span class="lineno">  682<\/span>&#160;            <span class="keywordflow">if<\/span>(first_time)<\/div><div class="line"><a name="l00683"><\/a><span class="lineno">  683<\/span>&#160;            {<\/div><div class="line"><a name="l00684"><\/a><span class="lineno">  684<\/span>&#160;        <span class="comment">\/\/ random sample <\/span><\/div><div class="line"><a name="l00685"><\/a><span class="lineno">  685<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">initiateClusters<\/a>(descriptors, clusters);<\/div><div class="line"><a name="l00686"><\/a><span class="lineno">  686<\/span>&#160;      }<\/div><div class="line"><a name="l00687"><\/a><span class="lineno">  687<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00688"><\/a><span class="lineno">  688<\/span>&#160;      {<\/div><div class="line"><a name="l00689"><\/a><span class="lineno">  689<\/span>&#160;        <span class="comment">\/\/ calculate cluster centres<\/span><\/div><div class="line"><a name="l00690"><\/a><span class="lineno">  690<\/span>&#160;<\/div><div class="line"><a name="l00691"><\/a><span class="lineno">  691<\/span>&#160;        <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> c = 0; c &lt; clusters.size(); ++c)<\/div><div class="line"><a name="l00692"><\/a><span class="lineno">  692<\/span>&#160;        {<\/div><div class="line"><a name="l00693"><\/a><span class="lineno">  693<\/span>&#160;          std::vector&lt;pDescriptor&gt; cluster_descriptors;<\/div><div class="line"><a name="l00694"><\/a><span class="lineno">  694<\/span>&#160;          cluster_descriptors.reserve(groups[c].<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>());<\/div><div class="line"><a name="l00695"><\/a><span class="lineno">  695<\/span>&#160;          <\/div><div class="line"><a name="l00696"><\/a><span class="lineno">  696<\/span>&#160;          <span class="comment">\/*<\/span><\/div><div class="line"><a name="l00697"><\/a><span class="lineno">  697<\/span>&#160;<span class="comment">          for(unsigned int d = 0; d &lt; descriptors.size(); ++d)<\/span><\/div><div class="line"><a name="l00698"><\/a><span class="lineno">  698<\/span>&#160;<span class="comment">          {<\/span><\/div><div class="line"><a name="l00699"><\/a><span class="lineno">  699<\/span>&#160;<span class="comment">            if( assoc.find&lt;unsigned char&gt;(c, d) )<\/span><\/div><div class="line"><a name="l00700"><\/a><span class="lineno">  700<\/span>&#160;<span class="comment">            {<\/span><\/div><div class="line"><a name="l00701"><\/a><span class="lineno">  701<\/span>&#160;<span class="comment">              cluster_descriptors.push_back(descriptors[d]);<\/span><\/div><div class="line"><a name="l00702"><\/a><span class="lineno">  702<\/span>&#160;<span class="comment">            }<\/span><\/div><div class="line"><a name="l00703"><\/a><span class="lineno">  703<\/span>&#160;<span class="comment">          }<\/span><\/div><div class="line"><a name="l00704"><\/a><span class="lineno">  704<\/span>&#160;<span class="comment">          *\/<\/span><\/div><div class="line"><a name="l00705"><\/a><span class="lineno">  705<\/span>&#160;          <\/div><div class="line"><a name="l00706"><\/a><span class="lineno">  706<\/span>&#160;          std::vector&lt;unsigned int&gt;::const_iterator vit;<\/div><div class="line"><a name="l00707"><\/a><span class="lineno">  707<\/span>&#160;          <span class="keywordflow">for<\/span>(vit = groups[c].begin(); vit != groups[c].end(); ++vit)<\/div><div class="line"><a name="l00708"><\/a><span class="lineno">  708<\/span>&#160;          {<\/div><div class="line"><a name="l00709"><\/a><span class="lineno">  709<\/span>&#160;            cluster_descriptors.push_back(descriptors[*vit]);<\/div><div class="line"><a name="l00710"><\/a><span class="lineno">  710<\/span>&#160;          }<\/div><div class="line"><a name="l00711"><\/a><span class="lineno">  711<\/span>&#160;          <\/div><div class="line"><a name="l00712"><\/a><span class="lineno">  712<\/span>&#160;          <\/div><div class="line"><a name="l00713"><\/a><span class="lineno">  713<\/span>&#160;          F::meanValue(cluster_descriptors, clusters[c]);<\/div><div class="line"><a name="l00714"><\/a><span class="lineno">  714<\/span>&#160;        }<\/div><div class="line"><a name="l00715"><\/a><span class="lineno">  715<\/span>&#160;        <\/div><div class="line"><a name="l00716"><\/a><span class="lineno">  716<\/span>&#160;      } <span class="comment">\/\/ if(!first_time)<\/span><\/div><div class="line"><a name="l00717"><\/a><span class="lineno">  717<\/span>&#160;<\/div><div class="line"><a name="l00718"><\/a><span class="lineno">  718<\/span>&#160;      <span class="comment">\/\/ 2. Associate features with clusters<\/span><\/div><div class="line"><a name="l00719"><\/a><span class="lineno">  719<\/span>&#160;<\/div><div class="line"><a name="l00720"><\/a><span class="lineno">  720<\/span>&#160;      <span class="comment">\/\/ calculate distances to cluster centers<\/span><\/div><div class="line"><a name="l00721"><\/a><span class="lineno">  721<\/span>&#160;      groups.clear();<\/div><div class="line"><a name="l00722"><\/a><span class="lineno">  722<\/span>&#160;      groups.resize(clusters.size(), std::vector&lt;unsigned int&gt;());<\/div><div class="line"><a name="l00723"><\/a><span class="lineno">  723<\/span>&#160;      current_association.resize(descriptors.size());<\/div><div class="line"><a name="l00724"><\/a><span class="lineno">  724<\/span>&#160;<\/div><div class="line"><a name="l00725"><\/a><span class="lineno">  725<\/span>&#160;      <span class="comment">\/\/assoc.clear();<\/span><\/div><div class="line"><a name="l00726"><\/a><span class="lineno">  726<\/span>&#160;<\/div><div class="line"><a name="l00727"><\/a><span class="lineno">  727<\/span>&#160;      <span class="keyword">typename<\/span> std::vector&lt;pDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l00728"><\/a><span class="lineno">  728<\/span>&#160;      <span class="comment">\/\/unsigned int d = 0;<\/span><\/div><div class="line"><a name="l00729"><\/a><span class="lineno">  729<\/span>&#160;      <span class="keywordflow">for<\/span>(fit = descriptors.begin(); fit != descriptors.end(); ++fit)<span class="comment">\/\/, ++d)<\/span><\/div><div class="line"><a name="l00730"><\/a><span class="lineno">  730<\/span>&#160;      {<\/div><div class="line"><a name="l00731"><\/a><span class="lineno">  731<\/span>&#160;        <span class="keywordtype">double<\/span> best_dist = F::distance(*(*fit), clusters[0]);<\/div><div class="line"><a name="l00732"><\/a><span class="lineno">  732<\/span>&#160;        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> icluster = 0;<\/div><div class="line"><a name="l00733"><\/a><span class="lineno">  733<\/span>&#160;        <\/div><div class="line"><a name="l00734"><\/a><span class="lineno">  734<\/span>&#160;        <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> c = 1; c &lt; clusters.size(); ++c)<\/div><div class="line"><a name="l00735"><\/a><span class="lineno">  735<\/span>&#160;        {<\/div><div class="line"><a name="l00736"><\/a><span class="lineno">  736<\/span>&#160;          <span class="keywordtype">double<\/span> dist = F::distance(*(*fit), clusters[c]);<\/div><div class="line"><a name="l00737"><\/a><span class="lineno">  737<\/span>&#160;          <span class="keywordflow">if<\/span>(dist &lt; best_dist)<\/div><div class="line"><a name="l00738"><\/a><span class="lineno">  738<\/span>&#160;          {<\/div><div class="line"><a name="l00739"><\/a><span class="lineno">  739<\/span>&#160;            best_dist = dist;<\/div><div class="line"><a name="l00740"><\/a><span class="lineno">  740<\/span>&#160;            icluster = c;<\/div><div class="line"><a name="l00741"><\/a><span class="lineno">  741<\/span>&#160;          }<\/div><div class="line"><a name="l00742"><\/a><span class="lineno">  742<\/span>&#160;        }<\/div><div class="line"><a name="l00743"><\/a><span class="lineno">  743<\/span>&#160;<\/div><div class="line"><a name="l00744"><\/a><span class="lineno">  744<\/span>&#160;        <span class="comment">\/\/assoc.ref&lt;unsigned char&gt;(icluster, d) = 1;<\/span><\/div><div class="line"><a name="l00745"><\/a><span class="lineno">  745<\/span>&#160;<\/div><div class="line"><a name="l00746"><\/a><span class="lineno">  746<\/span>&#160;        groups[icluster].push_back(fit - descriptors.begin());<\/div><div class="line"><a name="l00747"><\/a><span class="lineno">  747<\/span>&#160;        current_association[ fit - descriptors.begin() ] = icluster;<\/div><div class="line"><a name="l00748"><\/a><span class="lineno">  748<\/span>&#160;      }<\/div><div class="line"><a name="l00749"><\/a><span class="lineno">  749<\/span>&#160;      <\/div><div class="line"><a name="l00750"><\/a><span class="lineno">  750<\/span>&#160;      <span class="comment">\/\/ kmeans++ ensures all the clusters has any feature associated with them<\/span><\/div><div class="line"><a name="l00751"><\/a><span class="lineno">  751<\/span>&#160;<\/div><div class="line"><a name="l00752"><\/a><span class="lineno">  752<\/span>&#160;      <span class="comment">\/\/ 3. check convergence<\/span><\/div><div class="line"><a name="l00753"><\/a><span class="lineno">  753<\/span>&#160;      <span class="keywordflow">if<\/span>(first_time)<\/div><div class="line"><a name="l00754"><\/a><span class="lineno">  754<\/span>&#160;      {<\/div><div class="line"><a name="l00755"><\/a><span class="lineno">  755<\/span>&#160;        first_time = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00756"><\/a><span class="lineno">  756<\/span>&#160;      }<\/div><div class="line"><a name="l00757"><\/a><span class="lineno">  757<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00758"><\/a><span class="lineno">  758<\/span>&#160;      {<\/div><div class="line"><a name="l00759"><\/a><span class="lineno">  759<\/span>&#160;        <span class="comment">\/\/goon = !eqUChar(last_assoc, assoc);<\/span><\/div><div class="line"><a name="l00760"><\/a><span class="lineno">  760<\/span>&#160;        <\/div><div class="line"><a name="l00761"><\/a><span class="lineno">  761<\/span>&#160;        goon = <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00762"><\/a><span class="lineno">  762<\/span>&#160;        <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; current_association.size(); i++)<\/div><div class="line"><a name="l00763"><\/a><span class="lineno">  763<\/span>&#160;        {<\/div><div class="line"><a name="l00764"><\/a><span class="lineno">  764<\/span>&#160;          <span class="keywordflow">if<\/span>(current_association[i] != last_association[i]){<\/div><div class="line"><a name="l00765"><\/a><span class="lineno">  765<\/span>&#160;            goon = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00766"><\/a><span class="lineno">  766<\/span>&#160;            <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00767"><\/a><span class="lineno">  767<\/span>&#160;          }<\/div><div class="line"><a name="l00768"><\/a><span class="lineno">  768<\/span>&#160;        }<\/div><div class="line"><a name="l00769"><\/a><span class="lineno">  769<\/span>&#160;      }<\/div><div class="line"><a name="l00770"><\/a><span class="lineno">  770<\/span>&#160;<\/div><div class="line"><a name="l00771"><\/a><span class="lineno">  771<\/span>&#160;            <span class="keywordflow">if<\/span>(goon)<\/div><div class="line"><a name="l00772"><\/a><span class="lineno">  772<\/span>&#160;            {<\/div><div class="line"><a name="l00773"><\/a><span class="lineno">  773<\/span>&#160;                <span class="comment">\/\/ copy last feature-cluster association<\/span><\/div><div class="line"><a name="l00774"><\/a><span class="lineno">  774<\/span>&#160;                last_association = current_association;<\/div><div class="line"><a name="l00775"><\/a><span class="lineno">  775<\/span>&#160;                <span class="comment">\/\/last_assoc = assoc.clone();<\/span><\/div><div class="line"><a name="l00776"><\/a><span class="lineno">  776<\/span>&#160;            }<\/div><div class="line"><a name="l00777"><\/a><span class="lineno">  777<\/span>&#160;            <\/div><div class="line"><a name="l00778"><\/a><span class="lineno">  778<\/span>&#160;        } <span class="comment">\/\/ while(goon)<\/span><\/div><div class="line"><a name="l00779"><\/a><span class="lineno">  779<\/span>&#160;    <\/div><div class="line"><a name="l00780"><\/a><span class="lineno">  780<\/span>&#160;  } <span class="comment">\/\/ if must run kmeans<\/span><\/div><div class="line"><a name="l00781"><\/a><span class="lineno">  781<\/span>&#160;  <\/div><div class="line"><a name="l00782"><\/a><span class="lineno">  782<\/span>&#160;  <span class="comment">\/\/ create nodes<\/span><\/div><div class="line"><a name="l00783"><\/a><span class="lineno">  783<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; clusters.size(); ++i)<\/div><div class="line"><a name="l00784"><\/a><span class="lineno">  784<\/span>&#160;  {<\/div><div class="line"><a name="l00785"><\/a><span class="lineno">  785<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span> = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.size();<\/div><div class="line"><a name="l00786"><\/a><span class="lineno">  786<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.push_back(<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>(<span class="keywordtype">id<\/span>));<\/div><div class="line"><a name="l00787"><\/a><span class="lineno">  787<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.back().descriptor = clusters[i];<\/div><div class="line"><a name="l00788"><\/a><span class="lineno">  788<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.back().parent = parent_id;<\/div><div class="line"><a name="l00789"><\/a><span class="lineno">  789<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[parent_id].children.push_back(<span class="keywordtype">id<\/span>);<\/div><div class="line"><a name="l00790"><\/a><span class="lineno">  790<\/span>&#160;  }<\/div><div class="line"><a name="l00791"><\/a><span class="lineno">  791<\/span>&#160;  <\/div><div class="line"><a name="l00792"><\/a><span class="lineno">  792<\/span>&#160;  <span class="comment">\/\/ go on with the next level<\/span><\/div><div class="line"><a name="l00793"><\/a><span class="lineno">  793<\/span>&#160;  <span class="keywordflow">if<\/span>(current_level &lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>)<\/div><div class="line"><a name="l00794"><\/a><span class="lineno">  794<\/span>&#160;  {<\/div><div class="line"><a name="l00795"><\/a><span class="lineno">  795<\/span>&#160;    <span class="comment">\/\/ iterate again with the resulting clusters<\/span><\/div><div class="line"><a name="l00796"><\/a><span class="lineno">  796<\/span>&#160;    <span class="keyword">const<\/span> std::vector&lt;NodeId&gt; &amp;children_ids = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[parent_id].children;<\/div><div class="line"><a name="l00797"><\/a><span class="lineno">  797<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; clusters.size(); ++i)<\/div><div class="line"><a name="l00798"><\/a><span class="lineno">  798<\/span>&#160;    {<\/div><div class="line"><a name="l00799"><\/a><span class="lineno">  799<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span> = children_ids[i];<\/div><div class="line"><a name="l00800"><\/a><span class="lineno">  800<\/span>&#160;<\/div><div class="line"><a name="l00801"><\/a><span class="lineno">  801<\/span>&#160;      std::vector&lt;pDescriptor&gt; child_features;<\/div><div class="line"><a name="l00802"><\/a><span class="lineno">  802<\/span>&#160;      child_features.reserve(groups[i].<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>());<\/div><div class="line"><a name="l00803"><\/a><span class="lineno">  803<\/span>&#160;<\/div><div class="line"><a name="l00804"><\/a><span class="lineno">  804<\/span>&#160;      std::vector&lt;unsigned int&gt;::const_iterator vit;<\/div><div class="line"><a name="l00805"><\/a><span class="lineno">  805<\/span>&#160;      <span class="keywordflow">for<\/span>(vit = groups[i].begin(); vit != groups[i].end(); ++vit)<\/div><div class="line"><a name="l00806"><\/a><span class="lineno">  806<\/span>&#160;      {<\/div><div class="line"><a name="l00807"><\/a><span class="lineno">  807<\/span>&#160;        child_features.push_back(descriptors[*vit]);<\/div><div class="line"><a name="l00808"><\/a><span class="lineno">  808<\/span>&#160;      }<\/div><div class="line"><a name="l00809"><\/a><span class="lineno">  809<\/span>&#160;<\/div><div class="line"><a name="l00810"><\/a><span class="lineno">  810<\/span>&#160;      <span class="keywordflow">if<\/span>(child_features.size() &gt; 1)<\/div><div class="line"><a name="l00811"><\/a><span class="lineno">  811<\/span>&#160;      {<\/div><div class="line"><a name="l00812"><\/a><span class="lineno">  812<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abcbbda75df001522490774746bdb570c">HKmeansStep<\/a>(<span class="keywordtype">id<\/span>, child_features, current_level + 1);<\/div><div class="line"><a name="l00813"><\/a><span class="lineno">  813<\/span>&#160;      }<\/div><div class="line"><a name="l00814"><\/a><span class="lineno">  814<\/span>&#160;    }<\/div><div class="line"><a name="l00815"><\/a><span class="lineno">  815<\/span>&#160;  }<\/div><div class="line"><a name="l00816"><\/a><span class="lineno">  816<\/span>&#160;}<\/div><div class="line"><a name="l00817"><\/a><span class="lineno">  817<\/span>&#160;<\/div><div class="line"><a name="l00818"><\/a><span class="lineno">  818<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00819"><\/a><span class="lineno">  819<\/span>&#160;<\/div><div class="line"><a name="l00820"><\/a><span class="lineno">  820<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00821"><\/a><span class="lineno">  821<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">TemplatedVocabulary&lt;TDescriptor, F&gt;::initiateClusters<\/a><\/div><div class="line"><a name="l00822"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#ad44113689808c4a4cd39730c8bbcac62">  822<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00823"><\/a><span class="lineno">  823<\/span>&#160;   std::vector&lt;TDescriptor&gt; &amp;clusters) <span class="keyword">const<\/span><\/div><div class="line"><a name="l00824"><\/a><span class="lineno">  824<\/span>&#160;{<\/div><div class="line"><a name="l00825"><\/a><span class="lineno">  825<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">initiateClustersKMpp<\/a>(descriptors, clusters);  <\/div><div class="line"><a name="l00826"><\/a><span class="lineno">  826<\/span>&#160;}<\/div><div class="line"><a name="l00827"><\/a><span class="lineno">  827<\/span>&#160;<\/div><div class="line"><a name="l00828"><\/a><span class="lineno">  828<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00829"><\/a><span class="lineno">  829<\/span>&#160;<\/div><div class="line"><a name="l00830"><\/a><span class="lineno">  830<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00831"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">  831<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af20b610c67604601aad65918ee8d5b61">TemplatedVocabulary&lt;TDescriptor,F&gt;::initiateClustersKMpp<\/a>(<\/div><div class="line"><a name="l00832"><\/a><span class="lineno">  832<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;pDescriptor&gt; &amp;pfeatures,<\/div><div class="line"><a name="l00833"><\/a><span class="lineno">  833<\/span>&#160;    std::vector&lt;TDescriptor&gt; &amp;clusters)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00834"><\/a><span class="lineno">  834<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l00835"><\/a><span class="lineno">  835<\/span>&#160;  <span class="comment">\/\/ Implements kmeans++ seeding algorithm<\/span><\/div><div class="line"><a name="l00836"><\/a><span class="lineno">  836<\/span>&#160;  <span class="comment">\/\/ Algorithm:<\/span><\/div><div class="line"><a name="l00837"><\/a><span class="lineno">  837<\/span>&#160;  <span class="comment">\/\/ 1. Choose one center uniformly at random from among the data points.<\/span><\/div><div class="line"><a name="l00838"><\/a><span class="lineno">  838<\/span>&#160;  <span class="comment">\/\/ 2. For each data point x, compute D(x), the distance between x and the nearest <\/span><\/div><div class="line"><a name="l00839"><\/a><span class="lineno">  839<\/span>&#160;  <span class="comment">\/\/    center that has already been chosen.<\/span><\/div><div class="line"><a name="l00840"><\/a><span class="lineno">  840<\/span>&#160;  <span class="comment">\/\/ 3. Add one new data point as a center. Each point x is chosen with probability <\/span><\/div><div class="line"><a name="l00841"><\/a><span class="lineno">  841<\/span>&#160;  <span class="comment">\/\/    proportional to D(x)^2.<\/span><\/div><div class="line"><a name="l00842"><\/a><span class="lineno">  842<\/span>&#160;  <span class="comment">\/\/ 4. Repeat Steps 2 and 3 until k centers have been chosen.<\/span><\/div><div class="line"><a name="l00843"><\/a><span class="lineno">  843<\/span>&#160;  <span class="comment">\/\/ 5. Now that the initial centers have been chosen, proceed using standard k-means <\/span><\/div><div class="line"><a name="l00844"><\/a><span class="lineno">  844<\/span>&#160;  <span class="comment">\/\/    clustering.<\/span><\/div><div class="line"><a name="l00845"><\/a><span class="lineno">  845<\/span>&#160;<\/div><div class="line"><a name="l00846"><\/a><span class="lineno">  846<\/span>&#160;  <a class="code" href="classDUtils_1_1Random.html#a91926937ff5c31ca4aa3948de8b4d788">DUtils::Random::SeedRandOnce<\/a>();<\/div><div class="line"><a name="l00847"><\/a><span class="lineno">  847<\/span>&#160;<\/div><div class="line"><a name="l00848"><\/a><span class="lineno">  848<\/span>&#160;  clusters.resize(0);<\/div><div class="line"><a name="l00849"><\/a><span class="lineno">  849<\/span>&#160;  clusters.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>);<\/div><div class="line"><a name="l00850"><\/a><span class="lineno">  850<\/span>&#160;  std::vector&lt;double&gt; min_dists(pfeatures.size(), std::numeric_limits&lt;double&gt;::max());<\/div><div class="line"><a name="l00851"><\/a><span class="lineno">  851<\/span>&#160;  <\/div><div class="line"><a name="l00852"><\/a><span class="lineno">  852<\/span>&#160;  <span class="comment">\/\/ 1.<\/span><\/div><div class="line"><a name="l00853"><\/a><span class="lineno">  853<\/span>&#160;  <\/div><div class="line"><a name="l00854"><\/a><span class="lineno">  854<\/span>&#160;  <span class="keywordtype">int<\/span> ifeature = <a class="code" href="classDUtils_1_1Random.html#a39e456a640b660d7ef06460822685dc3">DUtils::Random::RandomInt<\/a>(0, pfeatures.size()-1);<\/div><div class="line"><a name="l00855"><\/a><span class="lineno">  855<\/span>&#160;  <\/div><div class="line"><a name="l00856"><\/a><span class="lineno">  856<\/span>&#160;  <span class="comment">\/\/ create first cluster<\/span><\/div><div class="line"><a name="l00857"><\/a><span class="lineno">  857<\/span>&#160;  clusters.push_back(*pfeatures[ifeature]);<\/div><div class="line"><a name="l00858"><\/a><span class="lineno">  858<\/span>&#160;<\/div><div class="line"><a name="l00859"><\/a><span class="lineno">  859<\/span>&#160;  <span class="comment">\/\/ compute the initial distances<\/span><\/div><div class="line"><a name="l00860"><\/a><span class="lineno">  860<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;pDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l00861"><\/a><span class="lineno">  861<\/span>&#160;  std::vector&lt;double&gt;::iterator dit;<\/div><div class="line"><a name="l00862"><\/a><span class="lineno">  862<\/span>&#160;  dit = min_dists.begin();<\/div><div class="line"><a name="l00863"><\/a><span class="lineno">  863<\/span>&#160;  <span class="keywordflow">for<\/span>(fit = pfeatures.begin(); fit != pfeatures.end(); ++fit, ++dit)<\/div><div class="line"><a name="l00864"><\/a><span class="lineno">  864<\/span>&#160;  {<\/div><div class="line"><a name="l00865"><\/a><span class="lineno">  865<\/span>&#160;    *dit = F::distance(*(*fit), clusters.back());<\/div><div class="line"><a name="l00866"><\/a><span class="lineno">  866<\/span>&#160;  }  <\/div><div class="line"><a name="l00867"><\/a><span class="lineno">  867<\/span>&#160;<\/div><div class="line"><a name="l00868"><\/a><span class="lineno">  868<\/span>&#160;  <span class="keywordflow">while<\/span>((<span class="keywordtype">int<\/span>)clusters.size() &lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>)<\/div><div class="line"><a name="l00869"><\/a><span class="lineno">  869<\/span>&#160;  {<\/div><div class="line"><a name="l00870"><\/a><span class="lineno">  870<\/span>&#160;    <span class="comment">\/\/ 2.<\/span><\/div><div class="line"><a name="l00871"><\/a><span class="lineno">  871<\/span>&#160;    dit = min_dists.begin();<\/div><div class="line"><a name="l00872"><\/a><span class="lineno">  872<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = pfeatures.begin(); fit != pfeatures.end(); ++fit, ++dit)<\/div><div class="line"><a name="l00873"><\/a><span class="lineno">  873<\/span>&#160;    {<\/div><div class="line"><a name="l00874"><\/a><span class="lineno">  874<\/span>&#160;      <span class="keywordflow">if<\/span>(*dit &gt; 0)<\/div><div class="line"><a name="l00875"><\/a><span class="lineno">  875<\/span>&#160;      {<\/div><div class="line"><a name="l00876"><\/a><span class="lineno">  876<\/span>&#160;        <span class="keywordtype">double<\/span> dist = F::distance(*(*fit), clusters.back());<\/div><div class="line"><a name="l00877"><\/a><span class="lineno">  877<\/span>&#160;        <span class="keywordflow">if<\/span>(dist &lt; *dit) *dit = dist;<\/div><div class="line"><a name="l00878"><\/a><span class="lineno">  878<\/span>&#160;      }<\/div><div class="line"><a name="l00879"><\/a><span class="lineno">  879<\/span>&#160;    }<\/div><div class="line"><a name="l00880"><\/a><span class="lineno">  880<\/span>&#160;    <\/div><div class="line"><a name="l00881"><\/a><span class="lineno">  881<\/span>&#160;    <span class="comment">\/\/ 3.<\/span><\/div><div class="line"><a name="l00882"><\/a><span class="lineno">  882<\/span>&#160;    <span class="keywordtype">double<\/span> dist_sum = std::accumulate(min_dists.begin(), min_dists.end(), 0.0);<\/div><div class="line"><a name="l00883"><\/a><span class="lineno">  883<\/span>&#160;<\/div><div class="line"><a name="l00884"><\/a><span class="lineno">  884<\/span>&#160;    <span class="keywordflow">if<\/span>(dist_sum &gt; 0)<\/div><div class="line"><a name="l00885"><\/a><span class="lineno">  885<\/span>&#160;    {<\/div><div class="line"><a name="l00886"><\/a><span class="lineno">  886<\/span>&#160;      <span class="keywordtype">double<\/span> cut_d;<\/div><div class="line"><a name="l00887"><\/a><span class="lineno">  887<\/span>&#160;      <span class="keywordflow">do<\/span><\/div><div class="line"><a name="l00888"><\/a><span class="lineno">  888<\/span>&#160;      {<\/div><div class="line"><a name="l00889"><\/a><span class="lineno">  889<\/span>&#160;        cut_d = DUtils::Random::RandomValue&lt;double&gt;(0, dist_sum);<\/div><div class="line"><a name="l00890"><\/a><span class="lineno">  890<\/span>&#160;      } <span class="keywordflow">while<\/span>(cut_d == 0.0);<\/div><div class="line"><a name="l00891"><\/a><span class="lineno">  891<\/span>&#160;<\/div><div class="line"><a name="l00892"><\/a><span class="lineno">  892<\/span>&#160;      <span class="keywordtype">double<\/span> d_up_now = 0;<\/div><div class="line"><a name="l00893"><\/a><span class="lineno">  893<\/span>&#160;      <span class="keywordflow">for<\/span>(dit = min_dists.begin(); dit != min_dists.end(); ++dit)<\/div><div class="line"><a name="l00894"><\/a><span class="lineno">  894<\/span>&#160;      {<\/div><div class="line"><a name="l00895"><\/a><span class="lineno">  895<\/span>&#160;        d_up_now += *dit;<\/div><div class="line"><a name="l00896"><\/a><span class="lineno">  896<\/span>&#160;        <span class="keywordflow">if<\/span>(d_up_now &gt;= cut_d) <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00897"><\/a><span class="lineno">  897<\/span>&#160;      }<\/div><div class="line"><a name="l00898"><\/a><span class="lineno">  898<\/span>&#160;      <\/div><div class="line"><a name="l00899"><\/a><span class="lineno">  899<\/span>&#160;      <span class="keywordflow">if<\/span>(dit == min_dists.end()) <\/div><div class="line"><a name="l00900"><\/a><span class="lineno">  900<\/span>&#160;        ifeature = pfeatures.size()-1;<\/div><div class="line"><a name="l00901"><\/a><span class="lineno">  901<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00902"><\/a><span class="lineno">  902<\/span>&#160;        ifeature = dit - min_dists.begin();<\/div><div class="line"><a name="l00903"><\/a><span class="lineno">  903<\/span>&#160;      <\/div><div class="line"><a name="l00904"><\/a><span class="lineno">  904<\/span>&#160;      clusters.push_back(*pfeatures[ifeature]);<\/div><div class="line"><a name="l00905"><\/a><span class="lineno">  905<\/span>&#160;<\/div><div class="line"><a name="l00906"><\/a><span class="lineno">  906<\/span>&#160;    } <span class="comment">\/\/ if dist_sum &gt; 0<\/span><\/div><div class="line"><a name="l00907"><\/a><span class="lineno">  907<\/span>&#160;    <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00908"><\/a><span class="lineno">  908<\/span>&#160;      <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00909"><\/a><span class="lineno">  909<\/span>&#160;      <\/div><div class="line"><a name="l00910"><\/a><span class="lineno">  910<\/span>&#160;  } <span class="comment">\/\/ while(used_clusters &lt; m_k)<\/span><\/div><div class="line"><a name="l00911"><\/a><span class="lineno">  911<\/span>&#160;<\/div><div class="line"><a name="l00912"><\/a><span class="lineno">  912<\/span>&#160;}<\/div><div class="line"><a name="l00913"><\/a><span class="lineno">  913<\/span>&#160;<\/div><div class="line"><a name="l00914"><\/a><span class="lineno">  914<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00915"><\/a><span class="lineno">  915<\/span>&#160;<\/div><div class="line"><a name="l00916"><\/a><span class="lineno">  916<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00917"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">  917<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a9b74d107b7dc6142cbed4e6ef44a8519">TemplatedVocabulary&lt;TDescriptor,F&gt;::createWords<\/a>()<\/div><div class="line"><a name="l00918"><\/a><span class="lineno">  918<\/span>&#160;{<\/div><div class="line"><a name="l00919"><\/a><span class="lineno">  919<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.resize(0);<\/div><div class="line"><a name="l00920"><\/a><span class="lineno">  920<\/span>&#160;  <\/div><div class="line"><a name="l00921"><\/a><span class="lineno">  921<\/span>&#160;  <span class="keywordflow">if<\/span>(!<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.empty())<\/div><div class="line"><a name="l00922"><\/a><span class="lineno">  922<\/span>&#160;  {<\/div><div class="line"><a name="l00923"><\/a><span class="lineno">  923<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.reserve( (<span class="keywordtype">int<\/span>)pow((<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>, (<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>) );<\/div><div class="line"><a name="l00924"><\/a><span class="lineno">  924<\/span>&#160;<\/div><div class="line"><a name="l00925"><\/a><span class="lineno">  925<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;Node&gt;::iterator nit;<\/div><div class="line"><a name="l00926"><\/a><span class="lineno">  926<\/span>&#160;    <\/div><div class="line"><a name="l00927"><\/a><span class="lineno">  927<\/span>&#160;    nit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.begin(); <span class="comment">\/\/ ignore root<\/span><\/div><div class="line"><a name="l00928"><\/a><span class="lineno">  928<\/span>&#160;    <span class="keywordflow">for<\/span>(++nit; nit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.end(); ++nit)<\/div><div class="line"><a name="l00929"><\/a><span class="lineno">  929<\/span>&#160;    {<\/div><div class="line"><a name="l00930"><\/a><span class="lineno">  930<\/span>&#160;      <span class="keywordflow">if<\/span>(nit-&gt;isLeaf())<\/div><div class="line"><a name="l00931"><\/a><span class="lineno">  931<\/span>&#160;      {<\/div><div class="line"><a name="l00932"><\/a><span class="lineno">  932<\/span>&#160;        nit-&gt;word_id = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size();<\/div><div class="line"><a name="l00933"><\/a><span class="lineno">  933<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.push_back( &amp;(*nit) );<\/div><div class="line"><a name="l00934"><\/a><span class="lineno">  934<\/span>&#160;      }<\/div><div class="line"><a name="l00935"><\/a><span class="lineno">  935<\/span>&#160;    }<\/div><div class="line"><a name="l00936"><\/a><span class="lineno">  936<\/span>&#160;  }<\/div><div class="line"><a name="l00937"><\/a><span class="lineno">  937<\/span>&#160;}<\/div><div class="line"><a name="l00938"><\/a><span class="lineno">  938<\/span>&#160;<\/div><div class="line"><a name="l00939"><\/a><span class="lineno">  939<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00940"><\/a><span class="lineno">  940<\/span>&#160;<\/div><div class="line"><a name="l00941"><\/a><span class="lineno">  941<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l00942"><\/a><span class="lineno">  942<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">TemplatedVocabulary&lt;TDescriptor,F&gt;::setNodeWeights<\/a><\/div><div class="line"><a name="l00943"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a1a0a9cf4052090c041ff9442be7b22f6">  943<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt; &amp;training_features)<\/div><div class="line"><a name="l00944"><\/a><span class="lineno">  944<\/span>&#160;{<\/div><div class="line"><a name="l00945"><\/a><span class="lineno">  945<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> NWords = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size();<\/div><div class="line"><a name="l00946"><\/a><span class="lineno">  946<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> NDocs = training_features.size();<\/div><div class="line"><a name="l00947"><\/a><span class="lineno">  947<\/span>&#160;<\/div><div class="line"><a name="l00948"><\/a><span class="lineno">  948<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == BINARY)<\/div><div class="line"><a name="l00949"><\/a><span class="lineno">  949<\/span>&#160;  {<\/div><div class="line"><a name="l00950"><\/a><span class="lineno">  950<\/span>&#160;    <span class="comment">\/\/ idf part must be 1 always<\/span><\/div><div class="line"><a name="l00951"><\/a><span class="lineno">  951<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; NWords; i++)<\/div><div class="line"><a name="l00952"><\/a><span class="lineno">  952<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[i]-&gt;weight = 1;<\/div><div class="line"><a name="l00953"><\/a><span class="lineno">  953<\/span>&#160;  }<\/div><div class="line"><a name="l00954"><\/a><span class="lineno">  954<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == IDF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF_IDF)<\/div><div class="line"><a name="l00955"><\/a><span class="lineno">  955<\/span>&#160;  {<\/div><div class="line"><a name="l00956"><\/a><span class="lineno">  956<\/span>&#160;    <span class="comment">\/\/ IDF and TF-IDF: we calculte the idf path now<\/span><\/div><div class="line"><a name="l00957"><\/a><span class="lineno">  957<\/span>&#160;<\/div><div class="line"><a name="l00958"><\/a><span class="lineno">  958<\/span>&#160;    <span class="comment">\/\/ Note: this actually calculates the idf part of the tf-idf score.<\/span><\/div><div class="line"><a name="l00959"><\/a><span class="lineno">  959<\/span>&#160;    <span class="comment">\/\/ The complete tf-idf score is calculated in ::transform<\/span><\/div><div class="line"><a name="l00960"><\/a><span class="lineno">  960<\/span>&#160;<\/div><div class="line"><a name="l00961"><\/a><span class="lineno">  961<\/span>&#160;    std::vector&lt;unsigned int&gt; Ni(NWords, 0);<\/div><div class="line"><a name="l00962"><\/a><span class="lineno">  962<\/span>&#160;    std::vector&lt;bool&gt; counted(NWords, <span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00963"><\/a><span class="lineno">  963<\/span>&#160;    <\/div><div class="line"><a name="l00964"><\/a><span class="lineno">  964<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;std::vector&lt;TDescriptor&gt; &gt;::const_iterator mit;<\/div><div class="line"><a name="l00965"><\/a><span class="lineno">  965<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l00966"><\/a><span class="lineno">  966<\/span>&#160;<\/div><div class="line"><a name="l00967"><\/a><span class="lineno">  967<\/span>&#160;    <span class="keywordflow">for<\/span>(mit = training_features.begin(); mit != training_features.end(); ++mit)<\/div><div class="line"><a name="l00968"><\/a><span class="lineno">  968<\/span>&#160;    {<\/div><div class="line"><a name="l00969"><\/a><span class="lineno">  969<\/span>&#160;      fill(counted.begin(), counted.end(), <span class="keyword">false<\/span>);<\/div><div class="line"><a name="l00970"><\/a><span class="lineno">  970<\/span>&#160;<\/div><div class="line"><a name="l00971"><\/a><span class="lineno">  971<\/span>&#160;      <span class="keywordflow">for<\/span>(fit = mit-&gt;begin(); fit &lt; mit-&gt;end(); ++fit)<\/div><div class="line"><a name="l00972"><\/a><span class="lineno">  972<\/span>&#160;      {<\/div><div class="line"><a name="l00973"><\/a><span class="lineno">  973<\/span>&#160;        <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> word_id;<\/div><div class="line"><a name="l00974"><\/a><span class="lineno">  974<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, word_id);<\/div><div class="line"><a name="l00975"><\/a><span class="lineno">  975<\/span>&#160;<\/div><div class="line"><a name="l00976"><\/a><span class="lineno">  976<\/span>&#160;        <span class="keywordflow">if<\/span>(!counted[word_id])<\/div><div class="line"><a name="l00977"><\/a><span class="lineno">  977<\/span>&#160;        {<\/div><div class="line"><a name="l00978"><\/a><span class="lineno">  978<\/span>&#160;          Ni[word_id]++;<\/div><div class="line"><a name="l00979"><\/a><span class="lineno">  979<\/span>&#160;          counted[word_id] = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00980"><\/a><span class="lineno">  980<\/span>&#160;        }<\/div><div class="line"><a name="l00981"><\/a><span class="lineno">  981<\/span>&#160;      }<\/div><div class="line"><a name="l00982"><\/a><span class="lineno">  982<\/span>&#160;    }<\/div><div class="line"><a name="l00983"><\/a><span class="lineno">  983<\/span>&#160;<\/div><div class="line"><a name="l00984"><\/a><span class="lineno">  984<\/span>&#160;    <span class="comment">\/\/ set ln(N\/Ni)<\/span><\/div><div class="line"><a name="l00985"><\/a><span class="lineno">  985<\/span>&#160;    <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; NWords; i++)<\/div><div class="line"><a name="l00986"><\/a><span class="lineno">  986<\/span>&#160;    {<\/div><div class="line"><a name="l00987"><\/a><span class="lineno">  987<\/span>&#160;      <span class="keywordflow">if<\/span>(Ni[i] &gt; 0)<\/div><div class="line"><a name="l00988"><\/a><span class="lineno">  988<\/span>&#160;      {<\/div><div class="line"><a name="l00989"><\/a><span class="lineno">  989<\/span>&#160;        <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[i]-&gt;weight = log((<span class="keywordtype">double<\/span>)NDocs \/ (<span class="keywordtype">double<\/span>)Ni[i]);<\/div><div class="line"><a name="l00990"><\/a><span class="lineno">  990<\/span>&#160;      }<span class="comment">\/\/ else \/\/ This cannot occur if using kmeans++<\/span><\/div><div class="line"><a name="l00991"><\/a><span class="lineno">  991<\/span>&#160;    }<\/div><div class="line"><a name="l00992"><\/a><span class="lineno">  992<\/span>&#160;  <\/div><div class="line"><a name="l00993"><\/a><span class="lineno">  993<\/span>&#160;  }<\/div><div class="line"><a name="l00994"><\/a><span class="lineno">  994<\/span>&#160;<\/div><div class="line"><a name="l00995"><\/a><span class="lineno">  995<\/span>&#160;}<\/div><div class="line"><a name="l00996"><\/a><span class="lineno">  996<\/span>&#160;<\/div><div class="line"><a name="l00997"><\/a><span class="lineno">  997<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00998"><\/a><span class="lineno">  998<\/span>&#160;<\/div><div class="line"><a name="l00999"><\/a><span class="lineno">  999<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01000"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0"> 1000<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">TemplatedVocabulary&lt;TDescriptor,F&gt;::size<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01001"><\/a><span class="lineno"> 1001<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01002"><\/a><span class="lineno"> 1002<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size();<\/div><div class="line"><a name="l01003"><\/a><span class="lineno"> 1003<\/span>&#160;}<\/div><div class="line"><a name="l01004"><\/a><span class="lineno"> 1004<\/span>&#160;<\/div><div class="line"><a name="l01005"><\/a><span class="lineno"> 1005<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01006"><\/a><span class="lineno"> 1006<\/span>&#160;<\/div><div class="line"><a name="l01007"><\/a><span class="lineno"> 1007<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01008"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1"> 1008<\/a><\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">TemplatedVocabulary&lt;TDescriptor,F&gt;::empty<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01009"><\/a><span class="lineno"> 1009<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01010"><\/a><span class="lineno"> 1010<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.empty();<\/div><div class="line"><a name="l01011"><\/a><span class="lineno"> 1011<\/span>&#160;}<\/div><div class="line"><a name="l01012"><\/a><span class="lineno"> 1012<\/span>&#160;<\/div><div class="line"><a name="l01013"><\/a><span class="lineno"> 1013<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01014"><\/a><span class="lineno"> 1014<\/span>&#160;<\/div><div class="line"><a name="l01015"><\/a><span class="lineno"> 1015<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01016"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#acee6fb9313d844fbcf05f470379c6dc3"> 1016<\/a><\/span>&#160;<span class="keywordtype">float<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#acee6fb9313d844fbcf05f470379c6dc3">TemplatedVocabulary&lt;TDescriptor,F&gt;::getEffectiveLevels<\/a>()<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01017"><\/a><span class="lineno"> 1017<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01018"><\/a><span class="lineno"> 1018<\/span>&#160;  <span class="keywordtype">long<\/span> sum = 0;<\/div><div class="line"><a name="l01019"><\/a><span class="lineno"> 1019<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;Node*&gt;::const_iterator wit;<\/div><div class="line"><a name="l01020"><\/a><span class="lineno"> 1020<\/span>&#160;  <span class="keywordflow">for<\/span>(wit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin(); wit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.end(); ++wit)<\/div><div class="line"><a name="l01021"><\/a><span class="lineno"> 1021<\/span>&#160;  {<\/div><div class="line"><a name="l01022"><\/a><span class="lineno"> 1022<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a> *p = *wit;<\/div><div class="line"><a name="l01023"><\/a><span class="lineno"> 1023<\/span>&#160;    <\/div><div class="line"><a name="l01024"><\/a><span class="lineno"> 1024<\/span>&#160;    <span class="keywordflow">for<\/span>(; p-&gt;<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">id<\/a> != 0; sum++) p = &amp;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[p-&gt;<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a082fba9dcf272b78354ffd5b1d58f5fa">parent<\/a>];<\/div><div class="line"><a name="l01025"><\/a><span class="lineno"> 1025<\/span>&#160;  }<\/div><div class="line"><a name="l01026"><\/a><span class="lineno"> 1026<\/span>&#160;  <\/div><div class="line"><a name="l01027"><\/a><span class="lineno"> 1027<\/span>&#160;  <span class="keywordflow">return<\/span> (<span class="keywordtype">float<\/span>)((double)sum \/ (<span class="keywordtype">double<\/span>)<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.size());<\/div><div class="line"><a name="l01028"><\/a><span class="lineno"> 1028<\/span>&#160;}<\/div><div class="line"><a name="l01029"><\/a><span class="lineno"> 1029<\/span>&#160;<\/div><div class="line"><a name="l01030"><\/a><span class="lineno"> 1030<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01031"><\/a><span class="lineno"> 1031<\/span>&#160;<\/div><div class="line"><a name="l01032"><\/a><span class="lineno"> 1032<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01033"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aed50a053fac7e270bf8369a8667cf2c6"> 1033<\/a><\/span>&#160;TDescriptor <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aed50a053fac7e270bf8369a8667cf2c6">TemplatedVocabulary&lt;TDescriptor,F&gt;::getWord<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01034"><\/a><span class="lineno"> 1034<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01035"><\/a><span class="lineno"> 1035<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid]-&gt;descriptor;<\/div><div class="line"><a name="l01036"><\/a><span class="lineno"> 1036<\/span>&#160;}<\/div><div class="line"><a name="l01037"><\/a><span class="lineno"> 1037<\/span>&#160;<\/div><div class="line"><a name="l01038"><\/a><span class="lineno"> 1038<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01039"><\/a><span class="lineno"> 1039<\/span>&#160;<\/div><div class="line"><a name="l01040"><\/a><span class="lineno"> 1040<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01041"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a95edc3ffa594ac7a798aec0808997b4a"> 1041<\/a><\/span>&#160;<a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a95edc3ffa594ac7a798aec0808997b4a">TemplatedVocabulary&lt;TDescriptor, F&gt;::getWordWeight<\/a>(<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01042"><\/a><span class="lineno"> 1042<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01043"><\/a><span class="lineno"> 1043<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid]-&gt;weight;<\/div><div class="line"><a name="l01044"><\/a><span class="lineno"> 1044<\/span>&#160;}<\/div><div class="line"><a name="l01045"><\/a><span class="lineno"> 1045<\/span>&#160;<\/div><div class="line"><a name="l01046"><\/a><span class="lineno"> 1046<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01047"><\/a><span class="lineno"> 1047<\/span>&#160;<\/div><div class="line"><a name="l01048"><\/a><span class="lineno"> 1048<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01049"><\/a><span class="lineno"> 1049<\/span>&#160;<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor, F&gt;::transform<\/a><\/div><div class="line"><a name="l01050"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a7bdb12ed8de8e2da937dd0c6de96a53a"> 1050<\/a><\/span>&#160;  (<span class="keyword">const<\/span> TDescriptor&amp; feature) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01051"><\/a><span class="lineno"> 1051<\/span>&#160;{<\/div><div class="line"><a name="l01052"><\/a><span class="lineno"> 1052<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>())<\/div><div class="line"><a name="l01053"><\/a><span class="lineno"> 1053<\/span>&#160;  {<\/div><div class="line"><a name="l01054"><\/a><span class="lineno"> 1054<\/span>&#160;    <span class="keywordflow">return<\/span> 0;<\/div><div class="line"><a name="l01055"><\/a><span class="lineno"> 1055<\/span>&#160;  }<\/div><div class="line"><a name="l01056"><\/a><span class="lineno"> 1056<\/span>&#160;  <\/div><div class="line"><a name="l01057"><\/a><span class="lineno"> 1057<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid;<\/div><div class="line"><a name="l01058"><\/a><span class="lineno"> 1058<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(feature, wid);<\/div><div class="line"><a name="l01059"><\/a><span class="lineno"> 1059<\/span>&#160;  <span class="keywordflow">return<\/span> wid;<\/div><div class="line"><a name="l01060"><\/a><span class="lineno"> 1060<\/span>&#160;}<\/div><div class="line"><a name="l01061"><\/a><span class="lineno"> 1061<\/span>&#160;<\/div><div class="line"><a name="l01062"><\/a><span class="lineno"> 1062<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01063"><\/a><span class="lineno"> 1063<\/span>&#160;<\/div><div class="line"><a name="l01064"><\/a><span class="lineno"> 1064<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01065"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d"> 1065<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a>(<\/div><div class="line"><a name="l01066"><\/a><span class="lineno"> 1066<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features, <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01067"><\/a><span class="lineno"> 1067<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01068"><\/a><span class="lineno"> 1068<\/span>&#160;  v.clear();<\/div><div class="line"><a name="l01069"><\/a><span class="lineno"> 1069<\/span>&#160;  <\/div><div class="line"><a name="l01070"><\/a><span class="lineno"> 1070<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>())<\/div><div class="line"><a name="l01071"><\/a><span class="lineno"> 1071<\/span>&#160;  {<\/div><div class="line"><a name="l01072"><\/a><span class="lineno"> 1072<\/span>&#160;    <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l01073"><\/a><span class="lineno"> 1073<\/span>&#160;  }<\/div><div class="line"><a name="l01074"><\/a><span class="lineno"> 1074<\/span>&#160;<\/div><div class="line"><a name="l01075"><\/a><span class="lineno"> 1075<\/span>&#160;  <span class="comment">\/\/ normalize <\/span><\/div><div class="line"><a name="l01076"><\/a><span class="lineno"> 1076<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> norm;<\/div><div class="line"><a name="l01077"><\/a><span class="lineno"> 1077<\/span>&#160;  <span class="keywordtype">bool<\/span> must = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>-&gt;<a class="code" href="classDBoW2_1_1GeneralScoring.html#ab0cadafd50b0f2f559f6325a6944f72f">mustNormalize<\/a>(norm);<\/div><div class="line"><a name="l01078"><\/a><span class="lineno"> 1078<\/span>&#160;<\/div><div class="line"><a name="l01079"><\/a><span class="lineno"> 1079<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l01080"><\/a><span class="lineno"> 1080<\/span>&#160;<\/div><div class="line"><a name="l01081"><\/a><span class="lineno"> 1081<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF_IDF)<\/div><div class="line"><a name="l01082"><\/a><span class="lineno"> 1082<\/span>&#160;  {<\/div><div class="line"><a name="l01083"><\/a><span class="lineno"> 1083<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit)<\/div><div class="line"><a name="l01084"><\/a><span class="lineno"> 1084<\/span>&#160;    {<\/div><div class="line"><a name="l01085"><\/a><span class="lineno"> 1085<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01086"><\/a><span class="lineno"> 1086<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w; <\/div><div class="line"><a name="l01087"><\/a><span class="lineno"> 1087<\/span>&#160;      <span class="comment">\/\/ w is the idf value if TF_IDF, 1 if TF<\/span><\/div><div class="line"><a name="l01088"><\/a><span class="lineno"> 1088<\/span>&#160;      <\/div><div class="line"><a name="l01089"><\/a><span class="lineno"> 1089<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01090"><\/a><span class="lineno"> 1090<\/span>&#160;      <\/div><div class="line"><a name="l01091"><\/a><span class="lineno"> 1091<\/span>&#160;      <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01092"><\/a><span class="lineno"> 1092<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) v.<a class="code" href="classDBoW2_1_1BowVector.html#a3ac92a805b252c93dc6535240d02df47">addWeight<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01093"><\/a><span class="lineno"> 1093<\/span>&#160;    }<\/div><div class="line"><a name="l01094"><\/a><span class="lineno"> 1094<\/span>&#160;    <\/div><div class="line"><a name="l01095"><\/a><span class="lineno"> 1095<\/span>&#160;    <span class="keywordflow">if<\/span>(!v.empty() &amp;&amp; !must)<\/div><div class="line"><a name="l01096"><\/a><span class="lineno"> 1096<\/span>&#160;    {<\/div><div class="line"><a name="l01097"><\/a><span class="lineno"> 1097<\/span>&#160;      <span class="comment">\/\/ unnecessary when normalizing<\/span><\/div><div class="line"><a name="l01098"><\/a><span class="lineno"> 1098<\/span>&#160;      <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> nd = v.size();<\/div><div class="line"><a name="l01099"><\/a><span class="lineno"> 1099<\/span>&#160;      <span class="keywordflow">for<\/span>(BowVector::iterator vit = v.begin(); vit != v.end(); vit++) <\/div><div class="line"><a name="l01100"><\/a><span class="lineno"> 1100<\/span>&#160;        vit-&gt;second \/= nd;<\/div><div class="line"><a name="l01101"><\/a><span class="lineno"> 1101<\/span>&#160;    }<\/div><div class="line"><a name="l01102"><\/a><span class="lineno"> 1102<\/span>&#160;    <\/div><div class="line"><a name="l01103"><\/a><span class="lineno"> 1103<\/span>&#160;  }<\/div><div class="line"><a name="l01104"><\/a><span class="lineno"> 1104<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="comment">\/\/ IDF || BINARY<\/span><\/div><div class="line"><a name="l01105"><\/a><span class="lineno"> 1105<\/span>&#160;  {<\/div><div class="line"><a name="l01106"><\/a><span class="lineno"> 1106<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit)<\/div><div class="line"><a name="l01107"><\/a><span class="lineno"> 1107<\/span>&#160;    {<\/div><div class="line"><a name="l01108"><\/a><span class="lineno"> 1108<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01109"><\/a><span class="lineno"> 1109<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w;<\/div><div class="line"><a name="l01110"><\/a><span class="lineno"> 1110<\/span>&#160;      <span class="comment">\/\/ w is idf if IDF, or 1 if BINARY<\/span><\/div><div class="line"><a name="l01111"><\/a><span class="lineno"> 1111<\/span>&#160;      <\/div><div class="line"><a name="l01112"><\/a><span class="lineno"> 1112<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01113"><\/a><span class="lineno"> 1113<\/span>&#160;      <\/div><div class="line"><a name="l01114"><\/a><span class="lineno"> 1114<\/span>&#160;      <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01115"><\/a><span class="lineno"> 1115<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) v.<a class="code" href="classDBoW2_1_1BowVector.html#a5ddf10e444d10425e5bd3568dc7ffe5e">addIfNotExist<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01116"><\/a><span class="lineno"> 1116<\/span>&#160;      <\/div><div class="line"><a name="l01117"><\/a><span class="lineno"> 1117<\/span>&#160;    } <span class="comment">\/\/ if add_features<\/span><\/div><div class="line"><a name="l01118"><\/a><span class="lineno"> 1118<\/span>&#160;  } <span class="comment">\/\/ if m_weighting == ...<\/span><\/div><div class="line"><a name="l01119"><\/a><span class="lineno"> 1119<\/span>&#160;  <\/div><div class="line"><a name="l01120"><\/a><span class="lineno"> 1120<\/span>&#160;  <span class="keywordflow">if<\/span>(must) v.<a class="code" href="classDBoW2_1_1BowVector.html#acd2dd34023e3053a4cc75d70c8b6ac13">normalize<\/a>(norm);<\/div><div class="line"><a name="l01121"><\/a><span class="lineno"> 1121<\/span>&#160;}<\/div><div class="line"><a name="l01122"><\/a><span class="lineno"> 1122<\/span>&#160;<\/div><div class="line"><a name="l01123"><\/a><span class="lineno"> 1123<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01124"><\/a><span class="lineno"> 1124<\/span>&#160;<\/div><div class="line"><a name="l01125"><\/a><span class="lineno"> 1125<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l01126"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#acae97a5b78d9850a627d45cb05969041"> 1126<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a>(<\/div><div class="line"><a name="l01127"><\/a><span class="lineno"> 1127<\/span>&#160;  <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt;&amp; features,<\/div><div class="line"><a name="l01128"><\/a><span class="lineno"> 1128<\/span>&#160;  <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v, <a class="code" href="classDBoW2_1_1FeatureVector.html">FeatureVector<\/a> &amp;fv, <span class="keywordtype">int<\/span> levelsup)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01129"><\/a><span class="lineno"> 1129<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01130"><\/a><span class="lineno"> 1130<\/span>&#160;  v.clear();<\/div><div class="line"><a name="l01131"><\/a><span class="lineno"> 1131<\/span>&#160;  fv.clear();<\/div><div class="line"><a name="l01132"><\/a><span class="lineno"> 1132<\/span>&#160;  <\/div><div class="line"><a name="l01133"><\/a><span class="lineno"> 1133<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#ac897310f6a3475da1c0f0ef118b337d1">empty<\/a>()) <span class="comment">\/\/ safe for subclasses<\/span><\/div><div class="line"><a name="l01134"><\/a><span class="lineno"> 1134<\/span>&#160;  {<\/div><div class="line"><a name="l01135"><\/a><span class="lineno"> 1135<\/span>&#160;    <span class="keywordflow">return<\/span>;<\/div><div class="line"><a name="l01136"><\/a><span class="lineno"> 1136<\/span>&#160;  }<\/div><div class="line"><a name="l01137"><\/a><span class="lineno"> 1137<\/span>&#160;  <\/div><div class="line"><a name="l01138"><\/a><span class="lineno"> 1138<\/span>&#160;  <span class="comment">\/\/ normalize <\/span><\/div><div class="line"><a name="l01139"><\/a><span class="lineno"> 1139<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a53e9e0bcfc25c861815e413a7cf3fa51">LNorm<\/a> norm;<\/div><div class="line"><a name="l01140"><\/a><span class="lineno"> 1140<\/span>&#160;  <span class="keywordtype">bool<\/span> must = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>-&gt;<a class="code" href="classDBoW2_1_1GeneralScoring.html#ab0cadafd50b0f2f559f6325a6944f72f">mustNormalize<\/a>(norm);<\/div><div class="line"><a name="l01141"><\/a><span class="lineno"> 1141<\/span>&#160;  <\/div><div class="line"><a name="l01142"><\/a><span class="lineno"> 1142<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;TDescriptor&gt;::const_iterator fit;<\/div><div class="line"><a name="l01143"><\/a><span class="lineno"> 1143<\/span>&#160;  <\/div><div class="line"><a name="l01144"><\/a><span class="lineno"> 1144<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF || <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> == TF_IDF)<\/div><div class="line"><a name="l01145"><\/a><span class="lineno"> 1145<\/span>&#160;  {<\/div><div class="line"><a name="l01146"><\/a><span class="lineno"> 1146<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_feature = 0;<\/div><div class="line"><a name="l01147"><\/a><span class="lineno"> 1147<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit, ++i_feature)<\/div><div class="line"><a name="l01148"><\/a><span class="lineno"> 1148<\/span>&#160;    {<\/div><div class="line"><a name="l01149"><\/a><span class="lineno"> 1149<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01150"><\/a><span class="lineno"> 1150<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid;<\/div><div class="line"><a name="l01151"><\/a><span class="lineno"> 1151<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w; <\/div><div class="line"><a name="l01152"><\/a><span class="lineno"> 1152<\/span>&#160;      <span class="comment">\/\/ w is the idf value if TF_IDF, 1 if TF<\/span><\/div><div class="line"><a name="l01153"><\/a><span class="lineno"> 1153<\/span>&#160;      <\/div><div class="line"><a name="l01154"><\/a><span class="lineno"> 1154<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w, &amp;nid, levelsup);<\/div><div class="line"><a name="l01155"><\/a><span class="lineno"> 1155<\/span>&#160;      <\/div><div class="line"><a name="l01156"><\/a><span class="lineno"> 1156<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01157"><\/a><span class="lineno"> 1157<\/span>&#160;      { <\/div><div class="line"><a name="l01158"><\/a><span class="lineno"> 1158<\/span>&#160;        v.<a class="code" href="classDBoW2_1_1BowVector.html#a3ac92a805b252c93dc6535240d02df47">addWeight<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01159"><\/a><span class="lineno"> 1159<\/span>&#160;        fv.<a class="code" href="classDBoW2_1_1FeatureVector.html#ae9554bfcbebc85439616de08f47f2238">addFeature<\/a>(nid, i_feature);<\/div><div class="line"><a name="l01160"><\/a><span class="lineno"> 1160<\/span>&#160;      }<\/div><div class="line"><a name="l01161"><\/a><span class="lineno"> 1161<\/span>&#160;    }<\/div><div class="line"><a name="l01162"><\/a><span class="lineno"> 1162<\/span>&#160;    <\/div><div class="line"><a name="l01163"><\/a><span class="lineno"> 1163<\/span>&#160;    <span class="keywordflow">if<\/span>(!v.empty() &amp;&amp; !must)<\/div><div class="line"><a name="l01164"><\/a><span class="lineno"> 1164<\/span>&#160;    {<\/div><div class="line"><a name="l01165"><\/a><span class="lineno"> 1165<\/span>&#160;      <span class="comment">\/\/ unnecessary when normalizing<\/span><\/div><div class="line"><a name="l01166"><\/a><span class="lineno"> 1166<\/span>&#160;      <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> nd = v.size();<\/div><div class="line"><a name="l01167"><\/a><span class="lineno"> 1167<\/span>&#160;      <span class="keywordflow">for<\/span>(BowVector::iterator vit = v.begin(); vit != v.end(); vit++) <\/div><div class="line"><a name="l01168"><\/a><span class="lineno"> 1168<\/span>&#160;        vit-&gt;second \/= nd;<\/div><div class="line"><a name="l01169"><\/a><span class="lineno"> 1169<\/span>&#160;    }<\/div><div class="line"><a name="l01170"><\/a><span class="lineno"> 1170<\/span>&#160;  <\/div><div class="line"><a name="l01171"><\/a><span class="lineno"> 1171<\/span>&#160;  }<\/div><div class="line"><a name="l01172"><\/a><span class="lineno"> 1172<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="comment">\/\/ IDF || BINARY<\/span><\/div><div class="line"><a name="l01173"><\/a><span class="lineno"> 1173<\/span>&#160;  {<\/div><div class="line"><a name="l01174"><\/a><span class="lineno"> 1174<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i_feature = 0;<\/div><div class="line"><a name="l01175"><\/a><span class="lineno"> 1175<\/span>&#160;    <span class="keywordflow">for<\/span>(fit = features.begin(); fit &lt; features.end(); ++fit, ++i_feature)<\/div><div class="line"><a name="l01176"><\/a><span class="lineno"> 1176<\/span>&#160;    {<\/div><div class="line"><a name="l01177"><\/a><span class="lineno"> 1177<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> id;<\/div><div class="line"><a name="l01178"><\/a><span class="lineno"> 1178<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid;<\/div><div class="line"><a name="l01179"><\/a><span class="lineno"> 1179<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> w;<\/div><div class="line"><a name="l01180"><\/a><span class="lineno"> 1180<\/span>&#160;      <span class="comment">\/\/ w is idf if IDF, or 1 if BINARY<\/span><\/div><div class="line"><a name="l01181"><\/a><span class="lineno"> 1181<\/span>&#160;      <\/div><div class="line"><a name="l01182"><\/a><span class="lineno"> 1182<\/span>&#160;      <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(*fit, <span class="keywordtype">id<\/span>, w, &amp;nid, levelsup);<\/div><div class="line"><a name="l01183"><\/a><span class="lineno"> 1183<\/span>&#160;      <\/div><div class="line"><a name="l01184"><\/a><span class="lineno"> 1184<\/span>&#160;      <span class="keywordflow">if<\/span>(w &gt; 0) <span class="comment">\/\/ not stopped<\/span><\/div><div class="line"><a name="l01185"><\/a><span class="lineno"> 1185<\/span>&#160;      {<\/div><div class="line"><a name="l01186"><\/a><span class="lineno"> 1186<\/span>&#160;        v.<a class="code" href="classDBoW2_1_1BowVector.html#a5ddf10e444d10425e5bd3568dc7ffe5e">addIfNotExist<\/a>(<span class="keywordtype">id<\/span>, w);<\/div><div class="line"><a name="l01187"><\/a><span class="lineno"> 1187<\/span>&#160;        fv.<a class="code" href="classDBoW2_1_1FeatureVector.html#ae9554bfcbebc85439616de08f47f2238">addFeature<\/a>(nid, i_feature);<\/div><div class="line"><a name="l01188"><\/a><span class="lineno"> 1188<\/span>&#160;      }<\/div><div class="line"><a name="l01189"><\/a><span class="lineno"> 1189<\/span>&#160;    }<\/div><div class="line"><a name="l01190"><\/a><span class="lineno"> 1190<\/span>&#160;  } <span class="comment">\/\/ if m_weighting == ...<\/span><\/div><div class="line"><a name="l01191"><\/a><span class="lineno"> 1191<\/span>&#160;  <\/div><div class="line"><a name="l01192"><\/a><span class="lineno"> 1192<\/span>&#160;  <span class="keywordflow">if<\/span>(must) v.<a class="code" href="classDBoW2_1_1BowVector.html#acd2dd34023e3053a4cc75d70c8b6ac13">normalize<\/a>(norm);<\/div><div class="line"><a name="l01193"><\/a><span class="lineno"> 1193<\/span>&#160;}<\/div><div class="line"><a name="l01194"><\/a><span class="lineno"> 1194<\/span>&#160;<\/div><div class="line"><a name="l01195"><\/a><span class="lineno"> 1195<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01196"><\/a><span class="lineno"> 1196<\/span>&#160;<\/div><div class="line"><a name="l01197"><\/a><span class="lineno"> 1197<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt; <\/div><div class="line"><a name="l01198"><\/a><span class="lineno"> 1198<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9">TemplatedVocabulary&lt;TDescriptor,F&gt;::score<\/a><\/div><div class="line"><a name="l01199"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9"> 1199<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v1, <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1BowVector.html">BowVector<\/a> &amp;v2) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01200"><\/a><span class="lineno"> 1200<\/span>&#160;{<\/div><div class="line"><a name="l01201"><\/a><span class="lineno"> 1201<\/span>&#160;  <span class="keywordflow">return<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a34144d0e2056d6ed8b925a2937b67418">m_scoring_object<\/a>-&gt;<a class="code" href="classDBoW2_1_1GeneralScoring.html#a43b3f5fedb19e6a19e17b9813efd17e8">score<\/a>(v1, v2);<\/div><div class="line"><a name="l01202"><\/a><span class="lineno"> 1202<\/span>&#160;}<\/div><div class="line"><a name="l01203"><\/a><span class="lineno"> 1203<\/span>&#160;<\/div><div class="line"><a name="l01204"><\/a><span class="lineno"> 1204<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01205"><\/a><span class="lineno"> 1205<\/span>&#160;<\/div><div class="line"><a name="l01206"><\/a><span class="lineno"> 1206<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01207"><\/a><span class="lineno"> 1207<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a><\/div><div class="line"><a name="l01208"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a4369ffc35f61467b0987a89fcc5a7224"> 1208<\/a><\/span>&#160;  (<span class="keyword">const<\/span> TDescriptor &amp;feature, <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;<span class="keywordtype">id<\/span>) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01209"><\/a><span class="lineno"> 1209<\/span>&#160;{<\/div><div class="line"><a name="l01210"><\/a><span class="lineno"> 1210<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> weight;<\/div><div class="line"><a name="l01211"><\/a><span class="lineno"> 1211<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">transform<\/a>(feature, <span class="keywordtype">id<\/span>, weight);<\/div><div class="line"><a name="l01212"><\/a><span class="lineno"> 1212<\/span>&#160;}<\/div><div class="line"><a name="l01213"><\/a><span class="lineno"> 1213<\/span>&#160;<\/div><div class="line"><a name="l01214"><\/a><span class="lineno"> 1214<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01215"><\/a><span class="lineno"> 1215<\/span>&#160;<\/div><div class="line"><a name="l01216"><\/a><span class="lineno"> 1216<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01217"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a41e77294037788a9b2744f89ac64ecea"> 1217<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af9fc1935403dcaf1fd8c44d96ae3328d">TemplatedVocabulary&lt;TDescriptor,F&gt;::transform<\/a>(<span class="keyword">const<\/span> TDescriptor &amp;feature, <\/div><div class="line"><a name="l01218"><\/a><span class="lineno"> 1218<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> &amp;word_id, <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> &amp;weight, <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> *nid, <span class="keywordtype">int<\/span> levelsup)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01219"><\/a><span class="lineno"> 1219<\/span>&#160;<span class="keyword"><\/span>{ <\/div><div class="line"><a name="l01220"><\/a><span class="lineno"> 1220<\/span>&#160;  <span class="comment">\/\/ propagate the feature down the tree<\/span><\/div><div class="line"><a name="l01221"><\/a><span class="lineno"> 1221<\/span>&#160;  std::vector&lt;NodeId&gt; nodes;<\/div><div class="line"><a name="l01222"><\/a><span class="lineno"> 1222<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;NodeId&gt;::const_iterator nit;<\/div><div class="line"><a name="l01223"><\/a><span class="lineno"> 1223<\/span>&#160;<\/div><div class="line"><a name="l01224"><\/a><span class="lineno"> 1224<\/span>&#160;  <span class="comment">\/\/ level at which the node must be stored in nid, if given<\/span><\/div><div class="line"><a name="l01225"><\/a><span class="lineno"> 1225<\/span>&#160;  <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> nid_level = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> - levelsup;<\/div><div class="line"><a name="l01226"><\/a><span class="lineno"> 1226<\/span>&#160;  <span class="keywordflow">if<\/span>(nid_level &lt;= 0 &amp;&amp; nid != NULL) *nid = 0; <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l01227"><\/a><span class="lineno"> 1227<\/span>&#160;<\/div><div class="line"><a name="l01228"><\/a><span class="lineno"> 1228<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> final_id = 0; <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l01229"><\/a><span class="lineno"> 1229<\/span>&#160;  <span class="keywordtype">int<\/span> current_level = 0;<\/div><div class="line"><a name="l01230"><\/a><span class="lineno"> 1230<\/span>&#160;<\/div><div class="line"><a name="l01231"><\/a><span class="lineno"> 1231<\/span>&#160;  <span class="keywordflow">do<\/span><\/div><div class="line"><a name="l01232"><\/a><span class="lineno"> 1232<\/span>&#160;  {<\/div><div class="line"><a name="l01233"><\/a><span class="lineno"> 1233<\/span>&#160;    ++current_level;<\/div><div class="line"><a name="l01234"><\/a><span class="lineno"> 1234<\/span>&#160;    nodes = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].children;<\/div><div class="line"><a name="l01235"><\/a><span class="lineno"> 1235<\/span>&#160;    final_id = nodes[0];<\/div><div class="line"><a name="l01236"><\/a><span class="lineno"> 1236<\/span>&#160; <\/div><div class="line"><a name="l01237"><\/a><span class="lineno"> 1237<\/span>&#160;    <span class="keywordtype">double<\/span> best_d = F::distance(feature, <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].descriptor);<\/div><div class="line"><a name="l01238"><\/a><span class="lineno"> 1238<\/span>&#160;<\/div><div class="line"><a name="l01239"><\/a><span class="lineno"> 1239<\/span>&#160;    <span class="keywordflow">for<\/span>(nit = nodes.begin() + 1; nit != nodes.end(); ++nit)<\/div><div class="line"><a name="l01240"><\/a><span class="lineno"> 1240<\/span>&#160;    {<\/div><div class="line"><a name="l01241"><\/a><span class="lineno"> 1241<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <span class="keywordtype">id<\/span> = *nit;<\/div><div class="line"><a name="l01242"><\/a><span class="lineno"> 1242<\/span>&#160;      <span class="keywordtype">double<\/span> d = F::distance(feature, <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[<span class="keywordtype">id<\/span>].descriptor);<\/div><div class="line"><a name="l01243"><\/a><span class="lineno"> 1243<\/span>&#160;      <span class="keywordflow">if<\/span>(d &lt; best_d)<\/div><div class="line"><a name="l01244"><\/a><span class="lineno"> 1244<\/span>&#160;      {<\/div><div class="line"><a name="l01245"><\/a><span class="lineno"> 1245<\/span>&#160;        best_d = d;<\/div><div class="line"><a name="l01246"><\/a><span class="lineno"> 1246<\/span>&#160;        final_id = id;<\/div><div class="line"><a name="l01247"><\/a><span class="lineno"> 1247<\/span>&#160;      }<\/div><div class="line"><a name="l01248"><\/a><span class="lineno"> 1248<\/span>&#160;    }<\/div><div class="line"><a name="l01249"><\/a><span class="lineno"> 1249<\/span>&#160;    <\/div><div class="line"><a name="l01250"><\/a><span class="lineno"> 1250<\/span>&#160;    <span class="keywordflow">if<\/span>(nid != NULL &amp;&amp; current_level == nid_level)<\/div><div class="line"><a name="l01251"><\/a><span class="lineno"> 1251<\/span>&#160;      *nid = final_id;<\/div><div class="line"><a name="l01252"><\/a><span class="lineno"> 1252<\/span>&#160;    <\/div><div class="line"><a name="l01253"><\/a><span class="lineno"> 1253<\/span>&#160;  } <span class="keywordflow">while<\/span>( !<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].isLeaf() );<\/div><div class="line"><a name="l01254"><\/a><span class="lineno"> 1254<\/span>&#160;<\/div><div class="line"><a name="l01255"><\/a><span class="lineno"> 1255<\/span>&#160;  <span class="comment">\/\/ turn node id into word id<\/span><\/div><div class="line"><a name="l01256"><\/a><span class="lineno"> 1256<\/span>&#160;  word_id = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].word_id;<\/div><div class="line"><a name="l01257"><\/a><span class="lineno"> 1257<\/span>&#160;  weight = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[final_id].weight;<\/div><div class="line"><a name="l01258"><\/a><span class="lineno"> 1258<\/span>&#160;}<\/div><div class="line"><a name="l01259"><\/a><span class="lineno"> 1259<\/span>&#160;<\/div><div class="line"><a name="l01260"><\/a><span class="lineno"> 1260<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01261"><\/a><span class="lineno"> 1261<\/span>&#160;<\/div><div class="line"><a name="l01262"><\/a><span class="lineno"> 1262<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01263"><\/a><span class="lineno"> 1263<\/span>&#160;<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa59e9b47d05bce5ecd4e90afbcd63727">TemplatedVocabulary&lt;TDescriptor,F&gt;::getParentNode<\/a><\/div><div class="line"><a name="l01264"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#aa59e9b47d05bce5ecd4e90afbcd63727"> 1264<\/a><\/span>&#160;  (<a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> wid, <span class="keywordtype">int<\/span> levelsup) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01265"><\/a><span class="lineno"> 1265<\/span>&#160;{<\/div><div class="line"><a name="l01266"><\/a><span class="lineno"> 1266<\/span>&#160;  <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> ret = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid]-&gt;id; <span class="comment">\/\/ node id<\/span><\/div><div class="line"><a name="l01267"><\/a><span class="lineno"> 1267<\/span>&#160;  <span class="keywordflow">while<\/span>(levelsup &gt; 0 &amp;&amp; ret != 0) <span class="comment">\/\/ ret == 0 --&gt; root<\/span><\/div><div class="line"><a name="l01268"><\/a><span class="lineno"> 1268<\/span>&#160;  {<\/div><div class="line"><a name="l01269"><\/a><span class="lineno"> 1269<\/span>&#160;    --levelsup;<\/div><div class="line"><a name="l01270"><\/a><span class="lineno"> 1270<\/span>&#160;    ret = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[ret].parent;<\/div><div class="line"><a name="l01271"><\/a><span class="lineno"> 1271<\/span>&#160;  }<\/div><div class="line"><a name="l01272"><\/a><span class="lineno"> 1272<\/span>&#160;  <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l01273"><\/a><span class="lineno"> 1273<\/span>&#160;}<\/div><div class="line"><a name="l01274"><\/a><span class="lineno"> 1274<\/span>&#160;<\/div><div class="line"><a name="l01275"><\/a><span class="lineno"> 1275<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01276"><\/a><span class="lineno"> 1276<\/span>&#160;<\/div><div class="line"><a name="l01277"><\/a><span class="lineno"> 1277<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01278"><\/a><span class="lineno"> 1278<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a916015cc8e6cd6f53c6e067c7b829f75">TemplatedVocabulary&lt;TDescriptor,F&gt;::getWordsFromNode<\/a><\/div><div class="line"><a name="l01279"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a916015cc8e6cd6f53c6e067c7b829f75"> 1279<\/a><\/span>&#160;  (<a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid, std::vector&lt;WordId&gt; &amp;words) <span class="keyword">const<\/span><\/div><div class="line"><a name="l01280"><\/a><span class="lineno"> 1280<\/span>&#160;{<\/div><div class="line"><a name="l01281"><\/a><span class="lineno"> 1281<\/span>&#160;  words.clear();<\/div><div class="line"><a name="l01282"><\/a><span class="lineno"> 1282<\/span>&#160;  <\/div><div class="line"><a name="l01283"><\/a><span class="lineno"> 1283<\/span>&#160;  <span class="keywordflow">if<\/span>(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].isLeaf())<\/div><div class="line"><a name="l01284"><\/a><span class="lineno"> 1284<\/span>&#160;  {<\/div><div class="line"><a name="l01285"><\/a><span class="lineno"> 1285<\/span>&#160;    words.push_back(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].word_id);<\/div><div class="line"><a name="l01286"><\/a><span class="lineno"> 1286<\/span>&#160;  }<\/div><div class="line"><a name="l01287"><\/a><span class="lineno"> 1287<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01288"><\/a><span class="lineno"> 1288<\/span>&#160;  {<\/div><div class="line"><a name="l01289"><\/a><span class="lineno"> 1289<\/span>&#160;    words.reserve(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>); <span class="comment">\/\/ ^1, ^2, ...<\/span><\/div><div class="line"><a name="l01290"><\/a><span class="lineno"> 1290<\/span>&#160;    <\/div><div class="line"><a name="l01291"><\/a><span class="lineno"> 1291<\/span>&#160;    std::vector&lt;NodeId&gt; parents;<\/div><div class="line"><a name="l01292"><\/a><span class="lineno"> 1292<\/span>&#160;    parents.push_back(nid);<\/div><div class="line"><a name="l01293"><\/a><span class="lineno"> 1293<\/span>&#160;    <\/div><div class="line"><a name="l01294"><\/a><span class="lineno"> 1294<\/span>&#160;    <span class="keywordflow">while<\/span>(!parents.empty())<\/div><div class="line"><a name="l01295"><\/a><span class="lineno"> 1295<\/span>&#160;    {<\/div><div class="line"><a name="l01296"><\/a><span class="lineno"> 1296<\/span>&#160;      <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> parentid = parents.back();<\/div><div class="line"><a name="l01297"><\/a><span class="lineno"> 1297<\/span>&#160;      parents.pop_back();<\/div><div class="line"><a name="l01298"><\/a><span class="lineno"> 1298<\/span>&#160;      <\/div><div class="line"><a name="l01299"><\/a><span class="lineno"> 1299<\/span>&#160;      <span class="keyword">const<\/span> std::vector&lt;NodeId&gt; &amp;child_ids = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[parentid].children;<\/div><div class="line"><a name="l01300"><\/a><span class="lineno"> 1300<\/span>&#160;      std::vector&lt;NodeId&gt;::const_iterator cit;<\/div><div class="line"><a name="l01301"><\/a><span class="lineno"> 1301<\/span>&#160;      <\/div><div class="line"><a name="l01302"><\/a><span class="lineno"> 1302<\/span>&#160;      <span class="keywordflow">for<\/span>(cit = child_ids.begin(); cit != child_ids.end(); ++cit)<\/div><div class="line"><a name="l01303"><\/a><span class="lineno"> 1303<\/span>&#160;      {<\/div><div class="line"><a name="l01304"><\/a><span class="lineno"> 1304<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a> &amp;child_node = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[*cit];<\/div><div class="line"><a name="l01305"><\/a><span class="lineno"> 1305<\/span>&#160;        <\/div><div class="line"><a name="l01306"><\/a><span class="lineno"> 1306<\/span>&#160;        <span class="keywordflow">if<\/span>(child_node.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">isLeaf<\/a>())<\/div><div class="line"><a name="l01307"><\/a><span class="lineno"> 1307<\/span>&#160;          words.push_back(child_node.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#aa56418d848932be4583fac6b3021c708">word_id<\/a>);<\/div><div class="line"><a name="l01308"><\/a><span class="lineno"> 1308<\/span>&#160;        <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l01309"><\/a><span class="lineno"> 1309<\/span>&#160;          parents.push_back(*cit);<\/div><div class="line"><a name="l01310"><\/a><span class="lineno"> 1310<\/span>&#160;        <\/div><div class="line"><a name="l01311"><\/a><span class="lineno"> 1311<\/span>&#160;      } <span class="comment">\/\/ for each child<\/span><\/div><div class="line"><a name="l01312"><\/a><span class="lineno"> 1312<\/span>&#160;    } <span class="comment">\/\/ while !parents.empty<\/span><\/div><div class="line"><a name="l01313"><\/a><span class="lineno"> 1313<\/span>&#160;  }<\/div><div class="line"><a name="l01314"><\/a><span class="lineno"> 1314<\/span>&#160;}<\/div><div class="line"><a name="l01315"><\/a><span class="lineno"> 1315<\/span>&#160;<\/div><div class="line"><a name="l01316"><\/a><span class="lineno"> 1316<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01317"><\/a><span class="lineno"> 1317<\/span>&#160;<\/div><div class="line"><a name="l01318"><\/a><span class="lineno"> 1318<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01319"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a0b6721fde54bd8cd008f6a120398741e"> 1319<\/a><\/span>&#160;<span class="keywordtype">int<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a0b6721fde54bd8cd008f6a120398741e">TemplatedVocabulary&lt;TDescriptor,F&gt;::stopWords<\/a>(<span class="keywordtype">double<\/span> minWeight)<\/div><div class="line"><a name="l01320"><\/a><span class="lineno"> 1320<\/span>&#160;{<\/div><div class="line"><a name="l01321"><\/a><span class="lineno"> 1321<\/span>&#160;  <span class="keywordtype">int<\/span> c = 0;<\/div><div class="line"><a name="l01322"><\/a><span class="lineno"> 1322<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;Node*&gt;::iterator wit;<\/div><div class="line"><a name="l01323"><\/a><span class="lineno"> 1323<\/span>&#160;  <span class="keywordflow">for<\/span>(wit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin(); wit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.end(); ++wit)<\/div><div class="line"><a name="l01324"><\/a><span class="lineno"> 1324<\/span>&#160;  {<\/div><div class="line"><a name="l01325"><\/a><span class="lineno"> 1325<\/span>&#160;    <span class="keywordflow">if<\/span>((*wit)-&gt;weight &lt; minWeight)<\/div><div class="line"><a name="l01326"><\/a><span class="lineno"> 1326<\/span>&#160;    {<\/div><div class="line"><a name="l01327"><\/a><span class="lineno"> 1327<\/span>&#160;      ++c;<\/div><div class="line"><a name="l01328"><\/a><span class="lineno"> 1328<\/span>&#160;      (*wit)-&gt;weight = 0;<\/div><div class="line"><a name="l01329"><\/a><span class="lineno"> 1329<\/span>&#160;    }<\/div><div class="line"><a name="l01330"><\/a><span class="lineno"> 1330<\/span>&#160;  }<\/div><div class="line"><a name="l01331"><\/a><span class="lineno"> 1331<\/span>&#160;  <span class="keywordflow">return<\/span> c;<\/div><div class="line"><a name="l01332"><\/a><span class="lineno"> 1332<\/span>&#160;}<\/div><div class="line"><a name="l01333"><\/a><span class="lineno"> 1333<\/span>&#160;<\/div><div class="line"><a name="l01334"><\/a><span class="lineno"> 1334<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01335"><\/a><span class="lineno"> 1335<\/span>&#160;<\/div><div class="line"><a name="l01336"><\/a><span class="lineno"> 1336<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01337"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d"> 1337<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">TemplatedVocabulary&lt;TDescriptor,F&gt;::save<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01338"><\/a><span class="lineno"> 1338<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01339"><\/a><span class="lineno"> 1339<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::WRITE);<\/div><div class="line"><a name="l01340"><\/a><span class="lineno"> 1340<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01341"><\/a><span class="lineno"> 1341<\/span>&#160;  <\/div><div class="line"><a name="l01342"><\/a><span class="lineno"> 1342<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">save<\/a>(fs);<\/div><div class="line"><a name="l01343"><\/a><span class="lineno"> 1343<\/span>&#160;}<\/div><div class="line"><a name="l01344"><\/a><span class="lineno"> 1344<\/span>&#160;<\/div><div class="line"><a name="l01345"><\/a><span class="lineno"> 1345<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01346"><\/a><span class="lineno"> 1346<\/span>&#160;<\/div><div class="line"><a name="l01347"><\/a><span class="lineno"> 1347<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01348"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0"> 1348<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">TemplatedVocabulary&lt;TDescriptor,F&gt;::load<\/a>(<span class="keyword">const<\/span> std::string &amp;filename)<\/div><div class="line"><a name="l01349"><\/a><span class="lineno"> 1349<\/span>&#160;{<\/div><div class="line"><a name="l01350"><\/a><span class="lineno"> 1350<\/span>&#160;  cv::FileStorage fs(filename.c_str(), cv::FileStorage::READ);<\/div><div class="line"><a name="l01351"><\/a><span class="lineno"> 1351<\/span>&#160;  <span class="keywordflow">if<\/span>(!fs.isOpened()) <span class="keywordflow">throw<\/span> std::string(<span class="stringliteral">&quot;Could not open file &quot;<\/span>) + filename;<\/div><div class="line"><a name="l01352"><\/a><span class="lineno"> 1352<\/span>&#160;  <\/div><div class="line"><a name="l01353"><\/a><span class="lineno"> 1353<\/span>&#160;  this-&gt;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">load<\/a>(fs);<\/div><div class="line"><a name="l01354"><\/a><span class="lineno"> 1354<\/span>&#160;}<\/div><div class="line"><a name="l01355"><\/a><span class="lineno"> 1355<\/span>&#160;<\/div><div class="line"><a name="l01356"><\/a><span class="lineno"> 1356<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01357"><\/a><span class="lineno"> 1357<\/span>&#160;<\/div><div class="line"><a name="l01358"><\/a><span class="lineno"> 1358<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01359"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a19159c3993fce7b4573a6de208b4a973"> 1359<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#af85fb30a5eb9e00ceeea9a4f3c178f1d">TemplatedVocabulary&lt;TDescriptor,F&gt;::save<\/a>(cv::FileStorage &amp;f,<\/div><div class="line"><a name="l01360"><\/a><span class="lineno"> 1360<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l01361"><\/a><span class="lineno"> 1361<\/span>&#160;<span class="keyword"><\/span>{<\/div><div class="line"><a name="l01362"><\/a><span class="lineno"> 1362<\/span>&#160;  <span class="comment">\/\/ Format YAML:<\/span><\/div><div class="line"><a name="l01363"><\/a><span class="lineno"> 1363<\/span>&#160;  <span class="comment">\/\/ vocabulary <\/span><\/div><div class="line"><a name="l01364"><\/a><span class="lineno"> 1364<\/span>&#160;  <span class="comment">\/\/ {<\/span><\/div><div class="line"><a name="l01365"><\/a><span class="lineno"> 1365<\/span>&#160;  <span class="comment">\/\/   k:<\/span><\/div><div class="line"><a name="l01366"><\/a><span class="lineno"> 1366<\/span>&#160;  <span class="comment">\/\/   L:<\/span><\/div><div class="line"><a name="l01367"><\/a><span class="lineno"> 1367<\/span>&#160;  <span class="comment">\/\/   scoringType:<\/span><\/div><div class="line"><a name="l01368"><\/a><span class="lineno"> 1368<\/span>&#160;  <span class="comment">\/\/   weightingType:<\/span><\/div><div class="line"><a name="l01369"><\/a><span class="lineno"> 1369<\/span>&#160;  <span class="comment">\/\/   nodes <\/span><\/div><div class="line"><a name="l01370"><\/a><span class="lineno"> 1370<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01371"><\/a><span class="lineno"> 1371<\/span>&#160;  <span class="comment">\/\/     {<\/span><\/div><div class="line"><a name="l01372"><\/a><span class="lineno"> 1372<\/span>&#160;  <span class="comment">\/\/       nodeId:<\/span><\/div><div class="line"><a name="l01373"><\/a><span class="lineno"> 1373<\/span>&#160;  <span class="comment">\/\/       parentId:<\/span><\/div><div class="line"><a name="l01374"><\/a><span class="lineno"> 1374<\/span>&#160;  <span class="comment">\/\/       weight:<\/span><\/div><div class="line"><a name="l01375"><\/a><span class="lineno"> 1375<\/span>&#160;  <span class="comment">\/\/       descriptor: <\/span><\/div><div class="line"><a name="l01376"><\/a><span class="lineno"> 1376<\/span>&#160;  <span class="comment">\/\/     }<\/span><\/div><div class="line"><a name="l01377"><\/a><span class="lineno"> 1377<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01378"><\/a><span class="lineno"> 1378<\/span>&#160;  <span class="comment">\/\/   words<\/span><\/div><div class="line"><a name="l01379"><\/a><span class="lineno"> 1379<\/span>&#160;  <span class="comment">\/\/   [<\/span><\/div><div class="line"><a name="l01380"><\/a><span class="lineno"> 1380<\/span>&#160;  <span class="comment">\/\/     {<\/span><\/div><div class="line"><a name="l01381"><\/a><span class="lineno"> 1381<\/span>&#160;  <span class="comment">\/\/       wordId:<\/span><\/div><div class="line"><a name="l01382"><\/a><span class="lineno"> 1382<\/span>&#160;  <span class="comment">\/\/       nodeId:<\/span><\/div><div class="line"><a name="l01383"><\/a><span class="lineno"> 1383<\/span>&#160;  <span class="comment">\/\/     }<\/span><\/div><div class="line"><a name="l01384"><\/a><span class="lineno"> 1384<\/span>&#160;  <span class="comment">\/\/   ]<\/span><\/div><div class="line"><a name="l01385"><\/a><span class="lineno"> 1385<\/span>&#160;  <span class="comment">\/\/ }<\/span><\/div><div class="line"><a name="l01386"><\/a><span class="lineno"> 1386<\/span>&#160;  <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l01387"><\/a><span class="lineno"> 1387<\/span>&#160;  <span class="comment">\/\/ The root node (index 0) is not included in the node vector<\/span><\/div><div class="line"><a name="l01388"><\/a><span class="lineno"> 1388<\/span>&#160;  <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l01389"><\/a><span class="lineno"> 1389<\/span>&#160;  <\/div><div class="line"><a name="l01390"><\/a><span class="lineno"> 1390<\/span>&#160;  f &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;{&quot;<\/span>;<\/div><div class="line"><a name="l01391"><\/a><span class="lineno"> 1391<\/span>&#160;  <\/div><div class="line"><a name="l01392"><\/a><span class="lineno"> 1392<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;k&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a>;<\/div><div class="line"><a name="l01393"><\/a><span class="lineno"> 1393<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;L&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a>;<\/div><div class="line"><a name="l01394"><\/a><span class="lineno"> 1394<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;scoringType&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a>;<\/div><div class="line"><a name="l01395"><\/a><span class="lineno"> 1395<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;weightingType&quot;<\/span> &lt;&lt; <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a>;<\/div><div class="line"><a name="l01396"><\/a><span class="lineno"> 1396<\/span>&#160;  <\/div><div class="line"><a name="l01397"><\/a><span class="lineno"> 1397<\/span>&#160;  <span class="comment">\/\/ tree<\/span><\/div><div class="line"><a name="l01398"><\/a><span class="lineno"> 1398<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;nodes&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01399"><\/a><span class="lineno"> 1399<\/span>&#160;  std::vector&lt;NodeId&gt; parents, children;<\/div><div class="line"><a name="l01400"><\/a><span class="lineno"> 1400<\/span>&#160;  std::vector&lt;NodeId&gt;::const_iterator pit;<\/div><div class="line"><a name="l01401"><\/a><span class="lineno"> 1401<\/span>&#160;<\/div><div class="line"><a name="l01402"><\/a><span class="lineno"> 1402<\/span>&#160;  parents.push_back(0); <span class="comment">\/\/ root<\/span><\/div><div class="line"><a name="l01403"><\/a><span class="lineno"> 1403<\/span>&#160;<\/div><div class="line"><a name="l01404"><\/a><span class="lineno"> 1404<\/span>&#160;  <span class="keywordflow">while<\/span>(!parents.empty())<\/div><div class="line"><a name="l01405"><\/a><span class="lineno"> 1405<\/span>&#160;  {<\/div><div class="line"><a name="l01406"><\/a><span class="lineno"> 1406<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> pid = parents.back();<\/div><div class="line"><a name="l01407"><\/a><span class="lineno"> 1407<\/span>&#160;    parents.pop_back();<\/div><div class="line"><a name="l01408"><\/a><span class="lineno"> 1408<\/span>&#160;<\/div><div class="line"><a name="l01409"><\/a><span class="lineno"> 1409<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>&amp; parent = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[pid];<\/div><div class="line"><a name="l01410"><\/a><span class="lineno"> 1410<\/span>&#160;    children = parent.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a54acc0958e378306cc03f20a186c1fdc">children<\/a>;<\/div><div class="line"><a name="l01411"><\/a><span class="lineno"> 1411<\/span>&#160;<\/div><div class="line"><a name="l01412"><\/a><span class="lineno"> 1412<\/span>&#160;    <span class="keywordflow">for<\/span>(pit = children.begin(); pit != children.end(); pit++)<\/div><div class="line"><a name="l01413"><\/a><span class="lineno"> 1413<\/span>&#160;    {<\/div><div class="line"><a name="l01414"><\/a><span class="lineno"> 1414<\/span>&#160;      <span class="keyword">const<\/span> <a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html">Node<\/a>&amp; child = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[*pit];<\/div><div class="line"><a name="l01415"><\/a><span class="lineno"> 1415<\/span>&#160;<\/div><div class="line"><a name="l01416"><\/a><span class="lineno"> 1416<\/span>&#160;      <span class="comment">\/\/ save node data<\/span><\/div><div class="line"><a name="l01417"><\/a><span class="lineno"> 1417<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;{:&quot;<\/span>;<\/div><div class="line"><a name="l01418"><\/a><span class="lineno"> 1418<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;nodeId&quot;<\/span> &lt;&lt; (int)child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a62fb0c85332741c114110463252c64e9">id<\/a>;<\/div><div class="line"><a name="l01419"><\/a><span class="lineno"> 1419<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;parentId&quot;<\/span> &lt;&lt; (<span class="keywordtype">int<\/span>)pid;<\/div><div class="line"><a name="l01420"><\/a><span class="lineno"> 1420<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;weight&quot;<\/span> &lt;&lt; (double)child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ae1e261135cb7af400f1c4c4795cdba41">weight<\/a>;<\/div><div class="line"><a name="l01421"><\/a><span class="lineno"> 1421<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;descriptor&quot;<\/span> &lt;&lt; F::toString(child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#ab785e994eeae8e6c1d67ee45ad4c8450">descriptor<\/a>);<\/div><div class="line"><a name="l01422"><\/a><span class="lineno"> 1422<\/span>&#160;      f &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01423"><\/a><span class="lineno"> 1423<\/span>&#160;      <\/div><div class="line"><a name="l01424"><\/a><span class="lineno"> 1424<\/span>&#160;      <span class="comment">\/\/ add to parent list<\/span><\/div><div class="line"><a name="l01425"><\/a><span class="lineno"> 1425<\/span>&#160;      <span class="keywordflow">if<\/span>(!child.<a class="code" href="structDBoW2_1_1TemplatedVocabulary_1_1Node.html#a163e5d59292f2cf694b67089b37f79be">isLeaf<\/a>())<\/div><div class="line"><a name="l01426"><\/a><span class="lineno"> 1426<\/span>&#160;      {<\/div><div class="line"><a name="l01427"><\/a><span class="lineno"> 1427<\/span>&#160;        parents.push_back(*pit);<\/div><div class="line"><a name="l01428"><\/a><span class="lineno"> 1428<\/span>&#160;      }<\/div><div class="line"><a name="l01429"><\/a><span class="lineno"> 1429<\/span>&#160;    }<\/div><div class="line"><a name="l01430"><\/a><span class="lineno"> 1430<\/span>&#160;  }<\/div><div class="line"><a name="l01431"><\/a><span class="lineno"> 1431<\/span>&#160;  <\/div><div class="line"><a name="l01432"><\/a><span class="lineno"> 1432<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ nodes<\/span><\/div><div class="line"><a name="l01433"><\/a><span class="lineno"> 1433<\/span>&#160;<\/div><div class="line"><a name="l01434"><\/a><span class="lineno"> 1434<\/span>&#160;  <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01435"><\/a><span class="lineno"> 1435<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;words&quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div><div class="line"><a name="l01436"><\/a><span class="lineno"> 1436<\/span>&#160;  <\/div><div class="line"><a name="l01437"><\/a><span class="lineno"> 1437<\/span>&#160;  <span class="keyword">typename<\/span> std::vector&lt;Node*&gt;::const_iterator wit;<\/div><div class="line"><a name="l01438"><\/a><span class="lineno"> 1438<\/span>&#160;  <span class="keywordflow">for<\/span>(wit = <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin(); wit != <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.end(); wit++)<\/div><div class="line"><a name="l01439"><\/a><span class="lineno"> 1439<\/span>&#160;  {<\/div><div class="line"><a name="l01440"><\/a><span class="lineno"> 1440<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#ab1a0d3283b2d4690a383372ed20bfeb5">WordId<\/a> <span class="keywordtype">id<\/span> = wit - <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.begin();<\/div><div class="line"><a name="l01441"><\/a><span class="lineno"> 1441<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;{:&quot;<\/span>;<\/div><div class="line"><a name="l01442"><\/a><span class="lineno"> 1442<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;wordId&quot;<\/span> &lt;&lt; (int)<span class="keywordtype">id<\/span>;<\/div><div class="line"><a name="l01443"><\/a><span class="lineno"> 1443<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;nodeId&quot;<\/span> &lt;&lt; (int)(*wit)-&gt;id;<\/div><div class="line"><a name="l01444"><\/a><span class="lineno"> 1444<\/span>&#160;    f &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01445"><\/a><span class="lineno"> 1445<\/span>&#160;  }<\/div><div class="line"><a name="l01446"><\/a><span class="lineno"> 1446<\/span>&#160;  <\/div><div class="line"><a name="l01447"><\/a><span class="lineno"> 1447<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>; <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01448"><\/a><span class="lineno"> 1448<\/span>&#160;<\/div><div class="line"><a name="l01449"><\/a><span class="lineno"> 1449<\/span>&#160;  f &lt;&lt; <span class="stringliteral">&quot;}&quot;<\/span>;<\/div><div class="line"><a name="l01450"><\/a><span class="lineno"> 1450<\/span>&#160;<\/div><div class="line"><a name="l01451"><\/a><span class="lineno"> 1451<\/span>&#160;}<\/div><div class="line"><a name="l01452"><\/a><span class="lineno"> 1452<\/span>&#160;<\/div><div class="line"><a name="l01453"><\/a><span class="lineno"> 1453<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01454"><\/a><span class="lineno"> 1454<\/span>&#160;<\/div><div class="line"><a name="l01455"><\/a><span class="lineno"> 1455<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01456"><\/a><span class="lineno"><a class="line" href="classDBoW2_1_1TemplatedVocabulary.html#a037ba240314ff30f3620fb4de6845c66"> 1456<\/a><\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afdec2031c98b9109451b1454f73348b0">TemplatedVocabulary&lt;TDescriptor,F&gt;::load<\/a>(<span class="keyword">const<\/span> cv::FileStorage &amp;fs,<\/div><div class="line"><a name="l01457"><\/a><span class="lineno"> 1457<\/span>&#160;  <span class="keyword">const<\/span> std::string &amp;name)<\/div><div class="line"><a name="l01458"><\/a><span class="lineno"> 1458<\/span>&#160;{<\/div><div class="line"><a name="l01459"><\/a><span class="lineno"> 1459<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l01460"><\/a><span class="lineno"> 1460<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l01461"><\/a><span class="lineno"> 1461<\/span>&#160;  <\/div><div class="line"><a name="l01462"><\/a><span class="lineno"> 1462<\/span>&#160;  cv::FileNode fvoc = fs[name];<\/div><div class="line"><a name="l01463"><\/a><span class="lineno"> 1463<\/span>&#160;  <\/div><div class="line"><a name="l01464"><\/a><span class="lineno"> 1464<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = (int)fvoc[<span class="stringliteral">&quot;k&quot;<\/span>];<\/div><div class="line"><a name="l01465"><\/a><span class="lineno"> 1465<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = (int)fvoc[<span class="stringliteral">&quot;L&quot;<\/span>];<\/div><div class="line"><a name="l01466"><\/a><span class="lineno"> 1466<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = (<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a>)((<span class="keywordtype">int<\/span>)fvoc[<span class="stringliteral">&quot;scoringType&quot;<\/span>]);<\/div><div class="line"><a name="l01467"><\/a><span class="lineno"> 1467<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = (<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a>)((<span class="keywordtype">int<\/span>)fvoc[<span class="stringliteral">&quot;weightingType&quot;<\/span>]);<\/div><div class="line"><a name="l01468"><\/a><span class="lineno"> 1468<\/span>&#160;  <\/div><div class="line"><a name="l01469"><\/a><span class="lineno"> 1469<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l01470"><\/a><span class="lineno"> 1470<\/span>&#160;<\/div><div class="line"><a name="l01471"><\/a><span class="lineno"> 1471<\/span>&#160;  <span class="comment">\/\/ nodes<\/span><\/div><div class="line"><a name="l01472"><\/a><span class="lineno"> 1472<\/span>&#160;  cv::FileNode fn = fvoc[<span class="stringliteral">&quot;nodes&quot;<\/span>];<\/div><div class="line"><a name="l01473"><\/a><span class="lineno"> 1473<\/span>&#160;<\/div><div class="line"><a name="l01474"><\/a><span class="lineno"> 1474<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.resize(fn.size() + 1); <span class="comment">\/\/ +1 to include root<\/span><\/div><div class="line"><a name="l01475"><\/a><span class="lineno"> 1475<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[0].id = 0;<\/div><div class="line"><a name="l01476"><\/a><span class="lineno"> 1476<\/span>&#160;<\/div><div class="line"><a name="l01477"><\/a><span class="lineno"> 1477<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fn.size(); ++i)<\/div><div class="line"><a name="l01478"><\/a><span class="lineno"> 1478<\/span>&#160;  {<\/div><div class="line"><a name="l01479"><\/a><span class="lineno"> 1479<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (int)fn[i][<span class="stringliteral">&quot;nodeId&quot;<\/span>];<\/div><div class="line"><a name="l01480"><\/a><span class="lineno"> 1480<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> pid = (int)fn[i][<span class="stringliteral">&quot;parentId&quot;<\/span>];<\/div><div class="line"><a name="l01481"><\/a><span class="lineno"> 1481<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> weight = (<a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a>)fn[i][<span class="stringliteral">&quot;weight&quot;<\/span>];<\/div><div class="line"><a name="l01482"><\/a><span class="lineno"> 1482<\/span>&#160;    std::string d = (std::string)fn[i][<span class="stringliteral">&quot;descriptor&quot;<\/span>];<\/div><div class="line"><a name="l01483"><\/a><span class="lineno"> 1483<\/span>&#160;    <\/div><div class="line"><a name="l01484"><\/a><span class="lineno"> 1484<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].id = nid;<\/div><div class="line"><a name="l01485"><\/a><span class="lineno"> 1485<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].parent = pid;<\/div><div class="line"><a name="l01486"><\/a><span class="lineno"> 1486<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].weight = weight;<\/div><div class="line"><a name="l01487"><\/a><span class="lineno"> 1487<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[pid].children.push_back(nid);<\/div><div class="line"><a name="l01488"><\/a><span class="lineno"> 1488<\/span>&#160;    <\/div><div class="line"><a name="l01489"><\/a><span class="lineno"> 1489<\/span>&#160;    F::fromString(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].descriptor, d);<\/div><div class="line"><a name="l01490"><\/a><span class="lineno"> 1490<\/span>&#160;  }<\/div><div class="line"><a name="l01491"><\/a><span class="lineno"> 1491<\/span>&#160;  <\/div><div class="line"><a name="l01492"><\/a><span class="lineno"> 1492<\/span>&#160;  <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01493"><\/a><span class="lineno"> 1493<\/span>&#160;  fn = fvoc[<span class="stringliteral">&quot;words&quot;<\/span>];<\/div><div class="line"><a name="l01494"><\/a><span class="lineno"> 1494<\/span>&#160;  <\/div><div class="line"><a name="l01495"><\/a><span class="lineno"> 1495<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.resize(fn.size());<\/div><div class="line"><a name="l01496"><\/a><span class="lineno"> 1496<\/span>&#160;<\/div><div class="line"><a name="l01497"><\/a><span class="lineno"> 1497<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; fn.size(); ++i)<\/div><div class="line"><a name="l01498"><\/a><span class="lineno"> 1498<\/span>&#160;  {<\/div><div class="line"><a name="l01499"><\/a><span class="lineno"> 1499<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> wid = (int)fn[i][<span class="stringliteral">&quot;wordId&quot;<\/span>];<\/div><div class="line"><a name="l01500"><\/a><span class="lineno"> 1500<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (int)fn[i][<span class="stringliteral">&quot;nodeId&quot;<\/span>];<\/div><div class="line"><a name="l01501"><\/a><span class="lineno"> 1501<\/span>&#160;    <\/div><div class="line"><a name="l01502"><\/a><span class="lineno"> 1502<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].word_id = wid;<\/div><div class="line"><a name="l01503"><\/a><span class="lineno"> 1503<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid] = &amp;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid];<\/div><div class="line"><a name="l01504"><\/a><span class="lineno"> 1504<\/span>&#160;  }<\/div><div class="line"><a name="l01505"><\/a><span class="lineno"> 1505<\/span>&#160;}<\/div><div class="line"><a name="l01506"><\/a><span class="lineno"> 1506<\/span>&#160;    <\/div><div class="line"><a name="l01507"><\/a><span class="lineno"> 1507<\/span>&#160;<span class="comment">\/\/ Added by VINS [[[<\/span><\/div><div class="line"><a name="l01508"><\/a><span class="lineno"> 1508<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01509"><\/a><span class="lineno"> 1509<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;::loadBin<\/a>(<span class="keyword">const<\/span> std::string &amp;filename) {<\/div><div class="line"><a name="l01510"><\/a><span class="lineno"> 1510<\/span>&#160;    <\/div><div class="line"><a name="l01511"><\/a><span class="lineno"> 1511<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.clear();<\/div><div class="line"><a name="l01512"><\/a><span class="lineno"> 1512<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.clear();<\/div><div class="line"><a name="l01513"><\/a><span class="lineno"> 1513<\/span>&#160;  <span class="comment">\/\/printf(&quot;loop load bin\\n&quot;);<\/span><\/div><div class="line"><a name="l01514"><\/a><span class="lineno"> 1514<\/span>&#160;  std::ifstream ifStream(filename);<\/div><div class="line"><a name="l01515"><\/a><span class="lineno"> 1515<\/span>&#160;  VINSLoop::Vocabulary voc;<\/div><div class="line"><a name="l01516"><\/a><span class="lineno"> 1516<\/span>&#160;  voc.deserialize(ifStream);<\/div><div class="line"><a name="l01517"><\/a><span class="lineno"> 1517<\/span>&#160;  ifStream.close();<\/div><div class="line"><a name="l01518"><\/a><span class="lineno"> 1518<\/span>&#160;  <\/div><div class="line"><a name="l01519"><\/a><span class="lineno"> 1519<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa5f7f829033a49833fe4fb5652b99337">m_k<\/a> = voc.k;<\/div><div class="line"><a name="l01520"><\/a><span class="lineno"> 1520<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a16735d9e2c8b901f01d541faea67971e">m_L<\/a> = voc.L;<\/div><div class="line"><a name="l01521"><\/a><span class="lineno"> 1521<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a89d8aa037f2b5c3c5cc953734bb5cb9f">m_scoring<\/a> = (<a class="code" href="namespaceDBoW2.html#aa252a592dd607c6e60dede06ceef2722">ScoringType<\/a>)voc.scoringType;<\/div><div class="line"><a name="l01522"><\/a><span class="lineno"> 1522<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#abf03c6430d630674ddca5bab9c120c51">m_weighting<\/a> = (<a class="code" href="namespaceDBoW2.html#a5de5c8a307aca9a84ffefda2a9bc467a">WeightingType<\/a>)voc.weightingType;<\/div><div class="line"><a name="l01523"><\/a><span class="lineno"> 1523<\/span>&#160;  <\/div><div class="line"><a name="l01524"><\/a><span class="lineno"> 1524<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3244d5a3d0f75ba9c9ae905c5365335d">createScoringObject<\/a>();<\/div><div class="line"><a name="l01525"><\/a><span class="lineno"> 1525<\/span>&#160;<\/div><div class="line"><a name="l01526"><\/a><span class="lineno"> 1526<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>.resize(voc.nNodes + 1); <span class="comment">\/\/ +1 to include root<\/span><\/div><div class="line"><a name="l01527"><\/a><span class="lineno"> 1527<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[0].id = 0;<\/div><div class="line"><a name="l01528"><\/a><span class="lineno"> 1528<\/span>&#160;<\/div><div class="line"><a name="l01529"><\/a><span class="lineno"> 1529<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; voc.nNodes; ++i)<\/div><div class="line"><a name="l01530"><\/a><span class="lineno"> 1530<\/span>&#160;  {<\/div><div class="line"><a name="l01531"><\/a><span class="lineno"> 1531<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = voc.nodes[i].nodeId;<\/div><div class="line"><a name="l01532"><\/a><span class="lineno"> 1532<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> pid = voc.nodes[i].parentId;<\/div><div class="line"><a name="l01533"><\/a><span class="lineno"> 1533<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a55fcd7333e591a38e96b91f41bc182f6">WordValue<\/a> weight = voc.nodes[i].weight;<\/div><div class="line"><a name="l01534"><\/a><span class="lineno"> 1534<\/span>&#160;      <\/div><div class="line"><a name="l01535"><\/a><span class="lineno"> 1535<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].id = nid;<\/div><div class="line"><a name="l01536"><\/a><span class="lineno"> 1536<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].parent = pid;<\/div><div class="line"><a name="l01537"><\/a><span class="lineno"> 1537<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].weight = weight;<\/div><div class="line"><a name="l01538"><\/a><span class="lineno"> 1538<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[pid].children.push_back(nid);<\/div><div class="line"><a name="l01539"><\/a><span class="lineno"> 1539<\/span>&#160;      <\/div><div class="line"><a name="l01540"><\/a><span class="lineno"> 1540<\/span>&#160;    <span class="comment">\/\/ Sorry to break template here<\/span><\/div><div class="line"><a name="l01541"><\/a><span class="lineno"> 1541<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].descriptor = boost::dynamic_bitset&lt;&gt;(voc.nodes[i].descriptor, voc.nodes[i].descriptor + 4);<\/div><div class="line"><a name="l01542"><\/a><span class="lineno"> 1542<\/span>&#160;    <\/div><div class="line"><a name="l01543"><\/a><span class="lineno"> 1543<\/span>&#160;    <span class="keywordflow">if<\/span> (i &lt; 5) {<\/div><div class="line"><a name="l01544"><\/a><span class="lineno"> 1544<\/span>&#160;      std::string test;<\/div><div class="line"><a name="l01545"><\/a><span class="lineno"> 1545<\/span>&#160;      boost::to_string(<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].descriptor, test);<\/div><div class="line"><a name="l01546"><\/a><span class="lineno"> 1546<\/span>&#160;      <span class="comment">\/\/cout &lt;&lt; &quot;descriptor[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot; &lt;&lt; test &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l01547"><\/a><span class="lineno"> 1547<\/span>&#160;    }<\/div><div class="line"><a name="l01548"><\/a><span class="lineno"> 1548<\/span>&#160;  }<\/div><div class="line"><a name="l01549"><\/a><span class="lineno"> 1549<\/span>&#160;  <\/div><div class="line"><a name="l01550"><\/a><span class="lineno"> 1550<\/span>&#160;  <span class="comment">\/\/ words<\/span><\/div><div class="line"><a name="l01551"><\/a><span class="lineno"> 1551<\/span>&#160;  <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>.resize(voc.nWords);<\/div><div class="line"><a name="l01552"><\/a><span class="lineno"> 1552<\/span>&#160;<\/div><div class="line"><a name="l01553"><\/a><span class="lineno"> 1553<\/span>&#160;  <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; voc.nWords; ++i)<\/div><div class="line"><a name="l01554"><\/a><span class="lineno"> 1554<\/span>&#160;  {<\/div><div class="line"><a name="l01555"><\/a><span class="lineno"> 1555<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> wid = (int)voc.words[i].wordId;<\/div><div class="line"><a name="l01556"><\/a><span class="lineno"> 1556<\/span>&#160;    <a class="code" href="namespaceDBoW2.html#a3a0fa9c50c0df508759362d6204566f2">NodeId<\/a> nid = (<span class="keywordtype">int<\/span>)voc.words[i].nodeId;<\/div><div class="line"><a name="l01557"><\/a><span class="lineno"> 1557<\/span>&#160;    <\/div><div class="line"><a name="l01558"><\/a><span class="lineno"> 1558<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid].word_id = wid;<\/div><div class="line"><a name="l01559"><\/a><span class="lineno"> 1559<\/span>&#160;    <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a1665546b54f954d2d54d59a6982df3ca">m_words<\/a>[wid] = &amp;<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a82be6d310eae6f4f57a72d340489320b">m_nodes<\/a>[nid];<\/div><div class="line"><a name="l01560"><\/a><span class="lineno"> 1560<\/span>&#160;  }<\/div><div class="line"><a name="l01561"><\/a><span class="lineno"> 1561<\/span>&#160;}<\/div><div class="line"><a name="l01562"><\/a><span class="lineno"> 1562<\/span>&#160;    <\/div><div class="line"><a name="l01563"><\/a><span class="lineno"> 1563<\/span>&#160;<span class="comment">\/\/ Added by VINS ]]]<\/span><\/div><div class="line"><a name="l01564"><\/a><span class="lineno"> 1564<\/span>&#160;<\/div><div class="line"><a name="l01565"><\/a><span class="lineno"> 1565<\/span>&#160;<span class="comment">\/\/ --------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l01566"><\/a><span class="lineno"> 1566<\/span>&#160;<\/div><div class="line"><a name="l01572"><\/a><span class="lineno"> 1572<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor, <span class="keyword">class<\/span> F&gt;<\/div><div class="line"><a name="l01573"><\/a><span class="lineno"><a class="line" href="namespaceDBoW2.html#aecdf616fe16d2cf09f521a603b9d43f1"> 1573<\/a><\/span>&#160;std::ostream&amp; <a class="code" href="namespaceDBoW2.html#ac1f00f5484f61d6ab3b1f650955210d8">operator&lt;&lt;<\/a>(std::ostream &amp;os, <\/div><div class="line"><a name="l01574"><\/a><span class="lineno"> 1574<\/span>&#160;  <span class="keyword">const<\/span> <a class="code" href="classDBoW2_1_1TemplatedVocabulary.html">TemplatedVocabulary&lt;TDescriptor,F&gt;<\/a> &amp;voc)<\/div><div class="line"><a name="l01575"><\/a><span class="lineno"> 1575<\/span>&#160;{<\/div><div class="line"><a name="l01576"><\/a><span class="lineno"> 1576<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;Vocabulary: k = &quot;<\/span> &lt;&lt; voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#afadb7942a23548903deb4548ca1d6e7d">getBranchingFactor<\/a>() <\/div><div class="line"><a name="l01577"><\/a><span class="lineno"> 1577<\/span>&#160;    &lt;&lt; <span class="stringliteral">&quot;, L = &quot;<\/span> &lt;&lt; voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a60d5e4d240d69042c47473d4c6497e01">getDepthLevels<\/a>()<\/div><div class="line"><a name="l01578"><\/a><span class="lineno"> 1578<\/span>&#160;    &lt;&lt; <span class="stringliteral">&quot;, Weighting = &quot;<\/span>;<\/div><div class="line"><a name="l01579"><\/a><span class="lineno"> 1579<\/span>&#160;<\/div><div class="line"><a name="l01580"><\/a><span class="lineno"> 1580<\/span>&#160;  <span class="keywordflow">switch<\/span>(voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#aa1b7c6f984353736ecf4a2483b1c1b6b">getWeightingType<\/a>())<\/div><div class="line"><a name="l01581"><\/a><span class="lineno"> 1581<\/span>&#160;  {<\/div><div class="line"><a name="l01582"><\/a><span class="lineno"> 1582<\/span>&#160;    <span class="keywordflow">case<\/span> TF_IDF: os &lt;&lt; <span class="stringliteral">&quot;tf-idf&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01583"><\/a><span class="lineno"> 1583<\/span>&#160;    <span class="keywordflow">case<\/span> TF: os &lt;&lt; <span class="stringliteral">&quot;tf&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01584"><\/a><span class="lineno"> 1584<\/span>&#160;    <span class="keywordflow">case<\/span> IDF: os &lt;&lt; <span class="stringliteral">&quot;idf&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01585"><\/a><span class="lineno"> 1585<\/span>&#160;    <span class="keywordflow">case<\/span> BINARY: os &lt;&lt; <span class="stringliteral">&quot;binary&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01586"><\/a><span class="lineno"> 1586<\/span>&#160;  }<\/div><div class="line"><a name="l01587"><\/a><span class="lineno"> 1587<\/span>&#160;<\/div><div class="line"><a name="l01588"><\/a><span class="lineno"> 1588<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;, Scoring = &quot;<\/span>;<\/div><div class="line"><a name="l01589"><\/a><span class="lineno"> 1589<\/span>&#160;  <span class="keywordflow">switch<\/span>(voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#adca2e844333011cd9341d42be9cec5e3">getScoringType<\/a>())<\/div><div class="line"><a name="l01590"><\/a><span class="lineno"> 1590<\/span>&#160;  {<\/div><div class="line"><a name="l01591"><\/a><span class="lineno"> 1591<\/span>&#160;    <span class="keywordflow">case<\/span> L1_NORM: os &lt;&lt; <span class="stringliteral">&quot;L1-norm&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01592"><\/a><span class="lineno"> 1592<\/span>&#160;    <span class="keywordflow">case<\/span> L2_NORM: os &lt;&lt; <span class="stringliteral">&quot;L2-norm&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01593"><\/a><span class="lineno"> 1593<\/span>&#160;    <span class="keywordflow">case<\/span> CHI_SQUARE: os &lt;&lt; <span class="stringliteral">&quot;Chi square distance&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01594"><\/a><span class="lineno"> 1594<\/span>&#160;    <span class="keywordflow">case<\/span> KL: os &lt;&lt; <span class="stringliteral">&quot;KL-divergence&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01595"><\/a><span class="lineno"> 1595<\/span>&#160;    <span class="keywordflow">case<\/span> BHATTACHARYYA: os &lt;&lt; <span class="stringliteral">&quot;Bhattacharyya coefficient&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01596"><\/a><span class="lineno"> 1596<\/span>&#160;    <span class="keywordflow">case<\/span> DOT_PRODUCT: os &lt;&lt; <span class="stringliteral">&quot;Dot product&quot;<\/span>; <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l01597"><\/a><span class="lineno"> 1597<\/span>&#160;  }<\/div><div class="line"><a name="l01598"><\/a><span class="lineno"> 1598<\/span>&#160;  <\/div><div class="line"><a name="l01599"><\/a><span class="lineno"> 1599<\/span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;, Number of words = &quot;<\/span> &lt;&lt; voc.<a class="code" href="classDBoW2_1_1TemplatedVocabulary.html#a3907da675f135821894fb497f113ccb0">size<\/a>();<\/div><div class="line"><a name="l01600"><\/a><span class="lineno"> 1600<\/span>&#160;<\/div><div class="line"><a name="l01601"><\/a><span class="lineno"> 1601<\/span>&#160;  <span class="keywordflow">return<\/span> os;<\/div><div class="line"><a name="l01602"><\/a><span class="lineno"> 1602<\/span>&#160;}<\/div><div class="line"><a name="l01603"><\/a><span class="lineno"> 1603<\/span>&#160;<\/div><div class="line"><a name="l01604"><\/a><span class="lineno"> 1604<\/span>&#160;} <span class="comment">\/\/ namespace DBoW2<\/span><\/div><div class="line"><a name="l01605"><\/a><span class="lineno"> 1605<\/span>&#160;<\/div><div class="line"><a name="l01606"><\/a><span class="lineno"> 1606<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDBoW2_1_1TemplatedVocabulary_html_a4988c1ab067de25259115bf9963b02d9"><div class="ttname"><a href="classDBoW2_1_1TemplatedVocabulary.html#a4988c1ab067de25259115bf9963b02d9">DBoW2::TemplatedVocabulary::score<\/a><\/div><div class="ttdeci">double score(const BowVector &amp;a, const BowVector &amp;b) const <\/div><div class="ttdef"><b>Definition:<\/b> TemplatedVocabulary.h:1199<\/div><\/div>$/;"	a
l00001	src/doc/html/Timestamp_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment"> * File: Timestamp.h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Author: Dorian Galvez-Lopez<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * Date: March 2009<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> * Description: timestamping functions<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * License: see the LICENSE.txt file<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#ifndef __D_TIMESTAMP__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define __D_TIMESTAMP__<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceDUtils.html">DUtils<\/a> {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html">   19<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#a5a8a3cb7f9e0f73bf11fce42688b06c8">   24<\/a><\/span>&#160;  <span class="keyword">enum<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#a5a8a3cb7f9e0f73bf11fce42688b06c8">tOptions<\/a><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  {<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    NONE = 0,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    CURRENT_TIME = 0x1,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    ZERO = 0x2<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  };<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  <\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>(<a class="code" href="classDUtils_1_1Timestamp.html#a5a8a3cb7f9e0f73bf11fce42688b06c8">Timestamp::tOptions<\/a> option = NONE);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">virtual<\/span> ~<a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <span class="keywordtype">bool<\/span> empty() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">void<\/span> setToCurrentTime();<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#a439bcff577f3ae30e8918897ecb33e76">   61<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#a439bcff577f3ae30e8918897ecb33e76">setTime<\/a>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> secs, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> usecs){<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        m_secs = secs;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        m_usecs = usecs;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <\/div><div class="line"><a name="l00071"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#af28ca416f5960805b7a517c11df7d3c6">   71<\/a><\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#af28ca416f5960805b7a517c11df7d3c6">getTime<\/a>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> &amp;secs, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> &amp;usecs)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;      secs = m_secs;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;      usecs = m_usecs;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    }<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordtype">void<\/span> setTime(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;stime);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keywordtype">void<\/span> setTime(<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keywordtype">double<\/span> getFloatTime() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keywordtype">string<\/span> getStringTime() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="keywordtype">double<\/span> operator- (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> plus(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> s, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> us) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;  <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> minus(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> s, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> us) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;  <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>&amp; operator+= (<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;  <\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a>&amp; operator-= (<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> operator+ (<span class="keywordtype">double<\/span> s) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> operator- (<span class="keywordtype">double<\/span> s) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&gt; (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&gt;= (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    <span class="keywordtype">bool<\/span> operator== (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&lt; (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&lt;= (<span class="keyword">const<\/span> <a class="code" href="classDUtils_1_1Timestamp.html">Timestamp<\/a> &amp;t) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;  <span class="keywordtype">string<\/span> Format(<span class="keywordtype">bool<\/span> machine_friendly = <span class="keyword">false<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">string<\/span> Format(<span class="keywordtype">double<\/span> s);<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00196"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#a88b8dff916bb011ef4142ca5cc655425">  196<\/a><\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#a88b8dff916bb011ef4142ca5cc655425">m_secs<\/a>;   <span class="comment">\/\/ seconds<\/span><\/div><div class="line"><a name="l00198"><\/a><span class="lineno"><a class="line" href="classDUtils_1_1Timestamp.html#afb8947a2cf3b04919f782f4490ca0935">  198<\/a><\/span>&#160;<span class="comment"><\/span>    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <a class="code" href="classDUtils_1_1Timestamp.html#afb8947a2cf3b04919f782f4490ca0935">m_usecs<\/a>;  <span class="comment">\/\/ microseconds<\/span><\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;};<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;}<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="ttc" id="namespaceDUtils_html"><div class="ttname"><a href="namespaceDUtils.html">DUtils<\/a><\/div><div class="ttdoc">Several utilities for C++ programs. <\/div><div class="ttdef"><b>Definition:<\/b> DException.h:20<\/div><\/div>$/;"	a
l00001	src/doc/html/Transform_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef TRANSFORM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define TRANSFORM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;boost\/shared_ptr.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="classcamodocal_1_1Transform.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcamodocal_1_1Transform.html">Transform<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    EIGEN_MAKE_ALIGNED_OPERATOR_NEW<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classcamodocal_1_1Transform.html">Transform<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    Transform(<span class="keyword">const<\/span> Eigen::Matrix4d&amp; H);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    Eigen::Quaterniond&amp; rotation(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Quaterniond&amp; rotation(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">double<\/span>* rotationData(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* <span class="keyword">const<\/span> rotationData(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    Eigen::Vector3d&amp; translation(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Vector3d&amp; translation(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">double<\/span>* translationData(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span>* <span class="keyword">const<\/span> translationData(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    Eigen::Matrix4d toMatrix(<span class="keywordtype">void<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    Eigen::Quaterniond m_q;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    Eigen::Vector3d m_t;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;}<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcamodocal_1_1Transform_html"><div class="ttname"><a href="classcamodocal_1_1Transform.html">camodocal::Transform<\/a><\/div><div class="ttdef"><b>Definition:<\/b> Transform.h:11<\/div><\/div>$/;"	a
l00001	src/doc/html/__cassert_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2011-2012<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_DETAIL__CASSERT_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DETAIL__CASSERT_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#if defined(__cplusplus)<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;cassert&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/__prefix_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2013<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_LIBRARY_C__PREFIX_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_LIBRARY_C__PREFIX_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/_cassert.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/android_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_ADROID_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_ADROID_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">[heading `BOOST_OS_ANDROID`]<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Android_%28operating_system%29 Android] operating system.<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    [[`__ANDROID__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#define BOOST_OS_ANDROID BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">    defined(__ANDROID__) \\<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_ANDROID<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_ANDROID BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#if BOOST_OS_ANDROID<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_ANDROID_AVAILABLE<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#define BOOST_OS_ANDROID_NAME &quot;Android&quot;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_ANDROID,BOOST_OS_ANDROID_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/armor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __ARMOR_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __ARMOR_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;tuple&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__info.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>(<span class="keywordtype">int<\/span> type_, cv::RotatedRect armor_, cv::RotatedRect left_=cv::RotatedRect(), cv::RotatedRect right_=cv::RotatedRect())<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  {<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    type = type_;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    armor = armor_;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    left_light = left_;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    right_light = right_;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    score = 0.0f;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  }<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>();<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keywordtype">int<\/span> type;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  cv::RotatedRect armor;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  cv::RotatedRect left_light;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  cv::RotatedRect right_light;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  <span class="keywordtype">float<\/span> score;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;};<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__detecter.html">   34<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;{<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_max_angle;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_min_area;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_lower;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_upper;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_len;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_height;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_gray;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a>();<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  cv::Mat highlight_blue_or_red(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  std::vector&lt;std::vector&lt;cv::Point&gt;&gt; find_contours(<span class="keyword">const<\/span> cv::Mat &amp;binary);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; to_light_rects(<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_light, <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_brightness);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; detect_lights(<span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; filter_lights(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thresh_max_angle, <span class="keywordtype">float<\/span> thresh_min_area);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;  std::vector&lt;armor_info&gt; possible_armors(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thres_max_angle, <span class="keywordtype">float<\/span> thres_dis_lower, \\<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;                                                   <span class="keywordtype">float<\/span> thres_dis_upper, <span class="keywordtype">float<\/span> thres_len, <span class="keywordtype">float<\/span> thres_height, <span class="keywordtype">float<\/span> thres_gray, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;  std::vector&lt;armor_info&gt; filter_by_features(std::vector&lt;armor_info&gt; &amp;armors);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  std::vector&lt;armor_info&gt; detect(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  <span class="keywordtype">bool<\/span> detect_all(<span class="keyword">const<\/span> cv::Mat &amp;image);<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;  <span class="keywordtype">void<\/span> slect_final_armor(std::vector&lt;armor_info&gt; all_armors);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  <span class="keywordtype">void<\/span> debug_vision();<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  cv::Mat m_common;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;  cv::Mat m_image;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;  cv::Mat m_show;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;  cv::Mat m_gray;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;  cv::Mat m_binary_brightness;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;  cv::Mat m_binary_color;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;  cv::Mat m_binary_light;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;  std::chrono::system_clock::time_point speed_test_start_begin_time;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;};<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;}<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;}<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">#endif \/\/ !__ARMOR_H__<\/span><\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor.h:14<\/div><\/div>$/;"	a
l00001	src/doc/html/armor__detect_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __ARMOR_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __ARMOR_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;tuple&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;detect_factory.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__info.html">   15<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>(<span class="keywordtype">int<\/span> type_, cv::RotatedRect armor_, cv::RotatedRect left_=cv::RotatedRect(), cv::RotatedRect right_=cv::RotatedRect())<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  {<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    type = type_;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    armor = armor_;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    left_light = left_;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    right_light = right_;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    score = 0.0f;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>();<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  <span class="keywordtype">int<\/span> type;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  cv::RotatedRect armor;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  cv::RotatedRect left_light;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  cv::RotatedRect right_light;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <span class="keywordtype">float<\/span> score;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__detecter.html">   35<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;{<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_max_angle;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_min_area;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_lower;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_dis_upper;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_len;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_height;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;  <span class="keyword">const<\/span> <span class="keyword">static<\/span> <span class="keywordtype">float<\/span> m_threshold_gray;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a>();<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;  cv::Mat highlight_blue_or_red(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  std::vector&lt;std::vector&lt;cv::Point&gt;&gt; find_contours(<span class="keyword">const<\/span> cv::Mat &amp;binary);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; to_light_rects(<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_light, <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;cv::Point&gt;&gt; &amp;contours_brightness);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; detect_lights(<span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;  std::vector&lt;cv::RotatedRect&gt; filter_lights(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thresh_max_angle, <span class="keywordtype">float<\/span> thresh_min_area);<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;  std::vector&lt;armor_info&gt; possible_armors(<span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;lights, <span class="keywordtype">float<\/span> thres_max_angle, <span class="keywordtype">float<\/span> thres_dis_lower, \\<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;                                                <span class="keywordtype">float<\/span> thres_dis_upper, <span class="keywordtype">float<\/span> thres_len, <span class="keywordtype">float<\/span> thres_height, <span class="keywordtype">float<\/span> thres_gray, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;  std::vector&lt;armor_info&gt; filter_by_features(std::vector&lt;armor_info&gt; &amp;armors);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  <span class="keywordtype">bool<\/span> detect(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue);<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;  <span class="keywordtype">void<\/span> slect_final_armor(std::vector&lt;armor_info&gt; all_armors);<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;  <span class="keywordtype">void<\/span> debug_vision();<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;  cv::Mat m_common;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  cv::Mat m_image;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;  cv::Mat m_show;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;  cv::Mat m_gray;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;  cv::Mat m_binary_brightness;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;  cv::Mat m_binary_color;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;  cv::Mat m_binary_light;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;  std::chrono::system_clock::time_point speed_test_start_begin_time;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;};<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;}<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;}<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">#endif \/\/ !__ARMOR_H__<\/span><\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor_detect.h:15<\/div><\/div>$/;"	a
l00001	src/doc/html/armor__detect__node_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">\/\/<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;boost\/thread.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;boost\/atomic.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;logical_core\/SetGoal.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/armor_msg.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseStamped.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseWithCovarianceStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;move_base_msgs\/MoveBaseAction.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;vision_param.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;{<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">   21<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">armor_detect_node<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">armor_detect_node<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    ~<a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html">armor_detect_node<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#ac58417b5cb8c05ab5a526ffedddb5e6d">running<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordtype">bool<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#ad7174eec1f1854a0e156d4ebfb3f0043">if_detected_armor<\/a>();<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">bool<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#ac17cf58f8c4281c477b4fee9b619e53a">get_camera_num<\/a>();<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* <a class="code" href="classautocar_1_1vision__mul_1_1armor__detect__node.html#a4a40e0e980535c48fa552b18fde8afbf">get_armor<\/a>();<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordtype">void<\/span> set_image_points(cv::RotatedRect rect);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html">vision_param<\/a> *param;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">bool<\/span> detected_armor;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor_;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    geometry_msgs::PoseWithCovarianceStamped car_position;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    cv::Mat m_img_buff[2];<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordtype">bool<\/span> forward_back = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    ros::Publisher pub_armor_pos;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    vision_unit::armor_msg armor_pos;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    ros::Publisher pub_goal;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    move_base_msgs::MoveBaseGoal goal;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    move_base_msgs::MoveBaseGoal goal_pose;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    cv::Mat camera_matrix;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    cv::Mat dist_coeffs;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    cv::Mat obj_points;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    cv::Mat img_points;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    std::vector&lt;cv::Point3f&gt; obj_p;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    std::vector&lt;cv::Point2f&gt; img_p;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    cv::Mat rvec;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    cv::Mat tvec;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">double<\/span> ang_lim = 3.0\/180*3.14;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordtype">double<\/span> cam[9] = {839.923052, 0.0,        340.780730,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;                     0.0,        837.671081, 261.766523,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                     0.0,        0.0,        1.0       };<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">double<\/span> dist_c[5] = {0.082613, 0.043275, 0.002486, -0.000823, 0.0};<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;};<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;}<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;}<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#endif \/\/ !__THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor_detect.h:15<\/div><\/div>$/;"	a
l00001	src/doc/html/bsd_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">\/* Special case: OSX will define BSD predefs if the sys\/param.h<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment"> * header is included. We can guard against that, but only if we<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"> * detect OSX first. Hence we will force include OSX detection<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment"> * before doing any BSD detection.<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/macos.h&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD`]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Berkeley_Software_Distribution BSD] operating system.<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">BSD has various branch operating systems possible and each detected<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">individually. This detects the following variations and sets a specific<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">version number macro to match:<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_DRAGONFLY` [@http:\/\/en.wikipedia.org\/wiki\/DragonFly_BSD DragonFly BSD]<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_FREE` [@http:\/\/en.wikipedia.org\/wiki\/Freebsd FreeBSD]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_BSDI` [@http:\/\/en.wikipedia.org\/wiki\/BSD\/OS BSDi BSD\/OS]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_NET` [@http:\/\/en.wikipedia.org\/wiki\/Netbsd NetBSD]<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">* `BOOST_OS_BSD_OPEN` [@http:\/\/en.wikipedia.org\/wiki\/Openbsd OpenBSD]<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">[note The general `BOOST_OS_BSD` is set in all cases to indicate some form<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">of BSD. If the above variants is detected the corresponding macro is also set.]<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">    [[`BSD`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">    [[`_SYSTYPE_BSD`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">    [[`BSD4_2`] [4.2.0]]<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">    [[`BSD4_3`] [4.3.0]]<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">    [[`BSD4_4`] [4.4.0]]<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">    [[`BSD`] [V.R.0]]<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/bsdi.h&gt;<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/dragonfly.h&gt;<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/free.h&gt;<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/open.h&gt;<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/net.h&gt;<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#ifndef BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">    defined(BSD) || \\<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">    defined(_SYSTYPE_BSD) \\<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#   include &lt;sys\/param.h&gt;<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD4_4)<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER(4,4,0)<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD4_3)<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER(4,3,0)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD4_2)<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER(4,2,0)<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD) &amp;&amp; defined(BSD)<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_PREDEF_MAKE_10_VVRR(BSD)<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD)<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_NAME &quot;BSD&quot;<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/bsdi.h&gt;<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/dragonfly.h&gt;<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/free.h&gt;<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/open.h&gt;<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd\/net.h&gt;<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD,BOOST_OS_BSD_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/bsdi_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_BSDI_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_BSDI_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_BSDI`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/BSD\/OS BSDi BSD\/OS] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__bsdi__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_BSDI BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">    defined(__bsdi__) \\<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_BSDI<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_BSDI BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_BSDI<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_BSDI_AVAILABLE<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_BSDI_NAME &quot;BSDi BSD\/OS&quot;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_BSDI,BOOST_OS_BSD_BSDI_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/commCtrl_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COMMCTRL_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COMMCTRL_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/include\/sysHeaders.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;..\/include\/stdHeaders.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keywordtype">int<\/span> commWrite(<span class="keywordtype">string<\/span> data, <span class="keywordtype">string<\/span> port);<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keywordtype">int<\/span> commRead(<span class="keywordtype">string<\/span>&amp; data, <span class="keywordtype">string<\/span> port);<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">static<\/span> <span class="keywordtype">int<\/span> isOpened = 0;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">static<\/span> <span class="keywordtype">int<\/span> fd;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#endif \/\/ COMMCTRL_H<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/comm__read_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COMMREAD_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COMMREAD_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;serial_comm\/car_speed.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sys\/types.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;sys\/stat.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;memory&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;math.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;<\/span>      <span class="comment">\/*file control lib*\/<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;termios.h&gt;<\/span>    <span class="comment">\/*PPSIX terminal*\/<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;<\/span>      <span class="comment">\/*error information*\/<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span>     <span class="comment">\/*standard lib*\/<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span>     <span class="comment">\/*Unix standard func*\/<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;serial_param.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">namespace <\/span>serial_mul<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;{<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="structautocar_1_1serial__mul_1_1____attribute____.html">   25<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;{<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  uint8_t sof;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  int16_t angle;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  int16_t v_w;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;  int16_t v_x;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;  int16_t v_y;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;  uint8_t flag;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;  uint32_t x;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;  uint32_t y;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  uint32_t z;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  uint32_t compass;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;  uint8_t data_status;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;  <span class="keywordtype">float<\/span> pan_title_yaw;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;  <span class="keywordtype">float<\/span> pan_title_pitch;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  uint8_t end;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;}<a class="code" href="structautocar_1_1serial__mul_1_1____attribute____.html">__attribute__<\/a>((packed)) data_t;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="classautocar_1_1serial__mul_1_1comm__read.html">   46<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html">comm_read<\/a>{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html">comm_read<\/a>();<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  ~<a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html">comm_read<\/a>();<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html#a9c8c604663274eb36fecd0f3f363f038">read_setup<\/a>();<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html#a1fbcf3b3bea948725c13ba193fd015b6">read_init<\/a>();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1comm__read.html#ab9f0857bbd2a963168306e81f91a9133">read_data<\/a>();<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  serial_comm::car_speed pubData;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html">serial_param<\/a> read_param;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;  std::string dev;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;  <span class="keywordtype">int<\/span> serial_baudrate;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;  <span class="keywordtype">int<\/span> fd;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;  <span class="keywordtype">int<\/span> data_len;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  int16_t ForeBack, LeftRight, Y, R;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  <span class="keywordtype">double<\/span> YawAngle, Rotate;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;  int16_t init_yaw;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;  data_t data;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;};<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;}<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;}<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#endif \/\/ COMMREAD_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/comm__write_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef COMM_WRITE_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define COMM_WRITE_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;math.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/String.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;<\/span>      <span class="comment">\/*file control lib*\/<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;termios.h&gt;<\/span>    <span class="comment">\/*PPSIX terminal*\/<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;<\/span>      <span class="comment">\/*error information*\/<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span>     <span class="comment">\/*standard lib*\/<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span>     <span class="comment">\/*Unix standard func*\/<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;serial_param.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span>serial_mul<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;{<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    uint8_t sof;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    int16_t auto_vx;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    int16_t auto_vy;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    int16_t auto_vw;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    uint8_t vision_data_status;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    int16_t vision_data_x;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    int16_t vision_data_y;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    int16_t vision_data_w;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    int16_t vision_data_h;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    uint8_t end;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;}__attribute__((packed)) data_t;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classautocar_1_1serial__mul_1_1comm__write.html">   35<\/a><\/span>&#160;class <a class="code" href="classautocar_1_1serial__mul_1_1comm__write.html">comm_write<\/a>{<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  comm_write();<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;  ~comm_write();<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;  <span class="keywordtype">bool<\/span> write_setup();<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;  <span class="keywordtype">void<\/span> write_data(data_t data_to_write);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html">serial_param<\/a> write_param;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;  data_t data;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;  std::string dev;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <span class="keywordtype">int<\/span> serial_baudrate;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;  std_msgs::String pubData;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keywordtype">int<\/span> fd;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;  <span class="keywordtype">int<\/span> data_len;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;};<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;}<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;}<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#endif \/\/ COMM_WRITE_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/cv__bridge_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*********************************************************************<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">* Software License Agreement (BSD License)<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">*  Copyright (c) 2011, Willow Garage, Inc,<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">*  Copyright (c) 2015, Tal Regev.<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*  All rights reserved.<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment">*  Redistribution and use in source and binary forms, with or without<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment">*  modification, are permitted provided that the following conditions<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">*  are met:<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">*   * Redistributions of source code must retain the above copyright<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">*     notice, this list of conditions and the following disclaimer.<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">*   * Redistributions in binary form must reproduce the above<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">*     copyright notice, this list of conditions and the following<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">*     disclaimer in the documentation and\/or other materials provided<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">*     with the distribution.<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">*   * Neither the name of the Willow Garage nor the names of its<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">*     contributors may be used to endorse or promote products derived<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">*     from this software without specific prior written permission.<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">*<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">*  &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">*  POSSIBILITY OF SUCH DAMAGE.<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">*********************************************************************\/<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#ifndef CV_BRIDGE_CV_BRIDGE_H<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#define CV_BRIDGE_CV_BRIDGE_H<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/Image.h&gt;<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/CompressedImage.h&gt;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/image_encodings.h&gt;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#include &lt;ros\/static_assert.h&gt;<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/imgproc\/imgproc.hpp&gt;<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/imgproc\/types_c.h&gt;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecv__bridge.html">cv_bridge<\/a> {<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1Exception.html">   50<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcv__bridge_1_1Exception.html">Exception<\/a> : <span class="keyword">public<\/span> std::runtime_error<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;{<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;  <a class="code" href="classcv__bridge_1_1Exception.html">Exception<\/a>(<span class="keyword">const<\/span> std::string&amp; description) : std::runtime_error(description) {}<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage&gt; CvImagePtr;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage const&gt; CvImageConstPtr;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment">\/\/from: http:\/\/docs.opencv.org\/modules\/highgui\/doc\/reading_and_writing_images_and_video.html#Mat imread(const string&amp; filename, int flags)<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    BMP, DIB,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    JPG, JPEG, JPE,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    JP2,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    PNG,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    PBM, PGM, PPM,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    SR, RAS,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    TIFF, TIF,<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;} Format;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html">   76<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;{<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00079"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">   79<\/a><\/span>&#160;  std_msgs::Header <a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>; <\/div><div class="line"><a name="l00080"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">   80<\/a><\/span>&#160;  std::string <a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>;    <\/div><div class="line"><a name="l00081"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">   81<\/a><\/span>&#160;  cv::Mat <a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>;           <\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#adcb3774384cd81c101f3c9beedede4e7">   86<\/a><\/span>&#160;  <a class="code" href="classcv__bridge_1_1CvImage.html#adcb3774384cd81c101f3c9beedede4e7">CvImage<\/a>() {}<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno"><a class="line" href="classcv__bridge_1_1CvImage.html#a6dcfaf2291cb7ce7ece6c422d616bd03">   91<\/a><\/span>&#160;  <a class="code" href="classcv__bridge_1_1CvImage.html#a6dcfaf2291cb7ce7ece6c422d616bd03">CvImage<\/a>(<span class="keyword">const<\/span> std_msgs::Header&amp; header, <span class="keyword">const<\/span> std::string&amp; encoding,<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;          <span class="keyword">const<\/span> cv::Mat&amp; image = cv::Mat())<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    : header(header), encoding(encoding), image(image)<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;  {<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;  }<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;  <\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;  sensor_msgs::ImagePtr toImageMsg() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;  sensor_msgs::CompressedImagePtr toCompressedImageMsg(<span class="keyword">const<\/span> Format dst_format = JPG) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;  <span class="keywordtype">void<\/span> toImageMsg(sensor_msgs::Image&amp; ros_image) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;  <span class="keywordtype">void<\/span> toCompressedImageMsg(sensor_msgs::CompressedImage&amp; ros_image, <span class="keyword">const<\/span> Format dst_format = JPG) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;  <span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage&gt; Ptr;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;  <span class="keyword">typedef<\/span> boost::shared_ptr&lt;CvImage const&gt; ConstPtr;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;  boost::shared_ptr&lt;void const&gt; tracked_object_; <span class="comment">\/\/ for sharing ownership<\/span><\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;  <span class="keyword">friend<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;  CvImageConstPtr toCvShare(<span class="keyword">const<\/span> sensor_msgs::Image&amp; source,<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;                            <span class="keyword">const<\/span> boost::shared_ptr&lt;void const&gt;&amp; tracked_object,<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                            <span class="keyword">const<\/span> std::string&amp; encoding);<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;};<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::ImageConstPtr&amp; source,<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::CompressedImageConstPtr&amp; source,<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::Image&amp; source,<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;CvImagePtr toCvCopy(<span class="keyword">const<\/span> sensor_msgs::CompressedImage&amp; source,<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;CvImageConstPtr toCvShare(<span class="keyword">const<\/span> sensor_msgs::ImageConstPtr&amp; source,<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;                          <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;CvImageConstPtr toCvShare(<span class="keyword">const<\/span> sensor_msgs::Image&amp; source,<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;                          <span class="keyword">const<\/span> boost::shared_ptr&lt;void const&gt;&amp; tracked_object,<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;                          <span class="keyword">const<\/span> std::string&amp; encoding = std::string());<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;CvImagePtr cvtColor(<span class="keyword">const<\/span> CvImageConstPtr&amp; source,<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;                    <span class="keyword">const<\/span> std::string&amp; encoding);<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno"><a class="line" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">  250<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a> {<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;  <a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a>() :<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;    do_dynamic_scaling(<span class="keyword">false<\/span>),<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;    min_image_value(0.0),<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;    max_image_value(0.0),<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;    colormap(-1),<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;    bg_label(-1) {}<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;  <span class="keywordtype">bool<\/span> do_dynamic_scaling;<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;  <span class="keywordtype">double<\/span> min_image_value;<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;  <span class="keywordtype">double<\/span> max_image_value;<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;  <span class="keywordtype">int<\/span> colormap;<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;  <span class="keywordtype">int<\/span> bg_label;<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;};<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;CvImageConstPtr cvtColorForDisplay(<span class="keyword">const<\/span> CvImageConstPtr&amp; source,<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;                                   <span class="keyword">const<\/span> std::string&amp; encoding = std::string(),<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;                                   <span class="keyword">const<\/span> <a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a> options = <a class="code" href="structcv__bridge_1_1CvtColorForDisplayOptions.html">CvtColorForDisplayOptions<\/a>());<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<span class="keywordtype">int<\/span> getCvType(<span class="keyword">const<\/span> std::string&amp; encoding);<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;} <span class="comment">\/\/ namespace cv_bridge<\/span><\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<span class="comment">\/\/ CvImage as a first class message type<\/span><\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<span class="comment">\/\/ The rest of this file hooks into the roscpp serialization API to make CvImage<\/span><\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="comment">\/\/ a first-class message type you can publish and subscribe to directly.<\/span><\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<span class="comment">\/\/ Unfortunately this doesn&#39;t yet work with image_transport, so don&#39;t rewrite all<\/span><\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;<span class="comment">\/\/ your callbacks to use CvImage! It might be useful for specific tasks, like<\/span><\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<span class="comment">\/\/ processing bag files.<\/span><\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<span class="keyword">namespace <\/span>ros {<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;<\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<span class="keyword">namespace <\/span>message_traits {<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>MD5Sum&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;{<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value() { <span class="keywordflow">return<\/span> MD5Sum&lt;sensor_msgs::Image&gt;::value(); }<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp;) { <span class="keywordflow">return<\/span> value(); }<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint64_t static_value1 = MD5Sum&lt;sensor_msgs::Image&gt;::static_value1;<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint64_t static_value2 = MD5Sum&lt;sensor_msgs::Image&gt;::static_value2;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;  <\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;  <span class="comment">\/\/ If the definition of sensor_msgs\/Image changes, we&#39;ll get a compile error here.<\/span><\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;  ROS_STATIC_ASSERT(MD5Sum&lt;sensor_msgs::Image&gt;::static_value1 == 0x060021388200f6f0ULL);<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;  ROS_STATIC_ASSERT(MD5Sum&lt;sensor_msgs::Image&gt;::static_value2 == 0xf447d0fcd9c64743ULL);<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;};<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>DataType&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;{<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value() { <span class="keywordflow">return<\/span> DataType&lt;sensor_msgs::Image&gt;::value(); }<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp;) { <span class="keywordflow">return<\/span> value(); }<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;};<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>Definition&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;{<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value() { <span class="keywordflow">return<\/span> Definition&lt;sensor_msgs::Image&gt;::value(); }<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;  <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* value(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp;) { <span class="keywordflow">return<\/span> value(); }<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;};<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>HasHeader&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt; : TrueType {};<\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;} <span class="comment">\/\/ namespace ros::message_traits<\/span><\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<span class="keyword">namespace <\/span>serialization {<\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;<\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>Serializer&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;{<\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;  <\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Stream&gt;<\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> write(Stream&amp; stream, <span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;  {<\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>);<\/div><div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;    stream.next((uint32_t)m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.rows); <span class="comment">\/\/ height<\/span><\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;    stream.next((uint32_t)m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.cols); <span class="comment">\/\/ width<\/span><\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>);<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;    uint8_t is_bigendian = 0;<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    stream.next(is_bigendian);<\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;    stream.next((uint32_t)m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.step);<\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;    <span class="keywordtype">size_t<\/span> data_size = m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.step*m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.rows;<\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;    stream.next((uint32_t)data_size);<\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;    <span class="keywordflow">if<\/span> (data_size &gt; 0)<\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;      memcpy(stream.advance(data_size), m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.data, data_size);<\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;  }<\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Stream&gt;<\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> read(Stream&amp; stream, <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;  {<\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>);<\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;    uint32_t height, width;<\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;    stream.next(height);<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;    stream.next(width);<\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;    stream.next(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>);<\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;    uint8_t is_bigendian;<\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;    stream.next(is_bigendian);<\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;    uint32_t step, data_size;<\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;    stream.next(step);<\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;    stream.next(data_size);<\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;    <span class="keywordtype">int<\/span> type = cv_bridge::getCvType(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>);<\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;    <span class="comment">\/\/ Construct matrix pointing to the stream data, then copy it to m.image<\/span><\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;    cv::Mat tmp((<span class="keywordtype">int<\/span>)height, (<span class="keywordtype">int<\/span>)width, type, stream.advance(data_size), (size_t)step);<\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;    tmp.copyTo(m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>);<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;  }<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;  <span class="keyword">inline<\/span> <span class="keyword">static<\/span> uint32_t serializedLength(<span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;  {<\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    <span class="keywordtype">size_t<\/span> data_size = m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.step*m.<a class="code" href="classcv__bridge_1_1CvImage.html#a8b0cc1c26637754fbccb91b4fc086526">image<\/a>.rows;<\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;    <span class="keywordflow">return<\/span> serializationLength(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ada0ff87a844dbd6f25a87bf2fee5742f">header<\/a>) + serializationLength(m.<a class="code" href="classcv__bridge_1_1CvImage.html#ac3e39d95b3691df0b08496267517f2db">encoding<\/a>) + 17 + data_size;<\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;  }<\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;};<\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;<\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;} <span class="comment">\/\/ namespace ros::serialization<\/span><\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;<\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;<span class="keyword">namespace <\/span>message_operations {<\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;<\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; <span class="keyword">struct <\/span>Printer&lt;cv_bridge::<a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&gt;<\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;{<\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;  <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> Stream&gt;<\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;  <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> stream(Stream&amp; s, <span class="keyword">const<\/span> std::string&amp; indent, <span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">cv_bridge::CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;  {<\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;  }<\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;};<\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;} <span class="comment">\/\/ namespace ros::message_operations<\/span><\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;<\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;} <span class="comment">\/\/ namespace ros<\/span><\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;<\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecv__bridge.html">cv_bridge<\/a> {<\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<span class="keyword">inline<\/span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, <span class="keyword">const<\/span> <a class="code" href="classcv__bridge_1_1CvImage.html">CvImage<\/a>&amp; m)<\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;{<\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;  ros::message_operations::Printer&lt;CvImage&gt;::stream(s, <span class="stringliteral">&quot;&quot;<\/span>, m);<\/div><div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;  <span class="keywordflow">return<\/span> s;<\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;}<\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;<\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;} <span class="comment">\/\/ namespace cv_bridge<\/span><\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;<\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;<\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classcv__bridge_1_1Exception_html"><div class="ttname"><a href="classcv__bridge_1_1Exception.html">cv_bridge::Exception<\/a><\/div><div class="ttdef"><b>Definition:<\/b> cv_bridge.h:50<\/div><\/div>$/;"	a
l00001	src/doc/html/demoDetector_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef __DEMO_DETECTOR__<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define __DEMO_DETECTOR__<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">\/\/ OpenCV<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/cv.h&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/highgui.h&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">\/\/ DLoopDetector and DBoW2<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/DBoW2.h&quot;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &quot;DLoopDetector.h&quot;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">\/\/for time<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &lt;cctype&gt;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#include &lt;string.h&gt;<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;time.h&gt;<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;dirent.h&quot;<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;ctime&gt;<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a>;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a>;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno"><a class="line" href="classFeatureExtractor.html">   45<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeatureExtractor.html">FeatureExtractor<\/a><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> operator()(<span class="keyword">const<\/span> cv::Mat &amp;im, <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; window_pts,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    vector&lt;cv::KeyPoint&gt; &amp;keys, vector&lt;TDescriptor&gt; &amp;descriptors) <span class="keyword">const<\/span> = 0;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;};<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="comment">\/\/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html">   65<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classdemoDetector.html">demoDetector<\/a><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;{<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  <a class="code" href="classdemoDetector.html">demoDetector<\/a>(<span class="keyword">const<\/span> std::string &amp;vocfile, <span class="keywordtype">int<\/span> width, <span class="keywordtype">int<\/span> height);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;  ~<a class="code" href="classdemoDetector.html">demoDetector<\/a>(){}<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;  <span class="keywordtype">void<\/span> initCameraModel(<span class="keyword">const<\/span> std::string &amp;calib_file);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;  <span class="keywordtype">bool<\/span> run(<span class="keyword">const<\/span> std::string &amp;name,<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;           <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;           <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;           std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;           std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;           <span class="keywordtype">int<\/span> &amp;old_index);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;  <span class="keywordtype">void<\/span> eraseIndex(std::vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;  <span class="comment">\/*Data*\/<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;  std::string m_vocfile;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;  <span class="keywordtype">int<\/span> m_width;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;  <span class="keywordtype">int<\/span> m_height;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;  <span class="keyword">typename<\/span> TDetector::Parameters params;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;  TVocabulary voc;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;  TDetector detector;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;  <span class="keywordtype">void<\/span> readPoseFile(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename, std::vector&lt;double&gt; &amp;xs, <\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    std::vector&lt;double&gt; &amp;ys) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;  <span class="comment">\/\/std::string m_imagedir;<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;  <span class="comment">\/\/std::string m_posefile;<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;};<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<a class="code" href="classdemoDetector.html#a2d5237b35c6f3081c633941e2498fbd8">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::demoDetector<\/a><\/div><div class="line"><a name="l00124"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html#a2d5237b35c6f3081c633941e2498fbd8">  124<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;vocfile, <span class="keywordtype">int<\/span> width, <span class="keywordtype">int<\/span> height)<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;  : m_vocfile(vocfile), m_width(width), m_height(height),<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    params(height, width), voc(vocfile), detector(voc, params)<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;{<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="comment">\/\/params.use_nss = true; \/\/ use normalized similarity score instead of raw score<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="comment">\/\/params.alpha = 0.3; \/\/ nss threshold<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="comment">\/\/params.k = 1; \/\/ a loop must be consistent with 1 previous matches<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="comment">\/\/params.geom_check = GEOM_FLANN; \/\/ use direct index for geometrical checking<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="comment">\/\/params.di_levels = 2; \/\/ use two direct index levels<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    <span class="comment">\/\/printf(&quot;load vocfile %s finish\\n&quot;, vocfile);<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="comment">\/\/printf(&quot;loop image size width: %d height: %d\\n&quot;, params.image_cols,params.image_rows);<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;}<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classdemoDetector.html">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::initCameraModel<\/a><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;calib_file)<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;{<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    detector.initCameraModel(calib_file);<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;}<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classdemoDetector.html">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::eraseIndex<\/a><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;(std::vector&lt;int&gt; &amp;erase_index)<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;{<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    detector.eraseIndex(erase_index);<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;}<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="classdemoDetector.html#a5ceb5319abb4e88181bff6cb4260c72f">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::run<\/a><\/div><div class="line"><a name="l00159"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html#a5ceb5319abb4e88181bff6cb4260c72f">  159<\/a><\/span>&#160;  (<span class="keyword">const<\/span> std::string &amp;name, <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keys, <\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;   <span class="keyword">const<\/span> std::vector&lt;TDescriptor&gt; &amp;descriptors,<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;   std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;   std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;   <span class="keywordtype">int<\/span> &amp;old_index)<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;{  <\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;  <span class="keywordtype">int<\/span> count = 0;<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;  <a class="code" href="structDLoopDetector_1_1DetectionResult.html">DetectionResult<\/a> result;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;  detector.detectLoop(keys, descriptors, result, cur_pts, old_pts); <\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    <\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;  <span class="keywordflow">if<\/span>(result.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#a427fb9effdc502977b4d378e3d768e4c">detection<\/a>())<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;  {<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;      <span class="comment">\/\/cout &lt;&lt; &quot;- loop found with image &quot; &lt;&lt; result.match &lt;&lt; &quot;!&quot;<\/span><\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;      <span class="comment">\/\/  &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;      ++count;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;      old_index = result.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#ac839d3b3043fd78265212d637e261a5b">match<\/a>;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;  }<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;  {<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;      <span class="comment">\/\/cout &lt;&lt; &quot;- No loop: &quot;;<\/span><\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;      <span class="keywordflow">switch<\/span>(result.<a class="code" href="structDLoopDetector_1_1DetectionResult.html#aae22e0ae181344893ec6ca8a59fcc09f">status<\/a>)<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;      {<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a5297c277dd2ea93041d7dce4f8da0782">CLOSE_MATCHES_ONLY<\/a>:<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;All the images in the database are very recent&quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;          <\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a7221ec199ac389d68b52e2c9e68d76d1">NO_DB_RESULTS<\/a>:<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;There are no matches against the database (few features in&quot;<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;          <span class="comment">\/\/  &quot; the image?)&quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;          <\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9de6828dc358dca56888f927bacc19e5">LOW_NSS_FACTOR<\/a>:<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;Little overlap between this image and the previous one&quot;<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;            <\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a77395c6680ee45e93e42d08fd16c9dcf">LOW_SCORES<\/a>:<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;No match reaches the score threshold (alpha: &quot; &lt;&lt;<\/span><\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;          <span class="comment">\/\/  params.alpha &lt;&lt; &quot;)&quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;          <\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a83e3377637c718ec83c8350922d2181c">NO_GROUPS<\/a>:<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;Not enough close matches to create groups. &quot;<\/span><\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; &quot;Best candidate: &quot; &lt;&lt; result.match &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;          <\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19a9fa3c9064468914673266d4ed03a1676">NO_TEMPORAL_CONSISTENCY<\/a>:<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;No temporal consistency (k: &quot; &lt;&lt; params.k &lt;&lt; &quot;). &quot;<\/span><\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; &quot;Best candidate: &quot; &lt;&lt; result.match &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;          <\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;        <span class="keywordflow">case<\/span> <a class="code" href="namespaceDLoopDetector.html#a9a58b8b05a5fa20eefe9a5e8fc3f8f19ae5c2ac1c1c399efa0e0586c8cb6257d8">NO_GEOMETRICAL_CONSISTENCY<\/a>:<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;          <span class="comment">\/\/cout &lt;&lt; &quot;No geometrical consistency. Best candidate: &quot; <\/span><\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;          <span class="comment">\/\/  &lt;&lt; result.match &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;          <\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;        <span class="keywordflow">default<\/span>:<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;          <span class="keywordflow">break<\/span>;<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;      }<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;      <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;  }<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;}<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> TVocabulary, <span class="keyword">class<\/span> TDetector, <span class="keyword">class<\/span> TDescriptor&gt;<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="classdemoDetector.html#a3a4eb4f48ebc421c4f76c813b46b0b21">demoDetector&lt;TVocabulary, TDetector, TDescriptor&gt;::readPoseFile<\/a><\/div><div class="line"><a name="l00229"><\/a><span class="lineno"><a class="line" href="classdemoDetector.html#a3a4eb4f48ebc421c4f76c813b46b0b21">  229<\/a><\/span>&#160;  (<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *filename, std::vector&lt;double&gt; &amp;xs, std::vector&lt;double&gt; &amp;ys)<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;  <span class="keyword">const<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;{<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;  xs.clear();<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;  ys.clear();<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;  <\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;  fstream f(filename, ios::in);<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;  <\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;  <span class="keywordtype">string<\/span> s;<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;  <span class="keywordtype">double<\/span> ts, x, y, t;<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;  <span class="keywordflow">while<\/span>(!f.eof())<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;  {<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    getline(f, s);<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;    <span class="keywordflow">if<\/span>(!f.eof() &amp;&amp; !s.empty())<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    {<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;      sscanf(s.c_str(), <span class="stringliteral">&quot;%lf, %lf, %lf, %lf&quot;<\/span>, &amp;ts, &amp;x, &amp;y, &amp;t);<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;      xs.push_back(x);<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;      ys.push_back(y);<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    }<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;  }<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;  <\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;  f.close();<\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;}<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<span class="comment">\/\/ ---------------------------------------------------------------------------<\/span><\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<\/div><div class="ttc" id="classdemoDetector_html_a5ceb5319abb4e88181bff6cb4260c72f"><div class="ttname"><a href="classdemoDetector.html#a5ceb5319abb4e88181bff6cb4260c72f">demoDetector::run<\/a><\/div><div class="ttdeci">bool run(const std::string &amp;name, const std::vector&lt; cv::KeyPoint &gt; &amp;keys, const std::vector&lt; TDescriptor &gt; &amp;descriptors, std::vector&lt; cv::Point2f &gt; &amp;cur_pts, std::vector&lt; cv::Point2f &gt; &amp;old_pts, int &amp;old_index)<\/div><div class="ttdef"><b>Definition:<\/b> demoDetector.h:159<\/div><\/div>$/;"	a
l00001	src/doc/html/detect__factory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef DETECT_FACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define DETECT_FACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;{<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1detect__factory.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> detect(<span class="keyword">const<\/span> cv::Mat &amp;image, <span class="keywordtype">bool<\/span> detect_blue) = 0;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <span class="comment">\/\/virtual void get_info() = 0;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;};<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;}<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif \/\/ DETECT_FACTORY_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/dragonfly_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_DRAGONFLY_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_DRAGONFLY_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_DRAGONFLY`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/DragonFly_BSD DragonFly BSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__DragonFly__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_DRAGONFLY BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">    defined(__DragonFly__) \\<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_DRAGONFLY<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#   if defined(__DragonFly__)<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_DRAGONFLY_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_DRAGONFLY<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_DRAGONFLY_AVAILABLE<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_DRAGONFLY_NAME &quot;DragonFly BSD&quot;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_DRAGONFLY,BOOST_OS_BSD_DRAGONFLY_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/draw_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __DRAW_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __DRAW_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;random&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#define _DEBUG_VISION<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifdef _DEBUG_VISION<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keywordtype">void<\/span> draw_rotated_rect(<span class="keyword">const<\/span> cv::Mat &amp;img, <span class="keyword">const<\/span> cv::RotatedRect &amp;rect, <span class="keyword">const<\/span> cv::Scalar &amp;color, <span class="keywordtype">int<\/span> thickness=1);<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keywordtype">void<\/span> draw_rotated_rects(<span class="keyword">const<\/span> cv::Mat &amp;img, <span class="keyword">const<\/span> std::vector&lt;cv::RotatedRect&gt; &amp;rects, <span class="keyword">const<\/span> cv::Scalar &amp;color, <span class="keywordtype">int<\/span> thickness=1, <span class="keywordtype">bool<\/span> tab=<span class="keyword">false<\/span>, <span class="keyword">const<\/span> cv::Scalar &amp;text_color=cv::Scalar(100));<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keywordtype">void<\/span> draw_circle(<span class="keyword">const<\/span> cv::Mat &amp;img, <span class="keyword">const<\/span> cv::Point &amp;center, <span class="keywordtype">int<\/span> radius, <span class="keyword">const<\/span> cv::Scalar &amp;color, <span class="keywordtype">int<\/span> thickness=1);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keywordtype">void<\/span> imshowd(<span class="keyword">const<\/span> cv::String &amp;winname, <span class="keyword">const<\/span> cv::Mat &amp;img);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#define draw_rotated_rect(...)<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#define draw_rotated_rects(...)<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#define draw_circle(...)<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#define imshowd(...)<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#endif \/\/ _DEBUG_VISION<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#endif \/\/ !__DRAW_H__<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/endian_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2013-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_ENDIAN_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_ENDIAN_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/library\/c\/gnu.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/macos.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/android.h&gt;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">[heading `BOOST_ENDIAN_*`]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">Detection of endian memory ordering. There are four defined macros<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">in this header that define the various generally possible endian<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">memory orderings:<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_BIG_BYTE`, byte-swapped big-endian.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_BIG_WORD`, word-swapped big-endian.<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_LITTLE_BYTE`, byte-swapped little-endian.<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">* `BOOST_ENDIAN_LITTLE_WORD`, word-swapped little-endian.<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">The detection is conservative in that it only identifies endianness<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">that it knows for certain. In particular bi-endianness is not<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">indicated as is it not practically possible to determine the<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">endianness from anything but an operating system provided<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">header. And the currently known headers do not define that<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">programatic bi-endianness is available.<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">This implementation is a compilation of various publicly available<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">information and acquired knowledge:<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment"># The indispensable documentation of &quot;Pre-defined Compiler Macros&quot;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">  [@http:\/\/sourceforge.net\/p\/predef\/wiki\/Endianness Endianness].<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"># The various endian specifications available in the<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">  [@http:\/\/wikipedia.org\/ Wikipedia] computer architecture pages.<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"># Generally available searches for headers that define endianness.<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_WORD BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_WORD BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">\/* GNU libc provides a header defining __BYTE_ORDER, or _BYTE_ORDER.<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment"> * And some OSs provide some for of endian header also.<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#   if BOOST_LIB_C_GNU || BOOST_OS_ANDROID<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#       include &lt;endian.h&gt;<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#   else<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#       if BOOST_OS_MACOS<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">#           include &lt;machine\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#       else<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#           if BOOST_OS_BSD<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#               if BOOST_OS_BSD_OPEN<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#                   include &lt;machine\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#               else<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#                   include &lt;sys\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#               endif<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#           endif<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#   if defined(__BYTE_ORDER)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#       if defined(__BIG_ENDIAN) &amp;&amp; (__BYTE_ORDER == __BIG_ENDIAN)<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#       if defined(__LITTLE_ENDIAN) &amp;&amp; (__BYTE_ORDER == __LITTLE_ENDIAN)<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#       if defined(__PDP_ENDIAN) &amp;&amp; (__BYTE_ORDER == __PDP_ENDIAN)<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_WORD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#   if !defined(__BYTE_ORDER) &amp;&amp; defined(_BYTE_ORDER)<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#       if defined(_BIG_ENDIAN) &amp;&amp; (_BYTE_ORDER == _BIG_ENDIAN)<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor">#       if defined(_LITTLE_ENDIAN) &amp;&amp; (_BYTE_ORDER == _LITTLE_ENDIAN)<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">#       if defined(_PDP_ENDIAN) &amp;&amp; (_BYTE_ORDER == _PDP_ENDIAN)<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_WORD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="comment">\/* Built-in byte-swpped big-endian macros.<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="preprocessor">#   if (defined(__BIG_ENDIAN__) &amp;&amp; !defined(__LITTLE_ENDIAN__)) || \\<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="preprocessor">       (defined(_BIG_ENDIAN) &amp;&amp; !defined(_LITTLE_ENDIAN)) || \\<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<span class="preprocessor">        defined(__ARMEB__) || \\<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">        defined(__THUMBEB__) || \\<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="preprocessor">        defined(__AARCH64EB__) || \\<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">        defined(_MIPSEB) || \\<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="preprocessor">        defined(__MIPSEB) || \\<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<span class="preprocessor">        defined(__MIPSEB__)<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="comment">\/* Built-in byte-swpped little-endian macros.<\/span><\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">#   if (defined(__LITTLE_ENDIAN__) &amp;&amp; !defined(__BIG_ENDIAN__)) || \\<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">       (defined(_LITTLE_ENDIAN) &amp;&amp; !defined(_BIG_ENDIAN)) || \\<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">        defined(__ARMEL__) || \\<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="preprocessor">        defined(__THUMBEL__) || \\<\/span><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">        defined(__AARCH64EL__) || \\<\/span><\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor">        defined(_MIPSEL) || \\<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="preprocessor">        defined(__MIPSEL) || \\<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">        defined(__MIPSEL__)<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="comment">\/* Some architectures are strictly one endianess (as opposed<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="comment"> * the current common bi-endianess).<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/architecture.h&gt;<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">#   if BOOST_ARCH_M68K || \\<\/span><\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_PARISC || \\<\/span><\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_SPARC || \\<\/span><\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_SYS370 || \\<\/span><\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_SYS390 || \\<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_Z<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_BIG_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="preprocessor">#   if BOOST_ARCH_AMD64 || \\<\/span><\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_IA64 || \\<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_X86 || \\<\/span><\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor">        BOOST_ARCH_BLACKFIN<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="preprocessor">#       undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="preprocessor">#       define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<span class="comment">\/* Windows on ARM, if not otherwise detected\/specified, is always<\/span><\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="comment"> * byte-swaped little-endian.<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="preprocessor">#if !BOOST_ENDIAN_BIG_BYTE &amp;&amp; !BOOST_ENDIAN_BIG_WORD &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">    !BOOST_ENDIAN_LITTLE_BYTE &amp;&amp; !BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<span class="preprocessor">#   if BOOST_ARCH_ARM<\/span><\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">#       include &lt;boost\/predef\/os\/windows.h&gt;<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="preprocessor">#       if BOOST_OS_WINDOWS<\/span><\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="preprocessor">#           undef BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="preprocessor">#           define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_BIG_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_BIG_WORD<\/span><\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_BIG_WORD_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_LITTLE_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<span class="preprocessor">#   define BOOST_ENDIAN_LITTLE_WORD_BYTE_AVAILABLE<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_BYTE_NAME &quot;Byte-Swapped Big-Endian&quot;<\/span><\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_BIG_WORD_NAME &quot;Word-Swapped Big-Endian&quot;<\/span><\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_BYTE_NAME &quot;Byte-Swapped Little-Endian&quot;<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<span class="preprocessor">#define BOOST_ENDIAN_LITTLE_WORD_NAME &quot;Word-Swapped Little-Endian&quot;<\/span><\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_BIG_BYTE,BOOST_ENDIAN_BIG_BYTE_NAME)<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_BIG_WORD,BOOST_ENDIAN_BIG_WORD_NAME)<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_LITTLE_BYTE,BOOST_ENDIAN_LITTLE_BYTE_NAME)<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_ENDIAN_LITTLE_WORD,BOOST_ENDIAN_LITTLE_WORD_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/endian__compat_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2013<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_DETAIL_ENDIAN_COMPAT_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DETAIL_ENDIAN_COMPAT_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/other\/endian.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_BIG_BYTE<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#   define BOOST_BIG_ENDIAN<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#   define BOOST_BYTE_ORDER 4321<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_BYTE<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#   define BOOST_LITTLE_ENDIAN<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#   define BOOST_BYTE_ORDER 1234<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#if BOOST_ENDIAN_LITTLE_WORD<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#   define BOOST_PDP_ENDIAN<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#   define BOOST_BYTE_ORDER 2134<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/estimator_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;parameters.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;feature_manager.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;initial\/solve_5pts.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;initial\/initial_sfm.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;initial\/initial_alignment.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;initial\/initial_ex_rotation.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Header.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Float32.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;factor\/imu_factor.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;factor\/pose_local_parameterization.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;factor\/projection_factor.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;factor\/marginalization_factor.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;thread&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#include &lt;pthread.h&gt;<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor">#include &lt;syscall.h&gt;<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &lt;sys\/types.h&gt;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &lt;queue&gt;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno"><a class="line" href="structRetriveData.html">   28<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structRetriveData.html">RetriveData<\/a><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;{<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="comment">\/* data *\/<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">int<\/span> old_index;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">int<\/span> cur_index;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keywordtype">double<\/span> header;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    Vector3d P_old;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    Quaterniond Q_old;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    Vector3d P_cur;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    Quaterniond Q_cur;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    vector&lt;cv::Point2f&gt; measurements;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    vector&lt;int&gt; features_ids; <\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">bool<\/span> use;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Vector3d relative_t;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    Quaterniond relative_q;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">double<\/span> relative_yaw;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">double<\/span> loop_pose[7];<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;};<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="classEstimator.html">   47<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classEstimator.html">Estimator<\/a><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;{<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <a class="code" href="classEstimator.html">Estimator<\/a>();<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">void<\/span> setParameter();<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="comment">\/\/ interface<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keywordtype">void<\/span> processIMU(<span class="keywordtype">double<\/span> t, <span class="keyword">const<\/span> Vector3d &amp;linear_acceleration, <span class="keyword">const<\/span> Vector3d &amp;angular_velocity);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">void<\/span> processImage(<span class="keyword">const<\/span> map&lt;<span class="keywordtype">int<\/span>, vector&lt;pair&lt;int, Vector3d&gt;&gt;&gt; &amp;image, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="comment">\/\/ internal<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordtype">void<\/span> clearState();<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">bool<\/span> initialStructure();<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keywordtype">bool<\/span> visualInitialAlign();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keywordtype">bool<\/span> relativePose(Matrix3d &amp;relative_R, Vector3d &amp;relative_T, <span class="keywordtype">int<\/span> &amp;l);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">void<\/span> slideWindow();<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keywordtype">void<\/span> solveOdometry();<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keywordtype">void<\/span> slideWindowNew();<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keywordtype">void<\/span> slideWindowOld();<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">void<\/span> optimization();<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keywordtype">void<\/span> vector2double();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordtype">void<\/span> double2vector();<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordtype">bool<\/span> failureDetection();<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keyword">enum<\/span> SolverFlag<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    {<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        INITIAL,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        NON_LINEAR<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    };<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keyword">enum<\/span> MarginalizationFlag<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    {<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        MARGIN_OLD = 0,<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        MARGIN_SECOND_NEW = 1<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    };<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    SolverFlag solver_flag;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    MarginalizationFlag  marginalization_flag;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    Vector3d g;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    MatrixXd Ap[2], backup_A;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    VectorXd bp[2], backup_b;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    Matrix3d ric[NUM_OF_CAM];<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    Vector3d tic[NUM_OF_CAM];<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    Vector3d Ps[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    Vector3d Vs[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    Matrix3d Rs[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    Vector3d Bas[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    Vector3d Bgs[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    Matrix3d back_R0, last_R, last_R0;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    Vector3d back_P0, last_P, last_P0;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    std_msgs::Header Headers[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a> *pre_integrations[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    Vector3d acc_0, gyr_0;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    vector&lt;double&gt; dt_buf[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    vector&lt;Vector3d&gt; linear_acceleration_buf[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    vector&lt;Vector3d&gt; angular_velocity_buf[(WINDOW_SIZE + 1)];<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">int<\/span> frame_count;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keywordtype">int<\/span> sum_of_outlier, sum_of_back, sum_of_front, sum_of_invalid;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <a class="code" href="classFeatureManager.html">FeatureManager<\/a> f_manager;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <a class="code" href="classMotionEstimator.html">MotionEstimator<\/a> m_estimator;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <a class="code" href="classInitialEXRotation.html">InitialEXRotation<\/a> initial_ex_rotation;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keywordtype">bool<\/span> first_imu;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    <span class="keywordtype">bool<\/span> is_valid, is_key;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">bool<\/span> failure_occur;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    vector&lt;Vector3d&gt; point_cloud;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    vector&lt;Vector3d&gt; margin_cloud;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    vector&lt;Vector3d&gt; key_poses;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordtype">double<\/span> initial_timestamp;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="keywordtype">double<\/span> para_Pose[WINDOW_SIZE + 1][SIZE_POSE];<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keywordtype">double<\/span> para_SpeedBias[WINDOW_SIZE + 1][SIZE_SPEEDBIAS];<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keywordtype">double<\/span> para_Feature[NUM_OF_F][SIZE_FEATURE];<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keywordtype">double<\/span> para_Ex_Pose[NUM_OF_CAM][SIZE_POSE];<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">double<\/span> para_Retrive_Pose[SIZE_POSE];<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <a class="code" href="structRetriveData.html">RetriveData<\/a> retrive_pose_data, front_pose;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keywordtype">int<\/span> loop_window_index;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a> *last_marginalization_info;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    vector&lt;double *&gt; last_marginalization_parameter_blocks;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    map&lt;double, ImageFrame&gt; all_image_frame;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a> *tmp_pre_integration;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;};<\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	src/doc/html/feature__manager_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef FEATURE_MANAGER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define FEATURE_MANAGER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;ros\/assert.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;parameters.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno"><a class="line" href="classFeaturePerFrame.html">   18<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeaturePerFrame.html">FeaturePerFrame<\/a><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <a class="code" href="classFeaturePerFrame.html">FeaturePerFrame<\/a>(<span class="keyword">const<\/span> Vector3d &amp;_point)<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    {<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        z = _point(2);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        point = _point \/ z;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    Vector3d point;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">double<\/span> z;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">bool<\/span> is_used;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">double<\/span> parallax;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    MatrixXd A;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    VectorXd b;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">double<\/span> dep_gradient;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classFeaturePerId.html">   35<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeaturePerId.html">FeaturePerId<\/a><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;{<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> feature_id;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">int<\/span> start_frame;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    vector&lt;FeaturePerFrame&gt; feature_per_frame;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keywordtype">int<\/span> used_num;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">bool<\/span> is_outlier;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">bool<\/span> is_margin;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">double<\/span> estimated_depth;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keywordtype">int<\/span> solve_flag; <span class="comment">\/\/ 0 haven&#39;t solve yet; 1 solve succ; 2 solve fail;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    Vector3d gt_p;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <a class="code" href="classFeaturePerId.html">FeaturePerId<\/a>(<span class="keywordtype">int<\/span> _feature_id, <span class="keywordtype">int<\/span> _start_frame)<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        : feature_id(_feature_id), start_frame(_start_frame),<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;          used_num(0), estimated_depth(-1.0), solve_flag(0)<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    {<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    }<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">int<\/span> endFrame();<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;};<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno"><a class="line" href="classFeatureManager.html">   59<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeatureManager.html">FeatureManager<\/a><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;{<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <a class="code" href="classFeatureManager.html">FeatureManager<\/a>(Matrix3d _Rs[]);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keywordtype">void<\/span> setRic(Matrix3d _ric[]);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keywordtype">void<\/span> clearState();<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keywordtype">int<\/span> getFeatureCount();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordtype">bool<\/span> addFeatureCheckParallax(<span class="keywordtype">int<\/span> frame_count, <span class="keyword">const<\/span> map&lt;<span class="keywordtype">int<\/span>, vector&lt;pair&lt;int, Vector3d&gt;&gt;&gt; &amp;image);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordtype">void<\/span> debugShow();<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; getCorresponding(<span class="keywordtype">int<\/span> frame_count_l, <span class="keywordtype">int<\/span> frame_count_r);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="comment">\/\/void updateDepth(const VectorXd &amp;x);<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="keywordtype">void<\/span> setDepth(<span class="keyword">const<\/span> VectorXd &amp;x);<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">void<\/span> removeFailures();<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">void<\/span> clearDepth(<span class="keyword">const<\/span> VectorXd &amp;x);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    VectorXd getDepthVector();<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">void<\/span> triangulate(Vector3d Ps[], Vector3d tic[], Matrix3d ric[]);<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordtype">void<\/span> removeBackShiftDepth(Eigen::Matrix3d marg_R, Eigen::Vector3d marg_P, Eigen::Matrix3d new_R, Eigen::Vector3d new_P);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordtype">void<\/span> removeBack();<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keywordtype">void<\/span> removeFront(<span class="keywordtype">int<\/span> frame_count);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keywordtype">void<\/span> removeOutlier();<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    list&lt;FeaturePerId&gt; feature;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordtype">int<\/span> last_track_num;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">double<\/span> compensatedParallax2(<span class="keyword">const<\/span> <a class="code" href="classFeaturePerId.html">FeaturePerId<\/a> &amp;it_per_id, <span class="keywordtype">int<\/span> frame_count);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keyword">const<\/span> Matrix3d *Rs;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    Matrix3d ric[NUM_OF_CAM];<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;};<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespaceEigen_html"><div class="ttname"><a href="namespaceEigen.html">Eigen<\/a><\/div><\/div>$/;"	a
l00001	src/doc/html/feature__tracker_2src_2parameters_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/highgui\/highgui.hpp&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> ROW;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> COL;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> FOCAL_LENGTH;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_OF_CAM = 1;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">extern<\/span> std::string IMAGE_TOPIC;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">extern<\/span> std::string IMU_TOPIC;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">extern<\/span> std::string FISHEYE_MASK;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">extern<\/span> std::vector&lt;std::string&gt; CAM_NAMES;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> MAX_CNT;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> MIN_DIST;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> WINDOW_SIZE;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> FREQ;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> F_THRESHOLD;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> SHOW_TRACK;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> STEREO_TRACK;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> EQUALIZE;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> FISHEYE;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keywordtype">void<\/span> readParameters(ros::NodeHandle &amp;n);<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/feature__tracker_2src_2tic__toc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ctime&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno"><a class="line" href="classTicToc.html">    7<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTicToc.html">TicToc<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <a class="code" href="classTicToc.html">TicToc<\/a>()<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;        tic();<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    }<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keywordtype">void<\/span> tic()<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        start = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">double<\/span> toc()<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    {<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        end = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        std::chrono::duration&lt;double&gt; elapsed_seconds = end - start;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordflow">return<\/span> elapsed_seconds.count() * 1000;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::chrono::time_point&lt;std::chrono::system_clock&gt; start, end;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="ttc" id="classTicToc_html"><div class="ttname"><a href="classTicToc.html">TicToc<\/a><\/div><div class="ttdef"><b>Definition:<\/b> tic_toc.h:7<\/div><\/div>$/;"	a
l00001	src/doc/html/feature__tracker_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;queue&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;execinfo.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;csignal&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CameraFactory.h&quot;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CataCamera.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/EquidistantCamera.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/PinholeCamera.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/ScaramuzzaCamera.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;parameters.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keywordtype">bool<\/span> inBorder(<span class="keyword">const<\/span> cv::Point2f &amp;pt);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keywordtype">void<\/span> reduceVector(vector&lt;cv::Point2f&gt; &amp;v, vector&lt;uchar&gt; status);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keywordtype">void<\/span> reduceVector(vector&lt;int&gt; &amp;v, vector&lt;uchar&gt; status);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno"><a class="line" href="classFeatureTracker.html">   30<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFeatureTracker.html">FeatureTracker<\/a><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <a class="code" href="classFeatureTracker.html">FeatureTracker<\/a>();<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordtype">void<\/span> readImage(<span class="keyword">const<\/span> cv::Mat &amp;_img);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">void<\/span> setMask();<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> addPoints();<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">bool<\/span> updateID(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i);<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">void<\/span> readIntrinsicParameter(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;calib_file);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">void<\/span> showUndistortion(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;name);<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordtype">void<\/span> rejectWithF();<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    vector&lt;cv::Point2f&gt; undistortedPoints();<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    cv::Mat mask;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    cv::Mat fisheye_mask;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    cv::Mat prev_img, cur_img, forw_img;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    vector&lt;cv::Point2f&gt; n_pts;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    vector&lt;cv::Point2f&gt; prev_pts, cur_pts, forw_pts;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    vector&lt;int&gt; ids;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    vector&lt;int&gt; track_cnt;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    camodocal::CameraPtr m_camera;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">int<\/span> n_id, img_cnt;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;};<\/div><div class="ttc" id="namespaceEigen_html"><div class="ttname"><a href="namespaceEigen.html">Eigen<\/a><\/div><\/div>$/;"	a
l00001	src/doc/html/free_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_FREE_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_FREE_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_FREE`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Freebsd FreeBSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__FreeBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    [[`__FreeBSD_version`] [V.R.P]]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_FREE BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">    defined(__FreeBSD__) \\<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_FREE<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   if defined(__FreeBSD_version)<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#       if __FreeBSD_version &lt; 500000<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_FREE \\<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">                BOOST_PREDEF_MAKE_10_VRP000(__FreeBSD_version)<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#       else<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_FREE \\<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">                BOOST_PREDEF_MAKE_10_VRR000(__FreeBSD_version)<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#   else<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_FREE BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_FREE<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_FREE_AVAILABLE<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_FREE_NAME &quot;Free BSD&quot;<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_FREE,BOOST_OS_BSD_FREE_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/gnu_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_LIBRARY_C_GNU_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_LIBRARY_C_GNU_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/library\/c\/_prefix.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#if defined(__STDC__)<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;stddef.h&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#elif defined(__cplusplus)<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">[heading `BOOST_LIB_C_GNU`]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Glibc GNU glibc] Standard C library.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">Version number available as major, and minor.<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">    [[`__GLIBC__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">    [[`__GNU_LIBRARY__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">    [[`__GLIBC__`, `__GLIBC_MINOR__`] [V.R.0]]<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">    [[`__GNU_LIBRARY__`, `__GNU_LIBRARY_MINOR__`] [V.R.0]]<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#define BOOST_LIB_C_GNU BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#if defined(__GLIBC__) || defined(__GNU_LIBRARY__)<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   undef BOOST_LIB_C_GNU<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#   if defined(__GLIBC__)<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#       define BOOST_LIB_C_GNU \\<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">            BOOST_VERSION_NUMBER(__GLIBC__,__GLIBC_MINOR__,0)<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#   else<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#       define BOOST_LIB_C_GNU \\<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">            BOOST_VERSION_NUMBER(__GNU_LIBRARY__,__GNU_LIBRARY_MINOR__,0)<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#if BOOST_LIB_C_GNU<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#   define BOOST_LIB_C_GNU_AVAILABLE<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define BOOST_LIB_C_GNU_NAME &quot;GNU&quot;<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_LIB_C_GNU,BOOST_LIB_C_GNU_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/gpl_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GPL_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GPL_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cmath&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/core.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecamodocal.html">camodocal<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">const<\/span> T clamp(<span class="keyword">const<\/span> T&amp; v, <span class="keyword">const<\/span> T&amp; a, <span class="keyword">const<\/span> T&amp; b)<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <span class="keywordflow">return<\/span> std::min(b, std::max(a, v));<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keywordtype">double<\/span> hypot3(<span class="keywordtype">double<\/span> x, <span class="keywordtype">double<\/span> y, <span class="keywordtype">double<\/span> z);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keywordtype">float<\/span> hypot3f(<span class="keywordtype">float<\/span> x, <span class="keywordtype">float<\/span> y, <span class="keywordtype">float<\/span> z);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">const<\/span> T normalizeTheta(<span class="keyword">const<\/span> T&amp; theta)<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;{<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    T normTheta = theta;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordflow">while<\/span> (normTheta &lt; - M_PI)<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    {<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        normTheta += 2.0 * M_PI;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    }<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordflow">while<\/span> (normTheta &gt; M_PI)<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    {<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;        normTheta -= 2.0 * M_PI;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    }<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keywordflow">return<\/span> normTheta;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;}<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keywordtype">double<\/span> d2r(<span class="keywordtype">double<\/span> deg);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keywordtype">float<\/span> d2r(<span class="keywordtype">float<\/span> deg);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keywordtype">double<\/span> r2d(<span class="keywordtype">double<\/span> rad);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keywordtype">float<\/span> r2d(<span class="keywordtype">float<\/span> rad);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keywordtype">double<\/span> sinc(<span class="keywordtype">double<\/span> theta);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">const<\/span> T square(<span class="keyword">const<\/span> T&amp; x)<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordflow">return<\/span> x * x;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;}<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="keyword">const<\/span> T cube(<span class="keyword">const<\/span> T&amp; x)<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;{<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordflow">return<\/span> x * x * x;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;}<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keyword">const<\/span> T random(<span class="keyword">const<\/span> T&amp; a, <span class="keyword">const<\/span> T&amp; b)<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;{<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span><span class="keywordtype">double<\/span><span class="keyword">&gt;<\/span>(rand()) \/ RAND_MAX * (b - a) + a;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;}<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">const<\/span> T randomNormal(<span class="keyword">const<\/span> T&amp; sigma)<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;{<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    T x1, x2, w;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordflow">do<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    {<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        x1 = 2.0 * random(0.0, 1.0) - 1.0;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        x2 = 2.0 * random(0.0, 1.0) - 1.0;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        w = x1 * x1 + x2 * x2;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    }<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordflow">while<\/span> (w &gt;= 1.0 || w == 0.0);<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    w = sqrt((-2.0 * log(w)) \/ w);<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordflow">return<\/span> x1 * w * sigma;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;}<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="keywordtype">unsigned<\/span> <span class="keywordtype">long<\/span> <span class="keywordtype">long<\/span> timeInMicroseconds(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="keywordtype">double<\/span> timeInSeconds(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="keywordtype">void<\/span> colorDepthImage(cv::Mat&amp; imgDepth,<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;                     cv::Mat&amp; imgColoredDepth,<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;                     <span class="keywordtype">float<\/span> minRange, <span class="keywordtype">float<\/span> maxRange);<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keywordtype">bool<\/span> colormap(<span class="keyword">const<\/span> std::string&amp; name, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">char<\/span> idx,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;              <span class="keywordtype">float<\/span>&amp; r, <span class="keywordtype">float<\/span>&amp; g, <span class="keywordtype">float<\/span>&amp; b);<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;std::vector&lt;cv::Point2i&gt; bresLine(<span class="keywordtype">int<\/span> x0, <span class="keywordtype">int<\/span> y0, <span class="keywordtype">int<\/span> x1, <span class="keywordtype">int<\/span> y1);<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;std::vector&lt;cv::Point2i&gt; bresCircle(<span class="keywordtype">int<\/span> x0, <span class="keywordtype">int<\/span> y0, <span class="keywordtype">int<\/span> r);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="keywordtype">void<\/span> fitCircle(<span class="keyword">const<\/span> std::vector&lt;cv::Point2d&gt;&amp; points,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;               <span class="keywordtype">double<\/span>&amp; centerX, <span class="keywordtype">double<\/span>&amp; centerY, <span class="keywordtype">double<\/span>&amp; radius);<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;std::vector&lt;cv::Point2d&gt; intersectCircles(<span class="keywordtype">double<\/span> x1, <span class="keywordtype">double<\/span> y1, <span class="keywordtype">double<\/span> r1,<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                                          <span class="keywordtype">double<\/span> x2, <span class="keywordtype">double<\/span> y2, <span class="keywordtype">double<\/span> r2);<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="keywordtype">void<\/span> LLtoUTM(<span class="keywordtype">double<\/span> latitude, <span class="keywordtype">double<\/span> longitude,<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;             <span class="keywordtype">double<\/span>&amp; utmNorthing, <span class="keywordtype">double<\/span>&amp; utmEasting,<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;             std::string&amp; utmZone);<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="keywordtype">void<\/span> UTMtoLL(<span class="keywordtype">double<\/span> utmNorthing, <span class="keywordtype">double<\/span> utmEasting,<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;             <span class="keyword">const<\/span> std::string&amp; utmZone,<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;             <span class="keywordtype">double<\/span>&amp; latitude, <span class="keywordtype">double<\/span>&amp; longitude);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="keywordtype">long<\/span> <span class="keywordtype">int<\/span> timestampDiff(uint64_t t1, uint64_t t2);<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;}<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacecamodocal_html"><div class="ttname"><a href="namespacecamodocal.html">camodocal<\/a><\/div><div class="ttdef"><b>Definition:<\/b> CameraCalibration.h:8<\/div><\/div>$/;"	a
l00001	src/doc/html/graph_legend.html	/^<p>Consider the following example: <\/p><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;\/*! Invisible class because of truncation *\/<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;class Invisible { };<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;\/*! Truncated class, inheritance relation is hidden *\/<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;class Truncated : public Invisible { };<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;\/* Class not documented with doxygen comments *\/<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;class Undocumented { };<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;\/*! Class that is inherited using public inheritance *\/<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;class PublicBase : public Truncated { };<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;\/*! A template class *\/<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;template&lt;class T&gt; class Templ { };<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;\/*! Class that is inherited using protected inheritance *\/<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;class ProtectedBase { };<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;\/*! Class that is inherited using private inheritance *\/<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;class PrivateBase { };<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;\/*! Class that is used by the Inherited class *\/<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;class Used { };<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;\/*! Super class that inherits a number of other classes *\/<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;class Inherited : public PublicBase,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                  protected ProtectedBase,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;                  private PrivateBase,<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;                  public Undocumented,<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;                  public Templ&lt;int&gt;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  private:<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    Used *m_usedClass;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><\/div><!-- fragment --><p> This will result in the following graph:<\/p>$/;"	a
l00001	src/doc/html/image__utility_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __UTILITY_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __UTILITY_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;functional&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define if_less_equal(num, condition) if (num &lt; condition) { num = condition; }<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define if_more_equal(num, condition) if (num &gt; condition) { num = condition; }<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define if_more_swap(num1, num2) if (num1 &gt; num2) { std::swap(num1, num2); }<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="comment">\/\/ 计算一条直线的角度, 范围 0-180 度<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="comment">\/\/ 参数: firstPt 第一个点<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="comment">\/\/ 参数: secondPt 第二个点<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="comment">\/\/ 返回值: 角度 (0-180)<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">double<\/span> calcLineDegree(<span class="keyword">const<\/span> cv::Point2f&amp; firstPt, <span class="keyword">const<\/span> cv::Point2f&amp; secondPt);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="comment">\/\/ 将旋转矩形的角度转换为 0-180度<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="comment">\/\/ 参数: box 矩形<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="comment">\/\/ 返回值: 角度 (0-180)<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">double<\/span> getRcDegree(<span class="keyword">const<\/span> cv::RotatedRect &amp;box);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="comment">\/\/ 计算直线的k、b<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="comment">\/\/ 参数: x1 横坐标1, x2 横坐标2<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="comment">\/\/ 参数: y1 纵坐标1, y2 纵坐标2<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="comment">\/\/ 返回值: 直线的参数k、b<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    std::pair&lt;double, double&gt; get_linear_parameters(T x1, T y1, T x2, T y2);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="comment">\/\/ 两点计算直线 k、b<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="comment">\/\/ 参数: point1 点1<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="comment">\/\/ 参数: point2 点2<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="comment">\/\/ 返回值: 直线的参数 k、b<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    std::pair&lt;double, double&gt; get_linear_parameters(T point1, T point2);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="comment">\/\/ 已知直线 k、b, 给定纵坐标 y 计算出坐标 x<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="comment">\/\/ 参数: coefficient 斜率 k<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="comment">\/\/ 参数: intercept 截距 b<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="comment">\/\/ 返回值: 横坐标 x 的值<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    T get_linear_x(<span class="keywordtype">double<\/span> coefficient, <span class="keywordtype">double<\/span> intercept, T y);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="comment">\/\/ 已知直线 k、b, 给定横坐标 x 计算出坐标 y<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="comment">\/\/ 参数: coefficient 斜率 k<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="comment">\/\/ 参数: intercept 截距 b<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="comment">\/\/ 返回值: 纵坐标 y 的值<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    T get_linear_y(<span class="keywordtype">double<\/span> coefficient, <span class="keywordtype">double<\/span> intercept, T x);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="comment">\/\/ 遍历旋转矩形内部的所有像素点<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="comment">\/\/ 参数: rect 旋转矩形<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="comment">\/\/ 参数: func 回调函数<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="comment">\/\/ 参数: xstep x坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="comment">\/\/ 参数: ystep y坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keywordtype">void<\/span> for_each(<span class="keyword">const<\/span> cv::RotatedRect &amp;rect, <span class="keyword">const<\/span> std::function&lt;<span class="keywordtype">void<\/span>(<span class="keywordtype">int<\/span>, <span class="keywordtype">int<\/span>)&gt; &amp;func, <span class="keywordtype">int<\/span> xstep = 1, <span class="keywordtype">int<\/span> ystep = 1);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="comment">\/\/ 遍历旋转矩形内部的所有像素点<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="comment">\/\/ 参数: rect 旋转矩形<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="comment">\/\/ 参数: xmin x坐标最大值<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="comment">\/\/ 参数: ymin y坐标最大值<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="comment">\/\/ 参数: xmax x坐标最大值<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="comment">\/\/ 参数: ymax y坐标最大值<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="comment">\/\/ 参数: func 回调函数<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="comment">\/\/ 参数: xstep x坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="comment">\/\/ 参数: ystep y坐标方向跳过点数<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">void<\/span> for_each(<span class="keyword">const<\/span> cv::RotatedRect &amp;rect, <span class="keywordtype">float<\/span> xmin, <span class="keywordtype">float<\/span> ymin, <span class="keywordtype">float<\/span> xmax, <span class="keywordtype">float<\/span> ymax, <span class="keyword">const<\/span> std::function&lt;<span class="keywordtype">void<\/span>(<span class="keywordtype">int<\/span>, <span class="keywordtype">int<\/span>)&gt; &amp;func, <span class="keywordtype">int<\/span> xstep = 1, <span class="keywordtype">int<\/span> ystep = 1);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="comment">\/\/ 计算两点距离的平方<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="comment">\/\/ 参数: point1 第一个点<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="comment">\/\/ 参数: point2 第二个点<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离的平方<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">double<\/span> squaredist(<span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point1, <span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point2);<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="comment">\/\/ 计算两点距离的平方<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="comment">\/\/ 参数: x1 第一个点的x坐标<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="comment">\/\/ 参数: y1 第一个点的y坐标<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="comment">\/\/ 参数: x2 第二个点的x坐标<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="comment">\/\/ 参数: y2 第二个点的y坐标<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离的平方<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keywordtype">double<\/span> squaredist(T x1, T y1, T x2, T y2);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="comment">\/\/ 计算两点距离<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="comment">\/\/ 参数: point1 第一个点<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ 参数: point2 第二个点<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="keywordtype">double<\/span> distance(<span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point1, <span class="keyword">const<\/span> cv::Point_&lt;T&gt; &amp;point2);<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/ 计算两点距离<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/ 参数: x1 第一个点的x坐标<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="comment">\/\/ 参数: y1 第一个点的y坐标<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/ 参数: x2 第二个点的x坐标<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="comment">\/\/ 参数: y2 第二个点的y坐标<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点距离<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keywordtype">double<\/span> distance(T x1, T y1, T x2, T y2);<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="comment">\/\/ 计算两点的中心点坐标<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="comment">\/\/ 参数: point1 第一个点<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="comment">\/\/ 参数: point2 第二个点<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="comment">\/\/ 返回值: 两点的中心点坐标<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    T center_point(<span class="keyword">const<\/span> T &amp;point1, <span class="keyword">const<\/span> T &amp;point2);<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="comment">\/\/ 判断点与直线的距离<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="comment">\/\/ 参数: coefficient 直线斜率 k<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="comment">\/\/ 参数: intercept 直线截距 b<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="comment">\/\/ 参数: point 需要计算的点<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    <span class="comment">\/\/ 返回值: 点与直线的距离<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    <span class="keywordtype">double<\/span> point_to_line(<span class="keywordtype">double<\/span> coefficient, <span class="keywordtype">double<\/span> intercept, <span class="keyword">const<\/span> T &amp;point);<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="comment">\/\/ 判断点是否在另外两点构成的直线上<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    <span class="comment">\/\/ 参数: point1 直线点 1<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="comment">\/\/ 参数: point2 直线点 2 <\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="comment">\/\/ 参数: point 将要判断的点<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="comment">\/\/ 返回值: true or false<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="keywordtype">bool<\/span> point_in_line(<span class="keyword">const<\/span> T &amp;point1, <span class="keyword">const<\/span> T &amp;point2, <span class="keyword">const<\/span> T &amp;point);<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;}<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;}<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#endif \/\/ __UTILITY_H__<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/imu__factor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;ros\/assert.h&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;integration_base.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classIMUFactor.html">   12<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIMUFactor.html">IMUFactor<\/a> : <span class="keyword">public<\/span> ceres::SizedCostFunction&lt;15, 7, 9, 7, 9&gt;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;{<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <a class="code" href="classIMUFactor.html">IMUFactor<\/a>() = <span class="keyword">delete<\/span>;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <a class="code" href="classIMUFactor.html">IMUFactor<\/a>(<a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>* _pre_integration):pre_integration(_pre_integration)<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classIMUFactor.html#a086785cb07ec6de3dd12abf50078f13f">   19<\/a><\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="classIMUFactor.html#a086785cb07ec6de3dd12abf50078f13f">Evaluate<\/a>(<span class="keywordtype">double<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> *parameters, <span class="keywordtype">double<\/span> *residuals, <span class="keywordtype">double<\/span> **jacobians)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        Eigen::Vector3d Pi(parameters[0][0], parameters[0][1], parameters[0][2]);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        Eigen::Quaterniond Qi(parameters[0][6], parameters[0][3], parameters[0][4], parameters[0][5]);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        Eigen::Vector3d Vi(parameters[1][0], parameters[1][1], parameters[1][2]);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        Eigen::Vector3d Bai(parameters[1][3], parameters[1][4], parameters[1][5]);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        Eigen::Vector3d Bgi(parameters[1][6], parameters[1][7], parameters[1][8]);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        Eigen::Vector3d Pj(parameters[2][0], parameters[2][1], parameters[2][2]);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        Eigen::Quaterniond Qj(parameters[2][6], parameters[2][3], parameters[2][4], parameters[2][5]);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        Eigen::Vector3d Vj(parameters[3][0], parameters[3][1], parameters[3][2]);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        Eigen::Vector3d Baj(parameters[3][3], parameters[3][4], parameters[3][5]);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        Eigen::Vector3d Bgj(parameters[3][6], parameters[3][7], parameters[3][8]);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/\/Eigen::Matrix&lt;double, 15, 15&gt; Fd;<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">\/\/Eigen::Matrix&lt;double, 15, 12&gt; Gd;<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pPj = Pi + Vi * sum_t - 0.5 * g * sum_t * sum_t + corrected_delta_p;<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/\/Eigen::Quaterniond pQj = Qi * delta_q;<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pVj = Vi - g * sum_t + corrected_delta_v;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pBaj = Bai;<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">\/\/Eigen::Vector3d pBgj = Bgi;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">\/\/Vi + Qi * delta_v - g * sum_dt = Vj;<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">\/\/Qi * delta_q = Qj;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">\/\/delta_p = Qi.inverse() * (0.5 * g * sum_dt * sum_dt + Pj - Pi);<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">\/\/delta_v = Qi.inverse() * (g * sum_dt + Vj - Vi);<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">\/\/delta_q = Qi.inverse() * Qj;<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordflow">if<\/span> ((Bai - pre_integration-&gt;linearized_ba).norm() &gt; 0.10 ||<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;            (Bgi - pre_integration-&gt;linearized_bg).norm() &gt; 0.01)<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        {<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            pre_integration-&gt;repropagate(Bai, Bgi);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        }<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 1&gt;&gt; residual(residuals);<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        residual = pre_integration-&gt;evaluate(Pi, Qi, Vi, Bai, Bgi,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;                                            Pj, Qj, Vj, Baj, Bgj);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        Eigen::Matrix&lt;double, 15, 15&gt; sqrt_info = Eigen::LLT&lt;Eigen::Matrix&lt;double, 15, 15&gt;&gt;(pre_integration-&gt;covariance.inverse()).matrixL().transpose();<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="comment">\/\/sqrt_info.setIdentity();<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        residual = sqrt_info * residual;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordflow">if<\/span> (jacobians)<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        {<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            <span class="keywordtype">double<\/span> sum_dt = pre_integration-&gt;sum_dt;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            Eigen::Matrix3d dp_dba = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_P, O_BA);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            Eigen::Matrix3d dp_dbg = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_P, O_BG);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            Eigen::Matrix3d dq_dbg = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_R, O_BG);<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            Eigen::Matrix3d dv_dba = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_V, O_BA);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            Eigen::Matrix3d dv_dbg = pre_integration-&gt;jacobian.template block&lt;3, 3&gt;(O_V, O_BG);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            <span class="keywordflow">if<\/span> (pre_integration-&gt;jacobian.maxCoeff() &gt; 1e8 || pre_integration-&gt;jacobian.minCoeff() &lt; -1e8)<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            {<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                ROS_WARN(<span class="stringliteral">&quot;numerical unstable in preintegration&quot;<\/span>);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;                <span class="comment">\/\/std::cout &lt;&lt; pre_integration-&gt;jacobian &lt;&lt; std::endl;<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="comment"><\/span>            }<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[0])<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            {<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 7, Eigen::RowMajor&gt;&gt; jacobian_pose_i(jacobians[0]);<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                jacobian_pose_i.setZero();<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_P, O_P) = -Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_P, O_R) = Utility::skewSymmetric(Qi.inverse() * (0.5 * G * sum_dt * sum_dt + Pj - Pi - Vi * sum_dt));<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            jacobian_pose_i.block&lt;3, 3&gt;(O_R, O_R) = -(Qj.inverse() * Qi).toRotationMatrix();<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                Eigen::Quaterniond corrected_delta_q = pre_integration-&gt;delta_q * Utility::deltaQ(dq_dbg * (Bgi - pre_integration-&gt;linearized_bg));<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_R, O_R) = -(Utility::Qleft(Qj.inverse() * Qi) * Utility::Qright(corrected_delta_q)).bottomRightCorner&lt;3, 3&gt;();<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;                jacobian_pose_i.block&lt;3, 3&gt;(O_V, O_R) = Utility::skewSymmetric(Qi.inverse() * (G * sum_dt + Vj - Vi));<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;                jacobian_pose_i = sqrt_info * jacobian_pose_i;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;                <span class="keywordflow">if<\/span> (jacobian_pose_i.maxCoeff() &gt; 1e8 || jacobian_pose_i.minCoeff() &lt; -1e8)<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;                {<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                    ROS_WARN(<span class="stringliteral">&quot;numerical unstable in preintegration&quot;<\/span>);<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                    <span class="comment">\/\/std::cout &lt;&lt; sqrt_info &lt;&lt; std::endl;<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                    ROS_BREAK();<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                }<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            }<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[1])<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            {<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 9, Eigen::RowMajor&gt;&gt; jacobian_speedbias_i(jacobians[1]);<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;                jacobian_speedbias_i.setZero();<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_P, O_V - O_V) = -Qi.inverse().toRotationMatrix() * sum_dt;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_P, O_BA - O_V) = -dp_dba;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_P, O_BG - O_V) = -dp_dbg;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            jacobian_speedbias_i.block&lt;3, 3&gt;(O_R, O_BG - O_V) = -dq_dbg;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;                Eigen::Quaterniond corrected_delta_q = pre_integration-&gt;delta_q * Utility::deltaQ(dq_dbg * (Bgi - pre_integration-&gt;linearized_bg));<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_R, O_BG - O_V) = -Utility::Qleft(Qj.inverse() * Qi * corrected_delta_q).bottomRightCorner&lt;3, 3&gt;() * dq_dbg;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_V, O_V - O_V) = -Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_V, O_BA - O_V) = -dv_dba;<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_V, O_BG - O_V) = -dv_dbg;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_BA, O_BA - O_V) = -Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;                jacobian_speedbias_i.block&lt;3, 3&gt;(O_BG, O_BG - O_V) = -Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;                jacobian_speedbias_i = sqrt_info * jacobian_speedbias_i;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_i.maxCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_i.minCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            }<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[2])<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;            {<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 7, Eigen::RowMajor&gt;&gt; jacobian_pose_j(jacobians[2]);<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                jacobian_pose_j.setZero();<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                jacobian_pose_j.block&lt;3, 3&gt;(O_P, O_P) = Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            jacobian_pose_j.block&lt;3, 3&gt;(O_R, O_R) = Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;                Eigen::Quaterniond corrected_delta_q = pre_integration-&gt;delta_q * Utility::deltaQ(dq_dbg * (Bgi - pre_integration-&gt;linearized_bg));<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;                jacobian_pose_j.block&lt;3, 3&gt;(O_R, O_R) = Utility::Qleft(corrected_delta_q.inverse() * Qi.inverse() * Qj).bottomRightCorner&lt;3, 3&gt;();<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;                jacobian_pose_j = sqrt_info * jacobian_pose_j;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                ROS_ASSERT(fabs(jacobian_pose_j.maxCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                ROS_ASSERT(fabs(jacobian_pose_j.minCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            }<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            <span class="keywordflow">if<\/span> (jacobians[3])<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;            {<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                Eigen::Map&lt;Eigen::Matrix&lt;double, 15, 9, Eigen::RowMajor&gt;&gt; jacobian_speedbias_j(jacobians[3]);<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;                jacobian_speedbias_j.setZero();<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;                jacobian_speedbias_j.block&lt;3, 3&gt;(O_V, O_V - O_V) = Qi.inverse().toRotationMatrix();<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                jacobian_speedbias_j.block&lt;3, 3&gt;(O_BA, O_BA - O_V) = Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;                jacobian_speedbias_j.block&lt;3, 3&gt;(O_BG, O_BG - O_V) = Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;                jacobian_speedbias_j = sqrt_info * jacobian_speedbias_j;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_j.maxCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;                ROS_ASSERT(fabs(jacobian_speedbias_j.minCoeff()) &lt; 1e8);<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;            }<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        }<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    }<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    <span class="comment">\/\/bool Evaluate_Direct(double const *const *parameters, Eigen::Matrix&lt;double, 15, 1&gt; &amp;residuals, Eigen::Matrix&lt;double, 15, 30&gt; &amp;jacobians);<\/span><\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="comment">\/\/void checkCorrection();<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <span class="comment">\/\/void checkTransition();<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    <span class="comment">\/\/void checkJacobian(double **parameters);<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>* pre_integration;<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;};<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	src/doc/html/initial__alignment_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/factor\/imu_factor.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;..\/feature_manager.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classImageFrame.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classImageFrame.html">ImageFrame<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        <a class="code" href="classImageFrame.html">ImageFrame<\/a>(){};<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        <a class="code" href="classImageFrame.html">ImageFrame<\/a>(<span class="keyword">const<\/span> map&lt;<span class="keywordtype">int<\/span>, vector&lt;pair&lt;int, Vector3d&gt;&gt;&gt;&amp; _points, <span class="keywordtype">double<\/span> _t):points{_points},t{_t},is_key_frame{<span class="keyword">false<\/span>}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        {<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        };<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        map&lt;int, vector&lt;pair&lt;int, Vector3d&gt; &gt; &gt; points;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        <span class="keywordtype">double<\/span> t;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        Matrix3d R;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        Vector3d T;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a> *pre_integration;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        <span class="keywordtype">bool<\/span> is_key_frame;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;};<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keywordtype">bool<\/span> VisualIMUAlignment(map&lt;double, ImageFrame&gt; &amp;all_image_frame, Vector3d* Bgs, Vector3d &amp;g, VectorXd &amp;x);<\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	src/doc/html/initial__ex__rotation_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/* This class help you to calibrate extrinsic rotation between imu and camera when your totally don&#39;t konw the extrinsic parameter *\/<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno"><a class="line" href="classInitialEXRotation.html">   14<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classInitialEXRotation.html">InitialEXRotation<\/a><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;{<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <a class="code" href="classInitialEXRotation.html">InitialEXRotation<\/a>();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">bool<\/span> CalibrationExRotation(vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; corres, Quaterniond delta_q_imu, Matrix3d &amp;calib_ric_result);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    Matrix3d solveRelativeR(<span class="keyword">const<\/span> vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; &amp;corres);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">double<\/span> testTriangulation(<span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;l,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;                             <span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;r,<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;                             cv::Mat_&lt;double&gt; R, cv::Mat_&lt;double&gt; t);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordtype">void<\/span> decomposeE(cv::Mat E,<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;R1, cv::Mat_&lt;double&gt; &amp;R2,<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;t1, cv::Mat_&lt;double&gt; &amp;t2);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">int<\/span> frame_count;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    vector&lt; Matrix3d &gt; Rc;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    vector&lt; Matrix3d &gt; Rimu;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    vector&lt; Matrix3d &gt; Rc_g;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    Matrix3d ric;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;};<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="ttc" id="classInitialEXRotation_html"><div class="ttname"><a href="classInitialEXRotation.html">InitialEXRotation<\/a><\/div><div class="ttdef"><b>Definition:<\/b> initial_ex_rotation.h:14<\/div><\/div>$/;"	a
l00001	src/doc/html/initial__sfm_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once <\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/rotation.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;deque&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="structSFMFeature.html">   16<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structSFMFeature.html">SFMFeature<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keywordtype">bool<\/span> state;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">int<\/span> id;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    vector&lt;pair&lt;int,Vector2d&gt;&gt; observation;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">double<\/span> position[3];<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">double<\/span> depth;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;};<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="structReprojectionError3D.html">   25<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;{<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a>(<span class="keywordtype">double<\/span> observed_u, <span class="keywordtype">double<\/span> observed_v)<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        :observed_u(observed_u), observed_v(observed_v)<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        {}<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> camera_R, <span class="keyword">const<\/span> T* <span class="keyword">const<\/span> camera_T, <span class="keyword">const<\/span> T* point, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        T p[3];<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        ceres::QuaternionRotatePoint(camera_R, point, p);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        p[0] += camera_T[0]; p[1] += camera_T[1]; p[2] += camera_T[2];<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        T xp = p[0] \/ p[2];<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        T yp = p[1] \/ p[2];<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        residuals[0] = xp - T(observed_u);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        residuals[1] = yp - T(observed_v);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    }<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> observed_x,<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> observed_y) <\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    {<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;              <a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a>, 2, 4, 3, 3&gt;(<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structReprojectionError3D.html">ReprojectionError3D<\/a>(observed_x,observed_y)));<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    }<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">double<\/span> observed_u;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordtype">double<\/span> observed_v;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="classGlobalSFM.html">   56<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classGlobalSFM.html">GlobalSFM<\/a><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;{<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <a class="code" href="classGlobalSFM.html">GlobalSFM<\/a>();<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">bool<\/span> construct(<span class="keywordtype">int<\/span> frame_num, Quaterniond* q, Vector3d* T, <span class="keywordtype">int<\/span> l,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;              <span class="keyword">const<\/span> Matrix3d relative_R, <span class="keyword">const<\/span> Vector3d relative_T,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;              vector&lt;SFMFeature&gt; &amp;sfm_f, map&lt;int, Vector3d&gt; &amp;sfm_tracked_points);<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keywordtype">bool<\/span> solveFrameByPnP(Matrix3d &amp;R_initial, Vector3d &amp;P_initial, <span class="keywordtype">int<\/span> i, vector&lt;SFMFeature&gt; &amp;sfm_f);<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">void<\/span> triangulatePoint(Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose0, Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose1,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                            Vector2d &amp;point0, Vector2d &amp;point1, Vector3d &amp;point_3d);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordtype">void<\/span> triangulateTwoFrames(<span class="keywordtype">int<\/span> frame0, Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose0, <\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;                              <span class="keywordtype">int<\/span> frame1, Eigen::Matrix&lt;double, 3, 4&gt; &amp;Pose1,<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;                              vector&lt;SFMFeature&gt; &amp;sfm_f);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordtype">int<\/span> feature_num;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;};<\/div><div class="ttc" id="structSFMFeature_html"><div class="ttname"><a href="structSFMFeature.html">SFMFeature<\/a><\/div><div class="ttdef"><b>Definition:<\/b> initial_sfm.h:16<\/div><\/div>$/;"	a
l00001	src/doc/html/integration__base_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classIntegrationBase.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>() = <span class="keyword">delete<\/span>;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <a class="code" href="classIntegrationBase.html">IntegrationBase<\/a>(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_0, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_0,<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;                    <span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_ba, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_bg)<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        : acc_0{_acc_0}, gyr_0{_gyr_0}, linearized_acc{_acc_0}, linearized_gyr{_gyr_0},<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;          linearized_ba{_linearized_ba}, linearized_bg{_linearized_bg},<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;            jacobian{Eigen::Matrix&lt;double, 15, 15&gt;::Identity()}, covariance{Eigen::Matrix&lt;double, 15, 15&gt;::Zero()},<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;          sum_dt{0.0}, delta_p{Eigen::Vector3d::Zero()}, delta_q{Eigen::Quaterniond::Identity()}, delta_v{Eigen::Vector3d::Zero()}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    {<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        noise = Eigen::Matrix&lt;double, 18, 18&gt;::Zero();<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        noise.block&lt;3, 3&gt;(0, 0) =  (ACC_N * ACC_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        noise.block&lt;3, 3&gt;(3, 3) =  (GYR_N * GYR_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        noise.block&lt;3, 3&gt;(6, 6) =  (ACC_N * ACC_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;        noise.block&lt;3, 3&gt;(9, 9) =  (GYR_N * GYR_N) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        noise.block&lt;3, 3&gt;(12, 12) =  (ACC_W * ACC_W) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        noise.block&lt;3, 3&gt;(15, 15) =  (GYR_W * GYR_W) * Eigen::Matrix3d::Identity();<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    }<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> push_back(<span class="keywordtype">double<\/span> dt, <span class="keyword">const<\/span> Eigen::Vector3d &amp;acc, <span class="keyword">const<\/span> Eigen::Vector3d &amp;gyr)<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    {<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        dt_buf.push_back(dt);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        acc_buf.push_back(acc);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        gyr_buf.push_back(gyr);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        propagate(dt, acc, gyr);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    }<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">void<\/span> repropagate(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_ba, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_linearized_bg)<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    {<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        sum_dt = 0.0;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        acc_0 = linearized_acc;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        gyr_0 = linearized_gyr;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        delta_p.setZero();<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        delta_q.setIdentity();<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        delta_v.setZero();<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        linearized_ba = _linearized_ba;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        linearized_bg = _linearized_bg;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        jacobian.setIdentity();<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        covariance.setZero();<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> i = 0; i &lt; static_cast&lt;int&gt;(dt_buf.size()); i++)<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;            propagate(dt_buf[i], acc_buf[i], gyr_buf[i]);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    }<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">void<\/span> midPointIntegration(<span class="keywordtype">double<\/span> _dt, <\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_0, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_0,<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_1, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_1,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;delta_p, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;delta_q, <span class="keyword">const<\/span> Eigen::Vector3d &amp;delta_v,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                            <span class="keyword">const<\/span> Eigen::Vector3d &amp;linearized_ba, <span class="keyword">const<\/span> Eigen::Vector3d &amp;linearized_bg,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                            Eigen::Vector3d &amp;result_delta_p, Eigen::Quaterniond &amp;result_delta_q, Eigen::Vector3d &amp;result_delta_v,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                            Eigen::Vector3d &amp;result_linearized_ba, Eigen::Vector3d &amp;result_linearized_bg, <span class="keywordtype">bool<\/span> update_jacobian)<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    {<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="comment">\/\/ROS_INFO(&quot;midpoint integration&quot;);<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        Vector3d un_acc_0 = delta_q * (_acc_0 - linearized_ba);<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        Vector3d un_gyr = 0.5 * (_gyr_0 + _gyr_1) - linearized_bg;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        result_delta_q = delta_q * Quaterniond(1, un_gyr(0) * _dt \/ 2, un_gyr(1) * _dt \/ 2, un_gyr(2) * _dt \/ 2);<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        Vector3d un_acc_1 = result_delta_q * (_acc_1 - linearized_ba);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        Vector3d un_acc = 0.5 * (un_acc_0 + un_acc_1);<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        result_delta_p = delta_p + delta_v * _dt + 0.5 * un_acc * _dt * _dt;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        result_delta_v = delta_v + un_acc * _dt;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        result_linearized_ba = linearized_ba;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        result_linearized_bg = linearized_bg;         <\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keywordflow">if<\/span>(update_jacobian)<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        {<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            Vector3d w_x = 0.5 * (_gyr_0 + _gyr_1) - linearized_bg;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            Vector3d a_0_x = _acc_0 - linearized_ba;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            Vector3d a_1_x = _acc_1 - linearized_ba;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            Matrix3d R_w_x, R_a_0_x, R_a_1_x;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            R_w_x&lt;&lt;0, -w_x(2), w_x(1),<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                w_x(2), 0, -w_x(0),<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;                -w_x(1), w_x(0), 0;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            R_a_0_x&lt;&lt;0, -a_0_x(2), a_0_x(1),<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;                a_0_x(2), 0, -a_0_x(0),<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;                -a_0_x(1), a_0_x(0), 0;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            R_a_1_x&lt;&lt;0, -a_1_x(2), a_1_x(1),<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;                a_1_x(2), 0, -a_1_x(0),<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                -a_1_x(1), a_1_x(0), 0;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;            MatrixXd F = MatrixXd::Zero(15, 15);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;            F.block&lt;3, 3&gt;(0, 0) = Matrix3d::Identity();<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;            F.block&lt;3, 3&gt;(0, 3) = -0.25 * delta_q.toRotationMatrix() * R_a_0_x * _dt * _dt + <\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;                                  -0.25 * result_delta_q.toRotationMatrix() * R_a_1_x * (Matrix3d::Identity() - R_w_x * _dt) * _dt * _dt;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            F.block&lt;3, 3&gt;(0, 6) = MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            F.block&lt;3, 3&gt;(0, 9) = -0.25 * (delta_q.toRotationMatrix() + result_delta_q.toRotationMatrix()) * _dt * _dt;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            F.block&lt;3, 3&gt;(0, 12) = -0.25 * result_delta_q.toRotationMatrix() * R_a_1_x * _dt * _dt * -_dt;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            F.block&lt;3, 3&gt;(3, 3) = Matrix3d::Identity() - R_w_x * _dt;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            F.block&lt;3, 3&gt;(3, 12) = -1.0 * MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            F.block&lt;3, 3&gt;(6, 3) = -0.5 * delta_q.toRotationMatrix() * R_a_0_x * _dt + <\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;                                  -0.5 * result_delta_q.toRotationMatrix() * R_a_1_x * (Matrix3d::Identity() - R_w_x * _dt) * _dt;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;            F.block&lt;3, 3&gt;(6, 6) = Matrix3d::Identity();<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;            F.block&lt;3, 3&gt;(6, 9) = -0.5 * (delta_q.toRotationMatrix() + result_delta_q.toRotationMatrix()) * _dt;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            F.block&lt;3, 3&gt;(6, 12) = -0.5 * result_delta_q.toRotationMatrix() * R_a_1_x * _dt * -_dt;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            F.block&lt;3, 3&gt;(9, 9) = Matrix3d::Identity();<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            F.block&lt;3, 3&gt;(12, 12) = Matrix3d::Identity();<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            <span class="comment">\/\/cout&lt;&lt;&quot;A&quot;&lt;&lt;endl&lt;&lt;A&lt;&lt;endl;<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            MatrixXd V = MatrixXd::Zero(15,18);<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            V.block&lt;3, 3&gt;(0, 0) =  0.25 * delta_q.toRotationMatrix() * _dt * _dt;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            V.block&lt;3, 3&gt;(0, 3) =  0.25 * -result_delta_q.toRotationMatrix() * R_a_1_x  * _dt * _dt * 0.5 * _dt;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            V.block&lt;3, 3&gt;(0, 6) =  0.25 * result_delta_q.toRotationMatrix() * _dt * _dt;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            V.block&lt;3, 3&gt;(0, 9) =  V.block&lt;3, 3&gt;(0, 3);<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            V.block&lt;3, 3&gt;(3, 3) =  0.5 * MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            V.block&lt;3, 3&gt;(3, 9) =  0.5 * MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            V.block&lt;3, 3&gt;(6, 0) =  0.5 * delta_q.toRotationMatrix() * _dt;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            V.block&lt;3, 3&gt;(6, 3) =  0.5 * -result_delta_q.toRotationMatrix() * R_a_1_x  * _dt * 0.5 * _dt;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            V.block&lt;3, 3&gt;(6, 6) =  0.5 * result_delta_q.toRotationMatrix() * _dt;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            V.block&lt;3, 3&gt;(6, 9) =  V.block&lt;3, 3&gt;(6, 3);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            V.block&lt;3, 3&gt;(9, 12) = MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            V.block&lt;3, 3&gt;(12, 15) = MatrixXd::Identity(3,3) * _dt;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            <span class="comment">\/\/step_jacobian = F;<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            <span class="comment">\/\/step_V = V;<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            jacobian = F * jacobian;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;            covariance = F * covariance * F.transpose() + V * noise * V.transpose();<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        }<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    }<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keywordtype">void<\/span> propagate(<span class="keywordtype">double<\/span> _dt, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_acc_1, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_gyr_1)<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    {<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        dt = _dt;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        acc_1 = _acc_1;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        gyr_1 = _gyr_1;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        Vector3d result_delta_p;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        Quaterniond result_delta_q;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        Vector3d result_delta_v;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        Vector3d result_linearized_ba;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        Vector3d result_linearized_bg;<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        midPointIntegration(_dt, acc_0, gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                            linearized_ba, linearized_bg,<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                            result_delta_p, result_delta_q, result_delta_v,<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                            result_linearized_ba, result_linearized_bg, 1);<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        <span class="comment">\/\/checkJacobian(_dt, acc_0, gyr_0, acc_1, gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        <span class="comment">\/\/                    linearized_ba, linearized_bg);<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        delta_p = result_delta_p;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        delta_q = result_delta_q;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        delta_v = result_delta_v;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        linearized_ba = result_linearized_ba;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;        linearized_bg = result_linearized_bg;<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        delta_q.normalize();<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;        sum_dt += dt;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;        acc_0 = acc_1;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        gyr_0 = gyr_1;  <\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;     <\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    }<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    Eigen::Matrix&lt;double, 15, 1&gt; evaluate(<span class="keyword">const<\/span> Eigen::Vector3d &amp;Pi, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;Qi, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Vi, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Bai, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Bgi,<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                                          <span class="keyword">const<\/span> Eigen::Vector3d &amp;Pj, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;Qj, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Vj, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Baj, <span class="keyword">const<\/span> Eigen::Vector3d &amp;Bgj)<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    {<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        Eigen::Matrix&lt;double, 15, 1&gt; residuals;<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        Eigen::Matrix3d dp_dba = jacobian.block&lt;3, 3&gt;(O_P, O_BA);<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        Eigen::Matrix3d dp_dbg = jacobian.block&lt;3, 3&gt;(O_P, O_BG);<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        Eigen::Matrix3d dq_dbg = jacobian.block&lt;3, 3&gt;(O_R, O_BG);<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;        Eigen::Matrix3d dv_dba = jacobian.block&lt;3, 3&gt;(O_V, O_BA);<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        Eigen::Matrix3d dv_dbg = jacobian.block&lt;3, 3&gt;(O_V, O_BG);<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        Eigen::Vector3d dba = Bai - linearized_ba;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        Eigen::Vector3d dbg = Bgi - linearized_bg;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        Eigen::Quaterniond corrected_delta_q = delta_q * Utility::deltaQ(dq_dbg * dbg);<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        Eigen::Vector3d corrected_delta_v = delta_v + dv_dba * dba + dv_dbg * dbg;<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        Eigen::Vector3d corrected_delta_p = delta_p + dp_dba * dba + dp_dbg * dbg;<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_P, 0) = Qi.inverse() * (0.5 * G * sum_dt * sum_dt + Pj - Pi - Vi * sum_dt) - corrected_delta_p;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_R, 0) = 2 * (corrected_delta_q.inverse() * (Qi.inverse() * Qj)).vec();<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_V, 0) = Qi.inverse() * (G * sum_dt + Vj - Vi) - corrected_delta_v;<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_BA, 0) = Baj - Bai;<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        residuals.block&lt;3, 1&gt;(O_BG, 0) = Bgj - Bgi;<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;        <span class="keywordflow">return<\/span> residuals;<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    }<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <span class="keywordtype">double<\/span> dt;<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    Eigen::Vector3d acc_0, gyr_0;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    Eigen::Vector3d acc_1, gyr_1;<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <span class="keyword">const<\/span> Eigen::Vector3d linearized_acc, linearized_gyr;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    Eigen::Vector3d linearized_ba, linearized_bg;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    Eigen::Matrix&lt;double, 15, 15&gt; jacobian, covariance;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    Eigen::Matrix&lt;double, 15, 15&gt; step_jacobian;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    Eigen::Matrix&lt;double, 15, 18&gt; step_V;<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    Eigen::Matrix&lt;double, 18, 18&gt; noise;<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keywordtype">double<\/span> sum_dt;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    Eigen::Vector3d delta_p;<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    Eigen::Quaterniond delta_q;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    Eigen::Vector3d delta_v;<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    std::vector&lt;double&gt; dt_buf;<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;    std::vector&lt;Eigen::Vector3d&gt; acc_buf;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    std::vector&lt;Eigen::Vector3d&gt; gyr_buf;<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;};<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<span class="comment">    void eulerIntegration(double _dt, const Eigen::Vector3d &amp;_acc_0, const Eigen::Vector3d &amp;_gyr_0,<\/span><\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;_acc_1, const Eigen::Vector3d &amp;_gyr_1,<\/span><\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;delta_p, const Eigen::Quaterniond &amp;delta_q, const Eigen::Vector3d &amp;delta_v,<\/span><\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;linearized_ba, const Eigen::Vector3d &amp;linearized_bg,<\/span><\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="comment">                            Eigen::Vector3d &amp;result_delta_p, Eigen::Quaterniond &amp;result_delta_q, Eigen::Vector3d &amp;result_delta_v,<\/span><\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="comment">                            Eigen::Vector3d &amp;result_linearized_ba, Eigen::Vector3d &amp;result_linearized_bg, bool update_jacobian)<\/span><\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<span class="comment">    {<\/span><\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;<span class="comment">        result_delta_p = delta_p + delta_v * _dt + 0.5 * (delta_q * (_acc_1 - linearized_ba)) * _dt * _dt;<\/span><\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;<span class="comment">        result_delta_v = delta_v + delta_q * (_acc_1 - linearized_ba) * _dt;<\/span><\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<span class="comment">        Vector3d omg = _gyr_1 - linearized_bg;<\/span><\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<span class="comment">        omg = omg * _dt \/ 2;<\/span><\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<span class="comment">        Quaterniond dR(1, omg(0), omg(1), omg(2));<\/span><\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<span class="comment">        result_delta_q = (delta_q * dR);   <\/span><\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<span class="comment">        result_linearized_ba = linearized_ba;<\/span><\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<span class="comment">        result_linearized_bg = linearized_bg;         <\/span><\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="comment">        if(update_jacobian)<\/span><\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<span class="comment">        {<\/span><\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<span class="comment">            Vector3d w_x = _gyr_1 - linearized_bg;<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<span class="comment">            Vector3d a_x = _acc_1 - linearized_ba;<\/span><\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;<span class="comment">            Matrix3d R_w_x, R_a_x;<\/span><\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;<span class="comment">            R_w_x&lt;&lt;0, -w_x(2), w_x(1),<\/span><\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<span class="comment">                w_x(2), 0, -w_x(0),<\/span><\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;<span class="comment">                -w_x(1), w_x(0), 0;<\/span><\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<span class="comment">            R_a_x&lt;&lt;0, -a_x(2), a_x(1),<\/span><\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;<span class="comment">                a_x(2), 0, -a_x(0),<\/span><\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;<span class="comment">                -a_x(1), a_x(0), 0;<\/span><\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;<span class="comment">            MatrixXd A = MatrixXd::Zero(15, 15);<\/span><\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;<span class="comment">            \/\/ one step euler 0.5<\/span><\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(0, 3) = 0.5 * (-1 * delta_q.toRotationMatrix()) * R_a_x * _dt;<\/span><\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(0, 6) = MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(0, 9) = 0.5 * (-1 * delta_q.toRotationMatrix()) * _dt;<\/span><\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(3, 3) = -R_w_x;<\/span><\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(3, 12) = -1 * MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(6, 3) = (-1 * delta_q.toRotationMatrix()) * R_a_x;<\/span><\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<span class="comment">            A.block&lt;3, 3&gt;(6, 9) = (-1 * delta_q.toRotationMatrix());<\/span><\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<span class="comment">            \/\/cout&lt;&lt;&quot;A&quot;&lt;&lt;endl&lt;&lt;A&lt;&lt;endl;<\/span><\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;<span class="comment">            MatrixXd U = MatrixXd::Zero(15,12);<\/span><\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(0, 0) =  0.5 * delta_q.toRotationMatrix() * _dt;<\/span><\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(3, 3) =  MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(6, 0) =  delta_q.toRotationMatrix();<\/span><\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(9, 6) = MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;<span class="comment">            U.block&lt;3, 3&gt;(12, 9) = MatrixXd::Identity(3,3);<\/span><\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;<span class="comment">            \/\/ put outside<\/span><\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;<span class="comment">            Eigen::Matrix&lt;double, 12, 12&gt; noise = Eigen::Matrix&lt;double, 12, 12&gt;::Zero();<\/span><\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(0, 0) =  (ACC_N * ACC_N) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(3, 3) =  (GYR_N * GYR_N) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(6, 6) =  (ACC_W * ACC_W) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<span class="comment">            noise.block&lt;3, 3&gt;(9, 9) =  (GYR_W * GYR_W) * Eigen::Matrix3d::Identity();<\/span><\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;<span class="comment">            \/\/write F directly<\/span><\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<span class="comment">            MatrixXd F, V;<\/span><\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;<span class="comment">            F = (MatrixXd::Identity(15,15) + _dt * A);<\/span><\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;<span class="comment">            V = _dt * U;<\/span><\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<span class="comment">            step_jacobian = F;<\/span><\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<span class="comment">            step_V = V;<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<span class="comment">            jacobian = F * jacobian;<\/span><\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<span class="comment">            covariance = F * covariance * F.transpose() + V * noise * V.transpose();<\/span><\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;<span class="comment">        }<\/span><\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;<span class="comment">    }     <\/span><\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<span class="comment">    void checkJacobian(double _dt, const Eigen::Vector3d &amp;_acc_0, const Eigen::Vector3d &amp;_gyr_0, <\/span><\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<span class="comment">                                   const Eigen::Vector3d &amp;_acc_1, const Eigen::Vector3d &amp;_gyr_1,<\/span><\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;delta_p, const Eigen::Quaterniond &amp;delta_q, const Eigen::Vector3d &amp;delta_v,<\/span><\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<span class="comment">                            const Eigen::Vector3d &amp;linearized_ba, const Eigen::Vector3d &amp;linearized_bg)<\/span><\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<span class="comment">    {<\/span><\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<span class="comment">        Vector3d result_delta_p;<\/span><\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<span class="comment">        Quaterniond result_delta_q;<\/span><\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;<span class="comment">        Vector3d result_delta_v;<\/span><\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<span class="comment">        Vector3d result_linearized_ba;<\/span><\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<span class="comment">        Vector3d result_linearized_bg;<\/span><\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<span class="comment">                            result_delta_p, result_delta_q, result_delta_v,<\/span><\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<span class="comment">                            result_linearized_ba, result_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;<span class="comment">        Vector3d turb_delta_p;<\/span><\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;<span class="comment">        Quaterniond turb_delta_q;<\/span><\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<span class="comment">        Vector3d turb_delta_v;<\/span><\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;<span class="comment">        Vector3d turb_linearized_ba;<\/span><\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<span class="comment">        Vector3d turb_linearized_bg;<\/span><\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<span class="comment">        Vector3d turb(0.0001, -0.003, 0.003);<\/span><\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p + turb, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb p       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q * Quaterniond(1, turb(0) \/ 2, turb(1) \/ 2, turb(2) \/ 2), delta_v,<\/span><\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb q       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v + turb,<\/span><\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb v       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<span class="comment">                            linearized_ba + turb, linearized_bg,<\/span><\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb ba       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg + turb,<\/span><\/div><div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb bg       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(0, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(3, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(6, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(9, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_jacobian.block&lt;3, 3&gt;(12, 12) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0 + turb, _gyr_0, _acc_1 , _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb acc_0       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 0) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0 + turb, _acc_1 , _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb _gyr_0       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 3) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1 + turb, _gyr_1, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb acc_1       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 6) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<span class="comment">        midPointIntegration(_dt, _acc_0, _gyr_0, _acc_1 , _gyr_1 + turb, delta_p, delta_q, delta_v,<\/span><\/div><div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;<span class="comment">                            linearized_ba, linearized_bg,<\/span><\/div><div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;<span class="comment">                            turb_delta_p, turb_delta_q, turb_delta_v,<\/span><\/div><div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;<span class="comment">                            turb_linearized_ba, turb_linearized_bg, 0);<\/span><\/div><div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;turb _gyr_1       &quot; &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p diff       &quot; &lt;&lt; (turb_delta_p - result_delta_p).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;p jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(0, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q diff       &quot; &lt;&lt; ((result_delta_q.inverse() * turb_delta_q).vec() * 2).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;q jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(3, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v diff       &quot; &lt;&lt; (turb_delta_v - result_delta_v).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;v jacob diff &quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(6, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba diff      &quot; &lt;&lt; (turb_linearized_ba - result_linearized_ba).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;ba jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(9, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg diff      &quot; &lt;&lt; (turb_linearized_bg - result_linearized_bg).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<span class="comment">        cout &lt;&lt; &quot;bg jacob diff&quot; &lt;&lt; (step_V.block&lt;3, 3&gt;(12, 9) * turb).transpose() &lt;&lt; endl;<\/span><\/div><div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<span class="comment">    }<\/span><\/div><div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;<span class="comment">    *\/<\/span><\/div><div class="ttc" id="classIntegrationBase_html"><div class="ttname"><a href="classIntegrationBase.html">IntegrationBase<\/a><\/div><div class="ttdef"><b>Definition:<\/b> integration_base.h:9<\/div><\/div>$/;"	a
l00001	src/doc/html/ios_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Franz Detro 2014<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Copyright Rene Rivera 2015<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_IOS_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_IOS_H<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[heading `BOOST_OS_IOS`]<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/iOS iOS] operating system.<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    [[`__APPLE__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    [[`__MACH__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">    [[`__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">    [[`__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__`] [__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__*1000]]<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#define BOOST_OS_IOS BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">    defined(__APPLE__) &amp;&amp; defined(__MACH__) &amp;&amp; \\<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">    defined(__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__) \\<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_IOS<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_IOS (__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__*1000)<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#if BOOST_OS_IOS<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_IOS_AVAILABLE<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#define BOOST_OS_IOS_NAME &quot;iOS&quot;<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_IOS,BOOST_OS_IOS_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/keyframe_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __KEY_FRAME_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __KEY_FRAME_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;math.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;..\/estimator.h&quot;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CameraFactory.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/CataCamera.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/EquidistantCamera.h&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/PinholeCamera.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;camodocal\/camera_models\/ScaramuzzaCamera.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &lt;mutex&gt;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;loop_closure.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">\/\/ This functor extracts BRIEF descriptors in the required format<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classBriefExtractor.html">   24<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classBriefExtractor.html">BriefExtractor<\/a>: <span class="keyword">public<\/span> <a class="code" href="classFeatureExtractor.html">FeatureExtractor<\/a>&lt;FBrief::TDescriptor&gt;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;{<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> operator()(<span class="keyword">const<\/span> cv::Mat &amp;im, <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; window_pts,<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    vector&lt;cv::KeyPoint&gt; &amp;keys, vector&lt;BRIEF::bitset&gt; &amp;descriptors) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;  <a class="code" href="classBriefExtractor.html">BriefExtractor<\/a>(<span class="keyword">const<\/span> std::string &amp;pattern_file);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;  <a class="code" href="classDVision_1_1BRIEF.html">DVision::BRIEF<\/a> m_brief;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;};<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classKeyFrame.html">   35<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classKeyFrame.html">KeyFrame<\/a><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;{<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>(<span class="keywordtype">double<\/span> _header, <span class="keywordtype">int<\/span> _global_index, Eigen::Vector3d _T_w_c, Eigen::Matrix3d _R_w_c, cv::Mat &amp;_image, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *_brief_pattern_file);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> setExtrinsic(Eigen::Vector3d T, Eigen::Matrix3d R);    <\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">void<\/span> rejectWithF(vector&lt;cv::Point2f&gt; &amp;measurements_old,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;                     vector&lt;cv::Point2f&gt; &amp;measurements_old_norm,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                     <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">void<\/span> extractBrief(cv::Mat &amp;image);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keywordtype">void<\/span> buildKeyFrameFeatures(<a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordtype">bool<\/span> inAera(cv::Point2f pt, cv::Point2f center, <span class="keywordtype">float<\/span> area_size);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">bool<\/span> searchInAera(cv::Point2f center_cur, <span class="keywordtype">float<\/span> area_size,<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;                      <span class="keyword">const<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">BRIEF::bitset<\/a> window_descriptor,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;                      <span class="keyword">const<\/span> std::vector&lt;BRIEF::bitset&gt; &amp;descriptors_old,<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;                      <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keypoints_old,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;                      cv::Point2f &amp;best_match);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">void<\/span> searchByDes(<span class="keyword">const<\/span> Eigen::Vector3d T_w_i_old, <span class="keyword">const<\/span> Eigen::Matrix3d R_w_i_old,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                     std::vector&lt;cv::Point2f&gt; &amp;measurements_old,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                     std::vector&lt;cv::Point2f&gt; &amp;measurements_old_norm,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                     <span class="keyword">const<\/span> std::vector&lt;BRIEF::bitset&gt; &amp;descriptors_old,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                     <span class="keyword">const<\/span> std::vector&lt;cv::KeyPoint&gt; &amp;keypoints_old,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;                     <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">bool<\/span> findConnectionWithOldFrame(<span class="keyword">const<\/span> <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* old_kf,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;                                    <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; &amp;cur_pts, <span class="keyword">const<\/span> std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                                    std::vector&lt;cv::Point2f&gt; &amp;measurements_old, std::vector&lt;cv::Point2f&gt; &amp;measurements_old_norm,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                                    <span class="keyword">const<\/span> camodocal::CameraPtr &amp;m_camera);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keywordtype">void<\/span> updatePose(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_T_w_i, <span class="keyword">const<\/span> Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordtype">void<\/span> updateOriginPose(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_T_w_i, <span class="keyword">const<\/span> Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">void<\/span> getPose(Eigen::Vector3d &amp;_T_w_i, Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keywordtype">void<\/span> getOriginPose(Eigen::Vector3d &amp;_T_w_i, Eigen::Matrix3d &amp;_R_w_i);<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">void<\/span> addConnection(<span class="keywordtype">int<\/span> index, <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* connected_kf);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordtype">void<\/span> addConnection(<span class="keywordtype">int<\/span> index, <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* connected_kf, Vector3d relative_t, Quaterniond relative_q, <span class="keywordtype">double<\/span> relative_yaw);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordtype">void<\/span> updateLoopConnection(Vector3d relative_t, Quaterniond relative_q, <span class="keywordtype">double<\/span> relative_yaw);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keywordtype">void<\/span> detectLoop(<span class="keywordtype">int<\/span> index);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">void<\/span> removeLoop();<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keywordtype">int<\/span> HammingDis(<span class="keyword">const<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">BRIEF::bitset<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="classDVision_1_1BRIEF.html#abc56a095174a93b0741099f35230b7c5">BRIEF::bitset<\/a> &amp;b);<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    Eigen::Vector3d getLoopRelativeT();<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keywordtype">double<\/span> getLoopRelativeYaw();<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/ data <\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keywordtype">double<\/span> header;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    std::vector&lt;Eigen::Vector3d&gt; point_clouds, point_clouds_origin;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="comment">\/\/feature in origin image plane<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    std::vector&lt;cv::Point2f&gt; measurements, measurements_origin;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="comment">\/\/feature in normalize image plane<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    std::vector&lt;cv::Point2f&gt; pts_normalize;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="comment">\/\/feature ID<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    std::vector&lt;int&gt; features_id, features_id_origin;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="comment">\/\/feature descriptor<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    std::vector&lt;BRIEF::bitset&gt; descriptors;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="comment">\/\/keypoints<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    std::vector&lt;cv::KeyPoint&gt; keypoints;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordtype">int<\/span> global_index;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    cv::Mat image;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    Matrix3d qic;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    Vector3d tic;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keywordtype">int<\/span> COL, ROW;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="keywordtype">bool<\/span> use_retrive;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="keywordtype">bool<\/span> has_loop;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keywordtype">int<\/span> loop_index;<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keywordtype">bool<\/span> update_loop_info;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="comment">\/\/ index t_x t_y t_z q_w q_x q_y q_z yaw<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    <span class="comment">\/\/ old_R_cur old_T_cur<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordtype">bool<\/span> check_loop;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="comment">\/\/ looped by other frame<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    <span class="keywordtype">bool<\/span> is_looped;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="keywordtype">int<\/span> resample_index;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *BRIEF_PATTERN_FILE;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="comment">\/\/ index t_x t_y t_z q_w q_x q_y q_z yaw<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    Eigen::Vector3d T_w_i;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    Eigen::Matrix3d R_w_i;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    Eigen::Vector3d origin_T_w_i;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    Eigen::Matrix3d origin_R_w_i;<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    std::mutex mMutexPose;<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    std::mutex mLoopInfo;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    std::vector&lt;cv::KeyPoint&gt; window_keypoints;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    std::vector&lt;BRIEF::bitset&gt; window_descriptors;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    Eigen::Matrix&lt;double, 8, 1 &gt; loop_info;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;};<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div><div class="ttc" id="classFeatureExtractor_html"><div class="ttname"><a href="classFeatureExtractor.html">FeatureExtractor<\/a><\/div><div class="ttdoc">Generic class to create functors to extract features. <\/div><div class="ttdef"><b>Definition:<\/b> demoDetector.h:45<\/div><\/div>$/;"	a
l00001	src/doc/html/keyframe__database_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;keyframe.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/rotation.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/CameraPoseVisualization.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Path.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Odometry.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PointStamped.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="classKeyFrameDatabase.html">   15<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classKeyFrameDatabase.html">KeyFrameDatabase<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <a class="code" href="classKeyFrameDatabase.html">KeyFrameDatabase<\/a>();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keywordtype">void<\/span> add(<a class="code" href="classKeyFrame.html">KeyFrame<\/a>* pKF);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">void<\/span> resample(vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keywordtype">void<\/span> erase(<a class="code" href="classKeyFrame.html">KeyFrame<\/a>* pKF);<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">int<\/span> size();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> optimize4DoFLoopPoseGraph(<span class="keywordtype">int<\/span> cur_index, Eigen::Vector3d &amp;loop_correct_t, Eigen::Matrix3d &amp;loop_correct_r);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getKeyframe(<span class="keywordtype">int<\/span> index);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getLastKeyframe();<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getLastKeyframe(<span class="keywordtype">int<\/span> last_index);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <a class="code" href="classKeyFrame.html">KeyFrame<\/a>* getLastUncheckKeyframe();<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">void<\/span> getKeyframeIndexList(vector&lt;int&gt; &amp;keyframe_index_list);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">void<\/span> updateVisualization();<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> addLoop(<span class="keywordtype">int<\/span> loop_index);<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    nav_msgs::Path getPath();<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>* getPosegraphVisualization();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    list&lt;KeyFrame*&gt; keyFrameList;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    std::mutex mMutexkeyFrameList;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    std::mutex mOptimiazationPosegraph;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    std::mutex mPath;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    std::mutex mPosegraphVisualization;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">int<\/span> earliest_loop_index;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Vector3d t_drift;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keywordtype">double<\/span> yaw_drift;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    Matrix3d r_drift;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">int<\/span> max_frame_num;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">double<\/span> total_length;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    Vector3d last_P;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    nav_msgs::Path refine_path;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>* posegraph_visualization;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;};<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;T NormalizeAngle(<span class="keyword">const<\/span> T&amp; angle_degrees) {<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;  <span class="keywordflow">if<\/span> (angle_degrees &gt; T(180.0))<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordflow">return<\/span> angle_degrees - T(360.0);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;  <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (angle_degrees &lt; T(-180.0))<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordflow">return<\/span> angle_degrees + T(360.0);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;  <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keywordflow">return<\/span> angle_degrees;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;};<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno"><a class="line" href="classAngleLocalParameterization.html">   61<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAngleLocalParameterization.html">AngleLocalParameterization<\/a> {<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160; <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* theta_radians, <span class="keyword">const<\/span> T* delta_theta_radians,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                  T* theta_radians_plus_delta)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    *theta_radians_plus_delta =<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        NormalizeAngle(*theta_radians + *delta_theta_radians);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  }<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;  <span class="keyword">static<\/span> ceres::LocalParameterization* Create() {<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffLocalParameterization&lt;<a class="code" href="classAngleLocalParameterization.html">AngleLocalParameterization<\/a>,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                                                     1, 1&gt;);<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  }<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;};<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">inline<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="keywordtype">void<\/span> QuaternionInverse(<span class="keyword">const<\/span> T q[4], T q_inverse[4])<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;{<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    q_inverse[0] = q[0];<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    q_inverse[1] = -q[1];<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    q_inverse[2] = -q[2];<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    q_inverse[3] = -q[3];<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;};<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno"><a class="line" href="structRelativeTError.html">   88<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structRelativeTError.html">RelativeTError<\/a><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;{<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <a class="code" href="structRelativeTError.html">RelativeTError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z)<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z){}<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> w_q_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        T i_q_w[4];<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        QuaternionInverse(w_q_i, i_q_w);<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        ceres::QuaternionRotatePoint(i_q_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        residuals[0] = t_i_ij[0] - T(t_x);<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        residuals[1] = t_i_ij[1] - T(t_y);<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        residuals[2] = t_i_ij[2] - T(t_z);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    }<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z) <\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    {<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;              <a class="code" href="structRelativeTError.html">RelativeTError<\/a>, 3, 4, 3, 3&gt;(<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structRelativeTError.html">RelativeTError<\/a>(t_x, t_y, t_z)));<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    }<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;};<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<\/div><div class="line"><a name="l00126"><\/a><span class="lineno"><a class="line" href="structTError.html">  126<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structTError.html">TError<\/a><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;{<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <a class="code" href="structTError.html">TError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z)<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z){}<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        residuals[0] = tj[0] - T(t_x);<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        residuals[1] = tj[1] - T(t_y);<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        residuals[2] = tj[2] - T(t_z);<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    }<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z) <\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    {<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;              <a class="code" href="structTError.html">TError<\/a>, 3, 3&gt;(<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structTError.html">TError<\/a>(t_x, t_y, t_z)));<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    }<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;};<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno"><a class="line" href="structRelativeRTError.html">  152<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structRelativeRTError.html">RelativeRTError<\/a><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;{<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    <a class="code" href="structRelativeRTError.html">RelativeRTError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z, <span class="keywordtype">double<\/span> q_w, <span class="keywordtype">double<\/span> q_x, <span class="keywordtype">double<\/span> q_y, <span class="keywordtype">double<\/span> q_z)<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z), q_w(q_w), q_x(q_x), q_y(q_y), q_z(q_z)<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                  {<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                    t_norm = sqrt(t_x * t_x + t_y * t_y + t_z * t_z);<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                  }<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> w_q_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* w_q_j, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        T i_q_w[4];<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        QuaternionInverse(w_q_i, i_q_w);<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;        ceres::QuaternionRotatePoint(i_q_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        <span class="comment">\/\/residuals[0] = (t_i_ij[0] - T(t_x)) \/ T(t_norm);<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        <span class="comment">\/\/residuals[1] = (t_i_ij[1] - T(t_y)) \/ T(t_norm);<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        <span class="comment">\/\/residuals[2] = (t_i_ij[2] - T(t_z)) \/ T(t_norm);<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        residuals[0] = (t_i_ij[0] - T(t_x));<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        residuals[1] = (t_i_ij[1] - T(t_y));<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;        residuals[2] = (t_i_ij[2] - T(t_z));<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        T relative_q[4];<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        relative_q[0] = T(q_w);<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        relative_q[1] = T(q_x);<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        relative_q[2] = T(q_y);<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;        relative_q[3] = T(q_z);<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        T q_i_j[4];<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;        ceres::QuaternionProduct(i_q_w, w_q_j, q_i_j);<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;        T relative_q_inv[4];<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;        QuaternionInverse(relative_q, relative_q_inv);<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        T error_q[4];<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        ceres::QuaternionProduct(relative_q_inv, q_i_j, error_q); <\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;        residuals[3] = T(2) * error_q[1];<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;        residuals[4] = T(2) * error_q[2];<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        residuals[5] = T(2) * error_q[3];<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    }<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z,<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_w, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> q_z) <\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    {<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;              <a class="code" href="structRelativeRTError.html">RelativeRTError<\/a>, 6, 4, 3, 4, 3&gt;(<\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structRelativeRTError.html">RelativeRTError<\/a>(t_x, t_y, t_z, q_w, q_x, q_y, q_z)));<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    }<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z, t_norm;<\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;    <span class="keywordtype">double<\/span> q_w, q_x, q_y, q_z;<\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;};<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="keywordtype">void<\/span> YawPitchRollToRotationMatrix(<span class="keyword">const<\/span> T yaw, <span class="keyword">const<\/span> T pitch, <span class="keyword">const<\/span> T roll, T R[9])<\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;{<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;    T y = yaw \/ T(180.0) * T(M_PI);<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;    T p = pitch \/ T(180.0) * T(M_PI);<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;    T r = roll \/ T(180.0) * T(M_PI);<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;    R[0] = cos(y) * cos(p);<\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;    R[1] = -sin(y) * cos(r) + cos(y) * sin(p) * sin(r);<\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;    R[2] = sin(y) * sin(r) + cos(y) * sin(p) * cos(r);<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;    R[3] = sin(y) * cos(p);<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;    R[4] = cos(y) * cos(r) + sin(y) * sin(p) * sin(r);<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;    R[5] = -cos(y) * sin(r) + sin(y) * sin(p) * cos(r);<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;    R[6] = -sin(p);<\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;    R[7] = cos(p) * sin(r);<\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;    R[8] = cos(p) * cos(r);<\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;};<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<span class="keywordtype">void<\/span> RotationMatrixTranspose(<span class="keyword">const<\/span> T R[9], T inv_R[9])<\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;{<\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;    inv_R[0] = R[0];<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;    inv_R[1] = R[3];<\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    inv_R[2] = R[6];<\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;    inv_R[3] = R[1];<\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    inv_R[4] = R[4];<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;    inv_R[5] = R[7];<\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;    inv_R[6] = R[2];<\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;    inv_R[7] = R[5];<\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    inv_R[8] = R[8];<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;};<\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<span class="keywordtype">void<\/span> RotationMatrixRotatePoint(<span class="keyword">const<\/span> T R[9], <span class="keyword">const<\/span> T t[3], T r_t[3])<\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;{<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;    r_t[0] = R[0] * t[0] + R[1] * t[1] + R[2] * t[2];<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;    r_t[1] = R[3] * t[0] + R[4] * t[1] + R[5] * t[2];<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;    r_t[2] = R[6] * t[0] + R[7] * t[1] + R[8] * t[2];<\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;};<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;<\/div><div class="line"><a name="l00258"><\/a><span class="lineno"><a class="line" href="structFourDOFError.html">  258<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structFourDOFError.html">FourDOFError<\/a><\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;{<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;    <a class="code" href="structFourDOFError.html">FourDOFError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z, <span class="keywordtype">double<\/span> relative_yaw, <span class="keywordtype">double<\/span> pitch_i, <span class="keywordtype">double<\/span> roll_i)<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z), relative_yaw(relative_yaw), pitch_i(pitch_i), roll_i(roll_i){}<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> yaw_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* yaw_j, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="comment">\/\/ euler to rotation<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;        T w_R_i[9];<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;        YawPitchRollToRotationMatrix(yaw_i[0], T(pitch_i), T(roll_i), w_R_i);<\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        <span class="comment">\/\/ rotation transpose<\/span><\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;        T i_R_w[9];<\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;        RotationMatrixTranspose(w_R_i, i_R_w);<\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;        <span class="comment">\/\/ rotation matrix rotate point<\/span><\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;        RotationMatrixRotatePoint(i_R_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;        residuals[0] = (t_i_ij[0] - T(t_x));<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;        residuals[1] = (t_i_ij[1] - T(t_y));<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        residuals[2] = (t_i_ij[2] - T(t_z));<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;        residuals[3] = NormalizeAngle(yaw_j[0] - yaw_i[0] - T(relative_yaw)) \/ T(10.0);<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;    }<\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z,<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> relative_yaw, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> pitch_i, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> roll_i) <\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;    {<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;              <a class="code" href="structFourDOFError.html">FourDOFError<\/a>, 4, 1, 3, 1, 3&gt;(<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structFourDOFError.html">FourDOFError<\/a>(t_x, t_y, t_z, relative_yaw, pitch_i, roll_i)));<\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;    }<\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;    <span class="keywordtype">double<\/span> relative_yaw, pitch_i, roll_i;<\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;};<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<\/div><div class="line"><a name="l00302"><\/a><span class="lineno"><a class="line" href="structFourDOFWeightError.html">  302<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a><\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;{<\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;    <a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a>(<span class="keywordtype">double<\/span> t_x, <span class="keywordtype">double<\/span> t_y, <span class="keywordtype">double<\/span> t_z, <span class="keywordtype">double<\/span> relative_yaw, <span class="keywordtype">double<\/span> pitch_i, <span class="keywordtype">double<\/span> roll_i)<\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;                  :t_x(t_x), t_y(t_y), t_z(t_z), relative_yaw(relative_yaw), pitch_i(pitch_i), roll_i(roll_i){<\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;                    weight = 5;<\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;                  }<\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;    <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> T* <span class="keyword">const<\/span> yaw_i, <span class="keyword">const<\/span> T* ti, <span class="keyword">const<\/span> T* yaw_j, <span class="keyword">const<\/span> T* tj, T* residuals)<span class="keyword"> const<\/span><\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<span class="keyword">    <\/span>{<\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;        T t_w_ij[3];<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;        t_w_ij[0] = tj[0] - ti[0];<\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        t_w_ij[1] = tj[1] - ti[1];<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        t_w_ij[2] = tj[2] - ti[2];<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;        <span class="comment">\/\/ euler to rotation<\/span><\/div><div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;        T w_R_i[9];<\/div><div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;        YawPitchRollToRotationMatrix(yaw_i[0], T(pitch_i), T(roll_i), w_R_i);<\/div><div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;        <span class="comment">\/\/ rotation transpose<\/span><\/div><div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;        T i_R_w[9];<\/div><div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;        RotationMatrixTranspose(w_R_i, i_R_w);<\/div><div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;        <span class="comment">\/\/ rotation matrix rotate point<\/span><\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;        T t_i_ij[3];<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        RotationMatrixRotatePoint(i_R_w, t_w_ij, t_i_ij);<\/div><div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div><div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;        residuals[0] = (t_i_ij[0] - T(t_x)) * T(weight);<\/div><div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;        residuals[1] = (t_i_ij[1] - T(t_y)) * T(weight);<\/div><div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;        residuals[2] = (t_i_ij[2] - T(t_z)) * T(weight);<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;        residuals[3] = NormalizeAngle((yaw_j[0] - yaw_i[0] - T(relative_yaw))) * T(weight) \/ T(10.0);<\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<\/div><div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;    }<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div><div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;    <span class="keyword">static<\/span> ceres::CostFunction* Create(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_y, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> t_z,<\/div><div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;                                       <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> relative_yaw, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> pitch_i, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> roll_i) <\/div><div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;    {<\/div><div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;      <span class="keywordflow">return<\/span> (<span class="keyword">new<\/span> ceres::AutoDiffCostFunction&lt;<\/div><div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;              <a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a>, 4, 1, 3, 1, 3&gt;(<\/div><div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;                <span class="keyword">new<\/span> <a class="code" href="structFourDOFWeightError.html">FourDOFWeightError<\/a>(t_x, t_y, t_z, relative_yaw, pitch_i, roll_i)));<\/div><div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;    }<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;    <span class="keywordtype">double<\/span> t_x, t_y, t_z;<\/div><div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;    <span class="keywordtype">double<\/span> relative_yaw, pitch_i, roll_i;<\/div><div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;    <span class="keywordtype">double<\/span> weight;<\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;<\/div><div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;};<\/div><div class="ttc" id="classKeyFrame_html"><div class="ttname"><a href="classKeyFrame.html">KeyFrame<\/a><\/div><div class="ttdef"><b>Definition:<\/b> keyframe.h:35<\/div><\/div>$/;"	a
l00001	src/doc/html/labeler_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef LABELER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define LABELER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a> {<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1labeler.html">   12<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1labeler.html">labeler<\/a> {<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;        <a class="code" href="classautocar_1_1vision__mul_1_1labeler.html">labeler<\/a>(std::string img_dir_, std::string label_img_dir_, std::string label_txt_dir_, <span class="keywordtype">int<\/span> cols_=640, <span class="keywordtype">int<\/span> rows_=480);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        ~<a class="code" href="classautocar_1_1vision__mul_1_1labeler.html">labeler<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        <span class="keywordtype">void<\/span> gen_sample(<span class="keyword">const<\/span> cv::Mat &amp;image, std::vector&lt;armor_info&gt; armors);<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        std::string img_dir;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        std::string label_img_dir;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        std::string label_txt_dir;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        <span class="keywordtype">int<\/span> rows;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        <span class="keywordtype">int<\/span> cols;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordtype">int<\/span> count;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    };<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;}<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;}<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#endif \/\/ LABELER_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/loop__closure_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __LOOP_CLOSURE__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __LOOP_CLOSURE__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment">\/\/ DLoopDetector and DBoW2<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DBoW\/DBoW2.h&quot;<\/span> <span class="comment">\/\/ defines BriefVocabulary<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;DLoopDetector.h&quot;<\/span> <span class="comment">\/\/ defines BriefLoopDetector<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;ThirdParty\/DVision\/DVision.h&quot;<\/span> <span class="comment">\/\/ Brief<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/\/ OpenCV<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/cv.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;opencv\/highgui.h&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &quot;demoDetector.h&quot;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">\/\/#include &quot;brief_extractor.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDLoopDetector.html">DLoopDetector<\/a>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDBoW2.html">DBoW2<\/a>;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceDVision.html">DVision<\/a>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno"><a class="line" href="classLoopClosure.html">   26<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLoopClosure.html">LoopClosure<\/a><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;{<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <a class="code" href="classLoopClosure.html">LoopClosure<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span> *voc_file, <span class="keywordtype">int<\/span> _image_w, <span class="keywordtype">int<\/span> _image_h);<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">bool<\/span> startLoopClosure(std::vector&lt;cv::KeyPoint&gt; &amp;keys, std::vector&lt;BRIEF::bitset&gt; &amp;descriptors,<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;                                   std::vector&lt;cv::Point2f&gt; &amp;cur_pts,<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;                                   std::vector&lt;cv::Point2f&gt; &amp;old_pts,<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;                                   <span class="keywordtype">int<\/span> &amp;old_index);<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordtype">void<\/span> initCameraModel(<span class="keyword">const<\/span> std::string &amp;calib_file);<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">void<\/span> eraseIndex(std::vector&lt;int&gt; &amp;erase_index);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="comment">\/* data *\/<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <a class="code" href="classdemoDetector.html">demoDetector&lt;BriefVocabulary, BriefLoopDetector, FBrief::TDescriptor&gt;<\/a> demo;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">int<\/span> IMAGE_W;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">int<\/span> IMAGE_H;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacestd_html"><div class="ttname"><a href="namespacestd.html">std<\/a><\/div><\/div>$/;"	a
l00001	src/doc/html/macos_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Copyright Franz Detro 2014<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_MACOS_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_MACOS_H<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">\/* Special case: iOS will define the same predefs as MacOS, and additionally<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"> &#39;__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__&#39;. We can guard against that,<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment"> but only if we detect iOS first. Hence we will force include iOS detection<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"> * before doing any MacOS detection.<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/ios.h&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/version_number.h&gt;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/make.h&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">[heading `BOOST_OS_MACOS`]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Mac_OS Mac OS] operating system.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">    [[`macintosh`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">    [[`Macintosh`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">    [[`__APPLE__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">    [[`__MACH__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">    [[`__APPLE__`, `__MACH__`] [10.0.0]]<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">    [[ \/otherwise\/ ] [9.0.0]]<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#define BOOST_OS_MACOS BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">    defined(macintosh) || defined(Macintosh) || \\<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">    (defined(__APPLE__) &amp;&amp; defined(__MACH__)) \\<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_MACOS<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_MACOS) &amp;&amp; defined(__APPLE__) &amp;&amp; defined(__MACH__)<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_MACOS BOOST_VERSION_NUMBER(10,0,0)<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_MACOS)<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_MACOS BOOST_VERSION_NUMBER(9,0,0)<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#if BOOST_OS_MACOS<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_MACOS_AVAILABLE<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#define BOOST_OS_MACOS_NAME &quot;Mac OS&quot;<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_MACOS,BOOST_OS_MACOS_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/make_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2008-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_MAKE_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_H<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">Shorthands for the common version number formats used by vendors...<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">[heading `BOOST_PREDEF_MAKE_..` macros]<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">These set of macros decompose common vendor version number<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">macros which are composed version, revision, and patch digits.<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">The naming convention indicates:<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">* The base of the specified version number. &quot;`BOOST_PREDEF_MAKE_0X`&quot; for<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">  hexadecimal digits, and &quot;`BOOST_PREDEF_MAKE_10`&quot; for decimal digits.<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">* The format of the vendor version number. Where &quot;`V`&quot; indicates the version digits,<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">  &quot;`R`&quot; indicates the revision digits, &quot;`P`&quot; indicates the patch digits, and &quot;`0`&quot;<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">  indicates an ignored digit.<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">Macros are:<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRP(V)` *\/<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRP(V) BOOST_VERSION_NUMBER((V&amp;0xF00)&gt;&gt;8,(V&amp;0xF0)&gt;&gt;4,(V&amp;0xF))<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRP(V)` *\/<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRP(V) BOOST_VERSION_NUMBER((V&amp;0xFF00)&gt;&gt;8,(V&amp;0xF0)&gt;&gt;4,(V&amp;0xF))<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRPP(V) BOOST_VERSION_NUMBER((V&amp;0xF000)&gt;&gt;12,(V&amp;0xF00)&gt;&gt;8,(V&amp;0xFF))<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRR(V)` *\/<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRR(V) BOOST_VERSION_NUMBER((V&amp;0xFF00)&gt;&gt;8,(V&amp;0xFF),0)<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRRPPPP(V)` *\/<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRRPPPP(V) BOOST_VERSION_NUMBER((V&amp;0xF000000)&gt;&gt;24,(V&amp;0xFF0000)&gt;&gt;16,(V&amp;0xFFFF))<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRRP(V)` *\/<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRRP(V) BOOST_VERSION_NUMBER((V&amp;0xFF000)&gt;&gt;12,(V&amp;0xFF0)&gt;&gt;4,(V&amp;0xF))<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VRRPP000(V)` *\/<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VRRPP000(V) BOOST_VERSION_NUMBER((V&amp;0xF0000000)&gt;&gt;28,(V&amp;0xFF00000)&gt;&gt;20,(V&amp;0xFF000)&gt;&gt;12)<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_0X_VVRRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_0X_VVRRPP(V) BOOST_VERSION_NUMBER((V&amp;0xFF0000)&gt;&gt;16,(V&amp;0xFF00)&gt;&gt;8,(V&amp;0xFF))<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VPPP(V)` *\/<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VPPP(V) BOOST_VERSION_NUMBER(((V)\/1000)%10,0,(V)%1000)<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRP(V)` *\/<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRP(V) BOOST_VERSION_NUMBER(((V)\/100)%10,((V)\/10)%10,(V)%10)<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRP000(V)` *\/<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRP000(V) BOOST_VERSION_NUMBER(((V)\/100000)%10,((V)\/10000)%10,((V)\/1000)%10)<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRPP(V) BOOST_VERSION_NUMBER(((V)\/1000)%10,((V)\/100)%10,(V)%100)<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRR(V)` *\/<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRR(V) BOOST_VERSION_NUMBER(((V)\/100)%10,(V)%100,0)<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRRPP(V) BOOST_VERSION_NUMBER(((V)\/10000)%10,((V)\/100)%100,(V)%100)<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VRR000(V)` *\/<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VRR000(V) BOOST_VERSION_NUMBER(((V)\/100000)%10,((V)\/1000)%100,0)<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VV00(V)` *\/<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VV00(V) BOOST_VERSION_NUMBER(((V)\/100)%100,0,0)<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR(V)` *\/<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR(V) BOOST_VERSION_NUMBER(((V)\/100)%100,(V)%100,0)<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRRPP(V)` *\/<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRRPP(V) BOOST_VERSION_NUMBER(((V)\/10000)%100,((V)\/100)%100,(V)%100)<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR0PP00(V)` *\/<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR0PP00(V) BOOST_VERSION_NUMBER(((V)\/10000000)%100,((V)\/100000)%100,((V)\/100)%100)<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR0PPPP(V)` *\/<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR0PPPP(V) BOOST_VERSION_NUMBER(((V)\/10000000)%100,((V)\/100000)%100,(V)%10000)<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_10_VVRR00PP00(V)` *\/<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_10_VVRR00PP00(V) BOOST_VERSION_NUMBER(((V)\/100000000)%100,((V)\/1000000)%100,((V)\/100)%100)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="comment">[heading `BOOST_PREDEF_MAKE_*..` date macros]<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="comment">Date decomposition macros return a date in the relative to the 1970<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="comment">Epoch date. If the month is not available, January 1st is used as the month and day.<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="comment">If the day is not available, but the month is, the 1st of the month is used as the day.<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_DATE(Y,M,D)` *\/<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_DATE(Y,M,D) BOOST_VERSION_NUMBER((Y)%10000-1970,(M)%100,(D)%100)<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_YYYYMMDD(V)` *\/<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_YYYYMMDD(V) BOOST_PREDEF_MAKE_DATE(((V)\/10000)%10000,((V)\/100)%100,(V)%100)<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_YYYY(V)` *\/<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_YYYY(V) BOOST_PREDEF_MAKE_DATE(V,1,1)<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="comment">\/*` `BOOST_PREDEF_MAKE_YYYYMM(V)` *\/<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_MAKE_YYYYMM(V) BOOST_PREDEF_MAKE_DATE((V)\/100,(V)%100,1)<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/marginalization__factor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;pthread.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_THREADS = 4;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno"><a class="line" href="structResidualBlockInfo.html">   15<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structResidualBlockInfo.html">ResidualBlockInfo<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <a class="code" href="structResidualBlockInfo.html">ResidualBlockInfo<\/a>(ceres::CostFunction *_cost_function, ceres::LossFunction *_loss_function, std::vector&lt;double *&gt; _parameter_blocks, std::vector&lt;int&gt; _drop_set)<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        : cost_function(_cost_function), loss_function(_loss_function), parameter_blocks(_parameter_blocks), drop_set(_drop_set) {}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">void<\/span> Evaluate();<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    ceres::CostFunction *cost_function;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ceres::LossFunction *loss_function;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    std::vector&lt;double *&gt; parameter_blocks;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    std::vector&lt;int&gt; drop_set;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">double<\/span> **raw_jacobians;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::vector&lt;Eigen::Matrix&lt;double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor&gt;&gt; jacobians;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    Eigen::VectorXd residuals;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">int<\/span> localSize(<span class="keywordtype">int<\/span> size)<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    {<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordflow">return<\/span> size == 7 ? 6 : size;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    }<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;};<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="structThreadsStruct.html">   37<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structThreadsStruct.html">ThreadsStruct<\/a><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;{<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    std::vector&lt;ResidualBlockInfo *&gt; sub_factors;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    Eigen::MatrixXd A;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    Eigen::VectorXd b;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_size; <span class="comment">\/\/global size<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_idx; <span class="comment">\/\/local size<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;};<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="classMarginalizationInfo.html">   46<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;{<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    ~<a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a>();<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">int<\/span> localSize(<span class="keywordtype">int<\/span> size) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="keywordtype">int<\/span> globalSize(<span class="keywordtype">int<\/span> size) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">void<\/span> addResidualBlockInfo(<a class="code" href="structResidualBlockInfo.html">ResidualBlockInfo<\/a> *residual_block_info);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordtype">void<\/span> preMarginalize();<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordtype">void<\/span> marginalize();<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    std::vector&lt;double *&gt; getParameterBlocks(std::unordered_map&lt;long, double *&gt; &amp;addr_shift);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    std::vector&lt;ResidualBlockInfo *&gt; factors;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keywordtype">int<\/span> m, n;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_size; <span class="comment">\/\/global size<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">int<\/span> sum_block_size;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    std::unordered_map&lt;long, int&gt; parameter_block_idx; <span class="comment">\/\/local size<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    std::unordered_map&lt;long, double *&gt; parameter_block_data;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    std::vector&lt;int&gt; keep_block_size; <span class="comment">\/\/global size<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    std::vector&lt;int&gt; keep_block_idx;  <span class="comment">\/\/local size<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    std::vector&lt;double *&gt; keep_block_data;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    Eigen::MatrixXd linearized_jacobians;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    Eigen::VectorXd linearized_residuals;<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> eps = 1e-8;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;};<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno"><a class="line" href="classMarginalizationFactor.html">   74<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMarginalizationFactor.html">MarginalizationFactor<\/a> : <span class="keyword">public<\/span> ceres::CostFunction<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;{<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <a class="code" href="classMarginalizationFactor.html">MarginalizationFactor<\/a>(<a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a>* _marginalization_info);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Evaluate(<span class="keywordtype">double<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> *parameters, <span class="keywordtype">double<\/span> *residuals, <span class="keywordtype">double<\/span> **jacobians) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <a class="code" href="classMarginalizationInfo.html">MarginalizationInfo<\/a>* marginalization_info;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;};<\/div><div class="ttc" id="classMarginalizationInfo_html"><div class="ttname"><a href="classMarginalizationInfo.html">MarginalizationInfo<\/a><\/div><div class="ttdef"><b>Definition:<\/b> marginalization_factor.h:46<\/div><\/div>$/;"	a
l00001	src/doc/html/net_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_NET_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_NET_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_NET`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Netbsd NetBSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__NETBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">    [[`__NetBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    [[`__NETBSD_version`] [V.R.P]]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">    [[`NetBSD0_8`] [0.8.0]]<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">    [[`NetBSD0_9`] [0.9.0]]<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">    [[`NetBSD1_0`] [1.0.0]]<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    [[`__NetBSD_Version`] [V.R.P]]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">    defined(__NETBSD__) || defined(__NetBSD__) \\<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_NET<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#   if defined(__NETBSD__)<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#       if defined(__NETBSD_version)<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#           if __NETBSD_version &lt; 500000<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#               define BOOST_OS_BSD_NET \\<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">                    BOOST_PREDEF_MAKE_10_VRP000(__NETBSD_version)<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#           else<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#               define BOOST_OS_BSD_NET \\<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">                    BOOST_PREDEF_MAKE_10_VRR000(__NETBSD_version)<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#           endif<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">#       else<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#   elif defined(__NetBSD__)<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(NetBSD0_8)<\/span><\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER(0,8,0)<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(NetBSD0_9)<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER(0,9,0)<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(NetBSD1_0)<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER(1,0,0)<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET) &amp;&amp; defined(__NetBSD_Version)<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET \\<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">                BOOST_PREDEF_MAKE_10_VVRR00PP00(__NetBSD_Version)<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#       if !defined(BOOST_OS_BSD_NET)<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#           define BOOST_OS_BSD_NET BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#       endif<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_NET<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_NET_AVAILABLE<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_NET_NAME &quot;DragonFly BSD&quot;<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_NET,BOOST_OS_BSD_NET_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/open_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2012-2015<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_OS_BSD_OPEN_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_OS_BSD_OPEN_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/os\/bsd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">[heading `BOOST_OS_BSD_OPEN`]<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">[@http:\/\/en.wikipedia.org\/wiki\/Openbsd OpenBSD] operating system.<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">[table<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">    [[__predef_symbol__] [__predef_version__]]<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">    [[`__OpenBSD__`] [__predef_detection__]]<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">    [[`OpenBSD2_0`] [2.0.0]]<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">    [[`OpenBSD2_1`] [2.1.0]]<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">    [[`OpenBSD2_2`] [2.2.0]]<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">    [[`OpenBSD2_3`] [2.3.0]]<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">    [[`OpenBSD2_4`] [2.4.0]]<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">    [[`OpenBSD2_5`] [2.5.0]]<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">    [[`OpenBSD2_6`] [2.6.0]]<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">    [[`OpenBSD2_7`] [2.7.0]]<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">    [[`OpenBSD2_8`] [2.8.0]]<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">    [[`OpenBSD2_9`] [2.9.0]]<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">    [[`OpenBSD3_0`] [3.0.0]]<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">    [[`OpenBSD3_1`] [3.1.0]]<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">    [[`OpenBSD3_2`] [3.2.0]]<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">    [[`OpenBSD3_3`] [3.3.0]]<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">    [[`OpenBSD3_4`] [3.4.0]]<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">    [[`OpenBSD3_5`] [3.5.0]]<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">    [[`OpenBSD3_6`] [3.6.0]]<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">    [[`OpenBSD3_7`] [3.7.0]]<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">    [[`OpenBSD3_8`] [3.8.0]]<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">    [[`OpenBSD3_9`] [3.9.0]]<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">    [[`OpenBSD4_0`] [4.0.0]]<\/span><\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment">    [[`OpenBSD4_1`] [4.1.0]]<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">    [[`OpenBSD4_2`] [4.2.0]]<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">    [[`OpenBSD4_3`] [4.3.0]]<\/span><\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">    [[`OpenBSD4_4`] [4.4.0]]<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">    [[`OpenBSD4_5`] [4.5.0]]<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">    [[`OpenBSD4_6`] [4.6.0]]<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">    [[`OpenBSD4_7`] [4.7.0]]<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">    [[`OpenBSD4_8`] [4.8.0]]<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">    [[`OpenBSD4_9`] [4.9.0]]<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment">    ]<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment"> *\/<\/span><\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER_NOT_AVAILABLE<\/span><\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_DETAIL_OS_DETECTED) &amp;&amp; ( \\<\/span><\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">    defined(__OpenBSD__) \\<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">    )<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">#   ifndef BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_AVAILABLE<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#   undef BOOST_OS_BSD_OPEN<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_0)<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,0,0)<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_1)<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,1,0)<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_2)<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,2,0)<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_3)<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,3,0)<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_4)<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,4,0)<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_5)<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,5,0)<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_6)<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,6,0)<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_7)<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,7,0)<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_8)<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,8,0)<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD2_9)<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(2,9,0)<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_0)<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,0,0)<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_1)<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,1,0)<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_2)<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,2,0)<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_3)<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,3,0)<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_4)<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,4,0)<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_5)<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,5,0)<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_6)<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,6,0)<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_7)<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,7,0)<\/span><\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_8)<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,8,0)<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD3_9)<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(3,9,0)<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_0)<\/span><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,0,0)<\/span><\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_1)<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,1,0)<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_2)<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,2,0)<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_3)<\/span><\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,3,0)<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_4)<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,4,0)<\/span><\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_5)<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,5,0)<\/span><\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_6)<\/span><\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,6,0)<\/span><\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_7)<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,7,0)<\/span><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_8)<\/span><\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,8,0)<\/span><\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN) &amp;&amp; defined(OpenBSD4_9)<\/span><\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER(4,9,0)<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="preprocessor">#   if !defined(BOOST_OS_BSD_OPEN)<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">#       define BOOST_OS_BSD_OPEN BOOST_VERSION_NUMBER_AVAILABLE<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor">#   endif<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="preprocessor">#if BOOST_OS_BSD_OPEN<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="preprocessor">#   define BOOST_OS_BSD_OPEN_AVAILABLE<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="preprocessor">#   include &lt;boost\/predef\/detail\/os_detected.h&gt;<\/span><\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">#define BOOST_OS_BSD_OPEN_NAME &quot;OpenBSD&quot;<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="preprocessor">#include &lt;boost\/predef\/detail\/test.h&gt;<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;BOOST_PREDEF_DECLARE_TEST(BOOST_OS_BSD_OPEN,BOOST_OS_BSD_OPEN_NAME)<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/param__manager_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef PARAM_MANAGER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define PARAM_MANAGER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;opencv2\/opencv.hpp&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span>param_mul<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classautocar_1_1param__mul_1_1param__manager.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">param_manager<\/a><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;  <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">param_manager<\/a>();<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> read_params() = 0;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  cv::FileNode root;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;};<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;}<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#endif \/\/ PARAM_MANAGER_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	src/doc/html/pose__local__parameterization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno"><a class="line" href="classPoseLocalParameterization.html">    7<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPoseLocalParameterization.html">PoseLocalParameterization<\/a> : <span class="keyword">public<\/span> ceres::LocalParameterization<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Plus(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> *x, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> *delta, <span class="keywordtype">double<\/span> *x_plus_delta) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> ComputeJacobian(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> *x, <span class="keywordtype">double<\/span> *jacobian) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> GlobalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 7; };<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">int<\/span> LocalSize()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> 6; };<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;};<\/div><div class="ttc" id="classPoseLocalParameterization_html"><div class="ttname"><a href="classPoseLocalParameterization.html">PoseLocalParameterization<\/a><\/div><div class="ttdef"><b>Definition:<\/b> pose_local_parameterization.h:7<\/div><\/div>$/;"	a
l00001	src/doc/html/projection__factor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/assert.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ceres\/ceres.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &quot;..\/utility\/tic_toc.h&quot;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classProjectionFactor.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProjectionFactor.html">ProjectionFactor<\/a> : <span class="keyword">public<\/span> ceres::SizedCostFunction&lt;2, 7, 7, 7, 1&gt;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <a class="code" href="classProjectionFactor.html">ProjectionFactor<\/a>(<span class="keyword">const<\/span> Eigen::Vector3d &amp;_pts_i, <span class="keyword">const<\/span> Eigen::Vector3d &amp;_pts_j);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> Evaluate(<span class="keywordtype">double<\/span> <span class="keyword">const<\/span> *<span class="keyword">const<\/span> *parameters, <span class="keywordtype">double<\/span> *residuals, <span class="keywordtype">double<\/span> **jacobians) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keywordtype">void<\/span> check(<span class="keywordtype">double<\/span> **parameters);<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    Eigen::Vector3d pts_i, pts_j;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    Eigen::Matrix&lt;double, 2, 3&gt; tangent_base;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix2d sqrt_info;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">static<\/span> <span class="keywordtype">double<\/span> sum_t;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;};<\/div><div class="ttc" id="classProjectionFactor_html"><div class="ttname"><a href="classProjectionFactor.html">ProjectionFactor<\/a><\/div><div class="ttdef"><b>Definition:<\/b> projection_factor.h:10<\/div><\/div>$/;"	a
l00001	src/doc/html/rgb__colors_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/\/ -*- mode: c++ -*-<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">\/*********************************************************************<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment"> * Original color definition is at scikit-image distributed with<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment"> * following license disclaimer:<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment"> * Copyright (C) 2011, the scikit-image team<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment"> * All rights reserved.<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment"> * Redistribution and use in source and binary forms, with or without<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment"> * modification, are permitted provided that the following conditions are<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment"> * met:<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"> *   1. Redistributions of source code must retain the above copyright<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment"> *      notice, this list of conditions and the following disclaimer.<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment"> *   2. Redistributions in binary form must reproduce the above copyright<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment"> *      notice, this list of conditions and the following disclaimer in<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"> *      the documentation and\/or other materials provided with the<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment"> *      distribution.<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment"> *   3. Neither the name of skimage nor the names of its contributors may be<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment"> *      used to endorse or promote products derived from this software without<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment"> *      specific prior written permission.<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment"> *<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment"> *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS&#39;&#39; AND ANY EXPRESS OR<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment"> *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment"> *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment"> *  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment"> *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment"> *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"> *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> *  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> *  POSSIBILITY OF SUCH DAMAGE.<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> *********************************************************************\/<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#ifndef CV_BRIDGE_RGB_COLORS_H_<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#define CV_BRIDGE_RGB_COLORS_H_<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespacecv__bridge.html">cv_bridge<\/a><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;{<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">namespace <\/span>rgb_colors<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;{<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;  <span class="keyword">enum<\/span> Colors {<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    ALICEBLUE,<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    ANTIQUEWHITE,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    AQUA,<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    AQUAMARINE,<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    AZURE,<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    BEIGE,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    BISQUE,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    BLACK,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    BLANCHEDALMOND,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    BLUE,<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    BLUEVIOLET,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    BROWN,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    BURLYWOOD,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    CADETBLUE,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    CHARTREUSE,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    CHOCOLATE,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    CORAL,<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    CORNFLOWERBLUE,<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    CORNSILK,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    CRIMSON,<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    CYAN,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    DARKBLUE,<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    DARKCYAN,<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    DARKGOLDENROD,<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    DARKGRAY,<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    DARKGREEN,<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    DARKGREY,<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    DARKKHAKI,<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    DARKMAGENTA,<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    DARKOLIVEGREEN,<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    DARKORANGE,<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    DARKORCHID,<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    DARKRED,<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    DARKSALMON,<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    DARKSEAGREEN,<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    DARKSLATEBLUE,<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    DARKSLATEGRAY,<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    DARKSLATEGREY,<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    DARKTURQUOISE,<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    DARKVIOLET,<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    DEEPPINK,<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    DEEPSKYBLUE,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    DIMGRAY,<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    DIMGREY,<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    DODGERBLUE,<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    FIREBRICK,<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    FLORALWHITE,<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    FORESTGREEN,<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    FUCHSIA,<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    GAINSBORO,<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    GHOSTWHITE,<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    GOLD,<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    GOLDENROD,<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    GRAY,<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    GREEN,<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    GREENYELLOW,<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    GREY,<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    HONEYDEW,<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    HOTPINK,<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    INDIANRED,<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    INDIGO,<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    IVORY,<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    KHAKI,<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    LAVENDER,<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    LAVENDERBLUSH,<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    LAWNGREEN,<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    LEMONCHIFFON,<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    LIGHTBLUE,<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    LIGHTCORAL,<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    LIGHTCYAN,<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    LIGHTGOLDENRODYELLOW,<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    LIGHTGRAY,<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    LIGHTGREEN,<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    LIGHTGREY,<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    LIGHTPINK,<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    LIGHTSALMON,<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    LIGHTSEAGREEN,<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    LIGHTSKYBLUE,<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    LIGHTSLATEGRAY,<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    LIGHTSLATEGREY,<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    LIGHTSTEELBLUE,<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    LIGHTYELLOW,<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    LIME,<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    LIMEGREEN,<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    LINEN,<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    MAGENTA,<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    MAROON,<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    MEDIUMAQUAMARINE,<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    MEDIUMBLUE,<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    MEDIUMORCHID,<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    MEDIUMPURPLE,<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    MEDIUMSEAGREEN,<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    MEDIUMSLATEBLUE,<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    MEDIUMSPRINGGREEN,<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    MEDIUMTURQUOISE,<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    MEDIUMVIOLETRED,<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    MIDNIGHTBLUE,<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    MINTCREAM,<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    MISTYROSE,<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    MOCCASIN,<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    NAVAJOWHITE,<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    NAVY,<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    OLDLACE,<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    OLIVE,<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    OLIVEDRAB,<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    ORANGE,<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;    ORANGERED,<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    ORCHID,<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    PALEGOLDENROD,<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    PALEGREEN,<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    PALEVIOLETRED,<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    PAPAYAWHIP,<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    PEACHPUFF,<\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    PERU,<\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    PINK,<\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;    PLUM,<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    POWDERBLUE,<\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    PURPLE,<\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    RED,<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    ROSYBROWN,<\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    ROYALBLUE,<\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    SADDLEBROWN,<\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    SALMON,<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    SANDYBROWN,<\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    SEAGREEN,<\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    SEASHELL,<\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    SIENNA,<\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;    SILVER,<\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    SKYBLUE,<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    SLATEBLUE,<\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    SLATEGRAY,<\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    SLATEGREY,<\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    SNOW,<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    SPRINGGREEN,<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    STEELBLUE,<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    TAN,<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    TEAL,<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    THISTLE,<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    TOMATO,<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    TURQUOISE,<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    VIOLET,<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    WHEAT,<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    WHITE,<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    WHITESMOKE,<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    YELLOW,<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    YELLOWGREEN,<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;  };<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;  cv::Vec3d getRGBColor(<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> color);<\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;} <span class="comment">\/\/ namespace rgb_colors<\/span><\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;}  <span class="comment">\/\/ namespace cv_bridge<\/span><\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="namespacecv__bridge_html"><div class="ttname"><a href="namespacecv__bridge.html">cv_bridge<\/a><\/div><div class="ttdef"><b>Definition:<\/b> cv_bridge.h:48<\/div><\/div>$/;"	a
l00001	src/doc/html/rune__detect_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef RUNE_DETECT_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define RUNE_DETECT_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;{<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1rune__detect.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1rune__detect.html">rune_detect<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1rune__detect.html">rune_detect<\/a>();<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <span class="keywordtype">bool<\/span> detect();<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;};<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;}<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif \/\/ RUNE_DETECT_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/serial__param_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef SERIAL_PARAM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define SERIAL_PARAM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;\/home\/dji\/dji_beta\/auto_car\/src\/param_manager\/include\/param_manager.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;{<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">namespace <\/span>serial_mul<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;{<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classautocar_1_1serial__mul_1_1serial__param.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html">serial_param<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html#a6bb11de835bf2121af438d711809696e">serial_param<\/a>();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1serial__mul_1_1serial__param.html#a3f2cb297237e8d998b17edb963f804ad">read_params<\/a>();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  std::string serial_port;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;  <span class="keywordtype">int<\/span> serial_baudrate;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;};<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;}<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;}<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#endif \/\/ SERIAL_PARAM_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	src/doc/html/solve__5pts_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">\/\/#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespaceEigen.html">Eigen<\/a>;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;ros\/console.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno"><a class="line" href="classMotionEstimator.html">   13<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMotionEstimator.html">MotionEstimator<\/a><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="keywordtype">bool<\/span> solveRelativeRT(<span class="keyword">const<\/span> vector&lt;pair&lt;Vector3d, Vector3d&gt;&gt; &amp;corres, Matrix3d &amp;R, Vector3d &amp;T);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">double<\/span> testTriangulation(<span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;l,<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;                             <span class="keyword">const<\/span> vector&lt;cv::Point2f&gt; &amp;r,<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;                             cv::Mat_&lt;double&gt; R, cv::Mat_&lt;double&gt; t);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keywordtype">void<\/span> decomposeE(cv::Mat E,<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;R1, cv::Mat_&lt;double&gt; &amp;R2,<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;                    cv::Mat_&lt;double&gt; &amp;t1, cv::Mat_&lt;double&gt; &amp;t2);<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;};<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="ttc" id="namespaceEigen_html"><div class="ttname"><a href="namespaceEigen.html">Eigen<\/a><\/div><\/div>$/;"	a
l00001	src/doc/html/stdHeaders_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef STDHEADER_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define STDHEADER_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/String.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">using namespace <\/span><a class="code" href="namespacestd.html">std<\/a>;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#endif \/\/ STDHEADER_H<\/span><\/div><div class="ttc" id="namespacestd_html"><div class="ttname"><a href="namespacestd.html">std<\/a><\/div><\/div>$/;"	a
l00001	src/doc/html/sysHeaders_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef SYSHEADERS_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define SYSHEADERS_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span>     <span class="comment">\/*standard lib*\/<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span>     <span class="comment">\/*Unix standard func*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;sys\/types.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sys\/stat.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;string.h&quot;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;<\/span>      <span class="comment">\/*file control lib*\/<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;termios.h&gt;<\/span>    <span class="comment">\/*PPSIX terminal*\/<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;<\/span>      <span class="comment">\/*error information*\/<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#ifndef TRUE<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#define TRUE 1<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#ifndef FALSE<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#define FALSE 0<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#endif \/\/ SYSHEADERS_H<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/test_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2011-2012<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_DETAIL_TEST_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DETAIL_TEST_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#if !defined(BOOST_PREDEF_INTERNAL_GENERATE_TESTS)<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_DECLARE_TEST(x,s)<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/tf__factory_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef TF_FACTORY_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define TF_FACTORY_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include&lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include&lt;tf\/transform_broadcaster.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;tf_param.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">namespace <\/span>tf_mul<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="classautocar_1_1tf__mul_1_1tf__factory.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1tf__mul_1_1tf__factory.html">tf_factory<\/a><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;  <a class="code" href="classautocar_1_1tf__mul_1_1tf__factory.html">tf_factory<\/a>();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1tf__mul_1_1tf__factory.html#a45dd850204ea9e3fc923bf229a056124">create_tf<\/a>();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  tf::Quaternion get_rotate();<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  tf::Vector3 get_transf();<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  <span class="comment">\/\/&gt; Rotate parameters<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;  tf::Quaternion *quaternion;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;  <span class="comment">\/\/&gt; Translation parameters<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;  tf::Vector3 *trans;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;  <a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html">tf_param<\/a> param;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  cv::Mat T;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  cv::Mat R;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;}<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#endif \/\/ TF_FACTORY_H<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/tf__param_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef TF_PARAM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define TF_PARAM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;\/home\/dji\/dji_beta\/auto_car\/src\/param_manager\/include\/param_manager.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;{<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span>tf_mul<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classautocar_1_1tf__mul_1_1tf__param.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html">tf_param<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html">tf_param<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1tf__mul_1_1tf__param.html#a9afb78374269f840f94570b6eab36c0d">read_params<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;  cv::Mat get_transf_matrix();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  cv::Mat get_rotate_matrix();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  <span class="comment">\/\/tf_mul<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;  cv::Mat T;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;  cv::Mat R;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;};<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;}<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;}<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#endif \/\/ TF_PARAM_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	src/doc/html/thread__operation_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">\/\/<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;boost\/thread.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;boost\/atomic.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;logical_core\/SetGoal.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/armor_msg.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseStamped.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseWithCovarianceStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;move_base_msgs\/MoveBaseAction.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;armor.h&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;{<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;{<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1thread__operation.html">   20<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;{<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    ~<a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="comment">\/\/ 启动主线程<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keywordtype">void<\/span> running(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">void<\/span> start_running();<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keywordtype">bool<\/span> if_detected_armor();<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="comment">\/\/void pub_goal(bool detected_armor);<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="comment">\/\/void amcl_callback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr&amp; pos);<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keywordtype">bool<\/span> get_camera_num();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keywordtype">void<\/span> set_image_points(cv::RotatedRect rect);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">bool<\/span> detected_armor;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor_;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    geometry_msgs::PoseWithCovarianceStamped car_position;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    boost::atomic&lt;bool&gt; m_buff_avail_flag;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_read_idx;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_write_idx;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    cv::Mat m_img_buff[2];<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordtype">bool<\/span> forward_back = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    ros::Publisher pub_armor_pos;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    vision_unit::armor_msg armor_pos;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    ros::Publisher pub_goal;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    move_base_msgs::MoveBaseGoal goal;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    move_base_msgs::MoveBaseGoal goal_pose;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    cv::Mat camera_matrix;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    cv::Mat dist_coeffs;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    cv::Mat obj_points;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    cv::Mat img_points;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    std::vector&lt;cv::Point3f&gt; obj_p;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    std::vector&lt;cv::Point2f&gt; img_p;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    cv::Mat rvec;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    cv::Mat tvec;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keywordtype">double<\/span> ang_lim = 3.0\/180*3.14;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">double<\/span> cam[9] = {839.923052, 0.0,        340.780730,<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;                     0.0,        837.671081, 261.766523,<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                     0.0,        0.0,        1.0       };<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">double<\/span> dist_c[5] = {0.082613, 0.043275, 0.002486, -0.000823, 0.0};<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;};<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;}<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;}<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#endif \/\/ !__THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor.h:14<\/div><\/div>$/;"	a
l00001	src/doc/html/thread__operation_8old_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define __THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;boost\/thread.hpp&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;boost\/atomic.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/SetGoal.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;vision_unit\/armor_msg.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseStamped.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PoseWithCovarianceStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;armor_detect.h&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;{<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;{<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1thread__operation.html">   19<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;{<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    ~<a class="code" href="classautocar_1_1vision__mul_1_1thread__operation.html">thread_operation<\/a>(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="comment">\/\/ 启动图像采集线程<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">void<\/span> start_read_image(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="comment">\/\/ 启动主线程<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keywordtype">void<\/span> running(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="comment">\/\/<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keywordtype">void<\/span> start_running();<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    <span class="keywordtype">bool<\/span> if_detected_armor();<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="comment">\/\/void pub_goal(bool detected_armor);<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="comment">\/\/void amcl_callback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr&amp; pos);<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keywordtype">bool<\/span> get_camera_num();<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a>* get_armor();<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">void<\/span> read_image(<span class="keywordtype">void<\/span>);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">bool<\/span> detected_armor;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <a class="code" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> *armor_;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    geometry_msgs::PoseWithCovarianceStamped car_position;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    boost::atomic&lt;bool&gt; m_buff_avail_flag;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_read_idx;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    boost::atomic&lt;int&gt; m_buff_write_idx;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    cv::Mat m_img_buff[2];<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keywordtype">bool<\/span> forward_back = <span class="keyword">true<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    ros::Publisher pub_armor_pos;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    vision_unit::armor_msg armor_pos;<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    ros::ServiceClient client;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    vision_unit::SetGoal goal;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    geometry_msgs::PoseStamped goal_pose;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;};<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;}<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;}<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#endif \/\/ !__THREAD_OPERATION_H__<\/span><\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="ttc" id="classautocar_1_1vision__mul_1_1armor__info_html"><div class="ttname"><a href="classautocar_1_1vision__mul_1_1armor__info.html">autocar::vision_mul::armor_info<\/a><\/div><div class="ttdef"><b>Definition:<\/b> armor_detect.h:15<\/div><\/div>$/;"	a
l00001	src/doc/html/util_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef _UTIL_H_<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define _UTIL_H_<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;linux\/videodev2.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="comment">\/\/ 通过v4l2配置摄像头参数<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keywordtype">int<\/span> set_camera_exposure(std::string <span class="keywordtype">id<\/span>, <span class="keywordtype">int<\/span> val);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;}<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;}<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#endif \/\/ !_UTIL_H_<\/span><\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/utility_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;cmath&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;cassert&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cstring&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno"><a class="line" href="classUtility.html">    8<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classUtility.html">Utility<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Quaternion&lt;typename Derived::Scalar&gt; deltaQ(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt; &amp;theta)<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    {<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> Derived::Scalar Scalar_t;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        Eigen::Quaternion&lt;Scalar_t&gt; dq;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 1&gt; half_theta = theta;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        half_theta \/= <span class="keyword">static_cast&lt;<\/span>Scalar_t<span class="keyword">&gt;<\/span>(2.0);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        dq.w() = <span class="keyword">static_cast&lt;<\/span>Scalar_t<span class="keyword">&gt;<\/span>(1.0);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        dq.x() = half_theta.x();<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        dq.y() = half_theta.y();<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        dq.z() = half_theta.z();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        <span class="keywordflow">return<\/span> dq;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    }<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt; skewSymmetric(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt; &amp;q)<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    {<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt; ans;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        ans &lt;&lt; <span class="keyword">typename<\/span> Derived::Scalar(0), -q(2), q(1),<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;            q(2), <span class="keyword">typename<\/span> Derived::Scalar(0), -q(0),<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;            -q(1), q(0), <span class="keyword">typename<\/span> Derived::Scalar(0);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        <span class="keywordflow">return<\/span> ans;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    }<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Quaternion&lt;typename Derived::Scalar&gt; positify(<span class="keyword">const<\/span> Eigen::QuaternionBase&lt;Derived&gt; &amp;q)<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    {<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="comment">\/\/printf(&quot;a: %f %f %f %f&quot;, q.w(), q.x(), q.y(), q.z());<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="comment">\/\/Eigen::Quaternion&lt;typename Derived::Scalar&gt; p(-q.w(), -q.x(), -q.y(), -q.z());<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="comment">\/\/printf(&quot;b: %f %f %f %f&quot;, p.w(), p.x(), p.y(), p.z());<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="comment">\/\/return q.template w() &gt;= (typename Derived::Scalar)(0.0) ? q : Eigen::Quaternion&lt;typename Derived::Scalar&gt;(-q.w(), -q.x(), -q.y(), -q.z());<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordflow">return<\/span> q;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    }<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; Qleft(<span class="keyword">const<\/span> Eigen::QuaternionBase&lt;Derived&gt; &amp;q)<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    {<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        Eigen::Quaternion&lt;typename Derived::Scalar&gt; qq = positify(q);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; ans;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        ans(0, 0) = qq.w(), ans.template block&lt;1, 3&gt;(0, 1) = -qq.vec().transpose();<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        ans.template block&lt;3, 1&gt;(1, 0) = qq.vec(), ans.template block&lt;3, 3&gt;(1, 1) = qq.w() * Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt;::Identity() + skewSymmetric(qq.vec());<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordflow">return<\/span> ans;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    }<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; Qright(<span class="keyword">const<\/span> Eigen::QuaternionBase&lt;Derived&gt; &amp;p)<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    {<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        Eigen::Quaternion&lt;typename Derived::Scalar&gt; pp = positify(p);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        Eigen::Matrix&lt;typename Derived::Scalar, 4, 4&gt; ans;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        ans(0, 0) = pp.w(), ans.template block&lt;1, 3&gt;(0, 1) = -pp.vec().transpose();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        ans.template block&lt;3, 1&gt;(1, 0) = pp.vec(), ans.template block&lt;3, 3&gt;(1, 1) = pp.w() * Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt;::Identity() - skewSymmetric(pp.vec());<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordflow">return<\/span> ans;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    }<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Vector3d R2ypr(<span class="keyword">const<\/span> Eigen::Matrix3d &amp;R)<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    {<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        Eigen::Vector3d n = R.col(0);<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        Eigen::Vector3d o = R.col(1);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        Eigen::Vector3d a = R.col(2);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        Eigen::Vector3d ypr(3);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keywordtype">double<\/span> y = atan2(n(1), n(0));<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keywordtype">double<\/span> p = atan2(-n(2), n(0) * cos(y) + n(1) * sin(y));<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <span class="keywordtype">double<\/span> r = atan2(a(0) * sin(y) - a(1) * cos(y), -o(0) * sin(y) + o(1) * cos(y));<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        ypr(0) = y;<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        ypr(1) = p;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        ypr(2) = r;<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        <span class="keywordflow">return<\/span> ypr \/ M_PI * 180.0;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    }<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Derived&gt;<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix&lt;typename Derived::Scalar, 3, 3&gt; ypr2R(<span class="keyword">const<\/span> Eigen::MatrixBase&lt;Derived&gt; &amp;ypr)<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    {<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> Derived::Scalar Scalar_t;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        Scalar_t y = ypr(0) \/ 180.0 * M_PI;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        Scalar_t p = ypr(1) \/ 180.0 * M_PI;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        Scalar_t r = ypr(2) \/ 180.0 * M_PI;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 3&gt; Rz;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        Rz &lt;&lt; cos(y), -sin(y), 0,<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            sin(y), cos(y), 0,<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            0, 0, 1;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 3&gt; Ry;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        Ry &lt;&lt; cos(p), 0., sin(p),<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            0., 1., 0.,<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            -sin(p), 0., cos(p);<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        Eigen::Matrix&lt;Scalar_t, 3, 3&gt; Rx;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        Rx &lt;&lt; 1., 0., 0.,<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            0., cos(r), -sin(r),<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            0., sin(r), cos(r);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="keywordflow">return<\/span> Rz * Ry * Rx;<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    }<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keyword">static<\/span> Eigen::Matrix3d g2R(<span class="keyword">const<\/span> Eigen::Vector3d &amp;g);<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keywordtype">size_t<\/span> N&gt;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="structUtility_1_1uint__.html">  113<\/a><\/span>&#160;    <span class="keyword">struct <\/span><a class="code" href="structUtility_1_1uint__.html">uint_<\/a><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    {<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    };<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keywordtype">size_t<\/span> N, <span class="keyword">typename<\/span> Lambda, <span class="keyword">typename<\/span> IterT&gt;<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keywordtype">void<\/span> unroller(<span class="keyword">const<\/span> Lambda &amp;f, <span class="keyword">const<\/span> IterT &amp;iter, <a class="code" href="structUtility_1_1uint__.html">uint_&lt;N&gt;<\/a>)<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    {<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        unroller(f, iter, <a class="code" href="structUtility_1_1uint__.html">uint_&lt;N - 1&gt;<\/a>());<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        f(iter + N);<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    }<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Lambda, <span class="keyword">typename<\/span> IterT&gt;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keywordtype">void<\/span> unroller(<span class="keyword">const<\/span> Lambda &amp;f, <span class="keyword">const<\/span> IterT &amp;iter, <a class="code" href="structUtility_1_1uint__.html">uint_&lt;0&gt;<\/a>)<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    {<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        f(iter);<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    }<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <span class="keyword">static<\/span> T normalizeAngle(<span class="keyword">const<\/span> T&amp; angle_degrees) {<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;      T two_pi(2.0 * 180);<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;      <span class="keywordflow">if<\/span> (angle_degrees &gt; 0)<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;      <span class="keywordflow">return<\/span> angle_degrees -<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;          two_pi * std::floor((angle_degrees + T(180)) \/ two_pi);<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;      <span class="keywordflow">else<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        <span class="keywordflow">return<\/span> angle_degrees +<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            two_pi * std::floor((-angle_degrees + T(180)) \/ two_pi);<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    };<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;};<\/div><div class="ttc" id="structUtility_1_1uint___html"><div class="ttname"><a href="structUtility_1_1uint__.html">Utility::uint_<\/a><\/div><div class="ttdef"><b>Definition:<\/b> utility.h:113<\/div><\/div>$/;"	a
l00001	src/doc/html/vel2odom_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef VEL2ODOM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define VEL2ODOM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;tf\/transform_broadcaster.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;{<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span>odom_mul<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html">vel2odom<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html">vel2odom<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a035856cdf10a02f7931b1be0a4df146b">cal_odom<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a89c7f78f6ef8e2170581856f7136e79a">   19<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a89c7f78f6ef8e2170581856f7136e79a">x<\/a>;  <\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a0ee3112d31ff8e3c4f49442a2ecde366">   20<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a0ee3112d31ff8e3c4f49442a2ecde366">y<\/a>;  <\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a46120c82f922ad0c41b7942ecdd1b64d">   21<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a46120c82f922ad0c41b7942ecdd1b64d">th<\/a>; <\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#af17edd6e5b319bd298bdda23acdff998">   23<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#af17edd6e5b319bd298bdda23acdff998">vx<\/a>; <\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a6323e45fb9a37ffe5fa16dd13944784e">   24<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a6323e45fb9a37ffe5fa16dd13944784e">vy<\/a>; <\/div><div class="line"><a name="l00025"><\/a><span class="lineno"><a class="line" href="classautocar_1_1odom__mul_1_1vel2odom.html#a7ae1f8f00b23ae7099770a7c56a61e71">   25<\/a><\/span>&#160;  <span class="keywordtype">double<\/span> <a class="code" href="classautocar_1_1odom__mul_1_1vel2odom.html#a7ae1f8f00b23ae7099770a7c56a61e71">vth<\/a>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;  geometry_msgs::Quaternion odom_quat; <span class="comment">\/\/&lt; the quaternion of the car attitude<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  ros::Time current_time;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;  ros::Time last_time;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;}<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;}<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#endif \/\/ VEL2ODOM_H<\/span><\/div><div class="ttc" id="classautocar_1_1odom__mul_1_1vel2odom_html_a035856cdf10a02f7931b1be0a4df146b"><div class="ttname"><a href="classautocar_1_1odom__mul_1_1vel2odom.html#a035856cdf10a02f7931b1be0a4df146b">autocar::odom_mul::vel2odom::cal_odom<\/a><\/div><div class="ttdeci">void cal_odom()<\/div><div class="ttdoc">Calculating odom from velocity. <\/div><\/div>$/;"	a
l00001	src/doc/html/version__number_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">Copyright Rene Rivera 2005, 2008-2013<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">Distributed under the Boost Software License, Version 1.0.<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">(See accompanying file LICENSE_1_0.txt or copy at<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">http:\/\/www.boost.org\/LICENSE_1_0.txt)<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef BOOST_PREDEF_VERSION_NUMBER_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define BOOST_PREDEF_VERSION_NUMBER_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">\/*`<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">[heading `BOOST_VERSION_NUMBER`]<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">``<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">BOOST_VERSION_NUMBER(major,minor,patch)<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">``<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">Defines standard version numbers, with these properties:<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">* Decimal base whole numbers in the range \\[0,1000000000).<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">  The number range is designed to allow for a (2,2,5) triplet.<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">  Which fits within a 32 bit value.<\/span><\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">* The `major` number can be in the \\[0,99\\] range.<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">* The `minor` number can be in the \\[0,99\\] range.<\/span><\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">* The `patch` number can be in the \\[0,99999\\] range.<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">* Values can be specified in any base. As the defined value<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">  is an constant expression.<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">* Value can be directly used in both preprocessor and compiler<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">  expressions for comparison to other similarly defined values.<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment">* The implementation enforces the individual ranges for the<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">  major, minor, and patch numbers. And values over the ranges<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">  are truncated (modulo).<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"><\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">*\/<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER(major,minor,patch) \\<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">    ( (((major)%100)*10000000) + (((minor)%100)*100000) + ((patch)%100000) )<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_MAX \\<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER(99,99,99999)<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_ZERO \\<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER(0,0,0)<\/span><\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_MIN \\<\/span><\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER(0,0,1)<\/span><\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_AVAILABLE \\<\/span><\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER_MIN<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#define BOOST_VERSION_NUMBER_NOT_AVAILABLE \\<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">    BOOST_VERSION_NUMBER_ZERO<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/video__recoder_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef VIDEO_RECODER<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define VIDEO_RECODER<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;{<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div><div class="line"><a name="l00012"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1video__recoder.html">   12<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1video__recoder.html">video_recoder<\/a> {<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;        <a class="code" href="classautocar_1_1vision__mul_1_1video__recoder.html">video_recoder<\/a>(std::string video_dir_=<span class="stringliteral">&quot;\/home\/dji\/Videos&quot;<\/span>, <span class="keywordtype">int<\/span> cols_=1280, <span class="keywordtype">int<\/span> rows_=720);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        ~<a class="code" href="classautocar_1_1vision__mul_1_1video__recoder.html">video_recoder<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        <span class="keywordtype">void<\/span> save_frame(<span class="keyword">const<\/span> cv::Mat &amp;image);<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        cv::VideoWriter writer;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        <span class="keywordtype">int<\/span> rows;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        <span class="keywordtype">int<\/span> cols;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    };<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;}<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;}<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#endif \/\/ VIDEO_RECODER<\/span><\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="ttc" id="namespaceautocar_html"><div class="ttname"><a href="namespaceautocar.html">autocar<\/a><\/div><div class="ttdef"><b>Definition:<\/b> vel2odom.h:5<\/div><\/div>$/;"	a
l00001	src/doc/html/vins__estimator_2src_2parameters_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;utility\/utility.h&quot;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/opencv.hpp&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;opencv2\/core\/eigen.hpp&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> FOCAL_LENGTH = 460.0;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> WINDOW_SIZE = 10;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_OF_CAM = 1;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">int<\/span> NUM_OF_F = 1000;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> LOOP_INFO_VALUE = 50.0;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">\/\/#define DEPTH_PRIOR<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">\/\/#define GT<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#define UNIT_SPHERE_ERROR<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> INIT_DEPTH;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> MIN_PARALLAX;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> ESTIMATE_EXTRINSIC;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> ACC_N, ACC_W;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> GYR_N, GYR_W;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">extern<\/span> std::vector&lt;Eigen::Matrix3d&gt; RIC;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">extern<\/span> std::vector&lt;Eigen::Vector3d&gt; TIC;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keyword">extern<\/span> Eigen::Vector3d G;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> BIAS_ACC_THRESHOLD;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> BIAS_GYR_THRESHOLD;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">double<\/span> SOLVER_TIME;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> NUM_ITERATIONS;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">extern<\/span> std::string EX_CALIB_RESULT_PATH;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">extern<\/span> std::string VINS_RESULT_PATH;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">extern<\/span> std::string VINS_FOLDER_PATH;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> LOOP_CLOSURE;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> MIN_LOOP_NUM;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">extern<\/span> std::string PATTERN_FILE;<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">extern<\/span> std::string VOC_FILE;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="keyword">extern<\/span> std::string CAM_NAMES;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">extern<\/span> std::string IMAGE_TOPIC;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">extern<\/span> std::string IMU_TOPIC;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keywordtype">void<\/span> readParameters(ros::NodeHandle &amp;n);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="keyword">enum<\/span> SIZE_PARAMETERIZATION<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;{<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    SIZE_POSE = 7,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    SIZE_SPEEDBIAS = 9,<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    SIZE_FEATURE = 1<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">enum<\/span> StateOrder<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;{<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    O_P = 0,<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    O_R = 3,<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    O_V = 6,<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    O_BA = 9,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    O_BG = 12<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;};<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="keyword">enum<\/span> NoiseOrder<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;{<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    O_AN = 0,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    O_GN = 3,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    O_AW = 6,<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    O_GW = 9<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;};<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	src/doc/html/vins__estimator_2src_2utility_2tic__toc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ctime&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;chrono&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTicToc.html">TicToc<\/a><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;  <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <a class="code" href="classTicToc.html">TicToc<\/a>()<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    {<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;        tic();<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    }<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keywordtype">void<\/span> tic()<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        start = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    }<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">double<\/span> toc()<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    {<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        end = std::chrono::system_clock::now();<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        std::chrono::duration&lt;double&gt; elapsed_seconds = end - start;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordflow">return<\/span> elapsed_seconds.count() * 1000;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;  <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    std::chrono::time_point&lt;std::chrono::system_clock&gt; start, end;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;};<\/div><div class="ttc" id="classTicToc_html"><div class="ttname"><a href="classTicToc.html">TicToc<\/a><\/div><div class="ttdef"><b>Definition:<\/b> tic_toc.h:7<\/div><\/div>$/;"	a
l00001	src/doc/html/vision__param_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef VISION_PARAM_H<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define VISION_PARAM_H<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;\/home\/dji\/dji_beta\/auto_car\/src\/param_manager\/include\/param_manager.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">namespace <\/span><a class="code" href="namespaceautocar.html">autocar<\/a><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;{<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">namespace <\/span>vision_mul<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classautocar_1_1vision__mul_1_1vision__param.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html">vision_param<\/a>: <span class="keyword">public<\/span> <a class="code" href="classautocar_1_1param__mul_1_1param__manager.html">param_mul::param_manager<\/a><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;{<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;  <a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html">vision_param<\/a>();<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;  <span class="keywordtype">void<\/span> <a class="code" href="classautocar_1_1vision__mul_1_1vision__param.html#aff270ce404aa05e505e15aab1de26228">read_params<\/a>();<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;  <span class="comment">\/\/vision_mul<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;  cv::Mat camera_matrix;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;  cv::Mat dist_coeffs;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;};<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;}<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;}<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#endif \/\/ VISION_PARAM_H<\/span><\/div><div class="ttc" id="classautocar_1_1param__mul_1_1param__manager_html"><div class="ttname"><a href="classautocar_1_1param__mul_1_1param__manager.html">autocar::param_mul::param_manager<\/a><\/div><div class="ttdef"><b>Definition:<\/b> param_manager.h:10<\/div><\/div>$/;"	a
l00001	src/doc/html/visualization_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;ros\/ros.h&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Header.h&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Float32.h&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/Imu.h&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/PointCloud.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/Image.h&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;sensor_msgs\/image_encodings.h&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Path.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;nav_msgs\/Odometry.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;geometry_msgs\/PointStamped.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;std_msgs\/Bool.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &lt;visualization_msgs\/Marker.h&gt;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &lt;tf\/transform_broadcaster.h&gt;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="preprocessor">#include &quot;CameraPoseVisualization.h&quot;<\/span><\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="preprocessor">#include &lt;eigen3\/Eigen\/Dense&gt;<\/span><\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="preprocessor">#include &quot;..\/estimator.h&quot;<\/span><\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="preprocessor">#include &quot;..\/parameters.h&quot;<\/span><\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_odometry;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_path, pub_pose;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_cloud, pub_map;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_key_poses;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_ref_pose, pub_cur_pose;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_key;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">extern<\/span> nav_msgs::Path path;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">extern<\/span> ros::Publisher pub_pose_graph;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">extern<\/span> <span class="keywordtype">int<\/span> IMAGE_ROW, IMAGE_COL;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keywordtype">void<\/span> registerPub(ros::NodeHandle &amp;n);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keywordtype">void<\/span> pubLatestOdometry(<span class="keyword">const<\/span> Eigen::Vector3d &amp;P, <span class="keyword">const<\/span> Eigen::Quaterniond &amp;Q, <span class="keyword">const<\/span> Eigen::Vector3d &amp;V, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keywordtype">void<\/span> printStatistics(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keywordtype">double<\/span> t);<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="keywordtype">void<\/span> pubOdometry(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;                Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keywordtype">void<\/span> pubInitialGuess(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keywordtype">void<\/span> pubKeyPoses(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;                Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="keywordtype">void<\/span> pubCameraPose(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;                   Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="keywordtype">void<\/span> pubPointCloud(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;                   Eigen::Matrix3d loop_correct_r);<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keywordtype">void<\/span> pubPoseGraph(<a class="code" href="classCameraPoseVisualization.html">CameraPoseVisualization<\/a>* posegraph, <span class="keyword">const<\/span> std_msgs::Header &amp;header);<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keywordtype">void<\/span> updateLoopPath(nav_msgs::Path _loop_path);<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="keywordtype">void<\/span> pubTF(<span class="keyword">const<\/span> <a class="code" href="classEstimator.html">Estimator<\/a> &amp;estimator, <span class="keyword">const<\/span> std_msgs::Header &amp;header, Eigen::Vector3d loop_correct_t,<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;                   Eigen::Matrix3d loop_correct_r);<\/div><div class="ttc" id="classEstimator_html"><div class="ttname"><a href="classEstimator.html">Estimator<\/a><\/div><div class="ttdef"><b>Definition:<\/b> estimator.h:47<\/div><\/div>$/;"	a
label_img_dir	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^        std::string label_img_dir;$/;"	m	class:autocar::vision_mul::labeler
label_txt_dir	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^        std::string label_txt_dir;$/;"	m	class:autocar::vision_mul::labeler
labeler	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^    class labeler {$/;"	c	namespace:autocar::vision_mul
labeler	src/vision_unit/src/detect_factory/labeler.cpp	/^labeler::labeler(std::string img_dir_, std::string label_img_dir_, std::string label_txt_dir_, int cols_, int rows_) {$/;"	f	class:autocar::vision_mul::labeler
langs	build/console/cmake/console-genmsg-context.py	/^langs = "gencpp;geneus;genlisp;gennodejs;genpy"$/;"	v
langs	build/logical_core/cmake/logical_core-genmsg-context.py	/^langs = "gencpp;geneus;genlisp;gennodejs;genpy"$/;"	v
langs	build/odometry/cmake/odometry-genmsg-context.py	/^langs = "gencpp;geneus;genlisp;gennodejs;genpy"$/;"	v
langs	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^langs = "gencpp;geneus;genlisp;gennodejs;genpy"$/;"	v
langs	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^langs = "gencpp;geneus;genlisp;gennodejs;genpy"$/;"	v
langs	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^langs = "gencpp;geneus;genlisp;gennodejs;genpy"$/;"	v
last_clause_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Clause last_clause_;$/;"	m	class:testing::internal::ExpectationBase
last_clause_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Clause last_clause_;$/;"	m	class:testing::internal::UntypedOnCallSpecBase
last_death_test_case_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int last_death_test_case_;$/;"	m	class:testing::internal::UnitTestImpl	file:
last_death_test_message_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::string DeathTest::last_death_test_message_;$/;"	m	class:testing::internal::DeathTest	file:
last_death_test_message_	ceres-solver/internal/ceres/gtest/gtest.h	/^  static std::string last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
last_event_time_	ceres-solver/internal/ceres/wall_time.h	/^  double last_event_time_;$/;"	m	class:ceres::internal::EventLogger
last_expectation_	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::linked_ptr<Expectation> last_expectation_;$/;"	m	class:testing::Sequence
last_time	src/odometry/include/odometry/vel2odom.h	/^  ros::Time last_time;$/;"	m	class:autocar::odom_mul::vel2odom
latex_documents	ceres-solver/docs/source/conf.py	/^latex_documents = [$/;"	v
latex_elements	ceres-solver/docs/source/conf.py	/^latex_elements = {$/;"	v
layout_	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^  std::vector<CellInfo*> layout_;$/;"	m	class:ceres::internal::BlockRandomAccessDiagonalMatrix
layout_	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  LayoutType layout_;$/;"	m	class:ceres::internal::BlockRandomAccessSparseMatrix
leakable	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool leakable;  \/\/ true iff it's OK to leak the object.$/;"	m	struct:testing::__anon29::MockObjectState	file:
left_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ::std::vector<size_t> left_;$/;"	m	class:testing::internal::MaxBipartiteMatchState	file:
left_light	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::RotatedRect left_light;$/;"	m	class:autocar::vision_mul::armor_info
left_start_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  size_t left_start_, right_start_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
letter__	src/doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter__"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;_&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_a	src/doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_a"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;a&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_c	src/doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_c"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;c&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_d	src/doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_d"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;d&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_l	src/doc/html/classes.html	/^<tr><td valign="top"><a class="el" href="classautocar_1_1vision__mul_1_1armor__info.html">armor_info<\/a> (autocar::vision_mul)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_l"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;l&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_p	src/doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_p"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;p&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_r	src/doc/html/classes.html	/^<\/td><td valign="top"><a class="el" href="classautocar_1_1serial__mul_1_1comm__write.html">comm_write<\/a> (autocar::serial_mul)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_r"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;r&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_s	src/doc/html/classes.html	/^<tr><td valign="top"><a class="el" href="classautocar_1_1vision__mul_1_1armor__detecter.html">armor_detecter<\/a> (autocar::vision_mul)&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classautocar_1_1vision__mul_1_1detect__factory.html">detect_factory<\/a> (autocar::vision_mul)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_s"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;s&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_t	src/doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_t"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;t&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_v	src/doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_v"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;v&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
lhs	ceres-solver/internal/ceres/schur_complement_solver.h	/^  const BlockRandomAccessMatrix* lhs() const { return lhs_.get(); }$/;"	f	class:ceres::internal::SchurComplementSolver
lhs_	ceres-solver/internal/ceres/dense_qr_solver.h	/^  ColMajorMatrix lhs_;$/;"	m	class:ceres::internal::DenseQRSolver
lhs_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  scoped_ptr<BlockRandomAccessMatrix> lhs_;$/;"	m	class:ceres::internal::SchurComplementSolver
lhs_expected	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  Matrix lhs_expected;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
lhs_row_layout_	ceres-solver/internal/ceres/schur_eliminator.h	/^  std::vector<int> lhs_row_layout_;$/;"	m	class:ceres::internal::SchurEliminator
line	ceres-solver/internal/ceres/gmock/gmock.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::ExpectationBase
line	ceres-solver/internal/ceres/gmock/gmock.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::UntypedOnCallSpecBase
line	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int line;$/;"	m	struct:testing::internal::TraceInfo	file:
line	ceres-solver/internal/ceres/gtest/gtest.h	/^      int line;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::InstantiationInfo
line	ceres-solver/internal/ceres/gtest/gtest.h	/^    int const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	ceres-solver/internal/ceres/gtest/gtest.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
line	ceres-solver/internal/ceres/gtest/gtest.h	/^  int line() const { return location_.line; }$/;"	f	class:testing::TestInfo
line	ceres-solver/internal/ceres/gtest/gtest.h	/^  int line;$/;"	m	struct:testing::internal::CodeLocation
line_	ceres-solver/internal/ceres/gmock/gmock.h	/^  int line_;                  \/\/ The line number of the expectation.$/;"	m	class:testing::internal::ExpectationBase
line_	ceres-solver/internal/ceres/gmock/gmock.h	/^  int line_;$/;"	m	class:testing::internal::UntypedOnCallSpecBase
line_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const int line_;$/;"	m	class:testing::internal::ExecDeathTest	file:
line_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const int line_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
line_	ceres-solver/internal/ceres/gtest/gtest.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  int line_;$/;"	m	class:MessageLogger
line_number	ceres-solver/internal/ceres/gtest/gtest.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	ceres-solver/internal/ceres/gtest/gtest.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
line_search_cost_evaluation_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double line_search_cost_evaluation_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
line_search_direction_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    LineSearchDirectionType line_search_direction_type;$/;"	m	struct:ceres::GradientProblemSolver::Options
line_search_direction_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    LineSearchDirectionType line_search_direction_type;$/;"	m	struct:ceres::GradientProblemSolver::Summary
line_search_direction_type	ceres-solver/include/ceres/solver.h	/^    LineSearchDirectionType line_search_direction_type;$/;"	m	struct:ceres::Solver::Options
line_search_direction_type	ceres-solver/include/ceres/solver.h	/^    LineSearchDirectionType line_search_direction_type;$/;"	m	struct:ceres::Solver::Summary
line_search_direction_type	ceres-solver/internal/ceres/minimizer.h	/^    LineSearchDirectionType line_search_direction_type;$/;"	m	struct:ceres::internal::Minimizer::Options
line_search_function_evaluations	ceres-solver/include/ceres/iteration_callback.h	/^  int line_search_function_evaluations;$/;"	m	struct:ceres::IterationSummary
line_search_gradient_evaluation_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double line_search_gradient_evaluation_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
line_search_gradient_evaluations	ceres-solver/include/ceres/iteration_callback.h	/^  int line_search_gradient_evaluations;$/;"	m	struct:ceres::IterationSummary
line_search_interpolation_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    LineSearchInterpolationType line_search_interpolation_type;$/;"	m	struct:ceres::GradientProblemSolver::Options
line_search_interpolation_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    LineSearchInterpolationType line_search_interpolation_type;$/;"	m	struct:ceres::GradientProblemSolver::Summary
line_search_interpolation_type	ceres-solver/include/ceres/solver.h	/^    LineSearchInterpolationType line_search_interpolation_type;$/;"	m	struct:ceres::Solver::Options
line_search_interpolation_type	ceres-solver/include/ceres/solver.h	/^    LineSearchInterpolationType line_search_interpolation_type;$/;"	m	struct:ceres::Solver::Summary
line_search_interpolation_type	ceres-solver/internal/ceres/minimizer.h	/^    LineSearchInterpolationType line_search_interpolation_type;$/;"	m	struct:ceres::internal::Minimizer::Options
line_search_iterations	ceres-solver/include/ceres/iteration_callback.h	/^  int line_search_iterations;$/;"	m	struct:ceres::IterationSummary
line_search_polynomial_minimization_time_in_seconds	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double line_search_polynomial_minimization_time_in_seconds;$/;"	m	struct:ceres::GradientProblemSolver::Summary
line_search_polynomial_minimization_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double line_search_polynomial_minimization_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
line_search_sufficient_curvature_decrease	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double line_search_sufficient_curvature_decrease;$/;"	m	struct:ceres::GradientProblemSolver::Options
line_search_sufficient_curvature_decrease	ceres-solver/include/ceres/solver.h	/^    double line_search_sufficient_curvature_decrease;$/;"	m	struct:ceres::Solver::Options
line_search_sufficient_curvature_decrease	ceres-solver/internal/ceres/minimizer.h	/^    double line_search_sufficient_curvature_decrease;$/;"	m	struct:ceres::internal::Minimizer::Options
line_search_sufficient_function_decrease	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double line_search_sufficient_function_decrease;$/;"	m	struct:ceres::GradientProblemSolver::Options
line_search_sufficient_function_decrease	ceres-solver/include/ceres/solver.h	/^    double line_search_sufficient_function_decrease;$/;"	m	struct:ceres::Solver::Options
line_search_sufficient_function_decrease	ceres-solver/internal/ceres/minimizer.h	/^    double line_search_sufficient_function_decrease;$/;"	m	struct:ceres::internal::Minimizer::Options
line_search_total_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double line_search_total_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
line_search_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    LineSearchType line_search_type;$/;"	m	struct:ceres::GradientProblemSolver::Options
line_search_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    LineSearchType line_search_type;$/;"	m	struct:ceres::GradientProblemSolver::Summary
line_search_type	ceres-solver/include/ceres/solver.h	/^    LineSearchType line_search_type;$/;"	m	struct:ceres::Solver::Options
line_search_type	ceres-solver/include/ceres/solver.h	/^    LineSearchType line_search_type;$/;"	m	struct:ceres::Solver::Summary
line_search_type	ceres-solver/internal/ceres/minimizer.h	/^    LineSearchType line_search_type;$/;"	m	struct:ceres::internal::Minimizer::Options
linear_solver	ceres-solver/internal/ceres/preprocessor.h	/^  scoped_ptr<LinearSolver> linear_solver;$/;"	m	struct:ceres::internal::PreprocessedProblem
linear_solver	ceres-solver/internal/ceres/trust_region_strategy.h	/^    LinearSolver* linear_solver;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Options
linear_solver_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  LinearSolver* linear_solver_;$/;"	m	class:ceres::internal::DoglegStrategy
linear_solver_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  LinearSolver* linear_solver_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
linear_solver_iterations	ceres-solver/include/ceres/iteration_callback.h	/^  int linear_solver_iterations;$/;"	m	struct:ceres::IterationSummary
linear_solver_options	ceres-solver/internal/ceres/preprocessor.h	/^  LinearSolver::Options linear_solver_options;$/;"	m	struct:ceres::internal::PreprocessedProblem
linear_solver_ordering	ceres-solver/include/ceres/solver.h	/^    shared_ptr<ParameterBlockOrdering> linear_solver_ordering;$/;"	m	struct:ceres::Solver::Options
linear_solver_ordering_given	ceres-solver/include/ceres/solver.h	/^    std::vector<int> linear_solver_ordering_given;$/;"	m	struct:ceres::Solver::Summary
linear_solver_ordering_used	ceres-solver/include/ceres/solver.h	/^    std::vector<int> linear_solver_ordering_used;$/;"	m	struct:ceres::Solver::Summary
linear_solver_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double linear_solver_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
linear_solver_type	ceres-solver/include/ceres/solver.h	/^    LinearSolverType linear_solver_type;$/;"	m	struct:ceres::Solver::Options
linear_solver_type	ceres-solver/internal/ceres/evaluator.h	/^    LinearSolverType linear_solver_type;$/;"	m	struct:ceres::internal::Evaluator::Options
linear_solver_type	ceres-solver/internal/ceres/evaluator_test.cc	/^  LinearSolverType linear_solver_type;$/;"	m	struct:ceres::internal::EvaluatorTestOptions	file:
linear_solver_type	ceres-solver/internal/ceres/test_util.h	/^  LinearSolverType linear_solver_type;$/;"	m	struct:ceres::internal::SolverConfig
linear_solver_type_given	ceres-solver/include/ceres/solver.h	/^    LinearSolverType linear_solver_type_given;$/;"	m	struct:ceres::Solver::Summary
linear_solver_type_used	ceres-solver/include/ceres/solver.h	/^    LinearSolverType linear_solver_type_used;$/;"	m	struct:ceres::Solver::Summary
lines	build/catkin_generated/installspace/_setup_util.py	/^        lines = []$/;"	v
lines	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^        lines = []$/;"	v
lines	devel/_setup_util.py	/^        lines = []$/;"	v
link_	ceres-solver/internal/ceres/gtest/gtest.h	/^  linked_ptr_internal link_;$/;"	m	class:testing::internal::linked_ptr
linked_ptr	ceres-solver/internal/ceres/gtest/gtest.h	/^  explicit linked_ptr(T* ptr = NULL) { capture(ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ceres-solver/internal/ceres/gtest/gtest.h	/^  linked_ptr(linked_ptr const& ptr) {  \/\/ NOLINT$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ceres-solver/internal/ceres/gtest/gtest.h	/^  template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ceres-solver/internal/ceres/gtest/gtest.h	/^class linked_ptr {$/;"	c	namespace:testing::internal
linked_ptr_internal	ceres-solver/internal/ceres/gtest/gtest.h	/^class linked_ptr_internal {$/;"	c	namespace:testing::internal
list_tests_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool list_tests_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
listeners	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestEventListeners* listeners() { return &listeners_; }$/;"	f	class:testing::internal::UnitTestImpl
listeners	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestEventListeners& UnitTest::listeners() {$/;"	f	class:testing::UnitTest
listeners_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestEventListeners listeners_;$/;"	m	class:testing::internal::UnitTestImpl	file:
listeners_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::vector<TestEventListener*> listeners_;$/;"	m	class:testing::internal::TestEventRepeater	file:
lm_diagonal_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector lm_diagonal_;$/;"	m	class:ceres::internal::DoglegStrategy
lm_diagonal_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  Vector lm_diagonal_;  \/\/ lm_diagonal_ = diagonal_ \/ radius_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
localStorageSupported	src/doc/html/navtree.js	/^function localStorageSupported()$/;"	f
local_column_bounds_	ceres-solver/internal/ceres/covariance_test.cc	/^  BoundsMap local_column_bounds_;$/;"	m	class:ceres::internal::CovarianceTest	file:
local_jacobians	ceres-solver/include/ceres/gradient_checker.h	/^    std::vector<Matrix> local_jacobians;$/;"	m	struct:ceres::GradientChecker::ProbeResults
local_numeric_jacobians	ceres-solver/include/ceres/gradient_checker.h	/^    std::vector<Matrix> local_numeric_jacobians;$/;"	m	struct:ceres::GradientChecker::ProbeResults
local_parameterization	ceres-solver/internal/ceres/parameter_block.h	/^  LocalParameterization* local_parameterization() const {$/;"	f	class:ceres::internal::ParameterBlock
local_parameterization_	ceres-solver/internal/ceres/parameter_block.h	/^  LocalParameterization* local_parameterization_;$/;"	m	class:ceres::internal::ParameterBlock
local_parameterization_jacobian_	ceres-solver/internal/ceres/parameter_block.h	/^  mutable scoped_array<double> local_parameterization_jacobian_;$/;"	m	class:ceres::internal::ParameterBlock
local_parameterization_ownership	ceres-solver/include/ceres/problem.h	/^    Ownership local_parameterization_ownership;$/;"	m	struct:ceres::Problem::Options
local_parameterizations_	ceres-solver/include/ceres/gradient_checker.h	/^  std::vector<const LocalParameterization*> local_parameterizations_;$/;"	m	class:ceres::GradientChecker
local_parameterizations_to_delete_	ceres-solver/internal/ceres/problem_impl.h	/^  std::vector<LocalParameterization*> local_parameterizations_to_delete_;$/;"	m	class:ceres::internal::ProblemImpl
local_params_	ceres-solver/include/ceres/local_parameterization.h	/^  std::vector<LocalParameterization*> local_params_;$/;"	m	class:ceres::ProductParameterization
local_size_	ceres-solver/include/ceres/local_parameterization.h	/^  const int local_size_;$/;"	m	class:ceres::SubsetParameterization
local_size_	ceres-solver/include/ceres/local_parameterization.h	/^  int local_size_;$/;"	m	class:ceres::ProductParameterization
location_	ceres-solver/internal/ceres/gtest/gtest.h	/^  internal::CodeLocation location_;$/;"	m	class:testing::TestInfo
lock	src/rplidar_ros/sdk/src/hal/locker.h	/^    Locker::LOCK_STATUS lock(unsigned long timeout = 0xFFFFFFFF)$/;"	f	class:rp::hal::Locker
log	ceres-solver/include/ceres/jet.h	/^Jet<T, N> log(const Jet<T, N>& f) {$/;"	f	namespace:ceres
log	ceres-solver/include/ceres/jet.h	/^inline double log     (double x) { return std::log(x);      }$/;"	f	namespace:ceres
log_sinks_global	ceres-solver/internal/ceres/miniglog/glog/logging.cc	/^std::set<google::LogSink *> log_sinks_global;$/;"	m	namespace:google	file:
log_to_stdout_	ceres-solver/internal/ceres/callbacks.h	/^  const bool log_to_stdout_;$/;"	m	class:ceres::internal::LoggingCallback
logging_callback	ceres-solver/internal/ceres/preprocessor.h	/^  scoped_ptr<IterationCallback> logging_callback;$/;"	m	struct:ceres::internal::PreprocessedProblem
logging_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    LoggingType logging_type;$/;"	m	struct:ceres::GradientProblemSolver::Options
logging_type	ceres-solver/include/ceres/solver.h	/^    LoggingType logging_type;$/;"	m	struct:ceres::Solver::Options
logical_core	devel/include/logical_core/SetGoal.h	/^namespace logical_core$/;"	n
logical_core	devel/include/logical_core/SetGoalRequest.h	/^namespace logical_core$/;"	n
logical_core	devel/include/logical_core/SetGoalResponse.h	/^namespace logical_core$/;"	n
logical_core-srv	devel/share/common-lisp/ros/logical_core/srv/_package.lisp	/^(cl:defpackage logical_core-srv$/;"	f
logical_core::SetGoal	devel/share/roseus/ros/logical_core/srv/SetGoal.l	/^(defclass logical_core::SetGoal$/;"	f
logical_core::SetGoalRequest	devel/share/roseus/ros/logical_core/srv/SetGoal.l	/^(defclass logical_core::SetGoalRequest$/;"	f
logical_core::SetGoalRequest	devel/share/roseus/ros/logical_core/srv/SetGoal.l	/^(defmethod logical_core::SetGoalRequest$/;"	f
logical_core::SetGoalResponse	devel/share/roseus/ros/logical_core/srv/SetGoal.l	/^(defclass logical_core::SetGoalResponse$/;"	f
logical_core::SetGoalResponse	devel/share/roseus/ros/logical_core/srv/SetGoal.l	/^(defmethod logical_core::SetGoalResponse$/;"	f
logical_core_	src/logical_core/src/patrol_mode.h	/^  LogicalCore *logical_core_;$/;"	m	class:PatrolMode
logical_core_	src/logical_core/src/point_mode.h	/^  LogicalCore *logical_core_;$/;"	m	class:PointMode
logical_core_	src/logical_core/src/shooting_mode.h	/^  LogicalCore *logical_core_;$/;"	m	class:ShootingMode
loss_function	ceres-solver/internal/ceres/residual_block.h	/^  const LossFunction* loss_function() const { return loss_function_; }$/;"	f	class:ceres::internal::ResidualBlock
loss_function_	ceres-solver/internal/ceres/c_api.cc	/^  ceres_loss_function_t loss_function_;$/;"	m	class:CallbackLossFunction	file:
loss_function_	ceres-solver/internal/ceres/residual_block.h	/^  const LossFunction* loss_function_;$/;"	m	class:ceres::internal::ResidualBlock
loss_function_ownership	ceres-solver/include/ceres/problem.h	/^    Ownership loss_function_ownership;$/;"	m	struct:ceres::Problem::Options
loss_functions_to_delete_	ceres-solver/internal/ceres/problem_impl.h	/^  std::vector<LossFunction*> loss_functions_to_delete_;$/;"	m	class:ceres::internal::ProblemImpl
low_rank_inverse_hessian_	ceres-solver/internal/ceres/line_search_direction.cc	/^  LowRankInverseHessian low_rank_inverse_hessian_;$/;"	m	class:ceres::internal::LBFGS	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem14::lower_bounds[] = {-100.0, -100.0, -100.0, -100.0};$/;"	m	class:ceres::examples::TestProblem14	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem18::lower_bounds[] = {0.0, 0.0, 0.0, 1.0, 0.0, 0.0};$/;"	m	class:ceres::examples::TestProblem18	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem10::lower_bounds[] = {$/;"	m	class:ceres::examples::TestProblem10	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem11::lower_bounds[] = {1e-16, 0.0, 0.0};$/;"	m	class:ceres::examples::TestProblem11	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem12::lower_bounds[] = {0.0, 5.0, 0.0};$/;"	m	class:ceres::examples::TestProblem12	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem13::lower_bounds[] = {$/;"	m	class:ceres::examples::TestProblem13	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem15::lower_bounds[] = {$/;"	m	class:ceres::examples::TestProblem15	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem16::lower_bounds[] = {-10.0, 0.0, -100.0, -20.0};$/;"	m	class:ceres::examples::TestProblem16	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem17::lower_bounds[] = {$/;"	m	class:ceres::examples::TestProblem17	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem19::lower_bounds[] = {$/;"	m	class:ceres::examples::TestProblem19	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem1::lower_bounds[] = {-kDoubleMax, -kDoubleMax};$/;"	m	class:ceres::examples::TestProblem1	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem2::lower_bounds[] = {-kDoubleMax, -kDoubleMax};$/;"	m	class:ceres::examples::TestProblem2	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem3::lower_bounds[] = {0.0, 1.0};$/;"	m	class:ceres::examples::TestProblem3	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem4::lower_bounds[] = {0.0, 0.00003};$/;"	m	class:ceres::examples::TestProblem4	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem5::lower_bounds[] = {0.6, 0.5};$/;"	m	class:ceres::examples::TestProblem5	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem6::lower_bounds[] = {-kDoubleMax, -kDoubleMax};$/;"	m	class:ceres::examples::TestProblem6	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem7::lower_bounds[] = {-100.0, -1.0, -1.0};$/;"	m	class:ceres::examples::TestProblem7	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem8::lower_bounds[] = {$/;"	m	class:ceres::examples::TestProblem8	file:
lower_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem9::lower_bounds[] = {0.398, 1.0, -0.5};$/;"	m	class:ceres::examples::TestProblem9	file:
lower_bounds_	ceres-solver/internal/ceres/parameter_block.h	/^  scoped_array<double> lower_bounds_;$/;"	m	class:ceres::internal::ParameterBlock
m	ceres-solver/internal/ceres/block_random_access_matrix.h	/^  Mutex m;$/;"	m	struct:ceres::internal::CellInfo
m_	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	/^  scoped_ptr<BlockRandomAccessDiagonalMatrix> m_;$/;"	m	class:ceres::internal::BlockJacobiPreconditioner
m_	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^  scoped_ptr<BlockRandomAccessDiagonalMatrix> m_;$/;"	m	class:ceres::internal::BlockRandomAccessDiagonalMatrixTest	file:
m_	ceres-solver/internal/ceres/block_random_access_sparse_matrix_test.cc	/^  scoped_ptr<BlockRandomAccessSparseMatrix> m_;$/;"	m	class:ceres::internal::BlockRandomAccessSparseMatrixTest	file:
m_	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^  ColMajorMatrix m_;$/;"	m	class:ceres::internal::DenseSparseMatrix
m_	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  const BlockRandomAccessDiagonalMatrix& m_;$/;"	m	class:ceres::internal::__anon12::BlockRandomAccessDiagonalMatrixAdapter	file:
m_	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  const BlockRandomAccessSparseMatrix& m_;$/;"	m	class:ceres::internal::__anon12::BlockRandomAccessSparseMatrixAdapter	file:
m_	ceres-solver/internal/ceres/schur_jacobi_preconditioner.h	/^  scoped_ptr<BlockRandomAccessDiagonalMatrix> m_;$/;"	m	class:ceres::internal::SchurJacobiPreconditioner
m_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  scoped_ptr<BlockRandomAccessSparseMatrix> m_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
m_binary_brightness	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_binary_brightness;$/;"	m	class:autocar::vision_mul::armor_detecter
m_binary_color	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_binary_color;$/;"	m	class:autocar::vision_mul::armor_detecter
m_binary_light	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_binary_light;$/;"	m	class:autocar::vision_mul::armor_detecter
m_common	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_common;$/;"	m	class:autocar::vision_mul::armor_detecter
m_gray	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_gray;$/;"	m	class:autocar::vision_mul::armor_detecter
m_image	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_image;$/;"	m	class:autocar::vision_mul::armor_detecter
m_img_buff	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat m_img_buff[2];$/;"	m	class:autocar::vision_mul::armor_detect_node
m_show	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::Mat m_show;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_dis_lower	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_dis_lower;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_dis_lower	src/vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_dis_lower = 1.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_dis_upper	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_dis_upper;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_dis_upper	src/vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_dis_upper = 7.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_gray	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_gray;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_gray	src/vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_gray = 100.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_height	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_height;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_height	src/vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_height = 2.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_len	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_len;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_len	src/vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_len = 3.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_max_angle	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_max_angle;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_max_angle	src/vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_max_angle = 30.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
m_threshold_min_area	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  const static float m_threshold_min_area;$/;"	m	class:autocar::vision_mul::armor_detecter
m_threshold_min_area	src/vision_unit/src/detect_factory/armor_detect.cpp	/^const float armor_detecter::m_threshold_min_area = 5.0f;$/;"	m	class:autocar::vision_mul::armor_detecter	file:
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	ceres-solver/ceres-bin/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	ceres-solver/ceres-bin/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	ceres-solver/examples/bundle_adjuster.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/circle_fit.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/curve_fitting.c	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/curve_fitting.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/denoising.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/ellipse_approximation.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/helloworld.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/helloworld_analytic_diff.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/helloworld_numeric_diff.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/libmv_bundle_adjuster.cc	/^int main(int argc, char **argv) {$/;"	f
main	ceres-solver/examples/libmv_homography.cc	/^int main(int argc, char **argv) {$/;"	f
main	ceres-solver/examples/more_garbow_hillstrom.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/nist.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/powell.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/robot_pose_mle.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/robust_curve_fitting.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/rosenbrock.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/sampled_function/sampled_function.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/simple_bundle_adjuster.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d.cc	/^int main(int argc, char** argv) {$/;"	f
main	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d.cc	/^int main(int argc, char** argv) {$/;"	f
main	logical_core/src/logical_core.cpp	/^int main (int argc, char **argv)$/;"	f
main	src/console/src/console.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/logical_core/src/logical_core_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/odometry/src/vel2odom_node.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/param_manager/src/param_manager_node.cpp	/^int main()$/;"	f
main	src/rplidar_ros/src/client.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/rplidar_ros/src/node.cpp	/^int main(int argc, char * argv[]) {$/;"	f
main	src/serial_comm/src/comm_read_node.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/serial_comm/src/comm_write_node.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/serial_communication/src/commRecv.cxx	/^int main(int argc, char *argv[])$/;"	f
main	src/serial_communication/src/commSend.cxx	/^int main(int argc, char *argv[])$/;"	f
main	src/tf_tree/src/tf_broadcaster.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/vision_unit/src/detect_factory/main.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/vision_unit/src/vision_lidar_fusion/lidar2camera_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^int main(int argc, char **argv)$/;"	f
make_linked_ptr	ceres-solver/internal/ceres/gtest/gtest.h	/^linked_ptr<T> make_linked_ptr(T* ptr) {$/;"	f	namespace:testing::internal
make_scoped_ptr	ceres-solver/include/ceres/internal/scoped_ptr.h	/^scoped_ptr<C> make_scoped_ptr(C *p) {$/;"	f	namespace:ceres::internal
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0) {$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1) {$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2) {$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^inline tuple<> make_tuple() { return tuple<>(); }$/;"	f	namespace:std::tr1
man_pages	ceres-solver/docs/source/conf.py	/^man_pages = [$/;"	v
master_doc	ceres-solver/docs/source/conf.py	/^master_doc = 'index'$/;"	v
matched_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ::std::vector<char> matched_;$/;"	m	class:testing::internal::MatchMatrix
matcher1_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher1 matcher1_;$/;"	m	class:testing::internal::BothOfMatcher
matcher1_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher1 matcher1_;$/;"	m	class:testing::internal::EitherOfMatcher
matcher1_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<T> matcher1_;$/;"	m	class:testing::internal::BothOfMatcherImpl
matcher1_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<T> matcher1_;$/;"	m	class:testing::internal::EitherOfMatcherImpl
matcher2_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher2 matcher2_;$/;"	m	class:testing::internal::BothOfMatcher
matcher2_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher2 matcher2_;$/;"	m	class:testing::internal::EitherOfMatcher
matcher2_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<T> matcher2_;$/;"	m	class:testing::internal::BothOfMatcherImpl
matcher2_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<T> matcher2_;$/;"	m	class:testing::internal::EitherOfMatcherImpl
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^      : property_(property), matcher_(matcher) {}$/;"	f	class:testing::internal::PropertyMatcher
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<ResultType> matcher_;$/;"	m	class:testing::internal::ResultOfMatcher::Impl
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<const ::std::vector<LhsValue>&> matcher_;$/;"	m	class:testing::internal::WhenSortedByMatcher::Impl
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<const Pointee&> matcher_;$/;"	m	class:testing::internal::PointeeMatcher::Impl
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  InnerMatcher matcher_;$/;"	m	class:testing::internal::NotMatcher
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  M matcher_;$/;"	m	class:testing::internal::MatcherAsPredicate
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const ContainerMatcher matcher_;$/;"	m	class:testing::internal::WhenSortedByMatcher
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const InnerMatcher matcher_;$/;"	m	class:testing::internal::PointeeMatcher
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const M matcher_;$/;"	m	class:testing::internal::PredicateFormatterFromMatcher
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<RefToConstProperty> matcher_;$/;"	m	class:testing::internal::PropertyMatcher
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<ResultType> matcher_;$/;"	m	class:testing::internal::ResultOfMatcher
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<T> matcher_;$/;"	m	class:testing::internal::NotMatcherImpl
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<To> matcher_;$/;"	m	class:testing::internal::WhenDynamicCastToMatcherBase
matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<const FieldType&> matcher_;$/;"	m	class:testing::internal::FieldMatcher
matcher_describers	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatcherDescriberVec& matcher_describers() {$/;"	f	class:testing::internal::UnorderedElementsAreMatcherImplBase
matcher_describers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatcherDescriberVec matcher_describers_;$/;"	m	class:testing::internal::UnorderedElementsAreMatcherImplBase
matcher_for_key_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const M matcher_for_key_;$/;"	m	class:testing::internal::KeyMatcher
matchers	ceres-solver/internal/ceres/gmock/gmock.h	/^  const ArgumentMatcherTuple& matchers() const {$/;"	f	class:testing::internal::TypedExpectation
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ::std::vector<Matcher<const Element&> > matchers_;$/;"	m	class:testing::internal::ElementsAreMatcherImpl
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ::std::vector<T> matchers_;$/;"	m	class:testing::internal::UnorderedElementsAreArrayMatcher
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ArgumentMatcherTuple matchers_;$/;"	m	class:testing::internal::MockSpec
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ArgumentMatcherTuple matchers_;$/;"	m	class:testing::internal::OnCallSpec
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ArgumentMatcherTuple matchers_;$/;"	m	class:testing::internal::TypedExpectation
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatcherVec matchers_;$/;"	m	class:testing::internal::UnorderedElementsAreMatcherImpl
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const ::std::vector<T> matchers_;$/;"	m	class:testing::internal::ElementsAreArrayMatcher
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const MatcherTuple matchers_;$/;"	m	class:testing::internal::ElementsAreMatcher
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const MatcherTuple matchers_;$/;"	m	class:testing::internal::UnorderedElementsAreMatcher
matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const typename MatcherListType::ListType matchers_;$/;"	m	class:testing::internal::VariadicMatcher
matches_filter_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool matches_filter_;             \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
matrix	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	/^  const BlockRandomAccessDiagonalMatrix& matrix() const { return *m_; }$/;"	f	class:ceres::internal::BlockJacobiPreconditioner
matrix	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^  const TripletSparseMatrix* matrix() const { return tsm_.get(); }$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
matrix	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  const TripletSparseMatrix* matrix() const { return tsm_.get(); }$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
matrix	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^ConstColMajorMatrixRef DenseSparseMatrix::matrix() const {$/;"	f	class:ceres::internal::DenseSparseMatrix
matrix_	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  const BlockSparseMatrix& matrix_;$/;"	m	class:ceres::internal::PartitionedMatrixView
matrix_	ceres-solver/internal/ceres/preconditioner.h	/^  const SparseMatrix* matrix_;$/;"	m	class:ceres::internal::SparseMatrixPreconditionerWrapper
max_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const int max_;$/;"	m	class:testing::__anon28::BetweenCardinalityImpl	file:
max_abs_error_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const FloatType max_abs_error_;$/;"	m	class:testing::internal::FloatingEqMatcher::Impl
max_abs_error_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const FloatType max_abs_error_;$/;"	m	class:testing::internal::FloatingEqMatcher
max_col_block_size	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    int max_col_block_size;$/;"	m	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
max_consecutive_nonmonotonic_steps	ceres-solver/include/ceres/solver.h	/^    int max_consecutive_nonmonotonic_steps;$/;"	m	struct:ceres::Solver::Options
max_consecutive_nonmonotonic_steps	ceres-solver/internal/ceres/minimizer.h	/^    int max_consecutive_nonmonotonic_steps;$/;"	m	struct:ceres::internal::Minimizer::Options
max_consecutive_nonmonotonic_steps_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  const int max_consecutive_nonmonotonic_steps_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
max_diagonal_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double max_diagonal_;$/;"	m	class:ceres::internal::DoglegStrategy
max_diagonal_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  const double max_diagonal_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
max_lbfgs_rank	ceres-solver/include/ceres/gradient_problem_solver.h	/^    int max_lbfgs_rank;$/;"	m	struct:ceres::GradientProblemSolver::Options
max_lbfgs_rank	ceres-solver/include/ceres/gradient_problem_solver.h	/^    int max_lbfgs_rank;$/;"	m	struct:ceres::GradientProblemSolver::Summary
max_lbfgs_rank	ceres-solver/include/ceres/solver.h	/^    int max_lbfgs_rank;$/;"	m	struct:ceres::Solver::Options
max_lbfgs_rank	ceres-solver/include/ceres/solver.h	/^    int max_lbfgs_rank;$/;"	m	struct:ceres::Solver::Summary
max_lbfgs_rank	ceres-solver/internal/ceres/line_search_direction.h	/^    int max_lbfgs_rank;$/;"	m	struct:ceres::internal::LineSearchDirection::Options
max_lbfgs_rank	ceres-solver/internal/ceres/minimizer.h	/^    int max_lbfgs_rank;$/;"	m	struct:ceres::internal::Minimizer::Options
max_line_search_step_contraction	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double max_line_search_step_contraction;$/;"	m	struct:ceres::GradientProblemSolver::Options
max_line_search_step_contraction	ceres-solver/include/ceres/solver.h	/^    double max_line_search_step_contraction;$/;"	m	struct:ceres::Solver::Options
max_line_search_step_contraction	ceres-solver/internal/ceres/minimizer.h	/^    double max_line_search_step_contraction;$/;"	m	struct:ceres::internal::Minimizer::Options
max_line_search_step_expansion	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double max_line_search_step_expansion;$/;"	m	struct:ceres::GradientProblemSolver::Options
max_line_search_step_expansion	ceres-solver/include/ceres/solver.h	/^    double max_line_search_step_expansion;$/;"	m	struct:ceres::Solver::Options
max_line_search_step_expansion	ceres-solver/internal/ceres/minimizer.h	/^    double max_line_search_step_expansion;$/;"	m	struct:ceres::internal::Minimizer::Options
max_linear_solver_iterations	ceres-solver/include/ceres/solver.h	/^    int max_linear_solver_iterations;$/;"	m	struct:ceres::Solver::Options
max_lm_diagonal	ceres-solver/include/ceres/solver.h	/^    double max_lm_diagonal;$/;"	m	struct:ceres::Solver::Options
max_lm_diagonal	ceres-solver/internal/ceres/trust_region_strategy.h	/^    double max_lm_diagonal;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Options
max_mu_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double max_mu_;$/;"	m	class:ceres::internal::DoglegStrategy
max_num_consecutive_invalid_steps	ceres-solver/include/ceres/solver.h	/^    int max_num_consecutive_invalid_steps;$/;"	m	struct:ceres::Solver::Options
max_num_consecutive_invalid_steps	ceres-solver/internal/ceres/minimizer.h	/^    int max_num_consecutive_invalid_steps;$/;"	m	struct:ceres::internal::Minimizer::Options
max_num_corrections_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  const int max_num_corrections_;$/;"	m	class:ceres::internal::LowRankInverseHessian
max_num_iterations	ceres-solver/examples/libmv_homography.cc	/^  int max_num_iterations;$/;"	m	struct:__anon41::EstimateHomographyOptions	file:
max_num_iterations	ceres-solver/include/ceres/gradient_problem_solver.h	/^    int max_num_iterations;$/;"	m	struct:ceres::GradientProblemSolver::Options
max_num_iterations	ceres-solver/include/ceres/solver.h	/^    int max_num_iterations;$/;"	m	struct:ceres::Solver::Options
max_num_iterations	ceres-solver/internal/ceres/line_search.h	/^    int max_num_iterations;$/;"	m	struct:ceres::internal::LineSearch::Options
max_num_iterations	ceres-solver/internal/ceres/linear_solver.h	/^    int max_num_iterations;$/;"	m	struct:ceres::internal::LinearSolver::Options
max_num_iterations	ceres-solver/internal/ceres/minimizer.h	/^    int max_num_iterations;$/;"	m	struct:ceres::internal::Minimizer::Options
max_num_line_search_direction_restarts	ceres-solver/include/ceres/gradient_problem_solver.h	/^    int max_num_line_search_direction_restarts;$/;"	m	struct:ceres::GradientProblemSolver::Options
max_num_line_search_direction_restarts	ceres-solver/include/ceres/solver.h	/^    int max_num_line_search_direction_restarts;$/;"	m	struct:ceres::Solver::Options
max_num_line_search_direction_restarts	ceres-solver/internal/ceres/minimizer.h	/^    int max_num_line_search_direction_restarts;$/;"	m	struct:ceres::internal::Minimizer::Options
max_num_line_search_step_size_iterations	ceres-solver/include/ceres/gradient_problem_solver.h	/^    int max_num_line_search_step_size_iterations;$/;"	m	struct:ceres::GradientProblemSolver::Options
max_num_line_search_step_size_iterations	ceres-solver/include/ceres/solver.h	/^    int max_num_line_search_step_size_iterations;$/;"	m	struct:ceres::Solver::Options
max_num_line_search_step_size_iterations	ceres-solver/internal/ceres/minimizer.h	/^    int max_num_line_search_step_size_iterations;$/;"	m	struct:ceres::internal::Minimizer::Options
max_num_nonzeros	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  int max_num_nonzeros() const { return max_num_nonzeros_; }$/;"	f	class:ceres::internal::TripletSparseMatrix
max_num_nonzeros_	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  int max_num_nonzeros_;$/;"	m	class:ceres::internal::BlockSparseMatrix
max_num_nonzeros_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  int max_num_nonzeros_;$/;"	m	class:ceres::internal::TripletSparseMatrix
max_num_ridders_extrapolations	ceres-solver/include/ceres/numeric_diff_options.h	/^  int max_num_ridders_extrapolations;$/;"	m	struct:ceres::NumericDiffOptions
max_radius	ceres-solver/internal/ceres/trust_region_strategy.h	/^    double max_radius;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Options
max_radius_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double max_radius_;$/;"	m	class:ceres::internal::DoglegStrategy
max_radius_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  double max_radius_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
max_row_block_size	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    int max_row_block_size;$/;"	m	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
max_solver_time_in_seconds	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double max_solver_time_in_seconds;$/;"	m	struct:ceres::GradientProblemSolver::Options
max_solver_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double max_solver_time_in_seconds;$/;"	m	struct:ceres::Solver::Options
max_solver_time_in_seconds	ceres-solver/internal/ceres/minimizer.h	/^    double max_solver_time_in_seconds;$/;"	m	struct:ceres::internal::Minimizer::Options
max_step_contraction	ceres-solver/internal/ceres/line_search.h	/^    double max_step_contraction;$/;"	m	struct:ceres::internal::LineSearch::Options
max_step_expansion	ceres-solver/internal/ceres/line_search.h	/^    double max_step_expansion;$/;"	m	struct:ceres::internal::LineSearch::Options
max_step_solver_retries	ceres-solver/internal/ceres/minimizer.h	/^    int max_step_solver_retries;$/;"	m	struct:ceres::internal::Minimizer::Options
max_trust_region_radius	ceres-solver/include/ceres/solver.h	/^    double max_trust_region_radius;$/;"	m	struct:ceres::Solver::Options
maximum_relative_error	ceres-solver/include/ceres/gradient_checker.h	/^    double maximum_relative_error;$/;"	m	struct:ceres::GradientChecker::ProbeResults
membership_	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^  HashMap<int, int> membership_;$/;"	m	class:ceres::internal::CanonicalViewsTest	file:
memsize	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline size_t memsize() const { return size_ * sizeof(T); }$/;"	f	class:ceres::internal::FixedArray
message	ceres-solver/include/ceres/gradient_problem_solver.h	/^    std::string message;$/;"	m	struct:ceres::GradientProblemSolver::Summary
message	ceres-solver/include/ceres/solver.h	/^    std::string message;$/;"	m	struct:ceres::Solver::Summary
message	ceres-solver/internal/ceres/gmock/mock-log.h	/^    std::string message;$/;"	m	struct:testing::ScopedMockLog::MessageInfo
message	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string message;$/;"	m	struct:testing::internal::TraceInfo	file:
message	ceres-solver/internal/ceres/gtest/gtest.h	/^    std::string const message;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::std
message	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message	ceres-solver/internal/ceres/linear_solver.h	/^    std::string message;$/;"	m	struct:ceres::internal::LinearSolver::Summary
message_	ceres-solver/internal/ceres/gtest/gtest.h	/^  internal::scoped_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
message_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
message_info_	ceres-solver/internal/ceres/gmock/mock-log.h	/^  MessageInfo message_info_;$/;"	m	class:testing::ScopedMockLog
message_operations	devel/include/console/serial_data.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/ctrl_serial_comm/car_speed.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/ctrl_serial_comm/serial_data.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/logical_core/SetGoalRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/logical_core/SetGoalResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/odometry/car_speed.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/serial_comm/car_speed.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/serial_comm/serial_data.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/vision_unit/SetGoalRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/vision_unit/SetGoalResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/vision_unit/armor_msg.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	devel/include/vision_unit/transformed_scan.h	/^namespace message_operations$/;"	n	namespace:ros
message_traits	devel/include/console/serial_data.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/ctrl_serial_comm/car_speed.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/ctrl_serial_comm/serial_data.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/logical_core/SetGoalRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/logical_core/SetGoalResponse.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/odometry/car_speed.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/serial_comm/car_speed.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/serial_comm/serial_data.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/vision_unit/SetGoalRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/vision_unit/SetGoalResponse.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/vision_unit/armor_msg.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	devel/include/vision_unit/transformed_scan.h	/^namespace message_traits$/;"	n	namespace:ros
messages_str	build/console/cmake/console-genmsg-context.py	/^messages_str = "\/home\/ubuntu\/dji_beta\/auto_car\/src\/console\/msg\/serial_data.msg"$/;"	v
messages_str	build/logical_core/cmake/logical_core-genmsg-context.py	/^messages_str = ""$/;"	v
messages_str	build/odometry/cmake/odometry-genmsg-context.py	/^messages_str = "\/home\/ubuntu\/dji_beta\/auto_car\/src\/odometry\/msg\/car_speed.msg"$/;"	v
messages_str	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^messages_str = "\/home\/ubuntu\/dji_beta\/auto_car\/src\/serial_comm\/msg\/car_speed.msg;\/home\/ubuntu\/dji_beta\/auto_car\/src\/serial_comm\/msg\/serial_data.msg"$/;"	v
messages_str	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^messages_str = "\/home\/ubuntu\/dji_beta\/auto_car\/src\/serial_communication\/msg\/car_speed.msg;\/home\/ubuntu\/dji_beta\/auto_car\/src\/serial_communication\/msg\/serial_data.msg"$/;"	v
messages_str	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^messages_str = "\/home\/ubuntu\/dji_beta\/auto_car\/src\/vision_unit\/msg\/armor_msg.msg;\/home\/ubuntu\/dji_beta\/auto_car\/src\/vision_unit\/msg\/transformed_scan.msg"$/;"	v
method_ptr_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const MethodPtr method_ptr_;$/;"	m	class:testing::internal::InvokeMethodAction
method_ptr_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const MethodPtr method_ptr_;$/;"	m	class:testing::internal::InvokeMethodWithoutArgsAction
min	src/rplidar_ros/sdk/src/rplidar_driver.cpp	43;"	d	file:
min_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const int min_;$/;"	m	class:testing::__anon28::BetweenCardinalityImpl	file:
min_col_block_size	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    int min_col_block_size;$/;"	m	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
min_diagonal_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double min_diagonal_;$/;"	m	class:ceres::internal::DoglegStrategy
min_diagonal_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  const double min_diagonal_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
min_line_search_step_contraction	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double min_line_search_step_contraction;$/;"	m	struct:ceres::GradientProblemSolver::Options
min_line_search_step_contraction	ceres-solver/include/ceres/solver.h	/^    double min_line_search_step_contraction;$/;"	m	struct:ceres::Solver::Options
min_line_search_step_contraction	ceres-solver/internal/ceres/minimizer.h	/^    double min_line_search_step_contraction;$/;"	m	struct:ceres::internal::Minimizer::Options
min_line_search_step_size	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double min_line_search_step_size;$/;"	m	struct:ceres::GradientProblemSolver::Options
min_line_search_step_size	ceres-solver/include/ceres/solver.h	/^    double min_line_search_step_size;$/;"	m	struct:ceres::Solver::Options
min_line_search_step_size	ceres-solver/internal/ceres/minimizer.h	/^    double min_line_search_step_size;$/;"	m	struct:ceres::internal::Minimizer::Options
min_linear_solver_iterations	ceres-solver/include/ceres/solver.h	/^    int min_linear_solver_iterations;$/;"	m	struct:ceres::Solver::Options
min_lm_diagonal	ceres-solver/include/ceres/solver.h	/^    double min_lm_diagonal;$/;"	m	struct:ceres::Solver::Options
min_lm_diagonal	ceres-solver/internal/ceres/trust_region_strategy.h	/^    double min_lm_diagonal;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Options
min_mu_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double min_mu_;$/;"	m	class:ceres::internal::DoglegStrategy
min_num_iterations	ceres-solver/internal/ceres/linear_solver.h	/^    int min_num_iterations;$/;"	m	struct:ceres::internal::LinearSolver::Options
min_reciprocal_condition_number	ceres-solver/include/ceres/covariance.h	/^    double min_reciprocal_condition_number;$/;"	m	struct:ceres::Covariance::Options
min_relative_decrease	ceres-solver/include/ceres/solver.h	/^    double min_relative_decrease;$/;"	m	struct:ceres::Solver::Options
min_relative_decrease	ceres-solver/internal/ceres/minimizer.h	/^    double min_relative_decrease;$/;"	m	struct:ceres::internal::Minimizer::Options
min_row_block_size	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    int min_row_block_size;$/;"	m	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
min_similarity	ceres-solver/internal/ceres/single_linkage_clustering.h	/^  double min_similarity;$/;"	m	struct:ceres::internal::SingleLinkageClusteringOptions
min_step_contraction	ceres-solver/internal/ceres/line_search.h	/^    double min_step_contraction;$/;"	m	struct:ceres::internal::LineSearch::Options
min_step_size	ceres-solver/internal/ceres/line_search.h	/^    double min_step_size;$/;"	m	struct:ceres::internal::LineSearch::Options
min_trust_region_radius	ceres-solver/include/ceres/solver.h	/^    double min_trust_region_radius;$/;"	m	struct:ceres::Solver::Options
min_trust_region_radius	ceres-solver/internal/ceres/minimizer.h	/^    double min_trust_region_radius;$/;"	m	struct:ceres::internal::Minimizer::Options
min_views	ceres-solver/internal/ceres/canonical_views_clustering.h	/^  int min_views;$/;"	m	struct:ceres::internal::CanonicalViewsClusteringOptions
minimizer_options	ceres-solver/internal/ceres/preprocessor.h	/^  Minimizer::Options minimizer_options;$/;"	m	struct:ceres::internal::PreprocessedProblem
minimizer_progress_to_stdout	ceres-solver/include/ceres/gradient_problem_solver.h	/^    bool minimizer_progress_to_stdout;$/;"	m	struct:ceres::GradientProblemSolver::Options
minimizer_progress_to_stdout	ceres-solver/include/ceres/solver.h	/^    bool minimizer_progress_to_stdout;$/;"	m	struct:ceres::Solver::Options
minimizer_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double minimizer_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
minimizer_type	ceres-solver/include/ceres/solver.h	/^    MinimizerType minimizer_type;$/;"	m	struct:ceres::Solver::Options
minimizer_type	ceres-solver/include/ceres/solver.h	/^    MinimizerType minimizer_type;$/;"	m	struct:ceres::Solver::Summary
minimizer_type	ceres-solver/internal/ceres/callbacks.h	/^  const MinimizerType minimizer_type;$/;"	m	class:ceres::internal::LoggingCallback
minimum_cost_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double minimum_cost_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
minimum_cost_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  double minimum_cost_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
mock_obj_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const void* mock_obj_;  \/\/ Protected by g_gmock_mutex.$/;"	m	class:testing::internal::UntypedFunctionMockerBase
mode	build/catkin_generated/generate_cached_setup.py	/^mode = os.stat(output_filename).st_mode$/;"	v
model	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   model;$/;"	m	struct:_rplidar_response_device_info_t
model_cost_change_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double model_cost_change_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
model_residuals_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector model_residuals_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
mono_tuple2_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<const ArgTuple&> mono_tuple2_matcher_;$/;"	m	class:testing::internal::BoundSecondMatcher::Impl
mono_tuple_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<InnerMatcherArg> mono_tuple_matcher_;$/;"	m	class:testing::internal::PointwiseMatcher::Impl
move	src/console/src/console.cpp	/^void move(char cmd)$/;"	f
msg	devel/share/gennodejs/ros/console/_index.js	/^  msg: require('.\/msg\/_index.js'),$/;"	p	class:module.exports
msg	devel/share/gennodejs/ros/ctrl_serial_comm/_index.js	/^  msg: require('.\/msg\/_index.js'),$/;"	p	class:module.exports
msg	devel/share/gennodejs/ros/odometry/_index.js	/^  msg: require('.\/msg\/_index.js'),$/;"	p	class:module.exports
msg	devel/share/gennodejs/ros/serial_comm/_index.js	/^  msg: require('.\/msg\/_index.js'),$/;"	p	class:module.exports
msg	devel/share/gennodejs/ros/vision_unit/_index.js	/^  msg: require('.\/msg\/_index.js'),$/;"	p	class:module.exports
mu_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  double mu_;$/;"	m	class:ceres::internal::DoglegStrategy
mu_	ceres-solver/internal/ceres/mutex.h	/^  Mutex * const mu_;$/;"	m	class:ceres::internal::CeresMutexLock
mu_	ceres-solver/internal/ceres/mutex.h	/^  Mutex * const mu_;$/;"	m	class:ceres::internal::CeresReaderMutexLock
mu_	ceres-solver/internal/ceres/mutex.h	/^  Mutex * const mu_;$/;"	m	class:ceres::internal::CeresWriterMutexLock
mu_increase_factor_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  const double mu_increase_factor_;$/;"	m	class:ceres::internal::DoglegStrategy
mutable_block_offsets	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int>* mutable_block_offsets() { return &block_offsets_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_camera_for_observation	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double* mutable_camera_for_observation(int i) {$/;"	f	class:BALProblem
mutable_cameras	ceres-solver/examples/bal_problem.h	/^  double* mutable_cameras()          { return parameters_;               }$/;"	f	class:ceres::examples::BALProblem
mutable_cameras	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double* mutable_cameras()          { return parameters_;                     }$/;"	f	class:BALProblem
mutable_cameras	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  double* mutable_cameras() { return parameters_; }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
mutable_cc	ceres-solver/internal/ceres/suitesparse.h	/^  cholmod_common* mutable_cc() { return &cc_; }$/;"	f	class:ceres::internal::SuiteSparse
mutable_col_blocks	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int>* mutable_col_blocks() { return &col_blocks_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  int* mutable_cols() { return &cols_[0]; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_cols	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  int* mutable_cols()          { return cols_.get();       }$/;"	f	class:ceres::internal::TripletSparseMatrix
mutable_crsb_cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int>* mutable_crsb_cols() { return &crsb_cols_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_crsb_rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int>* mutable_crsb_rows() { return &crsb_rows_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_impl	ceres-solver/internal/ceres/gmock/gmock.h	/^  Impl& mutable_impl() { return impl_; }$/;"	f	class:testing::PolymorphicMatcher
mutable_local_parameterization	ceres-solver/internal/ceres/parameter_block.h	/^  LocalParameterization* mutable_local_parameterization() {$/;"	f	class:ceres::internal::ParameterBlock
mutable_matrix	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^  TripletSparseMatrix* mutable_matrix() { return tsm_.get(); }$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
mutable_matrix	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  TripletSparseMatrix* mutable_matrix() { return tsm_.get(); }$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
mutable_matrix	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^ColMajorMatrixRef DenseSparseMatrix::mutable_matrix() {$/;"	f	class:ceres::internal::DenseSparseMatrix
mutable_parameter_block_sizes	ceres-solver/include/ceres/cost_function.h	/^  std::vector<int32>* mutable_parameter_block_sizes() {$/;"	f	class:ceres::CostFunction
mutable_parameter_blocks	ceres-solver/internal/ceres/program.cc	/^vector<ParameterBlock*>* Program::mutable_parameter_blocks() {$/;"	f	class:ceres::internal::Program
mutable_point_for_observation	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double* mutable_point_for_observation(int i) {$/;"	f	class:BALProblem
mutable_points	ceres-solver/examples/bal_problem.h	/^  double* mutable_points() {$/;"	f	class:ceres::examples::BALProblem
mutable_points	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double* mutable_points()           { return parameters_  + 9 * num_cameras_; }$/;"	f	class:BALProblem
mutable_points	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  double* mutable_points() { return parameters_  + 9 * num_cameras_; }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
mutable_problem	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  Problem* mutable_problem() { return &problem_; }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
mutable_problem	ceres-solver/internal/ceres/system_test.cc	/^  Problem* mutable_problem() { return &problem_; }$/;"	f	class:ceres::internal::PowellsFunction
mutable_program	ceres-solver/internal/ceres/problem_impl.h	/^  Program* mutable_program() { return program_.get(); }$/;"	f	class:ceres::internal::ProblemImpl
mutable_residual_blocks	ceres-solver/internal/ceres/parameter_block.h	/^  ResidualBlockSet* mutable_residual_blocks() {$/;"	f	class:ceres::internal::ParameterBlock
mutable_residual_blocks	ceres-solver/internal/ceres/program.cc	/^vector<ResidualBlock*>* Program::mutable_residual_blocks() {$/;"	f	class:ceres::internal::Program
mutable_row_blocks	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int>* mutable_row_blocks() { return &row_blocks_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  int* mutable_rows() { return &rows_[0]; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_rows	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  int* mutable_rows()          { return rows_.get();       }$/;"	f	class:ceres::internal::TripletSparseMatrix
mutable_solver_options	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  Solver::Options* mutable_solver_options() { return &options_; }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
mutable_solver_options	ceres-solver/internal/ceres/system_test.cc	/^  Solver::Options* mutable_solver_options() { return &options_; }$/;"	f	class:ceres::internal::PowellsFunction
mutable_user_state	ceres-solver/internal/ceres/parameter_block.h	/^  double* mutable_user_state() { return user_state_; }$/;"	f	class:ceres::internal::ParameterBlock
mutable_values	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  double* mutable_values() { return values_.get(); }$/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
mutable_values	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  virtual double* mutable_values()     { return values_.get(); }$/;"	f	class:ceres::internal::BlockSparseMatrix
mutable_values	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  virtual double* mutable_values() { return &values_[0]; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
mutable_values	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^  virtual double* mutable_values() { return m_.data(); }$/;"	f	class:ceres::internal::DenseSparseMatrix
mutable_values	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  virtual double* mutable_values()      { return values_.get(); }$/;"	f	class:ceres::internal::TripletSparseMatrix
mutex_	ceres-solver/internal/ceres/gmock/gmock.h	/^  mutable Mutex mutex_;  \/\/ Protects action_count_checked_.$/;"	m	class:testing::internal::ExpectationBase
mutex_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static Mutex mutex_;$/;"	m	class:testing::internal::ThreadLocalRegistryImpl	file:
mutex_	ceres-solver/internal/ceres/gradient_checking_cost_function.h	/^  ceres::internal::Mutex mutex_;$/;"	m	class:ceres::internal::GradientCheckingIterationCallback
mutex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  Mutex* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  MutexBase* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:std::tr1::MutexBase
mutex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  pthread_mutex_t mutex_;$/;"	m	class:std::tr1::Notification
mutex_	ceres-solver/internal/ceres/mutex.h	/^  MutexType mutex_;$/;"	m	class:ceres::internal::Mutex
name	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  static std::string name() {$/;"	f	struct:ceres::examples::Constraint2d
name	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  static std::string name() {$/;"	f	struct:ceres::examples::Pose2d
name	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  static std::string name() {$/;"	f	struct:ceres::examples::Constraint3d
name	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  static std::string name() {$/;"	f	struct:ceres::examples::Pose3d
name	ceres-solver/internal/ceres/gtest/gtest.h	/^      std::string name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::InstantiationInfo
name	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestCase
name	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
name_	ceres-solver/internal/ceres/execution_summary.h	/^  const std::string name_;$/;"	m	class:ceres::internal::ScopedExecutionTimer
name_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const char* name_;  \/\/ Protected by g_gmock_mutex.$/;"	m	class:testing::internal::UntypedFunctionMockerBase
name_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string name_;$/;"	m	class:testing::__anon23::TestNameIs	file:
name_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string name_;$/;"	m	class:testing::internal::TestCaseNameIs	file:
name_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string name_;$/;"	m	class:testing::TestCase
name_arr	src/serial_communication/src/commCtrl.cxx	/^int name_arr[] = {  115200,  38400,  19200,  9600,  4800,  2400,  1200,  300,$/;"	v
name_func	ceres-solver/internal/ceres/gtest/gtest.h	/^      ParamNameGeneratorFunc* name_func;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::InstantiationInfo
namespaceDBoW2	src/doc/html/namespaceDBoW2.js	/^var namespaceDBoW2 =$/;"	v
namespaceDLoopDetector	src/doc/html/namespaceDLoopDetector.js	/^var namespaceDLoopDetector =$/;"	v
namespaceDUtils	src/doc/html/namespaceDUtils.js	/^var namespaceDUtils =$/;"	v
namespaceDVision	src/doc/html/namespaceDVision.js	/^var namespaceDVision =$/;"	v
namespaces	src/doc/html/namespaces.js	/^var namespaces =$/;"	v
nan_eq_nan_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const bool nan_eq_nan_;$/;"	m	class:testing::internal::FloatingEqMatcher::Impl
nan_eq_nan_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const bool nan_eq_nan_;$/;"	m	class:testing::internal::FloatingEqMatcher
natural_ldlt_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  scoped_ptr<SimplicialLDLTWithNaturalOrdering> natural_ldlt_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
navTo	src/doc/html/navtree.js	/^function navTo(o,root,hash,relpath)$/;"	f
negative_gradient_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector negative_gradient_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
nested-classes	src/doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classDUtils_1_1Random.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classUtility.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/namespaceDLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/namespaceDUtils.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	src/doc/html/namespaceDVision.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
net	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
net	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
net	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
newNode	src/doc/html/navtree.js	/^function newNode(o, po, text, link, childrenData, lastNode)$/;"	f
next_	ceres-solver/internal/ceres/gtest/gtest.h	/^  mutable linked_ptr_internal const* next_;$/;"	m	class:testing::internal::linked_ptr_internal
node.expandToggle.onclick	src/doc/html/navtree.js	/^    node.expandToggle.onclick = function() {$/;"	f
node.getChildrenUL	src/doc/html/navtree.js	/^  node.getChildrenUL = function() {$/;"	f
noise_factor_	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  double noise_factor_;$/;"	m	class:ceres::internal::RandomizedFunctor
nonfatally_failed	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
nonlinear_conjugate_gradient_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    NonlinearConjugateGradientType nonlinear_conjugate_gradient_type;$/;"	m	struct:ceres::GradientProblemSolver::Options
nonlinear_conjugate_gradient_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    NonlinearConjugateGradientType nonlinear_conjugate_gradient_type;$/;"	m	struct:ceres::GradientProblemSolver::Summary
nonlinear_conjugate_gradient_type	ceres-solver/include/ceres/solver.h	/^    NonlinearConjugateGradientType nonlinear_conjugate_gradient_type;$/;"	m	struct:ceres::Solver::Options
nonlinear_conjugate_gradient_type	ceres-solver/include/ceres/solver.h	/^    NonlinearConjugateGradientType nonlinear_conjugate_gradient_type;$/;"	m	struct:ceres::Solver::Summary
nonlinear_conjugate_gradient_type	ceres-solver/internal/ceres/line_search_direction.h	/^    NonlinearConjugateGradientType nonlinear_conjugate_gradient_type;$/;"	m	struct:ceres::internal::LineSearchDirection::Options
nonlinear_conjugate_gradient_type	ceres-solver/internal/ceres/minimizer.h	/^    NonlinearConjugateGradientType nonlinear_conjugate_gradient_type;$/;"	m	struct:ceres::internal::Minimizer::Options
notified_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool notified_;$/;"	m	class:std::tr1::Notification
null_space_rank	ceres-solver/include/ceres/covariance.h	/^    int null_space_rank;$/;"	m	struct:ceres::Covariance::Options
num_active_cols_	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  const int num_active_cols_;$/;"	m	class:ceres::internal::PowellEvaluator2	file:
num_additional_elements	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  int num_additional_elements;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
num_blocks_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  int num_blocks_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
num_cameras	ceres-solver/examples/bal_problem.h	/^  int num_cameras()            const { return num_cameras_;              }$/;"	f	class:ceres::examples::BALProblem
num_cameras	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int num_cameras()            const { return num_cameras_;        }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
num_cameras_	ceres-solver/examples/bal_problem.h	/^  int num_cameras_;$/;"	m	class:ceres::examples::BALProblem
num_cameras_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  int num_cameras_;$/;"	m	class:BALProblem	file:
num_cameras_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int num_cameras_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
num_clusters_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  int num_clusters_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
num_col_blocks	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    int num_col_blocks;$/;"	m	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
num_col_blocks_e	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  virtual int num_col_blocks_e() const { return num_col_blocks_e_;  }$/;"	f	class:ceres::internal::PartitionedMatrixView
num_col_blocks_e_	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  int num_col_blocks_e_;$/;"	m	class:ceres::internal::PartitionedMatrixView
num_col_blocks_f	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  virtual int num_col_blocks_f() const { return num_col_blocks_f_;  }$/;"	f	class:ceres::internal::PartitionedMatrixView
num_col_blocks_f_	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  int num_col_blocks_f_;$/;"	m	class:ceres::internal::PartitionedMatrixView
num_cols	ceres-solver/include/ceres/crs_matrix.h	/^  int num_cols;$/;"	m	struct:ceres::CRSMatrix
num_cols	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	/^  virtual int num_cols() const { return m_->num_rows(); }$/;"	f	class:ceres::internal::BlockJacobiPreconditioner
num_cols	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  virtual int num_cols() const { return num_rows_; }$/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
num_cols	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^  virtual int num_cols() const { return tsm_->num_cols(); }$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
num_cols	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  virtual int num_cols() const { return tsm_->num_cols(); }$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
num_cols	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  virtual int num_cols()         const { return num_cols_;     }$/;"	f	class:ceres::internal::BlockSparseMatrix
num_cols	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  virtual int num_cols() const { return A_.num_cols(); }$/;"	f	class:ceres::internal::CgnrLinearOperator
num_cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  virtual int num_cols() const { return num_cols_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
num_cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^  int num_cols;$/;"	m	class:ceres::internal::CompressedRowSparseMatrixTest	file:
num_cols	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^int DenseSparseMatrix::num_cols() const {$/;"	f	class:ceres::internal::DenseSparseMatrix
num_cols	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^  int num_cols;$/;"	m	class:ceres::internal::DenseSparseMatrixTest	file:
num_cols	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  int num_cols;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
num_cols	ceres-solver/internal/ceres/evaluator_test_utils.h	/^  int num_cols;$/;"	m	struct:ceres::internal::ExpectedEvaluation
num_cols	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  virtual int num_cols() const { return A_->num_cols_f(); }$/;"	f	class:ceres::internal::ImplicitSchurComplement
num_cols	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  virtual int num_cols() const { return num_parameters_; }$/;"	f	class:ceres::internal::LowRankInverseHessian
num_cols	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  virtual int num_cols()         const { return matrix_.num_cols(); }$/;"	f	class:ceres::internal::PartitionedMatrixView
num_cols	ceres-solver/internal/ceres/preconditioner.h	/^  virtual int num_cols() const {$/;"	f	class:ceres::internal::Preconditioner
num_cols	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual int num_cols() const { return m_.num_rows(); }$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessDiagonalMatrixAdapter
num_cols	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual int num_cols() const { return m_.num_rows(); }$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessSparseMatrixAdapter
num_cols	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  int num_cols;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
num_cols	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^    int num_cols;$/;"	m	struct:ceres::internal::TripletSparseMatrix::RandomMatrixOptions
num_cols	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  virtual int num_cols()        const { return num_cols_;     }$/;"	f	class:ceres::internal::TripletSparseMatrix
num_cols	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  virtual int num_cols() const { return -1; }$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
num_cols_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int num_cols_;$/;"	m	struct:ceres::Grid2D
num_cols_	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  int num_cols_;$/;"	m	class:ceres::internal::BlockSparseMatrix
num_cols_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  int num_cols_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
num_cols_	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  int num_cols_;$/;"	m	class:ceres::internal::ImplicitSchurComplementTest	file:
num_cols_	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  int num_cols_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolverTest	file:
num_cols_	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^  const int num_cols_;$/;"	m	class:ceres::internal::RegularizationCheckingLinearSolver	file:
num_cols_	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^  int num_cols_;$/;"	m	class:ceres::internal::PartitionedMatrixViewTest	file:
num_cols_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  int num_cols_;$/;"	m	class:ceres::internal::TripletSparseMatrix
num_cols_e	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  virtual int num_cols_e()       const { return num_cols_e_;        }$/;"	f	class:ceres::internal::PartitionedMatrixView
num_cols_e_	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  int num_cols_e_;$/;"	m	class:ceres::internal::PartitionedMatrixView
num_cols_f	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  virtual int num_cols_f()       const { return num_cols_f_;        }$/;"	f	class:ceres::internal::PartitionedMatrixView
num_cols_f_	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  int num_cols_f_;$/;"	m	class:ceres::internal::PartitionedMatrixView
num_consecutive_invalid_steps_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  int num_consecutive_invalid_steps_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
num_consecutive_nonmonotonic_steps_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  int num_consecutive_nonmonotonic_steps_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
num_destructions_	ceres-solver/internal/ceres/problem_test.cc	/^  int* num_destructions_;$/;"	m	class:ceres::internal::DestructorCountingCostFunction	file:
num_effective_parameters	ceres-solver/include/ceres/solver.h	/^    int num_effective_parameters;$/;"	m	struct:ceres::Solver::Summary
num_effective_parameters_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  int num_effective_parameters_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
num_effective_parameters_reduced	ceres-solver/include/ceres/solver.h	/^    int num_effective_parameters_reduced;$/;"	m	struct:ceres::Solver::Summary
num_elements_	ceres-solver/internal/ceres/gmock/gmock.h	/^  size_t num_elements_;$/;"	m	class:testing::internal::MatchMatrix
num_eliminate_blocks	ceres-solver/internal/ceres/evaluator.h	/^    int num_eliminate_blocks;$/;"	m	struct:ceres::internal::Evaluator::Options
num_eliminate_blocks	ceres-solver/internal/ceres/evaluator_test.cc	/^  int num_eliminate_blocks;$/;"	m	struct:ceres::internal::EvaluatorTestOptions	file:
num_eliminate_blocks	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^  int num_eliminate_blocks;$/;"	m	struct:ceres::internal::LinearLeastSquaresProblem
num_eliminate_blocks	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  int num_eliminate_blocks;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
num_eliminate_blocks	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  int num_eliminate_blocks;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
num_eliminate_blocks_	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  int num_eliminate_blocks_;$/;"	m	class:ceres::internal::ImplicitSchurComplementTest	file:
num_eliminate_blocks_	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  int num_eliminate_blocks_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolverTest	file:
num_eliminate_blocks_	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^  int num_eliminate_blocks_;$/;"	m	class:ceres::internal::PartitionedMatrixViewTest	file:
num_eliminate_blocks_	ceres-solver/internal/ceres/schur_eliminator.h	/^  int num_eliminate_blocks_;$/;"	m	class:ceres::internal::SchurEliminator
num_eliminate_cols	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  int num_eliminate_cols;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
num_filters_	ceres-solver/examples/fields_of_experts.h	/^  int num_filters_;$/;"	m	class:ceres::examples::FieldsOfExperts
num_function_evaluations	ceres-solver/internal/ceres/line_search.h	/^    int num_function_evaluations;$/;"	m	struct:ceres::internal::LineSearch::Summary
num_gradient_evaluations	ceres-solver/internal/ceres/line_search.h	/^    int num_gradient_evaluations;$/;"	m	struct:ceres::internal::LineSearch::Summary
num_inner_iteration_steps	ceres-solver/include/ceres/solver.h	/^    int num_inner_iteration_steps;$/;"	m	struct:ceres::Solver::Summary
num_iterations	ceres-solver/internal/ceres/line_search.h	/^    int num_iterations;$/;"	m	struct:ceres::internal::LineSearch::Summary
num_iterations	ceres-solver/internal/ceres/linear_solver.h	/^    int num_iterations;$/;"	m	struct:ceres::internal::LinearSolver::Summary
num_iterations	ceres-solver/internal/ceres/trust_region_strategy.h	/^    int num_iterations;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Summary
num_line_search_steps	ceres-solver/include/ceres/solver.h	/^    int num_line_search_steps;$/;"	m	struct:ceres::Solver::Summary
num_linear_solver_threads	ceres-solver/include/ceres/solver.h	/^    int num_linear_solver_threads;$/;"	m	struct:ceres::Solver::Options
num_linear_solver_threads_given	ceres-solver/include/ceres/solver.h	/^    int num_linear_solver_threads_given;$/;"	m	struct:ceres::Solver::Summary
num_linear_solver_threads_used	ceres-solver/include/ceres/solver.h	/^    int num_linear_solver_threads_used;$/;"	m	struct:ceres::Solver::Summary
num_local_parameters	ceres-solver/include/ceres/gradient_problem_solver.h	/^    int num_local_parameters;$/;"	m	struct:ceres::GradientProblemSolver::Summary
num_matchers_	ceres-solver/internal/ceres/gmock/gmock.h	/^  size_t num_matchers_;$/;"	m	class:testing::internal::MatchMatrix
num_nonzeros	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  virtual int num_nonzeros()     const { return num_nonzeros_; }$/;"	f	class:ceres::internal::BlockSparseMatrix
num_nonzeros	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  virtual int num_nonzeros() const { return rows_[num_rows_]; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
num_nonzeros	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^int DenseSparseMatrix::num_nonzeros() const {$/;"	f	class:ceres::internal::DenseSparseMatrix
num_nonzeros	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  virtual int num_nonzeros()    const { return num_nonzeros_; }$/;"	f	class:ceres::internal::TripletSparseMatrix
num_nonzeros_	ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc	/^  int num_nonzeros_;$/;"	m	class:ceres::internal::BlockRandomAccessDiagonalMatrixTest	file:
num_nonzeros_	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  int num_nonzeros_;$/;"	m	class:ceres::internal::BlockSparseMatrix
num_nonzeros_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  int num_nonzeros_;$/;"	m	class:ceres::internal::TripletSparseMatrix
num_observations	ceres-solver/examples/bal_problem.h	/^  int num_observations()       const { return num_observations_;         }$/;"	f	class:ceres::examples::BALProblem
num_observations	ceres-solver/examples/curve_fitting.c	/^int num_observations = 67;$/;"	v
num_observations	ceres-solver/examples/nist.cc	/^  int num_observations()    const { return predictor_.rows();  }$/;"	f	class:ceres::examples::NISTProblem
num_observations	ceres-solver/examples/simple_bundle_adjuster.cc	/^  int num_observations()       const { return num_observations_;               }$/;"	f	class:BALProblem
num_observations	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int num_observations()       const { return num_observations_;   }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
num_observations	ceres-solver/internal/ceres/c_api_test.cc	/^int num_observations = 67;$/;"	v
num_observations_	ceres-solver/examples/bal_problem.h	/^  int num_observations_;$/;"	m	class:ceres::examples::BALProblem
num_observations_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  int num_observations_;$/;"	m	class:BALProblem	file:
num_observations_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int num_observations_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
num_parameter_blocks	ceres-solver/include/ceres/solver.h	/^    int num_parameter_blocks;$/;"	m	struct:ceres::Solver::Summary
num_parameter_blocks_	ceres-solver/internal/ceres/covariance_test.cc	/^  int num_parameter_blocks_;$/;"	m	class:ceres::internal::LargeScaleCovarianceTest	file:
num_parameter_blocks_reduced	ceres-solver/include/ceres/solver.h	/^    int num_parameter_blocks_reduced;$/;"	m	struct:ceres::Solver::Summary
num_parameters	ceres-solver/examples/bal_problem.h	/^  int num_parameters()         const { return num_parameters_;           }$/;"	f	class:ceres::examples::BALProblem
num_parameters	ceres-solver/examples/nist.cc	/^  int num_parameters()      const { return initial_parameters_.cols(); }$/;"	f	class:ceres::examples::NISTProblem
num_parameters	ceres-solver/include/ceres/gradient_problem_solver.h	/^    int num_parameters;$/;"	m	struct:ceres::GradientProblemSolver::Summary
num_parameters	ceres-solver/include/ceres/solver.h	/^    int num_parameters;$/;"	m	struct:ceres::Solver::Summary
num_parameters	ceres-solver/internal/ceres/line_search_direction.h	/^    int num_parameters;$/;"	m	struct:ceres::internal::LineSearchDirection::Options
num_parameters_	ceres-solver/examples/bal_problem.h	/^  int num_parameters_;$/;"	m	class:ceres::examples::BALProblem
num_parameters_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  int num_parameters_;$/;"	m	class:BALProblem	file:
num_parameters_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int num_parameters_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
num_parameters_	ceres-solver/internal/ceres/line_search_direction.cc	/^  const int num_parameters_;$/;"	m	class:ceres::internal::BFGS	file:
num_parameters_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  const int num_parameters_;$/;"	m	class:ceres::internal::LowRankInverseHessian
num_parameters_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  int num_parameters_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
num_parameters_reduced	ceres-solver/include/ceres/solver.h	/^    int num_parameters_reduced;$/;"	m	struct:ceres::Solver::Summary
num_points	ceres-solver/examples/bal_problem.h	/^  int num_points()             const { return num_points_;               }$/;"	f	class:ceres::examples::BALProblem
num_points	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int num_points()             const { return num_points_;         }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
num_points_	ceres-solver/examples/bal_problem.h	/^  int num_points_;$/;"	m	class:ceres::examples::BALProblem
num_points_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  int num_points_;$/;"	m	class:BALProblem	file:
num_points_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int num_points_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
num_residual_blocks	ceres-solver/include/ceres/solver.h	/^    int num_residual_blocks;$/;"	m	struct:ceres::Solver::Summary
num_residual_blocks_reduced	ceres-solver/include/ceres/solver.h	/^    int num_residual_blocks_reduced;$/;"	m	struct:ceres::Solver::Summary
num_residuals	ceres-solver/include/ceres/cost_function.h	/^  int num_residuals() const {$/;"	f	class:ceres::CostFunction
num_residuals	ceres-solver/include/ceres/solver.h	/^    int num_residuals;$/;"	m	struct:ceres::Solver::Summary
num_residuals	ceres-solver/internal/ceres/autodiff_test.cc	/^  int num_residuals;$/;"	m	struct:ceres::internal::VaryingResidualFunctor	file:
num_residuals_	ceres-solver/include/ceres/cost_function.h	/^  int num_residuals_;$/;"	m	class:ceres::CostFunction
num_residuals_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  int num_residuals_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
num_residuals_reduced	ceres-solver/include/ceres/solver.h	/^    int num_residuals_reduced;$/;"	m	struct:ceres::Solver::Summary
num_row_blocks	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^    int num_row_blocks;$/;"	m	struct:ceres::internal::CompressedRowSparseMatrix::RandomMatrixOptions
num_row_blocks_e_	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  int num_row_blocks_e_;$/;"	m	class:ceres::internal::PartitionedMatrixView
num_rows	ceres-solver/include/ceres/crs_matrix.h	/^  int num_rows;$/;"	m	struct:ceres::CRSMatrix
num_rows	ceres-solver/internal/ceres/block_jacobi_preconditioner.h	/^  virtual int num_rows() const { return m_->num_rows(); }$/;"	f	class:ceres::internal::BlockJacobiPreconditioner
num_rows	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  virtual int num_rows() const { return num_rows_; }$/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
num_rows	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^  virtual int num_rows() const { return tsm_->num_rows(); }$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
num_rows	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  virtual int num_rows() const { return tsm_->num_rows(); }$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
num_rows	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  virtual int num_rows()         const { return num_rows_;     }$/;"	f	class:ceres::internal::BlockSparseMatrix
num_rows	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  virtual int num_rows() const { return A_.num_cols(); }$/;"	f	class:ceres::internal::CgnrLinearOperator
num_rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  virtual int num_rows() const { return num_rows_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
num_rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^  int num_rows;$/;"	m	class:ceres::internal::CompressedRowSparseMatrixTest	file:
num_rows	ceres-solver/internal/ceres/dense_sparse_matrix.cc	/^int DenseSparseMatrix::num_rows() const {$/;"	f	class:ceres::internal::DenseSparseMatrix
num_rows	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^  int num_rows;$/;"	m	class:ceres::internal::DenseSparseMatrixTest	file:
num_rows	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  int num_rows;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
num_rows	ceres-solver/internal/ceres/evaluator_test_utils.h	/^  int num_rows;$/;"	m	struct:ceres::internal::ExpectedEvaluation
num_rows	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  virtual int num_rows() const { return A_->num_cols_f(); }$/;"	f	class:ceres::internal::ImplicitSchurComplement
num_rows	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  virtual int num_rows() const { return num_parameters_; }$/;"	f	class:ceres::internal::LowRankInverseHessian
num_rows	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  virtual int num_rows()         const { return matrix_.num_rows(); }$/;"	f	class:ceres::internal::PartitionedMatrixView
num_rows	ceres-solver/internal/ceres/preconditioner.cc	/^int  SparseMatrixPreconditionerWrapper::num_rows() const {$/;"	f	class:ceres::internal::SparseMatrixPreconditionerWrapper
num_rows	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual int num_rows() const { return m_.num_rows(); }$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessDiagonalMatrixAdapter
num_rows	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual int num_rows() const { return m_.num_rows(); }$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessSparseMatrixAdapter
num_rows	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  int num_rows;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
num_rows	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^int SchurJacobiPreconditioner::num_rows() const {$/;"	f	class:ceres::internal::SchurJacobiPreconditioner
num_rows	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^    int num_rows;$/;"	m	struct:ceres::internal::TripletSparseMatrix::RandomMatrixOptions
num_rows	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  virtual int num_rows()        const { return num_rows_;     }$/;"	f	class:ceres::internal::TripletSparseMatrix
num_rows	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^int VisibilityBasedPreconditioner::num_rows() const {$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
num_rows	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  virtual int num_rows() const { return -1; }$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
num_rows_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int num_rows_;$/;"	m	struct:ceres::Grid2D
num_rows_	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  int num_rows_;$/;"	m	class:ceres::internal::BlockRandomAccessDenseMatrix
num_rows_	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  int num_rows_;$/;"	m	class:ceres::internal::BlockSparseMatrix
num_rows_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  int num_rows_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
num_rows_	ceres-solver/internal/ceres/implicit_schur_complement_test.cc	/^  int num_rows_;$/;"	m	class:ceres::internal::ImplicitSchurComplementTest	file:
num_rows_	ceres-solver/internal/ceres/iterative_schur_complement_solver_test.cc	/^  int num_rows_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolverTest	file:
num_rows_	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^  int num_rows_;$/;"	m	class:ceres::internal::PartitionedMatrixViewTest	file:
num_rows_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  int num_rows_;$/;"	m	class:ceres::internal::TripletSparseMatrix
num_segments_	ceres-solver/examples/ellipse_approximation.cc	/^  const int num_segments_;$/;"	m	class:PointToLineSegmentContourCostFunction	file:
num_starts	ceres-solver/examples/nist.cc	/^  int num_starts()          const { return initial_parameters_.rows(); }$/;"	f	class:ceres::examples::NISTProblem
num_successful_steps	ceres-solver/include/ceres/solver.h	/^    int num_successful_steps;$/;"	m	struct:ceres::Solver::Summary
num_threads	ceres-solver/include/ceres/covariance.h	/^    int num_threads;$/;"	m	struct:ceres::Covariance::Options
num_threads	ceres-solver/include/ceres/problem.h	/^    int num_threads;$/;"	m	struct:ceres::Problem::EvaluateOptions
num_threads	ceres-solver/include/ceres/solver.h	/^    int num_threads;$/;"	m	struct:ceres::Solver::Options
num_threads	ceres-solver/internal/ceres/evaluator.h	/^    int num_threads;$/;"	m	struct:ceres::internal::Evaluator::Options
num_threads	ceres-solver/internal/ceres/linear_solver.h	/^    int num_threads;$/;"	m	struct:ceres::internal::LinearSolver::Options
num_threads	ceres-solver/internal/ceres/minimizer.h	/^    int num_threads;$/;"	m	struct:ceres::internal::Minimizer::Options
num_threads	ceres-solver/internal/ceres/preconditioner.h	/^    int num_threads;$/;"	m	struct:ceres::internal::Preconditioner::Options
num_threads	ceres-solver/internal/ceres/test_util.h	/^  int num_threads;$/;"	m	struct:ceres::internal::SolverConfig
num_threads_	ceres-solver/internal/ceres/schur_eliminator.h	/^  int num_threads_;$/;"	m	class:ceres::internal::SchurEliminator
num_threads_given	ceres-solver/include/ceres/solver.h	/^    int num_threads_given;$/;"	m	struct:ceres::Solver::Summary
num_threads_used	ceres-solver/include/ceres/solver.h	/^    int num_threads_used;$/;"	m	struct:ceres::Solver::Summary
num_unsuccessful_steps	ceres-solver/include/ceres/solver.h	/^    int num_unsuccessful_steps;$/;"	m	struct:ceres::Solver::Summary
num_values_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int num_values_;$/;"	m	struct:ceres::Grid1D
num_values_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int num_values_;$/;"	m	struct:ceres::Grid2D
num_vertices_	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  int     num_vertices_;$/;"	m	class:ceres::internal::CurveCostFunction	file:
numeric_jacobians	ceres-solver/include/ceres/gradient_checker.h	/^    std::vector<Matrix> numeric_jacobians;$/;"	m	struct:ceres::GradientChecker::ProbeResults
o.node.getChildrenUL	src/doc/html/navtree.js	/^  o.node.getChildrenUL = function() { return o.node.childrenUL; };$/;"	f
obj_p	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    std::vector<cv::Point3f> obj_p;$/;"	m	class:autocar::vision_mul::armor_detect_node
obj_points	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat obj_points;$/;"	m	class:autocar::vision_mul::armor_detect_node
obj_ptr_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Class* const obj_ptr_;$/;"	m	class:testing::internal::InvokeMethodAction
obj_ptr_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Class* const obj_ptr_;$/;"	m	class:testing::internal::InvokeMethodWithoutArgsAction
object_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Super& object_;$/;"	m	class:testing::internal::RefMatcher::Impl
object_	ceres-solver/internal/ceres/gmock/gmock.h	/^  T& object_;$/;"	m	class:testing::internal::RefMatcher
observations	ceres-solver/examples/bal_problem.h	/^  const double* observations() const { return observations_;             }$/;"	f	class:ceres::examples::BALProblem
observations	ceres-solver/examples/simple_bundle_adjuster.cc	/^  const double* observations() const { return observations_;                   }$/;"	f	class:BALProblem
observations	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  const double* observations() const { return observations_; }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
observations_	ceres-solver/examples/bal_problem.h	/^  double* observations_;$/;"	m	class:ceres::examples::BALProblem
observations_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double* observations_;$/;"	m	class:BALProblem	file:
observations_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  double* observations_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
observed_x	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  const double observed_x;$/;"	m	struct:__anon38::OpenCVReprojectionError	file:
observed_x	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double observed_x;$/;"	m	struct:SnavelyReprojectionError	file:
observed_x	ceres-solver/examples/snavely_reprojection_error.h	/^  double observed_x;$/;"	m	struct:ceres::examples::SnavelyReprojectionError
observed_x	ceres-solver/examples/snavely_reprojection_error.h	/^  double observed_x;$/;"	m	struct:ceres::examples::SnavelyReprojectionErrorWithQuaternions
observed_y	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  const double observed_y;$/;"	m	struct:__anon38::OpenCVReprojectionError	file:
observed_y	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double observed_y;$/;"	m	struct:SnavelyReprojectionError	file:
observed_y	ceres-solver/examples/snavely_reprojection_error.h	/^  double observed_y;$/;"	m	struct:ceres::examples::SnavelyReprojectionError
observed_y	ceres-solver/examples/snavely_reprojection_error.h	/^  double observed_y;$/;"	m	struct:ceres::examples::SnavelyReprojectionErrorWithQuaternions
odom_mul	src/odometry/include/odometry/vel2odom.h	/^namespace odom_mul$/;"	n	namespace:autocar
odom_mul	src/odometry/src/vel2odom.cpp	/^namespace odom_mul$/;"	n	namespace:autocar	file:
odom_quat	src/odometry/include/odometry/vel2odom.h	/^  geometry_msgs::Quaternion odom_quat; \/\/< the quaternion of the car attitude$/;"	m	class:autocar::odom_mul::vel2odom
odometry	devel/include/odometry/car_speed.h	/^namespace odometry$/;"	n
odometry-msg	devel/share/common-lisp/ros/odometry/msg/_package.lisp	/^(cl:defpackage odometry-msg$/;"	f
odometry::car_speed	devel/share/roseus/ros/odometry/msg/car_speed.l	/^(defclass odometry::car_speed$/;"	f
odometry::car_speed	devel/share/roseus/ros/odometry/msg/car_speed.l	/^(defmethod odometry::car_speed$/;"	f
odometry_mean	ceres-solver/examples/robot_pose_mle.cc	/^  const double odometry_mean;$/;"	m	struct:OdometryConstraint	file:
odometry_stddev	ceres-solver/examples/robot_pose_mle.cc	/^  const double odometry_stddev;$/;"	m	struct:OdometryConstraint	file:
offset_angles_q3	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8    offset_angles_q3;  $/;"	m	struct:_rplidar_response_cabin_nodes_t
offsetof	src/rplidar_ros/sdk/src/hal/util.h	55;"	d
old_reporter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestPartResultReporterInterface* old_reporter_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
old_value_	ceres-solver/internal/ceres/c_api_test.cc	/^  T old_value_;$/;"	m	class:ceres::internal::ScopedSetValue	file:
open	ceres-solver/examples/libmv_bundle_adjuster.cc	98;"	d	file:
open	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::open(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
open	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::open(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
open	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::open(const char * portname, _u32 baudrate, _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
openDev	src/serial_communication/src/commCtrl.cxx	/^int openDev(char *Dev)$/;"	f
operator !	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertionResult AssertionResult::operator!() const {$/;"	f	class:testing::AssertionResult
operator !=	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  bool operator!=(const C* p) const { return array_ != p; }$/;"	f	class:ceres::internal::scoped_array
operator !=	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  bool operator!=(const C* p) const { return ptr_ != p; }$/;"	f	class:ceres::internal::scoped_ptr
operator !=	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator!=(const C* p1, const scoped_array<C>& p2) {$/;"	f	namespace:ceres::internal
operator !=	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator!=(const C* p1, const scoped_array<const C>& p2) {$/;"	f	namespace:ceres::internal
operator !=	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator!=(const C* p1, const scoped_ptr<C>& p2) {$/;"	f	namespace:ceres::internal
operator !=	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator!=(const C* p1, const scoped_ptr<const C>& p2) {$/;"	f	namespace:ceres::internal
operator !=	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator!=(const Expectation& rhs) const { return !(*this == rhs); }$/;"	f	class:testing::Expectation
operator !=	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator!=(const ExpectationSet& rhs) const { return !(*this == rhs); }$/;"	f	class:testing::ExpectationSet
operator !=	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool operator!=(T* p) const { return value_ != p; }$/;"	f	class:testing::internal::linked_ptr
operator !=	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool operator!=(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator !=	ceres-solver/internal/ceres/gtest/gtest.h	/^bool operator!=(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator &	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  void operator&(const std::ostream &s) { }$/;"	f	class:LoggerVoidify
operator ()	ceres-solver/examples/circle_fit.cc	/^  template <typename T> bool operator()(const T* const x,$/;"	f	class:DistanceFromCircleCost
operator ()	ceres-solver/examples/curve_fitting.cc	/^  template <typename T> bool operator()(const T* const m,$/;"	f	struct:ExponentialResidual
operator ()	ceres-solver/examples/ellipse_approximation.cc	/^  bool operator()(const T* x0, const T* x1, T* residuals) const {$/;"	f	struct:EuclideanDistanceFunctor
operator ()	ceres-solver/examples/helloworld.cc	/^  template <typename T> bool operator()(const T* const x, T* residual) const {$/;"	f	struct:CostFunctor
operator ()	ceres-solver/examples/helloworld_numeric_diff.cc	/^  bool operator()(const double* const x, double* residual) const {$/;"	f	struct:CostFunctor
operator ()	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  bool operator()(const T* const intrinsics,$/;"	f	struct:__anon38::OpenCVReprojectionError
operator ()	ceres-solver/examples/libmv_homography.cc	/^  bool operator()(const T* homography_parameters, T* residuals) const {$/;"	f	class:__anon41::HomographySymmetricGeometricCostFunctor
operator ()	ceres-solver/examples/libmv_homography.cc	/^  virtual ceres::CallbackReturnType operator()($/;"	f	class:__anon41::TerminationCheckingCallback
operator ()	ceres-solver/examples/nist.cc	/^  bool operator()(const T* const b, T* residual) const {$/;"	f	struct:ceres::examples::Nelson
operator ()	ceres-solver/examples/powell.cc	/^  template <typename T> bool operator()(const T* const x1,$/;"	f	struct:F1
operator ()	ceres-solver/examples/powell.cc	/^  template <typename T> bool operator()(const T* const x1,$/;"	f	struct:F4
operator ()	ceres-solver/examples/powell.cc	/^  template <typename T> bool operator()(const T* const x2,$/;"	f	struct:F3
operator ()	ceres-solver/examples/powell.cc	/^  template <typename T> bool operator()(const T* const x3,$/;"	f	struct:F2
operator ()	ceres-solver/examples/robot_pose_mle.cc	/^  bool operator()(T const* const* relative_poses, T* residuals) const {$/;"	f	struct:RangeConstraint
operator ()	ceres-solver/examples/robot_pose_mle.cc	/^  bool operator()(const T* const odometry, T* residual) const {$/;"	f	struct:OdometryConstraint
operator ()	ceres-solver/examples/robust_curve_fitting.cc	/^  template <typename T> bool operator()(const T* const m,$/;"	f	struct:ExponentialResidual
operator ()	ceres-solver/examples/sampled_function/sampled_function.cc	/^  template<typename T> bool operator()(const T* x, T* residuals) const {$/;"	f	struct:InterpolatedCostFunctor
operator ()	ceres-solver/examples/simple_bundle_adjuster.cc	/^  bool operator()(const T* const camera,$/;"	f	struct:SnavelyReprojectionError
operator ()	ceres-solver/examples/slam/pose_graph_2d/angle_local_parameterization.h	/^  bool operator()(const T* theta_radians, const T* delta_theta_radians,$/;"	f	class:ceres::examples::AngleLocalParameterization
operator ()	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^  bool operator()(const T* const x_a, const T* const y_a, const T* const yaw_a,$/;"	f	class:ceres::examples::PoseGraph2dErrorTerm
operator ()	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^  bool operator()(const T* const p_a_ptr, const T* const q_a_ptr,$/;"	f	class:ceres::examples::PoseGraph3dErrorTerm
operator ()	ceres-solver/examples/snavely_reprojection_error.h	/^  bool operator()(const T* const camera,$/;"	f	struct:ceres::examples::SnavelyReprojectionError
operator ()	ceres-solver/examples/snavely_reprojection_error.h	/^  bool operator()(const T* const camera,$/;"	f	struct:ceres::examples::SnavelyReprojectionErrorWithQuaternions
operator ()	ceres-solver/include/ceres/cost_function_to_functor.h	/^  bool operator()(const JetT* x0, JetT* residuals) const {$/;"	f	class:ceres::CostFunctionToFunctor
operator ()	ceres-solver/include/ceres/cost_function_to_functor.h	/^  bool operator()(const JetT* x0,$/;"	f	class:ceres::CostFunctionToFunctor
operator ()	ceres-solver/include/ceres/cost_function_to_functor.h	/^  bool operator()(const double* x0, double* residuals) const {$/;"	f	class:ceres::CostFunctionToFunctor
operator ()	ceres-solver/include/ceres/cost_function_to_functor.h	/^  bool operator()(const double* x0,$/;"	f	class:ceres::CostFunctionToFunctor
operator ()	ceres-solver/include/ceres/dynamic_cost_function_to_functor.h	/^  bool operator()(JetT const* const* inputs, JetT* output) const {$/;"	f	class:ceres::DynamicCostFunctionToFunctor
operator ()	ceres-solver/include/ceres/dynamic_cost_function_to_functor.h	/^  bool operator()(double const* const* parameters, double* residuals) const {$/;"	f	class:ceres::DynamicCostFunctionToFunctor
operator ()	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  inline void operator()(void* x) const {$/;"	f	class:ceres::internal::ScopedPtrMallocFree
operator ()	ceres-solver/include/ceres/rotation.h	/^  T& operator()(int r, int c) const {$/;"	f	struct:ceres::MatrixAdapter
operator ()	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^  bool operator()(const T* const x, const T* const y,$/;"	f	class:ceres::internal::BinaryScalarCost
operator ()	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^  bool operator()(const T* const x0,$/;"	f	struct:ceres::internal::TenParameterCost
operator ()	ceres-solver/internal/ceres/autodiff_cost_function_test.cc	/^  bool operator()(const T* x, T* output) const {$/;"	f	struct:ceres::internal::OnlyFillsOneOutputFunctor
operator ()	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^  bool operator()(const T* x, const T* delta, T* x_plus_delta) const {$/;"	f	struct:ceres::internal::IdentityPlus
operator ()	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^  bool operator()(const T* x, const T* delta, T* x_plus_delta) const {$/;"	f	struct:ceres::internal::QuaternionPlus
operator ()	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^  bool operator()(const T* x, const T* delta, T* x_plus_delta) const {$/;"	f	struct:ceres::internal::ScaledPlus
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(A const P[12], A const X[4], A x[2]) const {$/;"	f	struct:ceres::internal::Projective
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(A const P_X[12 + 4], A x[2]) const {$/;"	f	struct:ceres::internal::Projective
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(A const q[4], A const c[3], A const X[3], A x[2]) const {$/;"	f	struct:ceres::internal::Metric
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(A const q_c_X[4 + 3 + 3], A x[2]) const {$/;"	f	struct:ceres::internal::Metric
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T x[2], T* y) const {$/;"	f	struct:ceres::internal::VaryingResidualFunctor
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0, T* y) const {$/;"	f	struct:ceres::internal::Residual1Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0, const T* x1, T* y) const {$/;"	f	struct:ceres::internal::Residual2Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0, const T* x1, const T* x2, T* y) const {$/;"	f	struct:ceres::internal::Residual3Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0,$/;"	f	struct:ceres::internal::Residual10Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0,$/;"	f	struct:ceres::internal::Residual4Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0,$/;"	f	struct:ceres::internal::Residual5Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0,$/;"	f	struct:ceres::internal::Residual6Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0,$/;"	f	struct:ceres::internal::Residual7Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0,$/;"	f	struct:ceres::internal::Residual8Param
operator ()	ceres-solver/internal/ceres/autodiff_test.cc	/^  bool operator()(const T* x0,$/;"	f	struct:ceres::internal::Residual9Param
operator ()	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^    bool operator()(const T* const camera,$/;"	f	struct:ceres::internal::BundleAdjustmentProblem::BundlerResidual
operator ()	ceres-solver/internal/ceres/callbacks.cc	/^CallbackReturnType LoggingCallback::operator()($/;"	f	class:ceres::internal::LoggingCallback
operator ()	ceres-solver/internal/ceres/callbacks.cc	/^CallbackReturnType StateUpdatingCallback::operator()($/;"	f	class:ceres::internal::StateUpdatingCallback
operator ()	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  bool operator()(const int x, const int y) const {$/;"	f	struct:ceres::internal::__anon33::RowColLessThan
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(T const* const* parameters, T* residuals) const {$/;"	f	class:ceres::internal::DynamicTwoParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, T* residuals) const {$/;"	f	struct:ceres::internal::OneParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, T* residuals) const {$/;"	f	struct:ceres::internal::TwoParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, T* residuals) const {$/;"	f	struct:ceres::internal::ThreeParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, const T* x4,$/;"	f	struct:ceres::internal::EightParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, const T* x4,$/;"	f	struct:ceres::internal::FiveParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, const T* x4,$/;"	f	struct:ceres::internal::FourParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, const T* x4,$/;"	f	struct:ceres::internal::NineParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, const T* x4,$/;"	f	struct:ceres::internal::SevenParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, const T* x4,$/;"	f	struct:ceres::internal::SixParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/cost_function_to_functor_test.cc	/^  bool operator()(const T* x1, const T* x2, const T* x3, const T* x4,$/;"	f	struct:ceres::internal::TenParameterBlockFunctor
operator ()	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  bool operator()(T const* const* parameters, T* residuals) const {$/;"	f	class:ceres::internal::MyCostFunctor
operator ()	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  bool operator()(T const* const* parameters, T* residuals) const {$/;"	f	class:ceres::internal::MySixParameterCostFunctor
operator ()	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  bool operator()(T const* const* parameters, T* residuals) const {$/;"	f	class:ceres::internal::MyThreeParameterCostFunctor
operator ()	ceres-solver/internal/ceres/dynamic_compressed_row_finalizer.h	/^  void operator()(SparseMatrix* base_jacobian, int num_parameters) {$/;"	f	struct:ceres::internal::DynamicCompressedRowJacobianFinalizer
operator ()	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  bool operator()(T const* const* parameters, T* residuals) const {$/;"	f	class:ceres::internal::MyThreeParameterCostFunctor
operator ()	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  bool operator()(double const* const* parameters, double* residuals) const {$/;"	f	class:ceres::internal::MyCostFunctor
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^    OutIter operator() (Func \/* f *\/, const Tup& \/* t *\/, OutIter out) const {$/;"	f	struct:testing::internal::TransformTupleValuesHelper::IterateOverTuple
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^    OutIter operator() (Func f, const Tup& t, OutIter out) const {$/;"	f	struct:testing::internal::TransformTupleValuesHelper::IterateOverTuple
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^    bool operator()(const Expectation& lhs, const Expectation& rhs) const {$/;"	f	class:testing::Expectation::Less
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  AssertionResult operator()(const char* value_text, const T& x) const {$/;"	f	class:testing::internal::PredicateFormatterFromMatcher
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  Matcher<Target> operator()(const Arg& a) const {$/;"	f	struct:testing::internal::CastAndAppendTransform
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const ::testing::internal::linked_ptr<T>& lhs,$/;"	f	struct:testing::internal::LinkedPtrLessThan
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const A& a, const B& b) const { return a != b; }$/;"	f	struct:testing::internal::AnyNe
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const A& a, const B& b) const { return a < b; }$/;"	f	struct:testing::internal::AnyLt
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const A& a, const B& b) const { return a <= b; }$/;"	f	struct:testing::internal::AnyLe
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const A& a, const B& b) const { return a == b; }$/;"	f	struct:testing::internal::AnyEq
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const A& a, const B& b) const { return a > b; }$/;"	f	struct:testing::internal::AnyGt
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const A& a, const B& b) const { return a >= b; }$/;"	f	struct:testing::internal::AnyGe
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const T& lhs, const U& rhs) const { return lhs < rhs; }$/;"	f	struct:testing::internal::LessComparator
operator ()	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator()(const T& x) const {$/;"	f	class:testing::internal::MatcherAsPredicate
operator ()	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool operator()(const TestCase* test_case) const {$/;"	f	class:testing::internal::TestCaseNameIs
operator ()	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool operator()(const TestInfo * test_info) const {$/;"	f	class:testing::__anon23::TestNameIs
operator ()	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool operator()(const TestProperty& test_property) const {$/;"	f	class:testing::internal::TestPropertyKeyIs
operator ()	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool ExitedWithCode::operator()(int exit_status) const {$/;"	f	class:testing::ExitedWithCode
operator ()	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^bool KilledBySignal::operator()(int exit_status) const {$/;"	f	class:testing::KilledBySignal
operator ()	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^CallbackReturnType GradientCheckingIterationCallback::operator()($/;"	f	class:ceres::internal::GradientCheckingIterationCallback
operator ()	ceres-solver/internal/ceres/graph_algorithms.h	/^  bool operator()(const Vertex& lhs, const Vertex& rhs) const {$/;"	f	class:ceres::internal::VertexDegreeLessThan
operator ()	ceres-solver/internal/ceres/graph_algorithms.h	/^  bool operator()(const Vertex& lhs, const Vertex& rhs) const {$/;"	f	class:ceres::internal::VertexTotalOrdering
operator ()	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string operator()(const TestParamInfo<ParamType>& info) const {$/;"	f	struct:testing::PrintToStringParamName
operator ()	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  bool operator()(const Scalar* p_x, const Scalar* p_delta,$/;"	f	struct:ceres::internal::HomogeneousVectorParameterizationPlus
operator ()	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  bool operator()(const T* x, const T* delta, T* x_plus_delta) const {$/;"	f	struct:ceres::internal::EigenQuaternionPlus
operator ()	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  bool operator()(const T* x, const T* delta, T* x_plus_delta) const {$/;"	f	struct:ceres::internal::QuaternionPlus
operator ()	ceres-solver/internal/ceres/minimizer_test.cc	/^  virtual CallbackReturnType operator()(const IterationSummary& summary) {$/;"	f	class:ceres::internal::AbortingIterationCallback
operator ()	ceres-solver/internal/ceres/minimizer_test.cc	/^  virtual CallbackReturnType operator()(const IterationSummary& summary) {$/;"	f	class:ceres::internal::FakeIterationCallback
operator ()	ceres-solver/internal/ceres/minimizer_test.cc	/^  virtual CallbackReturnType operator()(const IterationSummary& summary) {$/;"	f	class:ceres::internal::SucceedingIterationCallback
operator ()	ceres-solver/internal/ceres/numeric_diff_cost_function_test.cc	/^  bool operator()(const double* x, double* output) const {$/;"	f	struct:ceres::internal::OnlyFillsOneOutputFunctor
operator ()	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^bool EasyFunctor::operator()(const double* x1,$/;"	f	class:ceres::internal::EasyFunctor
operator ()	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^bool ExponentialFunctor::operator()(const double* x1,$/;"	f	class:ceres::internal::ExponentialFunctor
operator ()	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^bool RandomizedFunctor::operator()(const double* x1,$/;"	f	class:ceres::internal::RandomizedFunctor
operator ()	ceres-solver/internal/ceres/numeric_diff_test_utils.cc	/^bool TranscendentalFunctor::operator()(const double* x1,$/;"	f	class:ceres::internal::TranscendentalFunctor
operator ()	ceres-solver/internal/ceres/program_evaluator.h	/^  void operator()(SparseMatrix* jacobian, int num_parameters) {}$/;"	f	struct:ceres::internal::NullJacobianFinalizer
operator ()	ceres-solver/internal/ceres/solver_test.cc	/^  template <typename T> bool operator()(const T* const x,$/;"	f	struct:ceres::internal::Quadratic4DCostFunction
operator ()	ceres-solver/internal/ceres/solver_test.cc	/^  template <typename T> bool operator()(const T* const x,$/;"	f	struct:ceres::internal::QuadraticCostFunctor
operator ()	ceres-solver/internal/ceres/solver_test.cc	/^  virtual CallbackReturnType operator()(const IterationSummary& summary) {$/;"	f	struct:ceres::internal::RememberingCallback
operator ()	ceres-solver/internal/ceres/system_test.cc	/^    template <typename T> bool operator()(const T* const x1,$/;"	f	class:ceres::internal::PowellsFunction::F1
operator ()	ceres-solver/internal/ceres/system_test.cc	/^    template <typename T> bool operator()(const T* const x1,$/;"	f	class:ceres::internal::PowellsFunction::F4
operator ()	ceres-solver/internal/ceres/system_test.cc	/^    template <typename T> bool operator()(const T* const x2,$/;"	f	class:ceres::internal::PowellsFunction::F3
operator ()	ceres-solver/internal/ceres/system_test.cc	/^    template <typename T> bool operator()(const T* const x3,$/;"	f	class:ceres::internal::PowellsFunction::F2
operator ()	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  bool operator()(const T* const x, T* residual) const {$/;"	f	struct:ceres::internal::ExpCostFunctor
operator *	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline Type& operator*() { return *get(); }$/;"	f	class:ceres::internal::ManualConstructor
operator *	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline const Type& operator*() const { return *get(); }$/;"	f	class:ceres::internal::ManualConstructor
operator *	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C& operator*() const {$/;"	f	class:ceres::internal::scoped_ptr
operator *	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator*(T s, const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator *	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator*(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator *	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator*(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator *	ceres-solver/internal/ceres/gtest/gtest.h	/^  T& operator*() const { return *value_; }$/;"	f	class:testing::internal::linked_ptr
operator *	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator *=	ceres-solver/examples/pgm_image.h	/^void PGMImage<Real>::operator*= (Real a) {$/;"	f	class:ceres::examples::PGMImage
operator *=	ceres-solver/include/ceres/jet.h	/^  Jet<T, N>& operator*=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator +	ceres-solver/include/ceres/jet.h	/^Jet<T, N> const& operator+(const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator +	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator+(T s, const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator +	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator+(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator +	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator+(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator ++	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator +=	ceres-solver/examples/pgm_image.h	/^void PGMImage<Real>::operator+= (Real a) {$/;"	f	class:ceres::examples::PGMImage
operator +=	ceres-solver/examples/pgm_image.h	/^void PGMImage<Real>::operator+= (const PGMImage<Real>& image) {$/;"	f	class:ceres::examples::PGMImage
operator +=	ceres-solver/include/ceres/jet.h	/^  Jet<T, N>& operator+=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator +=	ceres-solver/internal/ceres/gmock/gmock.h	/^  ExpectationSet& operator+=(const Expectation& e) {$/;"	f	class:testing::ExpectationSet
operator -	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator-(T s, const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator -	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator-(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator -	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator-(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator -	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator-(const Jet<T, N>&f) {$/;"	f	namespace:ceres
operator -=	ceres-solver/include/ceres/jet.h	/^  Jet<T, N>& operator-=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator ->	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline Type* operator->() { return get(); }$/;"	f	class:ceres::internal::ManualConstructor
operator ->	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline const Type* operator->() const { return get(); }$/;"	f	class:ceres::internal::ManualConstructor
operator ->	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C* operator->() const  {$/;"	f	class:ceres::internal::scoped_ptr
operator ->	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* operator->() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
operator ->	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator /	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator\/(T s, const Jet<T, N>& g) {$/;"	f	namespace:ceres
operator /	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator\/(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator /	ceres-solver/include/ceres/jet.h	/^Jet<T, N> operator\/(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator /=	ceres-solver/include/ceres/jet.h	/^  Jet<T, N>& operator\/=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator <	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  bool operator<(const ProductTerm& right) const {$/;"	f	struct:ceres::internal::__anon34::ProductTerm
operator <<	ceres-solver/include/ceres/jet.h	/^inline std::ostream &operator<<(std::ostream &s, const Jet<T, N>& z) {$/;"	f	namespace:ceres
operator <<	ceres-solver/internal/ceres/gmock/gmock.h	/^  MatchResultListener& operator<<(const T& x) {$/;"	f	class:testing::MatchResultListener
operator <<	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Message& Message::operator <<(const ::std::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Message& Message::operator <<(const ::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Message& Message::operator <<(const wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Message& Message::operator <<(wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {$/;"	f	namespace:testing
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^  inline Message& operator <<(const T& value) {$/;"	f	class:testing::Message
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	ceres-solver/internal/ceres/gtest/gtest.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator <<	ceres-solver/internal/ceres/line_search.cc	/^ostream& operator<<(ostream &os, const FunctionSample& sample) {$/;"	f	namespace:ceres::internal
operator <<	devel/include/console/serial_data.h	/^std::ostream& operator<<(std::ostream& s, const ::console::serial_data_<ContainerAllocator> & v)$/;"	f	namespace:console
operator <<	devel/include/ctrl_serial_comm/car_speed.h	/^std::ostream& operator<<(std::ostream& s, const ::ctrl_serial_comm::car_speed_<ContainerAllocator> & v)$/;"	f	namespace:ctrl_serial_comm
operator <<	devel/include/ctrl_serial_comm/serial_data.h	/^std::ostream& operator<<(std::ostream& s, const ::ctrl_serial_comm::serial_data_<ContainerAllocator> & v)$/;"	f	namespace:ctrl_serial_comm
operator <<	devel/include/logical_core/SetGoalRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::logical_core::SetGoalRequest_<ContainerAllocator> & v)$/;"	f	namespace:logical_core
operator <<	devel/include/logical_core/SetGoalResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::logical_core::SetGoalResponse_<ContainerAllocator> & v)$/;"	f	namespace:logical_core
operator <<	devel/include/odometry/car_speed.h	/^std::ostream& operator<<(std::ostream& s, const ::odometry::car_speed_<ContainerAllocator> & v)$/;"	f	namespace:odometry
operator <<	devel/include/serial_comm/car_speed.h	/^std::ostream& operator<<(std::ostream& s, const ::serial_comm::car_speed_<ContainerAllocator> & v)$/;"	f	namespace:serial_comm
operator <<	devel/include/serial_comm/serial_data.h	/^std::ostream& operator<<(std::ostream& s, const ::serial_comm::serial_data_<ContainerAllocator> & v)$/;"	f	namespace:serial_comm
operator <<	devel/include/vision_unit/SetGoalRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::vision_unit::SetGoalRequest_<ContainerAllocator> & v)$/;"	f	namespace:vision_unit
operator <<	devel/include/vision_unit/SetGoalResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::vision_unit::SetGoalResponse_<ContainerAllocator> & v)$/;"	f	namespace:vision_unit
operator <<	devel/include/vision_unit/armor_msg.h	/^std::ostream& operator<<(std::ostream& s, const ::vision_unit::armor_msg_<ContainerAllocator> & v)$/;"	f	namespace:vision_unit
operator <<	devel/include/vision_unit/transformed_scan.h	/^std::ostream& operator<<(std::ostream& s, const ::vision_unit::transformed_scan_<ContainerAllocator> & v)$/;"	f	namespace:vision_unit
operator =	ceres-solver/internal/ceres/gmock/gmock.h	/^  void operator=(const BoundSecondMatcher& \/*rhs*\/) {$/;"	f	class:testing::internal::BoundSecondMatcher
operator =	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void AssertHelper::operator=(const Message& message) const {$/;"	f	class:testing::internal::AssertHelper
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  AssertionResult& operator=(AssertionResult other) {$/;"	f	class:testing::AssertionResult
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  linked_ptr& operator=(linked_ptr const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  template <typename U> linked_ptr& operator=(linked_ptr<U> const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  tuple& operator=(const tuple& \/* t *\/) { return *this; }$/;"	f	class:std::tr1::tuple
operator =	ceres-solver/internal/ceres/gtest/gtest.h	/^  tuple& operator=(const tuple& t) { return CopyFrom(t); }$/;"	f	class:std::tr1::tuple
operator =	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix& TripletSparseMatrix::operator=($/;"	f	class:ceres::internal::TripletSparseMatrix
operator ==	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  bool operator==(const C* p) const { return array_ == p; }$/;"	f	class:ceres::internal::scoped_array
operator ==	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  bool operator==(const C* p) const { return ptr_ == p; }$/;"	f	class:ceres::internal::scoped_ptr
operator ==	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator==(const C* p1, const scoped_array<C>& p2) {$/;"	f	namespace:ceres::internal
operator ==	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator==(const C* p1, const scoped_array<const C>& p2) {$/;"	f	namespace:ceres::internal
operator ==	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator==(const C* p1, const scoped_ptr<C>& p2) {$/;"	f	namespace:ceres::internal
operator ==	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline bool operator==(const C* p1, const scoped_ptr<const C>& p2) {$/;"	f	namespace:ceres::internal
operator ==	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator==(const Expectation& rhs) const {$/;"	f	class:testing::Expectation
operator ==	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool operator==(const ExpectationSet& rhs) const {$/;"	f	class:testing::ExpectationSet
operator ==	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool operator==(T* p) const { return value_ == p; }$/;"	f	class:testing::internal::linked_ptr
operator ==	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool operator==(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator ==	ceres-solver/internal/ceres/gtest/gtest.h	/^bool operator==(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator ==	src/rplidar_ros/sdk/src/hal/thread.h	/^    bool operator== ( const Thread & right) { return this->_handle == right._handle; }$/;"	f	class:rp::hal::Thread
operator >>	ceres-solver/examples/slam/pose_graph_2d/types.h	/^std::istream& operator>>(std::istream& input, Constraint2d& constraint) {$/;"	f	namespace:ceres::examples
operator >>	ceres-solver/examples/slam/pose_graph_2d/types.h	/^std::istream& operator>>(std::istream& input, Pose2d& pose) {$/;"	f	namespace:ceres::examples
operator >>	ceres-solver/examples/slam/pose_graph_3d/types.h	/^std::istream& operator>>(std::istream& input, Constraint3d& constraint) {$/;"	f	namespace:ceres::examples
operator >>	ceres-solver/examples/slam/pose_graph_3d/types.h	/^std::istream& operator>>(std::istream& input, Pose3d& pose) {$/;"	f	namespace:ceres::examples
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const { return Action<F>(NULL); }$/;"	f	class:testing::internal::DoDefaultAction
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const { return MakeAction(new Impl<F>(action_)); }$/;"	f	class:testing::internal::WithArgsAction
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const {$/;"	f	class:testing::PolymorphicAction
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const {$/;"	f	class:testing::internal::DoBothAction
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const {$/;"	f	class:testing::internal::IgnoreResultAction
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const {$/;"	f	class:testing::internal::ReturnAction
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const {$/;"	f	class:testing::internal::ReturnRefAction
operator Action<F>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Action<F>() const {$/;"	f	class:testing::internal::ReturnRefOfCopyAction
operator Matcher< ::testing::tuple<T1, T2> >	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher< ::testing::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::PairMatchBase
operator Matcher<ArgsTuple>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<ArgsTuple>() const {$/;"	f	class:testing::internal::ArgsMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::BeginEndDistanceIsMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::ContainsMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::EachMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::ElementsAreArrayMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::ElementsAreMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::SizeIsMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::UnorderedElementsAreArrayMatcher
operator Matcher<Container>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Container>() const {$/;"	f	class:testing::internal::UnorderedElementsAreMatcher
operator Matcher<FloatType&>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<FloatType&>() const {$/;"	f	class:testing::internal::FloatingEqMatcher
operator Matcher<FloatType>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<FloatType>() const {$/;"	f	class:testing::internal::FloatingEqMatcher
operator Matcher<Lhs>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Lhs>() const {$/;"	f	class:testing::internal::ComparisonBase
operator Matcher<LhsContainer>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<LhsContainer>() const {$/;"	f	class:testing::internal::PointwiseMatcher
operator Matcher<LhsContainer>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<LhsContainer>() const {$/;"	f	class:testing::internal::WhenSortedByMatcher
operator Matcher<PairType>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<PairType> () const {$/;"	f	class:testing::internal::PairMatcher
operator Matcher<PairType>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<PairType>() const {$/;"	f	class:testing::internal::KeyMatcher
operator Matcher<Pointer>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Pointer>() const {$/;"	f	class:testing::internal::PointeeMatcher
operator Matcher<Super&>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<Super&>() const {$/;"	f	class:testing::internal::RefMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const { return A<T>(); }$/;"	f	class:testing::internal::AnythingMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::PolymorphicMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::internal::BothOfMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::internal::BoundSecondMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::internal::EitherOfMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::internal::NotMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::internal::ResultOfMatcher
operator Matcher<T>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::internal::VariadicMatcher
operator Matcher<const ::testing::tuple<T1, T2>&>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<const ::testing::tuple<T1, T2>&>() const {$/;"	f	class:testing::internal::PairMatchBase
operator Matcher<const FloatType&>	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator Matcher<const FloatType&>() const {$/;"	f	class:testing::internal::FloatingEqMatcher
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9,$/;"	f	class:testing::internal::CartesianProductHolder10
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder9
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7, T8> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7,$/;"	f	class:testing::internal::CartesianProductHolder8
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6, T7> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6,$/;"	f	class:testing::internal::CartesianProductHolder7
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5, T6> >() const {$/;"	f	class:testing::internal::CartesianProductHolder6
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4, T5> >() const {$/;"	f	class:testing::internal::CartesianProductHolder5
operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3, T4> >() const {$/;"	f	class:testing::internal::CartesianProductHolder4
operator ParamGenerator< ::testing::tuple<T1, T2, T3> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2, T3> >() const {$/;"	f	class:testing::internal::CartesianProductHolder3
operator ParamGenerator< ::testing::tuple<T1, T2> >	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator< ::testing::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::CartesianProductHolder2
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray1
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray10
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray11
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray12
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray13
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray14
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray15
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray16
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray17
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray18
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray19
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray2
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray20
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray21
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray22
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray23
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray24
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray25
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray26
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray27
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray28
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray29
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray3
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray30
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray31
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray32
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray33
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray34
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray35
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray36
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray37
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray38
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray39
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray4
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray40
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray41
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray42
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray43
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray44
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray45
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray46
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray47
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray48
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray49
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray5
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray50
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray6
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray7
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray8
operator ParamGenerator<T>	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray9
operator T&	ceres-solver/internal/ceres/gmock/gmock.h	/^  operator T&() const { return *pointer_; }$/;"	f	class:testing::internal::ReferenceWrapper
operator []	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline T& operator[](size_type i) {$/;"	f	class:ceres::internal::FixedArray
operator []	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline const T& operator[](size_type i) const {$/;"	f	class:ceres::internal::FixedArray
operator []	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C& operator[](std::ptrdiff_t i) const {$/;"	f	class:ceres::internal::scoped_array
operator bool	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	ceres-solver/internal/ceres/gtest/gtest.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
optimal_step_size	ceres-solver/internal/ceres/line_search.h	/^    double optimal_step_size;$/;"	m	struct:ceres::internal::LineSearch::Summary
options	ceres-solver/internal/ceres/line_search.h	/^  const LineSearch::Options& options() const { return options_; }$/;"	f	class:ceres::internal::LineSearch
options	ceres-solver/internal/ceres/preprocessor.h	/^  Solver::Options options;$/;"	m	struct:ceres::internal::PreprocessedProblem
options	ceres-solver/internal/ceres/schur_complement_solver.h	/^  const LinearSolver::Options& options() const { return options_; }$/;"	f	class:ceres::internal::SchurComplementSolver
options_	ceres-solver/examples/libmv_homography.cc	/^  const EstimateHomographyOptions &options_;$/;"	m	class:__anon41::TerminationCheckingCallback	file:
options_	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  NumericDiffOptions options_;$/;"	m	class:ceres::DynamicNumericDiffCostFunction
options_	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^  NumericDiffOptions options_;$/;"	m	class:ceres::NumericDiffCostFunction
options_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  Solver::Options options_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
options_	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^  CanonicalViewsClusteringOptions options_;$/;"	m	class:ceres::internal::CanonicalViewsClustering	file:
options_	ceres-solver/internal/ceres/canonical_views_clustering_test.cc	/^  CanonicalViewsClusteringOptions options_;$/;"	m	class:ceres::internal::CanonicalViewsTest	file:
options_	ceres-solver/internal/ceres/cgnr_solver.h	/^  const LinearSolver::Options options_;$/;"	m	class:ceres::internal::CgnrSolver
options_	ceres-solver/internal/ceres/conjugate_gradients_solver.h	/^  const LinearSolver::Options options_;$/;"	m	class:ceres::internal::ConjugateGradientsSolver
options_	ceres-solver/internal/ceres/covariance_impl.h	/^  Covariance::Options options_;$/;"	m	class:ceres::internal::CovarianceImpl
options_	ceres-solver/internal/ceres/dense_normal_cholesky_solver.h	/^  const LinearSolver::Options options_;$/;"	m	class:ceres::internal::DenseNormalCholeskySolver
options_	ceres-solver/internal/ceres/dense_qr_solver.h	/^  const LinearSolver::Options options_;$/;"	m	class:ceres::internal::DenseQRSolver
options_	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^  TrustRegionStrategy::Options options_;$/;"	m	class:ceres::internal::__anon36::Fixture	file:
options_	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.h	/^  const LinearSolver::Options options_;$/;"	m	class:ceres::internal::DynamicSparseNormalCholeskySolver
options_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  const LinearSolver::Options& options_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
options_	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	/^  LinearSolver::Options options_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolver
options_	ceres-solver/internal/ceres/line_search.h	/^  LineSearch::Options options_;$/;"	m	class:ceres::internal::LineSearch
options_	ceres-solver/internal/ceres/problem_impl.h	/^  const Problem::Options options_;$/;"	m	class:ceres::internal::ProblemImpl
options_	ceres-solver/internal/ceres/program_evaluator.h	/^  Evaluator::Options options_;$/;"	m	class:ceres::internal::ProgramEvaluator
options_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  LinearSolver::Options options_;$/;"	m	class:ceres::internal::SchurComplementSolver
options_	ceres-solver/internal/ceres/schur_jacobi_preconditioner.h	/^  Preconditioner::Options options_;$/;"	m	class:ceres::internal::SchurJacobiPreconditioner
options_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  const LinearSolver::Options options_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
options_	ceres-solver/internal/ceres/system_test.cc	/^  Solver::Options options_;$/;"	m	class:ceres::internal::PowellsFunction	file:
options_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Minimizer::Options options_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
options_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  Preconditioner::Options options_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
original_reporter_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
original_working_dir	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^const char* UnitTest::original_working_dir() const {$/;"	f	class:testing::UnitTest
original_working_dir_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::FilePath original_working_dir_;$/;"	m	class:testing::internal::UnitTestImpl	file:
os_stack_trace_getter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {$/;"	f	class:testing::internal::UnitTestImpl
os_stack_trace_getter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  OsStackTraceGetterInterface* os_stack_trace_getter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
out	ceres-solver/scripts/make_docs.py	/^    out = fptr.read()$/;"	v
out	ceres-solver/scripts/make_docs.py	/^    out = out.replace(input_pattern, output_pattern)$/;"	v
out	ceres-solver/scripts/make_docs.py	/^    out = pre_breadcrumb_start + post_breadcrumb_end$/;"	v
outcome	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  DeathTestOutcome outcome() const { return outcome_; }$/;"	f	class:testing::internal::DeathTestImpl
outcome_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  DeathTestOutcome outcome_;$/;"	m	class:testing::internal::DeathTestImpl	file:
outer_product_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  scoped_ptr<CompressedRowSparseMatrix> outer_product_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
output_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string output_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
output_file_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const std::string output_file_;$/;"	m	class:testing::internal::XmlUnitTestResultPrinter	file:
output_filename	build/catkin_generated/generate_cached_setup.py	/^output_filename = '\/home\/ubuntu\/dji_beta\/auto_car\/build\/catkin_generated\/setup_cached.sh'$/;"	v
owner_	ceres-solver/internal/ceres/gmock/gmock.h	/^  FunctionMockerBase<F>* const owner_;$/;"	m	class:testing::internal::TypedExpectation
owner_	ceres-solver/internal/ceres/gtest/gtest.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex.$/;"	m	class:std::tr1::MutexBase
owner_thread_id_	ceres-solver/internal/ceres/gtest/gtest.h	/^  unsigned int owner_thread_id_;$/;"	m	class:std::tr1::Mutex
ownership_	ceres-solver/include/ceres/conditioned_cost_function.h	/^  Ownership ownership_;$/;"	m	class:ceres::ConditionedCostFunction
ownership_	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  Ownership ownership_;$/;"	m	class:ceres::DynamicNumericDiffCostFunction
ownership_	ceres-solver/include/ceres/loss_function.h	/^  Ownership ownership_;$/;"	m	class:ceres::LossFunctionWrapper
ownership_	ceres-solver/include/ceres/loss_function.h	/^  const Ownership ownership_;$/;"	m	class:ceres::ScaledLoss
ownership_	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^  Ownership ownership_;$/;"	m	class:ceres::NumericDiffCostFunction
ownership_f_	ceres-solver/include/ceres/loss_function.h	/^  const Ownership ownership_f_, ownership_g_;$/;"	m	class:ceres::ComposedLoss
ownership_g_	ceres-solver/include/ceres/loss_function.h	/^  const Ownership ownership_f_, ownership_g_;$/;"	m	class:ceres::ComposedLoss
p	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  Eigen::Vector3d p;$/;"	m	struct:ceres::examples::Pose3d
p_ab_	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^  const Eigen::Vector2d p_ab_;$/;"	m	class:ceres::examples::PoseGraph2dErrorTerm
p_mission_mode_	src/logical_core/src/logical_core.h	/^  MissionMode  *p_mission_mode_;$/;"	m	class:LogicalCore
p_patrol_mode_	src/logical_core/src/logical_core.h	/^  PatrolMode   *p_patrol_mode_;$/;"	m	class:LogicalCore
p_point_mode_	src/logical_core/src/logical_core.h	/^  PointMode    *p_point_mode_;$/;"	m	class:LogicalCore
p_shooting_mode_	src/logical_core/src/logical_core.h	/^  ShootingMode *p_shooting_mode_;$/;"	m	class:LogicalCore
pan_title_pitch	src/serial_comm/include/comm_read.h	/^  float pan_title_pitch;$/;"	m	struct:autocar::serial_mul::__anon50
pan_title_pitch	src/serial_communication/src/commRecv.cxx	/^    float pan_title_pitch;$/;"	m	struct:__anon48	file:
pan_title_yaw	src/serial_comm/include/comm_read.h	/^  float pan_title_yaw;$/;"	m	struct:autocar::serial_mul::__anon50
pan_title_yaw	src/serial_communication/src/commRecv.cxx	/^    float pan_title_yaw;$/;"	m	struct:__anon48	file:
param	ceres-solver/internal/ceres/gtest/gtest.h	/^  ParamType param;$/;"	m	struct:testing::TestParamInfo
param1_	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  scoped_ptr<LocalParameterization> param1_;$/;"	m	class:ceres::internal::ProductParameterizationTest	file:
param2_	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  scoped_ptr<LocalParameterization> param2_;$/;"	m	class:ceres::internal::ProductParameterizationTest	file:
param3_	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  scoped_ptr<LocalParameterization> param3_;$/;"	m	class:ceres::internal::ProductParameterizationTest	file:
param4_	ceres-solver/internal/ceres/local_parameterization_test.cc	/^  scoped_ptr<LocalParameterization> param4_;$/;"	m	class:ceres::internal::ProductParameterizationTest	file:
param_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const T param_;$/;"	m	class:std::tr1::ThreadWithParam::RunnableImpl
param_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:std::tr1::ThreadWithParam
param_manager	src/param_manager/include/param_manager.h	/^class param_manager$/;"	c	namespace:autocar::param_mul
param_manager	src/param_manager/src/param_manager.cpp	/^param_manager::param_manager()$/;"	f	class:autocar::param_mul::param_manager
param_mul	src/param_manager/include/param_manager.h	/^namespace param_mul$/;"	n	namespace:autocar
param_mul	src/param_manager/src/param_manager.cpp	/^namespace param_mul$/;"	n	namespace:autocar	file:
parameter_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameter_	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	ceres-solver/internal/ceres/gtest/gtest.h	/^const T* WithParamInterface<T>::parameter_ = NULL;$/;"	m	class:testing::WithParamInterface
parameter_block_map_	ceres-solver/internal/ceres/problem_impl.h	/^  std::map<double*, ParameterBlock*> parameter_block_map_;$/;"	m	class:ceres::internal::ProblemImpl
parameter_block_size_	ceres-solver/internal/ceres/covariance_test.cc	/^  int parameter_block_size_;$/;"	m	class:ceres::internal::LargeScaleCovarianceTest	file:
parameter_block_sizes	ceres-solver/include/ceres/cost_function.h	/^  const std::vector<int32>& parameter_block_sizes() const {$/;"	f	class:ceres::CostFunction
parameter_block_sizes_	ceres-solver/include/ceres/cost_function.h	/^  std::vector<int32> parameter_block_sizes_;$/;"	m	class:ceres::CostFunction
parameter_block_to_row_index_	ceres-solver/internal/ceres/covariance_impl.h	/^  std::map<const double*, int> parameter_block_to_row_index_;$/;"	m	class:ceres::internal::CovarianceImpl
parameter_blocks	ceres-solver/include/ceres/problem.h	/^    std::vector<double*> parameter_blocks;$/;"	m	struct:ceres::Problem::EvaluateOptions
parameter_blocks	ceres-solver/internal/ceres/program.cc	/^const vector<ParameterBlock*>& Program::parameter_blocks() const {$/;"	f	class:ceres::internal::Program
parameter_blocks	ceres-solver/internal/ceres/residual_block.h	/^  ParameterBlock* const* parameter_blocks() const {$/;"	f	class:ceres::internal::ResidualBlock
parameter_blocks_	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	/^  std::vector<ParameterBlock*> parameter_blocks_;$/;"	m	class:ceres::internal::CoordinateDescentMinimizer
parameter_blocks_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double*> parameter_blocks_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
parameter_blocks_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double*> parameter_blocks_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
parameter_blocks_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double*> parameter_blocks_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
parameter_blocks_	ceres-solver/internal/ceres/problem_test.cc	/^  vector<double*> parameter_blocks_;$/;"	m	class:ceres::internal::ProblemEvaluateTest	file:
parameter_blocks_	ceres-solver/internal/ceres/program.h	/^  std::vector<ParameterBlock*> parameter_blocks_;$/;"	m	class:ceres::internal::Program
parameter_blocks_	ceres-solver/internal/ceres/residual_block.h	/^  scoped_array<ParameterBlock*> parameter_blocks_;$/;"	m	class:ceres::internal::ResidualBlock
parameter_map	ceres-solver/internal/ceres/problem_impl.h	/^  const ParameterMap& parameter_map() const { return parameter_block_map_; }$/;"	f	class:ceres::internal::ProblemImpl
parameter_tolerance	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double parameter_tolerance;$/;"	m	struct:ceres::GradientProblemSolver::Options
parameter_tolerance	ceres-solver/include/ceres/solver.h	/^    double parameter_tolerance;$/;"	m	struct:ceres::Solver::Options
parameter_tolerance	ceres-solver/internal/ceres/minimizer.h	/^    double parameter_tolerance;$/;"	m	struct:ceres::internal::Minimizer::Options
parameterization_	ceres-solver/include/ceres/gradient_problem.h	/^  internal::scoped_ptr<LocalParameterization> parameterization_;$/;"	m	class:ceres::GradientProblem
parameterized_test_registry	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::ParameterizedTestCaseRegistry& parameterized_test_registry() {$/;"	f	class:testing::internal::UnitTestImpl
parameterized_test_registry_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::ParameterizedTestCaseRegistry parameterized_test_registry_;$/;"	m	class:testing::internal::UnitTestImpl	file:
parameterized_tests_registered_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool parameterized_tests_registered_;$/;"	m	class:testing::internal::UnitTestImpl	file:
parameters	ceres-solver/examples/bal_problem.h	/^  const double* parameters()   const { return parameters_;               }$/;"	f	class:ceres::examples::BALProblem
parameters_	ceres-solver/examples/bal_problem.h	/^  double* parameters_;$/;"	m	class:ceres::examples::BALProblem
parameters_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  double* parameters_;$/;"	m	class:BALProblem	file:
parameters_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  double* parameters_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
parameters_	ceres-solver/internal/ceres/callbacks.h	/^  double* parameters_;$/;"	m	class:ceres::internal::StateUpdatingCallback
parameters_	ceres-solver/internal/ceres/covariance_test.cc	/^  double parameters_[6];$/;"	m	class:ceres::internal::CovarianceTest	file:
parameters_	ceres-solver/internal/ceres/covariance_test.cc	/^  scoped_array<double> parameters_;$/;"	m	class:ceres::internal::LargeScaleCovarianceTest	file:
parameters_	ceres-solver/internal/ceres/problem_test.cc	/^  double parameters_[6];$/;"	m	class:ceres::internal::ProblemEvaluateTest	file:
parameters_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double* parameters_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
parent_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  UnitTest* const parent_;$/;"	m	class:testing::internal::UnitTestImpl	file:
parser	ceres-solver/examples/slam/pose_graph_2d/plot_results.py	/^parser = OptionParser()$/;"	v
parser	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^parser = OptionParser()$/;"	v
partial_regex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:std::tr1::RE
passed	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
pathName	src/doc/html/navtree.js	/^function pathName()$/;"	f
pathname_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string pathname_;$/;"	m	class:testing::internal::FilePath
patrol_list	logical_core/src/logical_core.cpp	/^    std::vector<move_base_msgs::MoveBaseGoal> patrol_list;$/;"	m	class:Brain	file:
patrol_list_	src/logical_core/src/logical_core.h	/^  std::vector<move_base_msgs::MoveBaseGoal> patrol_list_;$/;"	m	class:LogicalCore
pattern	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:std::tr1::RE
pattern_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* pattern_;$/;"	m	class:std::tr1::RE
pattern_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  std::vector<int> pattern_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
payload	ceres-solver/internal/ceres/gmock/gmock.h	/^  T payload;$/;"	m	struct:testing::internal::ByMoveWrapper
per_thread_test_part_result_reporter_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^      per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
performed_	ceres-solver/internal/ceres/gmock/gmock.h	/^    bool performed_;$/;"	m	class:testing::internal::ReturnAction::Impl
pkg_name	build/console/cmake/console-genmsg-context.py	/^pkg_name = "console"$/;"	v
pkg_name	build/logical_core/cmake/logical_core-genmsg-context.py	/^pkg_name = "logical_core"$/;"	v
pkg_name	build/odometry/cmake/odometry-genmsg-context.py	/^pkg_name = "odometry"$/;"	v
pkg_name	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^pkg_name = "serial_comm"$/;"	v
pkg_name	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^pkg_name = "ctrl_serial_comm"$/;"	v
pkg_name	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^pkg_name = "vision_unit"$/;"	v
pmv_	ceres-solver/internal/ceres/partitioned_matrix_view_test.cc	/^  scoped_ptr<PartitionedMatrixViewBase> pmv_;$/;"	m	class:ceres::internal::PartitionedMatrixViewTest	file:
point_block_size	ceres-solver/examples/bal_problem.h	/^  int point_block_size()       const { return 3;                         }$/;"	f	class:ceres::examples::BALProblem
point_in_line	src/vision_unit/src/detect_factory/image_utility.cpp	/^bool point_in_line(const T &point1, const T &point2, const T &point)$/;"	f	namespace:autocar::vision_mul
point_index	ceres-solver/examples/bal_problem.h	/^  const int* point_index()     const { return point_index_;              }$/;"	f	class:ceres::examples::BALProblem
point_index	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  const int* point_index()     const { return point_index_;  }$/;"	f	class:ceres::internal::BundleAdjustmentProblem
point_index_	ceres-solver/examples/bal_problem.h	/^  int* point_index_;$/;"	m	class:ceres::examples::BALProblem
point_index_	ceres-solver/examples/simple_bundle_adjuster.cc	/^  int* point_index_;$/;"	m	class:BALProblem	file:
point_index_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  int* point_index_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
point_to_line	src/vision_unit/src/detect_factory/image_utility.cpp	/^double point_to_line(double coefficient, double intercept, const T &point)$/;"	f	namespace:autocar::vision_mul
pointer	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef T* pointer;$/;"	t	class:ceres::internal::FixedArray
pointer	ceres-solver/internal/ceres/gtest/gtest.h	/^    T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
pointer	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer_	ceres-solver/include/ceres/rotation.h	/^  T* pointer_;$/;"	m	struct:ceres::MatrixAdapter
pointer_	ceres-solver/internal/ceres/gmock/gmock.h	/^  T* pointer_;$/;"	m	class:testing::internal::ReferenceWrapper
polynomial_minimization_time_in_seconds	ceres-solver/internal/ceres/line_search.h	/^    double polynomial_minimization_time_in_seconds;$/;"	m	struct:ceres::internal::LineSearch::Summary
port_constants	ceres-solver/include/ceres/internal/port.h	/^namespace port_constants {$/;"	n	namespace:ceres
port_num_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    const string port_num_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter	file:
pose_index	ceres-solver/examples/robot_pose_mle.cc	/^  const int pose_index;$/;"	m	struct:RangeConstraint	file:
poses_optimized	ceres-solver/examples/slam/pose_graph_2d/plot_results.py	/^  poses_optimized = numpy.genfromtxt(options.optimized_poses, usecols = (1, 2))$/;"	v
poses_optimized	ceres-solver/examples/slam/pose_graph_2d/plot_results.py	/^poses_optimized = None$/;"	v
poses_optimized	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^  poses_optimized = numpy.genfromtxt(options.optimized_poses,$/;"	v
poses_optimized	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^poses_optimized = None$/;"	v
poses_original	ceres-solver/examples/slam/pose_graph_2d/plot_results.py	/^  poses_original = numpy.genfromtxt(options.initial_poses, usecols = (1, 2))$/;"	v
poses_original	ceres-solver/examples/slam/pose_graph_2d/plot_results.py	/^poses_original = None$/;"	v
poses_original	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^  poses_original = numpy.genfromtxt(options.initial_poses,$/;"	v
poses_original	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^poses_original = None$/;"	v
position	ceres-solver/internal/ceres/block_structure.h	/^  int position;  \/\/ Position along the row\/column.$/;"	m	struct:ceres::internal::Block
position	ceres-solver/internal/ceres/block_structure.h	/^  int position;$/;"	m	struct:ceres::internal::Cell
position_	ceres-solver/internal/ceres/line_search.h	/^  Vector position_;$/;"	m	class:ceres::internal::LineSearchFunction
posix	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^namespace posix {$/;"	n	namespace:testing::internal	file:
posix	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace posix {$/;"	n	namespace:std::tr1
possible_armors	src/vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<armor_info> armor_detecter::possible_armors(const std::vector<cv::RotatedRect> &lights, float thres_max_angle, float thres_dis_lower, float thres_dis_upper, float thres_len, float thres_height, float thres_gray, bool detect_blue)$/;"	f	class:autocar::vision_mul::armor_detecter
post_flag_parse_init_performed_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool post_flag_parse_init_performed_;$/;"	m	class:testing::internal::UnitTestImpl	file:
postprocessor_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double postprocessor_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
pow	ceres-solver/include/ceres/jet.h	/^Jet<T, N> pow(const Jet<T, N>& f, const Jet<T, N>& g) {$/;"	f	namespace:ceres
pow	ceres-solver/include/ceres/jet.h	/^Jet<T, N> pow(const Jet<T, N>& f, double g) {$/;"	f	namespace:ceres
pow	ceres-solver/include/ceres/jet.h	/^Jet<T, N> pow(double f, const Jet<T, N>& g) {$/;"	f	namespace:ceres
pow	ceres-solver/include/ceres/jet.h	/^inline double pow  (double x, double y) { return std::pow(x, y);   }$/;"	f	namespace:ceres
preconditioner	ceres-solver/internal/ceres/linear_solver.h	/^    LinearOperator* preconditioner;$/;"	m	struct:ceres::internal::LinearSolver::PerSolveOptions
preconditioner_	ceres-solver/internal/ceres/cgnr_solver.h	/^  scoped_ptr<Preconditioner> preconditioner_;$/;"	m	class:ceres::internal::CgnrSolver
preconditioner_	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	/^  scoped_ptr<Preconditioner> preconditioner_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolver
preconditioner_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  scoped_ptr<BlockRandomAccessDiagonalMatrix> preconditioner_;$/;"	m	class:ceres::internal::SparseSchurComplementSolver
preconditioner_type	ceres-solver/include/ceres/solver.h	/^    PreconditionerType preconditioner_type;$/;"	m	struct:ceres::Solver::Options
preconditioner_type	ceres-solver/internal/ceres/linear_solver.h	/^    PreconditionerType preconditioner_type;$/;"	m	struct:ceres::internal::LinearSolver::Options
preconditioner_type	ceres-solver/internal/ceres/test_util.h	/^  PreconditionerType preconditioner_type;$/;"	m	struct:ceres::internal::SolverConfig
preconditioner_type_given	ceres-solver/include/ceres/solver.h	/^    PreconditionerType preconditioner_type_given;$/;"	m	struct:ceres::Solver::Summary
preconditioner_type_used	ceres-solver/include/ceres/solver.h	/^    PreconditionerType preconditioner_type_used;$/;"	m	struct:ceres::Solver::Summary
predicate_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Predicate predicate_;$/;"	m	class:testing::internal::TrulyMatcher
predictor	ceres-solver/examples/nist.cc	/^  Matrix predictor()        const { return predictor_;         }$/;"	f	class:ceres::examples::NISTProblem
predictor_	ceres-solver/examples/nist.cc	/^  Matrix predictor_;$/;"	m	class:ceres::examples::NISTProblem	file:
predictor_size	ceres-solver/examples/nist.cc	/^  int predictor_size()      const { return predictor_.cols();  }$/;"	f	class:ceres::examples::NISTProblem
prefix_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const StringType prefix_;$/;"	m	class:testing::internal::StartsWithMatcher
premature_exit_filepath_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const char* const premature_exit_filepath_;$/;"	m	class:testing::internal::ScopedPrematureExitFile	file:
prepend	build/catkin_generated/installspace/_setup_util.py	/^def prepend(environ, key, prefix):$/;"	f
prepend	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def prepend(environ, key, prefix):$/;"	f
prepend	devel/_setup_util.py	/^def prepend(environ, key, prefix):$/;"	f
prepend_env_variables	build/catkin_generated/installspace/_setup_util.py	/^def prepend_env_variables(environ, env_var_subfolders, workspaces):$/;"	f
prepend_env_variables	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def prepend_env_variables(environ, env_var_subfolders, workspaces):$/;"	f
prepend_env_variables	devel/_setup_util.py	/^def prepend_env_variables(environ, env_var_subfolders, workspaces):$/;"	f
preprocessor_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double preprocessor_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
print_time_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool print_time_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
priority_val_t	src/rplidar_ros/sdk/src/hal/thread.h	/^    enum priority_val_t$/;"	g	class:rp::hal::Thread
pro-attribs	src/doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classDUtils_1_1DException.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classautocar_1_1param__mul_1_1param__manager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classcamodocal_1_1Camera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	src/doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-methods	src/doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	src/doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	src/doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	src/doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	src/doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	src/doc/html/classdemoDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-types	src/doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"><\/a>$/;"	a
pro-types	src/doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"><\/a>$/;"	a
problem	ceres-solver/internal/ceres/evaluator_test.cc	/^  ProblemImpl problem;$/;"	m	struct:ceres::internal::EvaluatorTest	file:
problem	ceres-solver/internal/ceres/preprocessor.h	/^  ProblemImpl* problem;$/;"	m	struct:ceres::internal::PreprocessedProblem
problem	ceres-solver/internal/ceres/problem_test.cc	/^  scoped_ptr<ProblemImpl> problem;$/;"	m	struct:ceres::internal::DynamicProblem	file:
problem_	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  Problem problem_;$/;"	m	class:ceres::internal::BundleAdjustmentProblem	file:
problem_	ceres-solver/internal/ceres/covariance_impl.h	/^  ProblemImpl* problem_;$/;"	m	class:ceres::internal::CovarianceImpl
problem_	ceres-solver/internal/ceres/covariance_test.cc	/^  Problem problem_;$/;"	m	class:ceres::internal::CovarianceTest	file:
problem_	ceres-solver/internal/ceres/covariance_test.cc	/^  Problem problem_;$/;"	m	class:ceres::internal::LargeScaleCovarianceTest	file:
problem_	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  const GradientProblem& problem_;$/;"	m	class:ceres::internal::GradientProblemEvaluator
problem_	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^  ProblemImpl problem_;$/;"	m	class:ceres::internal::SchurOrderingTest	file:
problem_	ceres-solver/internal/ceres/problem_test.cc	/^  ProblemImpl problem_;$/;"	m	class:ceres::internal::ProblemEvaluateTest	file:
problem_	ceres-solver/internal/ceres/reorder_program_test.cc	/^  ProblemImpl problem_;$/;"	m	class:ceres::internal::ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest	file:
problem_	ceres-solver/internal/ceres/system_test.cc	/^  Problem problem_;$/;"	m	class:ceres::internal::PowellsFunction	file:
problem_	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  ProblemImpl problem_;$/;"	m	class:ceres::internal::LinearSolverAndEvaluatorCreationTest	file:
problem_impl_	ceres-solver/include/ceres/problem.h	/^  internal::scoped_ptr<internal::ProblemImpl> problem_impl_;$/;"	m	class:ceres::Problem
producer_	ceres-solver/internal/ceres/gmock/gmock.h	/^  static ValueProducer* producer_;$/;"	m	class:testing::DefaultValue
producer_	ceres-solver/internal/ceres/gmock/gmock.h	/^typename DefaultValue<T>::ValueProducer* DefaultValue<T>::producer_ = NULL;$/;"	m	class:testing::DefaultValue
program	ceres-solver/internal/ceres/problem_impl.h	/^  const Program& program() const { return *program_; }$/;"	f	class:ceres::internal::ProblemImpl
program_	ceres-solver/internal/ceres/block_jacobian_writer.h	/^  Program* program_;$/;"	m	class:ceres::internal::BlockJacobianWriter
program_	ceres-solver/internal/ceres/callbacks.h	/^  Program* program_;$/;"	m	class:ceres::internal::StateUpdatingCallback
program_	ceres-solver/internal/ceres/compressed_row_jacobian_writer.h	/^  Program* program_;$/;"	m	class:ceres::internal::CompressedRowJacobianWriter
program_	ceres-solver/internal/ceres/dense_jacobian_writer.h	/^  Program* program_;$/;"	m	class:ceres::internal::DenseJacobianWriter
program_	ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.h	/^  Program* program_;$/;"	m	class:ceres::internal::DynamicCompressedRowJacobianWriter
program_	ceres-solver/internal/ceres/problem_impl.h	/^  internal::scoped_ptr<internal::Program> program_;$/;"	m	class:ceres::internal::ProblemImpl
program_	ceres-solver/internal/ceres/program_evaluator.h	/^  Program* program_;$/;"	m	class:ceres::internal::ProgramEvaluator
project	ceres-solver/docs/source/conf.py	/^project = u'Ceres Solver'$/;"	v
projected_gradient_step_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector projected_gradient_step_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
property_	ceres-solver/internal/ceres/gmock/gmock.h	/^  PropertyType (Class::*property_)() const;$/;"	m	class:testing::internal::PropertyMatcher
proto2	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace proto2 { class Message; }$/;"	n
proto_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const internal::linked_ptr<Proto> proto_;$/;"	m	class:testing::internal::SetArgumentPointeeAction
ptr_	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C* ptr_;$/;"	m	class:ceres::internal::scoped_ptr
ptr_	ceres-solver/internal/ceres/gmock/gmock.h	/^  T1* const ptr_;$/;"	m	class:testing::internal::AssignAction
ptr_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* ptr_;$/;"	m	struct:std::tr1::tuple_element
pub	src/vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  ros::Publisher pub;$/;"	m	class:Lidar2Camera
pub-attribs	src/doc/html/classCameraPoseVisualization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classFeatureManager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classFeaturePerFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classFeaturePerId.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classFeatureTracker.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classIMUFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classImageFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classIntegrationBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classKeyFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classLoopClosure.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classMarginalizationFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classMarginalizationInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classProjectionFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classautocar_1_1odom__mul_1_1vel2odom.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classautocar_1_1serial__mul_1_1comm__read.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classautocar_1_1serial__mul_1_1serial__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classautocar_1_1vision__mul_1_1armor__info.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classautocar_1_1vision__mul_1_1vision__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classcamodocal_1_1ChessboardCorner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classcamodocal_1_1ChessboardQuad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classdemoDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/classtf__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structDLoopDetector_1_1DetectionResult.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structFourDOFError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structFourDOFWeightError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structRelativeRTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structRelativeTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structReprojectionError3D.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structResidualBlockInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structRetriveData.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structSFMFeature.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structThreadsStruct.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structautocar_1_1serial__mul_1_1____attribute____.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structautocar_1_1vision__mul_1_1vision__param__pkg.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	src/doc/html/structcv__bridge_1_1CvtColorForDisplayOptions.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-methods	src/doc/html/classAngleLocalParameterization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classBriefExtractor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classCameraPoseVisualization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDBoW2_1_1BowVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDBoW2_1_1FeatureVector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDBoW2_1_1GeneralScoring.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDBoW2_1_1QueryResults.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDBoW2_1_1TemplatedDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDBoW2_1_1TemplatedVocabulary.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDLoopDetector_1_1TemplatedLoopDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDUtils_1_1DException.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDUtils_1_1Random_1_1UnrepeatedRandomizer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classFeatureExtractor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classFeatureManager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classFeaturePerFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classFeaturePerId.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classFeatureTracker.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classGlobalSFM.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classIMUFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classImageFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classInitialEXRotation.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classIntegrationBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classKeyFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classKeyFrameDatabase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classLoopClosure.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classMarginalizationFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classMarginalizationInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classMotionEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classProjectionFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classSpline.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classTicToc.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classUtility.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1odom__mul_1_1vel2odom.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1param__mul_1_1param__manager.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1serial__mul_1_1comm__read.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1serial__mul_1_1comm__write.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1serial__mul_1_1serial__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1tf__mul_1_1tf__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1tf__mul_1_1tf__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1thread__operation.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1armor__detect__node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1armor__detecter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1armor__info.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1detect__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1labeler.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1rune__detect.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1thread__operation.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1video__recoder.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classautocar_1_1vision__mul_1_1vision__param.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1CameraCalibration.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1CameraFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1Camera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1CataCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1Chessboard.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1ChessboardCorner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1CostFunctionFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1EigenQuaternionParameterization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1EquidistantCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1OCAMCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1PinholeCamera_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcamodocal_1_1Transform.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classcv__bridge_1_1Exception.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classdemoDetector.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classdetect__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/classtf__factory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structDLoopDetector_1_1DetectionResult.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structFourDOFError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structFourDOFWeightError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structRelativeRTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structRelativeTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structReprojectionError3D.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structResidualBlockInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	src/doc/html/structTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-static-attribs	src/doc/html/classDBoW2_1_1GeneralScoring.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	src/doc/html/classFeatureTracker.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	src/doc/html/classProjectionFactor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-methods	src/doc/html/classAngleLocalParameterization.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classDBoW2_1_1FBrief.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classDBoW2_1_1Result.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classDUtils_1_1Random.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classUtility.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classcamodocal_1_1CameraFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classcamodocal_1_1CataCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classcamodocal_1_1CostFunctionFactory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classcamodocal_1_1EquidistantCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classcamodocal_1_1OCAMCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/classcamodocal_1_1PinholeCamera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/structFourDOFError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/structFourDOFWeightError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/structRelativeRTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/structRelativeTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/structReprojectionError3D.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	src/doc/html/structTError.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-types	src/doc/html/classDBoW2_1_1FBrief.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	src/doc/html/classDUtils_1_1Timestamp.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	src/doc/html/classDVision_1_1BRIEF.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	src/doc/html/classEstimator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	src/doc/html/classSpline.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	src/doc/html/classcamodocal_1_1Camera.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	src/doc/html/classcv__bridge_1_1CvImage.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pubData	src/serial_comm/include/comm_read.h	/^  serial_comm::car_speed pubData;$/;"	m	class:autocar::serial_mul::comm_read
pubData	src/serial_comm/include/comm_write.h	/^  std_msgs::String pubData;$/;"	m	class:autocar::serial_mul::comm_write
pubData	src/serial_communication/src/commRecv.cxx	/^ctrl_serial_comm::car_speed pubData;$/;"	v
pubData	src/serial_communication/src/commSend.cxx	/^std_msgs::String pubData;$/;"	v
pub_armor_pos	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    ros::Publisher pub_armor_pos;$/;"	m	class:autocar::vision_mul::armor_detect_node
pub_goal	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    ros::Publisher pub_goal;$/;"	m	class:autocar::vision_mul::armor_detect_node
publish_scan	src/rplidar_ros/src/node.cpp	/^void publish_scan(ros::Publisher *pub,$/;"	f
pwm_value	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16 pwm_value;$/;"	m	struct:_rplidar_payload_motor_pwm_t
pygments_style	ceres-solver/docs/source/conf.py	/^pygments_style = 'sphinx'$/;"	v
python3	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python3	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^python3 = True if sys.hexversion > 0x03000000 else False$/;"	v
python_path	build/catkin_generated/generate_cached_setup.py	/^        python_path = os.path.join(workspace, 'lib\/python2.7\/dist-packages')$/;"	v
q	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  Eigen::Quaterniond q;$/;"	m	struct:ceres::examples::Pose3d
q_tolerance	ceres-solver/internal/ceres/linear_solver.h	/^    double q_tolerance;$/;"	m	struct:ceres::internal::LinearSolver::PerSolveOptions
qnxnto	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	ceres-solver/ceres-bin/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
quaternion	src/tf_tree/include/tf_tree/tf_factory.h	/^  tf::Quaternion *quaternion;$/;"	m	class:autocar::tf_mul::tf_factory
r_tolerance	ceres-solver/internal/ceres/linear_solver.h	/^    double r_tolerance;$/;"	m	struct:ceres::internal::LinearSolver::PerSolveOptions
radius_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  double radius_;$/;"	m	class:ceres::internal::DoglegStrategy
radius_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  double radius_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
random	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::Random* random() { return &random_; }$/;"	f	class:testing::internal::UnitTestImpl
random_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::Random random_;$/;"	m	class:testing::internal::UnitTestImpl	file:
random_seed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int random_seed() const { return random_seed_; }$/;"	f	class:testing::internal::UnitTestImpl
random_seed	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::random_seed() const { return impl_->random_seed(); }$/;"	f	class:testing::UnitTest
random_seed_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int random_seed_;$/;"	m	class:testing::internal::UnitTestImpl	file:
random_seed_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::Int32 random_seed_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
random_seed_	ceres-solver/internal/ceres/numeric_diff_test_utils.h	/^  unsigned int random_seed_;$/;"	m	class:ceres::internal::RandomizedFunctor
range_reading	ceres-solver/examples/robot_pose_mle.cc	/^  const double range_reading;$/;"	m	struct:RangeConstraint	file:
range_stddev	ceres-solver/examples/robot_pose_mle.cc	/^  const double range_stddev;$/;"	m	struct:RangeConstraint	file:
raw_serial	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
raw_serial	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
raw_serial	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
readCookie	src/doc/html/resize.js	/^function readCookie(cookie) $/;"	f
read_data	src/serial_comm/src/comm_read.cpp	/^void comm_read::read_data()$/;"	f	class:autocar::serial_mul::comm_read
read_fd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int read_fd() const { return read_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
read_fd_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int read_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
read_init	src/serial_comm/src/comm_read.cpp	/^void comm_read::read_init()$/;"	f	class:autocar::serial_mul::comm_read
read_params	src/serial_comm/src/serial_param.cpp	/^void serial_param::read_params()$/;"	f	class:autocar::serial_mul::serial_param
read_params	src/tf_tree/src/tf_param.cpp	/^void tf_param::read_params()$/;"	f	class:autocar::tf_mul::tf_param
read_params	src/vision_unit/src/detect_factory/vision_param.cpp	/^void vision_param::read_params()$/;"	f	class:autocar::vision_mul::vision_param
read_setup	src/serial_comm/src/comm_read.cpp	/^bool comm_read::read_setup()$/;"	f	class:autocar::serial_mul::comm_read
receive_armor_info	src/vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^void VisionLidarFusion::receive_armor_info(const vision_unit::armor_msgConstPtr armor_info)$/;"	f	class:VisionLidarFusion
recvdata	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
recvdata	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, _word_size_t size)$/;"	f	class:rp::arch::net::raw_serial
recvdata	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
reduced_linear_system_solution_	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	/^  Vector reduced_linear_system_solution_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolver
reduced_parameters	ceres-solver/internal/ceres/preprocessor.h	/^  Vector reduced_parameters;$/;"	m	struct:ceres::internal::PreprocessedProblem
reduced_program	ceres-solver/internal/ceres/preprocessor.h	/^  scoped_ptr<Program> reduced_program;$/;"	m	struct:ceres::internal::PreprocessedProblem
ref_	ceres-solver/internal/ceres/gmock/gmock.h	/^    T& ref_;$/;"	m	class:testing::internal::ReturnRefAction::Impl
ref_	ceres-solver/internal/ceres/gmock/gmock.h	/^  T& ref_;$/;"	m	class:testing::internal::ReturnRefAction
reference	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef T& reference;$/;"	t	class:ceres::internal::FixedArray
reference	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef T& reference;$/;"	t	class:testing::internal::ReferenceOrValueWrapper
reference	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
reference_cost_	ceres-solver/internal/ceres/trust_region_step_evaluator.h	/^  double reference_cost_;$/;"	m	class:ceres::internal::TrustRegionStepEvaluator
regex	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const RE* regex() const { return regex_; }$/;"	f	class:testing::internal::DeathTestImpl
regex_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const internal::linked_ptr<const RE> regex_;$/;"	m	class:testing::internal::MatchesRegexMatcher
regex_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const RE* const regex_;$/;"	m	class:testing::internal::DeathTestImpl	file:
registered_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestCasePState
registered_tests_	ceres-solver/internal/ceres/gtest/gtest.h	/^  RegisteredTestsMap registered_tests_;$/;"	m	class:testing::internal::TypedTestCasePState
relative_decrease	ceres-solver/include/ceres/iteration_callback.h	/^  double relative_decrease;$/;"	m	struct:ceres::IterationSummary
relative_precision_	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  double relative_precision_;$/;"	m	class:ceres::internal::__anon8::GradientCheckingCostFunction	file:
relative_step_size	ceres-solver/include/ceres/numeric_diff_options.h	/^  double relative_step_size;$/;"	m	struct:ceres::NumericDiffOptions
release	ceres-solver/docs/source/conf.py	/^release = '1.12.0'$/;"	v
release	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C* release() {$/;"	f	class:ceres::internal::scoped_array
release	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  C* release() {$/;"	f	class:ceres::internal::scoped_ptr
release	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* release() {$/;"	f	struct:std::tr1::tuple_element
release	src/rplidar_ros/sdk/src/hal/event.h	/^    void release()$/;"	f	class:rp::hal::Event
release	src/rplidar_ros/sdk/src/hal/locker.h	/^    void    release()$/;"	f	class:rp::hal::Locker
removeToInsertLater	src/doc/html/navtree.js	/^function removeToInsertLater(element) {$/;"	f
remove_reference	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct remove_reference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
remove_reference	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct remove_reference<T&> { typedef T type; }; \/\/ NOLINT$/;"	s	namespace:testing::internal
removed_parameter_blocks	ceres-solver/internal/ceres/preprocessor.h	/^  std::vector<double*> removed_parameter_blocks;$/;"	m	struct:ceres::internal::PreprocessedProblem
removes_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  size_t adds_, removes_, common_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
repeat_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::Int32 repeat_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
repeated_action	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Action<F>& repeated_action() const { return repeated_action_; }$/;"	f	class:testing::internal::TypedExpectation
repeated_action_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Action<F> repeated_action_;$/;"	m	class:testing::internal::TypedExpectation
repeated_action_specified_	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool repeated_action_specified_;  \/\/ True if a WillRepeatedly() was specified.$/;"	m	class:testing::internal::ExpectationBase
repeater	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestEventListener* TestEventListeners::repeater() { return repeater_; }$/;"	f	class:testing::TestEventListeners
repeater_	ceres-solver/internal/ceres/gtest/gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
replacements	ceres-solver/scripts/make_docs.py	/^replacements = [$/;"	v
reportable_disabled_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestCase::reportable_disabled_test_count() const {$/;"	f	class:testing::TestCase
reportable_disabled_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::reportable_disabled_test_count() const {$/;"	f	class:testing::UnitTest
reportable_disabled_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::reportable_disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
reportable_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestCase::reportable_test_count() const {$/;"	f	class:testing::TestCase
reportable_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::reportable_test_count() const {$/;"	f	class:testing::UnitTest
reportable_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::reportable_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
request	devel/include/logical_core/SetGoal.h	/^Request request;$/;"	m	struct:logical_core::SetGoal
request	devel/include/vision_unit/SetGoal.h	/^Request request;$/;"	m	struct:vision_unit::SetGoal
required_rx_cnt	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    size_t required_rx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_rx_cnt	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    size_t required_rx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_tx_cnt	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    size_t required_tx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_tx_cnt	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    size_t required_tx_cnt;$/;"	m	class:rp::arch::net::raw_serial
reserved	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u32  reserved;$/;"	m	struct:_rplidar_payload_express_scan_t
reserved	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u32 reserved;$/;"	m	struct:_rplidar_payload_acc_board_flag_t
reset	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  void reset(C* p = NULL) {$/;"	f	class:ceres::internal::scoped_array
reset	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  void reset(C* p = NULL) {$/;"	f	class:ceres::internal::scoped_ptr
reset	ceres-solver/internal/ceres/gtest/gtest.h	/^  void reset(T* p = NULL) {$/;"	f	struct:std::tr1::tuple_element
reset	ceres-solver/internal/ceres/gtest/gtest.h	/^  void reset(T* ptr = NULL) {$/;"	f	class:testing::internal::linked_ptr
reset	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::reset(_u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = -13.0 + x1 + ((5.0 - x2) * x2 - 2.0) * x2;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = 1.5 - x1 * (1.0 - x2);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = 10.0 * (x2 - x1 * x1);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = 10.0 * (x3 - 10.0 * theta);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = 10000.0 * x1 * x2 - 1.0;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = exp(-t1 * x1) - exp(-t1 * x2) - x3 * (exp(-t1) - exp(-10.0 * t1));$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = x1  - 1000000.0;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[0] = x1 + 10.0 * x2;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = -29.0 + x1 + ((x2 + 1.0) * x2 - 14.0) * x2;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = 1.0 - x1;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = 10.0 * (sqrt(x1 * x1 + x2 * x2) - 1.0);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = 2.25 - x1 * (1.0 - x2 * x2);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = exp(-t2 * x1) - exp(-t2 * x2) - x3 * (exp(-t2) - exp(-10.0 * t2));$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = exp(-x1) + exp(-x2) - 1.0001;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = sqrt(5.0) * (x3 - x4);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[1] = x2 - 0.000002;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[2] = (x2 - 2.0 * x3) * (x2 - 2.0 * x3);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[2] = 2.625 - x1 * (1.0 - x2 * x2 * x2);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[2] = exp(-t3 * x1) - exp(-t3 * x2) - x3 * (exp(-t3) - exp(-10.0 * t3));$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[2] = sqrt(90.0) * (x4 - x3 * x3);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[2] = x1 * x2 - 2.0;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[2] = x3;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[3] = 1.0 - x3;$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[3] = sqrt(10.0) * (x1 - x4) * (x1 - x4);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[4] = sqrt(10.0) * (x2 + x4 - 2.0);$/;"	m	namespace:ceres::examples	file:
residual	ceres-solver/examples/more_garbow_hillstrom.cc	/^  residual[5] = 1.0 \/ sqrt(10.0) * (x2 - x4);$/;"	m	namespace:ceres::examples	file:
residual_	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^  Vector residual_;$/;"	m	class:ceres::internal::__anon36::Fixture	file:
residual_J_params_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  std::vector<Matrix> residual_J_params_;$/;"	m	class:ceres::internal::LinearCostFunction	file:
residual_block_evaluate_scratch	ceres-solver/internal/ceres/program_evaluator.h	/^    scoped_array<double> residual_block_evaluate_scratch;$/;"	m	struct:ceres::internal::ProgramEvaluator::EvaluateScratch
residual_block_residuals	ceres-solver/internal/ceres/program_evaluator.h	/^    scoped_array<double> residual_block_residuals;$/;"	m	struct:ceres::internal::ProgramEvaluator::EvaluateScratch
residual_block_set	ceres-solver/internal/ceres/problem_impl.h	/^  const ResidualBlockSet& residual_block_set() const {$/;"	f	class:ceres::internal::ProblemImpl
residual_block_set_	ceres-solver/internal/ceres/problem_impl.h	/^  ResidualBlockSet residual_block_set_;$/;"	m	class:ceres::internal::ProblemImpl
residual_blocks	ceres-solver/include/ceres/problem.h	/^    std::vector<ResidualBlockId> residual_blocks;$/;"	m	struct:ceres::Problem::EvaluateOptions
residual_blocks	ceres-solver/internal/ceres/program.cc	/^const vector<ResidualBlock*>& Program::residual_blocks() const {$/;"	f	class:ceres::internal::Program
residual_blocks_	ceres-solver/internal/ceres/coordinate_descent_minimizer.h	/^  std::vector<std::vector<ResidualBlock*> > residual_blocks_;$/;"	m	class:ceres::internal::CoordinateDescentMinimizer
residual_blocks_	ceres-solver/internal/ceres/parameter_block.h	/^  scoped_ptr<ResidualBlockSet> residual_blocks_;$/;"	m	class:ceres::internal::ParameterBlock
residual_blocks_	ceres-solver/internal/ceres/problem_test.cc	/^  vector<ResidualBlockId> residual_blocks_;$/;"	m	class:ceres::internal::ProblemEvaluateTest	file:
residual_blocks_	ceres-solver/internal/ceres/program.h	/^  std::vector<ResidualBlock*> residual_blocks_;$/;"	m	class:ceres::internal::Program
residual_evaluation_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double residual_evaluation_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
residual_layout_	ceres-solver/internal/ceres/program_evaluator.h	/^  std::vector<int> residual_layout_;$/;"	m	class:ceres::internal::ProgramEvaluator
residual_norm	ceres-solver/internal/ceres/linear_solver.h	/^    double residual_norm;$/;"	m	struct:ceres::internal::LinearSolver::Summary
residual_norm	ceres-solver/internal/ceres/trust_region_strategy.h	/^    double residual_norm;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Summary
residual_reset_period	ceres-solver/internal/ceres/linear_solver.h	/^    int residual_reset_period;$/;"	m	struct:ceres::internal::LinearSolver::Options
residual_scaling_	ceres-solver/internal/ceres/corrector.h	/^  double residual_scaling_;$/;"	m	class:ceres::internal::Corrector
residuals	ceres-solver/include/ceres/gradient_checker.h	/^    Vector residuals;$/;"	m	struct:ceres::GradientChecker::ProbeResults
residuals	ceres-solver/internal/ceres/evaluator_test_utils.h	/^  const double residuals[50];$/;"	m	struct:ceres::internal::ExpectedEvaluation
residuals_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector residuals_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
residuals_offset_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  Vector residuals_offset_;$/;"	m	class:ceres::internal::LinearCostFunction	file:
resizeHeight	src/doc/html/resize.js	/^function resizeHeight() $/;"	f
resizeWidth	src/doc/html/resize.js	/^function resizeWidth() $/;"	f
response	ceres-solver/examples/nist.cc	/^  Matrix response()         const { return response_;          }$/;"	f	class:ceres::examples::NISTProblem
response	devel/include/logical_core/SetGoal.h	/^Response response;$/;"	m	struct:logical_core::SetGoal
response	devel/include/vision_unit/SetGoal.h	/^Response response;$/;"	m	struct:vision_unit::SetGoal
response_	ceres-solver/examples/nist.cc	/^  Matrix response_;$/;"	m	class:ceres::examples::NISTProblem	file:
response_size	ceres-solver/examples/nist.cc	/^  int response_size()       const { return response_.cols();   }$/;"	f	class:ceres::examples::NISTProblem
restoreWidth	src/doc/html/resize.js	/^function restoreWidth(navWidth)$/;"	f
result	ceres-solver/include/ceres/internal/manual_constructor.h	/^template<int size> struct AlignType<0, size> { typedef char result[size]; };$/;"	t	struct:ceres::internal::AlignType
result	ceres-solver/internal/ceres/gtest/gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
result_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Wrapper result_;$/;"	m	class:testing::internal::ActionResultHolder
result_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const T result_;$/;"	m	class:testing::internal::SetErrnoAndReturnAction
result_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TestPartResultArray* const result_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
result_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
results_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const TestPartResultArray* const results_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
retired_	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool retired_;    \/\/ True iff this expectation has retired.$/;"	m	class:testing::internal::ExpectationBase
retires_on_saturation_	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool retires_on_saturation_;$/;"	m	class:testing::internal::ExpectationBase
return_value	ceres-solver/include/ceres/gradient_checker.h	/^    bool return_value;$/;"	m	struct:ceres::GradientChecker::ProbeResults
return_value_	ceres-solver/internal/ceres/gradient_checker_test.cc	/^  bool return_value_;$/;"	m	class:ceres::internal::GoodTestTerm	file:
reuse_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  bool reuse_;$/;"	m	class:ceres::internal::DoglegStrategy
reuse_diagonal_	ceres-solver/internal/ceres/levenberg_marquardt_strategy.h	/^  bool reuse_diagonal_;$/;"	m	class:ceres::internal::LevenbergMarquardtStrategy
rho_	ceres-solver/include/ceres/loss_function.h	/^  internal::scoped_ptr<const LossFunction> rho_;$/;"	m	class:ceres::LossFunctionWrapper
rho_	ceres-solver/include/ceres/loss_function.h	/^  internal::scoped_ptr<const LossFunction> rho_;$/;"	m	class:ceres::ScaledLoss
rhs	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  const Vector& rhs()    const { return rhs_;             }$/;"	f	class:ceres::internal::ImplicitSchurComplement
rhs	ceres-solver/internal/ceres/schur_complement_solver.h	/^  const double* rhs() const { return rhs_.get(); }$/;"	f	class:ceres::internal::SchurComplementSolver
rhs_	ceres-solver/internal/ceres/dense_qr_solver.h	/^  Vector rhs_;$/;"	m	class:ceres::internal::DenseQRSolver
rhs_	ceres-solver/internal/ceres/gmock/gmock.h	/^    Rhs rhs_;$/;"	m	class:testing::internal::ComparisonBase::Impl
rhs_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const RhsStlContainer rhs_;$/;"	m	class:testing::internal::PointwiseMatcher::Impl
rhs_	ceres-solver/internal/ceres/gmock/gmock.h	/^  Rhs rhs_;$/;"	m	class:testing::internal::ComparisonBase
rhs_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const RhsStlContainer rhs_;$/;"	m	class:testing::internal::PointwiseMatcher
rhs_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  Vector rhs_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
rhs_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  scoped_array<double> rhs_;$/;"	m	class:ceres::internal::SchurComplementSolver
rhs_expected	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  Vector rhs_expected;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
rhs_locks_	ceres-solver/internal/ceres/schur_eliminator.h	/^  std::vector<Mutex*> rhs_locks_;$/;"	m	class:ceres::internal::SchurEliminator
ridders_epsilon	ceres-solver/include/ceres/numeric_diff_options.h	/^  double ridders_epsilon;$/;"	m	struct:ceres::NumericDiffOptions
ridders_relative_initial_step_size	ceres-solver/include/ceres/numeric_diff_options.h	/^  double ridders_relative_initial_step_size;$/;"	m	struct:ceres::NumericDiffOptions
ridders_step_shrink_factor	ceres-solver/include/ceres/numeric_diff_options.h	/^  double ridders_step_shrink_factor;$/;"	m	struct:ceres::NumericDiffOptions
right_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ::std::vector<size_t> right_;$/;"	m	class:testing::internal::MaxBipartiteMatchState	file:
right_light	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  cv::RotatedRect right_light;$/;"	m	class:autocar::vision_mul::armor_info
right_start_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  size_t left_start_, right_start_;$/;"	m	class:testing::internal::edit_distance::__anon19::Hunk	file:
rollback_env_variables	build/catkin_generated/installspace/_setup_util.py	/^def rollback_env_variables(environ, env_var_subfolders):$/;"	f
rollback_env_variables	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^def rollback_env_variables(environ, env_var_subfolders):$/;"	f
rollback_env_variables	devel/_setup_util.py	/^def rollback_env_variables(environ, env_var_subfolders):$/;"	f
root	src/param_manager/include/param_manager.h	/^  cv::FileNode root;$/;"	m	class:autocar::param_mul::param_manager
ros	devel/include/console/serial_data.h	/^namespace ros$/;"	n
ros	devel/include/ctrl_serial_comm/car_speed.h	/^namespace ros$/;"	n
ros	devel/include/ctrl_serial_comm/serial_data.h	/^namespace ros$/;"	n
ros	devel/include/logical_core/SetGoal.h	/^namespace ros$/;"	n
ros	devel/include/logical_core/SetGoalRequest.h	/^namespace ros$/;"	n
ros	devel/include/logical_core/SetGoalResponse.h	/^namespace ros$/;"	n
ros	devel/include/odometry/car_speed.h	/^namespace ros$/;"	n
ros	devel/include/serial_comm/car_speed.h	/^namespace ros$/;"	n
ros	devel/include/serial_comm/serial_data.h	/^namespace ros$/;"	n
ros	devel/include/vision_unit/SetGoal.h	/^namespace ros$/;"	n
ros	devel/include/vision_unit/SetGoalRequest.h	/^namespace ros$/;"	n
ros	devel/include/vision_unit/SetGoalResponse.h	/^namespace ros$/;"	n
ros	devel/include/vision_unit/armor_msg.h	/^namespace ros$/;"	n
ros	devel/include/vision_unit/transformed_scan.h	/^namespace ros$/;"	n
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <serial_data>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <car_speed>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <serial_data>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <SetGoal-request>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <SetGoal-response>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <car_speed>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <car_speed>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <serial_data>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <armor_msg>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <transformed_scan>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <SetGoal-request>) istream)$/;"	f
roslisp-msg-protocol:deserialize	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:deserialize ((msg <SetGoal-response>) istream)$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<SetGoal-request>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<SetGoal-response>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'SetGoal-request)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'SetGoal-response)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<armor_msg>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'armor_msg)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<transformed_scan>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'transformed_scan)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<SetGoal-request>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<SetGoal-response>)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'SetGoal-request)))$/;"	f
roslisp-msg-protocol:md5sum	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'SetGoal-response)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<SetGoal-request>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<SetGoal-response>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'SetGoal-request)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'SetGoal-response)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<armor_msg>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'armor_msg)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<transformed_scan>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'transformed_scan)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<SetGoal-request>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<SetGoal-response>)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'SetGoal-request)))$/;"	f
roslisp-msg-protocol:message-definition	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'SetGoal-response)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<SetGoal-request>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<SetGoal-response>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'SetGoal)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'SetGoal-request)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'SetGoal-response)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<car_speed>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'car_speed)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<serial_data>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'serial_data)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<armor_msg>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'armor_msg)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<transformed_scan>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'transformed_scan)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<SetGoal-request>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<SetGoal-response>)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'SetGoal)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'SetGoal-request)))$/;"	f
roslisp-msg-protocol:ros-datatype	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'SetGoal-response)))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <serial_data>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <car_speed>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <serial_data>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <SetGoal-request>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <SetGoal-response>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <car_speed>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <car_speed>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <serial_data>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <armor_msg>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <transformed_scan>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <SetGoal-request>))$/;"	f
roslisp-msg-protocol:ros-message-to-list	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <SetGoal-response>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <serial_data>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <car_speed>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <serial_data>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <SetGoal-request>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <SetGoal-response>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <car_speed>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <car_speed>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <serial_data>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <armor_msg>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <transformed_scan>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <SetGoal-request>))$/;"	f
roslisp-msg-protocol:serialization-length	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <SetGoal-response>))$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <serial_data>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <car_speed>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <serial_data>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <SetGoal-request>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <SetGoal-response>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <car_speed>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <car_speed>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <serial_data>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <armor_msg>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <transformed_scan>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <SetGoal-request>) ostream)$/;"	f
roslisp-msg-protocol:serialize	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:serialize ((msg <SetGoal-response>) ostream)$/;"	f
roslisp-msg-protocol:service-request-type	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:service-request-type ((msg (cl:eql 'SetGoal)))$/;"	f
roslisp-msg-protocol:service-request-type	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:service-request-type ((msg (cl:eql 'SetGoal)))$/;"	f
roslisp-msg-protocol:service-response-type	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:service-response-type ((msg (cl:eql 'SetGoal)))$/;"	f
roslisp-msg-protocol:service-response-type	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod roslisp-msg-protocol:service-response-type ((msg (cl:eql 'SetGoal)))$/;"	f
row	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  int row;$/;"	m	struct:ceres::internal::__anon34::ProductTerm	file:
row_begin_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int row_begin_;$/;"	m	struct:ceres::Grid2D
row_block_size	ceres-solver/internal/ceres/linear_solver.h	/^    int row_block_size;$/;"	m	struct:ceres::internal::LinearSolver::Options
row_block_size	ceres-solver/internal/ceres/preconditioner.h	/^    int row_block_size;$/;"	m	struct:ceres::internal::Preconditioner::Options
row_blocks	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const std::vector<int>& row_blocks() const { return row_blocks_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
row_blocks_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int> row_blocks_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
row_end_	ceres-solver/include/ceres/cubic_interpolation.h	/^  const int row_end_;$/;"	m	struct:ceres::Grid2D
rows	ceres-solver/include/ceres/crs_matrix.h	/^  std::vector<int> rows;$/;"	m	struct:ceres::CRSMatrix
rows	ceres-solver/internal/ceres/block_structure.h	/^  std::vector<Block> rows;$/;"	m	struct:ceres::internal::CompressedColumnBlockStructure
rows	ceres-solver/internal/ceres/block_structure.h	/^  std::vector<CompressedRow> rows;$/;"	m	struct:ceres::internal::CompressedRowBlockStructure
rows	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^  vector<int> rows;$/;"	m	class:ceres::internal::SolveUpperTriangularTest	file:
rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^  const int* rows;$/;"	m	struct:ceres::internal::__anon33::RowColLessThan	file:
rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const int* rows() const { return &rows_[0]; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
rows	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  const int* rows()      const { return rows_.get();       }$/;"	f	class:ceres::internal::TripletSparseMatrix
rows	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^        int rows;$/;"	m	class:autocar::vision_mul::labeler
rows	src/vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^        int rows;$/;"	m	class:autocar::vision_mul::video_recoder
rows_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<int> rows_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
rows_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  scoped_array<int> rows_;$/;"	m	class:ceres::internal::TripletSparseMatrix
rp	src/rplidar_ros/sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/linux/thread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/linux/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/linux/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/macOS/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/win32/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	src/rplidar_ros/sdk/src/arch/win32/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	src/rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^namespace rp{ namespace hal{$/;"	n
rp	src/rplidar_ros/sdk/src/hal/event.h	/^namespace rp{ namespace hal{$/;"	n
rp	src/rplidar_ros/sdk/src/hal/locker.h	/^namespace rp{ namespace hal{ $/;"	n
rp	src/rplidar_ros/sdk/src/hal/thread.h	/^namespace rp{ namespace hal{$/;"	n
rp	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	file:
rp	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp_getms	src/rplidar_ros/sdk/src/arch/linux/timer.cpp	/^_u32 rp_getms()$/;"	f	namespace:rp::arch
rp_getms	src/rplidar_ros/sdk/src/arch/macOS/timer.cpp	/^_u32 rp_getms()$/;"	f	namespace:rp::arch
rp_getus	src/rplidar_ros/sdk/src/arch/linux/timer.cpp	/^_u64 rp_getus()$/;"	f	namespace:rp::arch
rplidar	src/rplidar_ros/sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone	file:
rplidar	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar_ans_header_t	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^} __attribute__((packed)) rplidar_ans_header_t;$/;"	t	typeref:struct:_rplidar_ans_header_t
rplidar_cmd_packet_t	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^} __attribute__((packed)) rplidar_cmd_packet_t;$/;"	t	typeref:struct:_rplidar_cmd_packet_t
rplidar_payload_acc_board_flag_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_payload_acc_board_flag_t
rplidar_payload_express_scan_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_express_scan_t;$/;"	t	typeref:struct:_rplidar_payload_express_scan_t
rplidar_payload_motor_pwm_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_motor_pwm_t;$/;"	t	typeref:struct:_rplidar_payload_motor_pwm_t
rplidar_response_acc_board_flag_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_response_acc_board_flag_t
rplidar_response_cabin_nodes_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_cabin_nodes_t;   $/;"	t	typeref:struct:_rplidar_response_cabin_nodes_t
rplidar_response_capsule_measurement_nodes_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_capsule_measurement_nodes_t
rplidar_response_device_health_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_health_t;$/;"	t	typeref:struct:_rplidar_response_device_health_t
rplidar_response_device_info_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_info_t;$/;"	t	typeref:struct:_rplidar_response_device_info_t
rplidar_response_measurement_node_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_measurement_node_t;$/;"	t	typeref:struct:_rplidar_response_measurement_node_t
rplidar_response_sample_rate_t	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_sample_rate_t;$/;"	t	typeref:struct:_rplidar_response_sample_rate_t
rune_detect	src/vision_unit/include/vision_unit/detect_factory/rune_detect.h	/^class rune_detect: public detect_factory$/;"	c	namespace:autocar::vision_mul
rune_detect	src/vision_unit/src/detect_factory/rune_detect.cpp	/^rune_detect::rune_detect()$/;"	f	class:autocar::vision_mul::rune_detect
runnable_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    scoped_ptr<Runnable> runnable_;$/;"	m	struct:testing::internal::__anon26::ThreadWithParamSupport::ThreadMainParam	file:
running	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^void armor_detect_node::running(void)$/;"	f	class:autocar::vision_mul::armor_detect_node
rvec	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat rvec;$/;"	m	class:autocar::vision_mul::armor_detect_node
rxqueue_count	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
rxqueue_count	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
rxqueue_count	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
s_checksum_1	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_1; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
s_checksum_2	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_2; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
save_frame	src/vision_unit/src/detect_factory/video_recoder.cpp	/^void video_recoder::save_frame(const cv::Mat &image)$/;"	f	class:autocar::vision_mul::video_recoder
scale_factor_	ceres-solver/internal/ceres/autodiff_local_parameterization_test.cc	/^  const double scale_factor_;$/;"	m	struct:ceres::internal::ScaledPlus	file:
scaled_direction_	ceres-solver/internal/ceres/line_search.h	/^  Vector scaled_direction_;$/;"	m	class:ceres::internal::LineSearchFunction
scanCallback	src/rplidar_ros/src/client.cpp	/^void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)$/;"	f
scan_	src/vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  sensor_msgs::LaserScan scan_;$/;"	m	class:Lidar2Camera
schur_complement_	ceres-solver/internal/ceres/iterative_schur_complement_solver.h	/^  scoped_ptr<internal::ImplicitSchurComplement> schur_complement_;$/;"	m	class:ceres::internal::IterativeSchurComplementSolver
schur_structure_given	ceres-solver/include/ceres/solver.h	/^    std::string schur_structure_given;$/;"	m	struct:ceres::Solver::Summary
schur_structure_used	ceres-solver/include/ceres/solver.h	/^    std::string schur_structure_used;$/;"	m	struct:ceres::Solver::Summary
scoped_array	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  explicit scoped_array(C* p = NULL) : array_(p) { }$/;"	f	class:ceres::internal::scoped_array
scoped_array	ceres-solver/include/ceres/internal/scoped_ptr.h	/^class scoped_array {$/;"	c	namespace:ceres::internal
scoped_ptr	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  explicit scoped_ptr(C* p = NULL) : ptr_(p) { }$/;"	f	class:ceres::internal::scoped_ptr
scoped_ptr	ceres-solver/include/ceres/internal/scoped_ptr.h	/^class scoped_ptr {$/;"	c	namespace:ceres::internal
score	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  float score;$/;"	m	class:autocar::vision_mul::armor_info
scratch_	ceres-solver/include/ceres/gradient_problem.h	/^  internal::scoped_array<double> scratch_;$/;"	m	class:ceres::GradientProblem
scratch_	ceres-solver/internal/ceres/cxsparse.h	/^  CS_ENTRY* scratch_;$/;"	m	class:ceres::internal::CXSparse
scratch_evaluate_preparer_	ceres-solver/internal/ceres/block_evaluate_preparer.h	/^  ScratchEvaluatePreparer scratch_evaluate_preparer_;$/;"	m	class:ceres::internal::BlockEvaluatePreparer
scratch_size_	ceres-solver/internal/ceres/cxsparse.h	/^  int scratch_size_;$/;"	m	class:ceres::internal::CXSparse
script.onreadystatechange	src/doc/html/navtree.js	/^    script.onreadystatechange = function() {$/;"	f
searchData	src/doc/html/search/all_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_1.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_10.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_11.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_12.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_13.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_14.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_15.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_16.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_17.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_18.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_19.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_2.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_3.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_4.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_5.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_6.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_7.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_8.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_9.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_a.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_b.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_c.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_d.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_e.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/all_f.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_1.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_10.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_11.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_12.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_13.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_14.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_2.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_3.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_4.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_5.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_6.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_7.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_8.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_9.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_a.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_b.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_c.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_d.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_e.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/classes_f.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enums_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enums_1.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enums_2.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enums_3.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enums_4.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enums_5.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enumvalues_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enumvalues_1.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enumvalues_2.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/enumvalues_3.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_1.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_10.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_11.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_12.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_13.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_14.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_15.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_2.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_3.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_4.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_5.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_6.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_7.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_8.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_9.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_a.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_b.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_c.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_d.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_e.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/functions_f.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/namespaces_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/pages_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/related_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/typedefs_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/typedefs_1.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/typedefs_2.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/typedefs_3.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/typedefs_4.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/typedefs_5.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/typedefs_6.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_0.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_1.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_10.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_11.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_12.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_13.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_14.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_15.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_16.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_2.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_3.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_4.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_5.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_6.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_7.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_8.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_9.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_a.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_b.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_c.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_d.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_e.js	/^var searchData=$/;"	v
searchData	src/doc/html/search/variables_f.js	/^var searchData=$/;"	v
search_direction	ceres-solver/internal/ceres/line_search_minimizer.h	/^    Vector search_direction;$/;"	m	struct:ceres::internal::LineSearchMinimizer::State
second_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Matcher<const SecondType&> second_matcher_;$/;"	m	class:testing::internal::PairMatcherImpl
second_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const SecondMatcher second_matcher_;$/;"	m	class:testing::internal::PairMatcher
second_value_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Second second_value_;$/;"	m	class:testing::internal::BoundSecondMatcher::Impl
second_value_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Second second_value_;$/;"	m	class:testing::internal::BoundSecondMatcher
selectAndHighlight	src/doc/html/navtree.js	/^function selectAndHighlight(hash,n)$/;"	f
send	ceres-solver/internal/ceres/gmock/mock-log.h	/^  virtual void send(google::LogSeverity severity,$/;"	f	class:testing::ScopedMockLog
sendGoal	logical_core/src/logical_core.cpp	/^    void sendGoal()$/;"	f	class:Brain
send_goal_srv	logical_core/src/logical_core.cpp	/^    ros::Subscriber send_goal_srv;$/;"	m	class:Brain	file:
send_goal_srv_	src/logical_core/src/logical_core.h	/^  ros::Subscriber send_goal_srv_;$/;"	m	class:LogicalCore
senddata	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
senddata	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, _word_size_t size)$/;"	f	class:rp::arch::net::raw_serial
senddata	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
sequence_created_	ceres-solver/internal/ceres/gmock/gmock.h	/^  bool sequence_created_;$/;"	m	class:testing::InSequence
serial_baudrate	src/serial_comm/include/comm_read.h	/^  int serial_baudrate;$/;"	m	class:autocar::serial_mul::comm_read
serial_baudrate	src/serial_comm/include/comm_write.h	/^  int serial_baudrate;$/;"	m	class:autocar::serial_mul::comm_write
serial_baudrate	src/serial_comm/include/serial_param.h	/^  int serial_baudrate;$/;"	m	class:autocar::serial_mul::serial_param
serial_comm	devel/include/serial_comm/car_speed.h	/^namespace serial_comm$/;"	n
serial_comm	devel/include/serial_comm/serial_data.h	/^namespace serial_comm$/;"	n
serial_comm-msg	devel/share/common-lisp/ros/serial_comm/msg/_package.lisp	/^(cl:defpackage serial_comm-msg$/;"	f
serial_comm::car_speed	devel/share/roseus/ros/serial_comm/msg/car_speed.l	/^(defclass serial_comm::car_speed$/;"	f
serial_comm::car_speed	devel/share/roseus/ros/serial_comm/msg/car_speed.l	/^(defmethod serial_comm::car_speed$/;"	f
serial_comm::serial_data	devel/share/roseus/ros/serial_comm/msg/serial_data.l	/^(defclass serial_comm::serial_data$/;"	f
serial_comm::serial_data	devel/share/roseus/ros/serial_comm/msg/serial_data.l	/^(defmethod serial_comm::serial_data$/;"	f
serial_data	devel/include/console/serial_data.h	/^typedef ::console::serial_data_<std::allocator<void> > serial_data;$/;"	t	namespace:console
serial_data	devel/include/ctrl_serial_comm/serial_data.h	/^typedef ::ctrl_serial_comm::serial_data_<std::allocator<void> > serial_data;$/;"	t	namespace:ctrl_serial_comm
serial_data	devel/include/serial_comm/serial_data.h	/^typedef ::serial_comm::serial_data_<std::allocator<void> > serial_data;$/;"	t	namespace:serial_comm
serial_data	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^class serial_data(genpy.Message):$/;"	c
serial_data	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^class serial_data(genpy.Message):$/;"	c
serial_data	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^class serial_data(genpy.Message):$/;"	c
serial_data	devel/share/common-lisp/ros/console/msg/serial_data.lisp	/^(cl:defclass serial_data (<serial_data>)$/;"	f
serial_data	devel/share/common-lisp/ros/ctrl_serial_comm/msg/serial_data.lisp	/^(cl:defclass serial_data (<serial_data>)$/;"	f
serial_data	devel/share/common-lisp/ros/serial_comm/msg/serial_data.lisp	/^(cl:defclass serial_data (<serial_data>)$/;"	f
serial_data	devel/share/gennodejs/ros/console/msg/_index.js	/^  serial_data: serial_data,$/;"	p	class:module.exports
serial_data	devel/share/gennodejs/ros/ctrl_serial_comm/msg/_index.js	/^  serial_data: serial_data,$/;"	p	class:module.exports
serial_data	devel/share/gennodejs/ros/serial_comm/msg/_index.js	/^  serial_data: serial_data,$/;"	p	class:module.exports
serial_dataConstPtr	devel/include/console/serial_data.h	/^typedef boost::shared_ptr< ::console::serial_data const> serial_dataConstPtr;$/;"	t	namespace:console
serial_dataConstPtr	devel/include/ctrl_serial_comm/serial_data.h	/^typedef boost::shared_ptr< ::ctrl_serial_comm::serial_data const> serial_dataConstPtr;$/;"	t	namespace:ctrl_serial_comm
serial_dataConstPtr	devel/include/serial_comm/serial_data.h	/^typedef boost::shared_ptr< ::serial_comm::serial_data const> serial_dataConstPtr;$/;"	t	namespace:serial_comm
serial_dataPtr	devel/include/console/serial_data.h	/^typedef boost::shared_ptr< ::console::serial_data > serial_dataPtr;$/;"	t	namespace:console
serial_dataPtr	devel/include/ctrl_serial_comm/serial_data.h	/^typedef boost::shared_ptr< ::ctrl_serial_comm::serial_data > serial_dataPtr;$/;"	t	namespace:ctrl_serial_comm
serial_dataPtr	devel/include/serial_comm/serial_data.h	/^typedef boost::shared_ptr< ::serial_comm::serial_data > serial_dataPtr;$/;"	t	namespace:serial_comm
serial_data_	devel/include/console/serial_data.h	/^  serial_data_()$/;"	f	struct:console::serial_data_
serial_data_	devel/include/console/serial_data.h	/^  serial_data_(const ContainerAllocator& _alloc)$/;"	f	struct:console::serial_data_
serial_data_	devel/include/console/serial_data.h	/^struct serial_data_$/;"	s	namespace:console
serial_data_	devel/include/ctrl_serial_comm/serial_data.h	/^  serial_data_()$/;"	f	struct:ctrl_serial_comm::serial_data_
serial_data_	devel/include/ctrl_serial_comm/serial_data.h	/^  serial_data_(const ContainerAllocator& _alloc)$/;"	f	struct:ctrl_serial_comm::serial_data_
serial_data_	devel/include/ctrl_serial_comm/serial_data.h	/^struct serial_data_$/;"	s	namespace:ctrl_serial_comm
serial_data_	devel/include/serial_comm/serial_data.h	/^  serial_data_()$/;"	f	struct:serial_comm::serial_data_
serial_data_	devel/include/serial_comm/serial_data.h	/^  serial_data_(const ContainerAllocator& _alloc)$/;"	f	struct:serial_comm::serial_data_
serial_data_	devel/include/serial_comm/serial_data.h	/^struct serial_data_$/;"	s	namespace:serial_comm
serial_fd	src/rplidar_ros/sdk/src/arch/linux/net_serial.h	/^    int serial_fd;$/;"	m	class:rp::arch::net::raw_serial
serial_fd	src/rplidar_ros/sdk/src/arch/macOS/net_serial.h	/^    int serial_fd;$/;"	m	class:rp::arch::net::raw_serial
serial_mul	src/serial_comm/include/comm_read.h	/^namespace serial_mul$/;"	n	namespace:autocar
serial_mul	src/serial_comm/include/comm_write.h	/^namespace serial_mul$/;"	n	namespace:autocar
serial_mul	src/serial_comm/include/serial_param.h	/^namespace serial_mul$/;"	n	namespace:autocar
serial_mul	src/serial_comm/src/comm_read.cpp	/^namespace serial_mul$/;"	n	namespace:autocar	file:
serial_mul	src/serial_comm/src/comm_write.cpp	/^namespace serial_mul$/;"	n	namespace:autocar	file:
serial_mul	src/serial_comm/src/serial_param.cpp	/^namespace serial_mul$/;"	n	namespace:autocar	file:
serial_param	src/serial_comm/include/serial_param.h	/^class serial_param: public autocar::param_mul::param_manager$/;"	c	namespace:autocar::serial_mul
serial_param	src/serial_comm/src/serial_param.cpp	/^serial_param::serial_param()$/;"	f	class:autocar::serial_mul::serial_param
serial_port	src/serial_comm/include/serial_param.h	/^  std::string serial_port;$/;"	m	class:autocar::serial_mul::serial_param
serial_rxtx	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    serial_rxtx():_is_serial_opened(false){}$/;"	f	class:rp::hal::serial_rxtx
serial_rxtx	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^class serial_rxtx$/;"	c	namespace:rp::hal
serialization	devel/include/console/serial_data.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/ctrl_serial_comm/car_speed.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/ctrl_serial_comm/serial_data.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/logical_core/SetGoalRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/logical_core/SetGoalResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/odometry/car_speed.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/serial_comm/car_speed.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/serial_comm/serial_data.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/vision_unit/SetGoalRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/vision_unit/SetGoalResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/vision_unit/armor_msg.h	/^namespace serialization$/;"	n	namespace:ros
serialization	devel/include/vision_unit/transformed_scan.h	/^namespace serialization$/;"	n	namespace:ros
serialize	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  def serialize(self, buff):$/;"	f
serialize	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  def serialize(self, buff):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/console/msg/_serial_data.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_car_speed.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/ctrl_serial_comm/msg/_serial_data.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/logical_core/srv/_SetGoal.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/odometry/msg/_car_speed.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/serial_comm/msg/_car_speed.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/serial_comm/msg/_serial_data.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/vision_unit/msg/_armor_msg.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialize_numpy	devel/lib/python2.7/dist-packages/vision_unit/srv/_SetGoal.py	/^  def serialize_numpy(self, buff, numpy):$/;"	f
serialnum	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   serialnum[16];$/;"	m	struct:_rplidar_response_device_info_t
service_traits	devel/include/logical_core/SetGoal.h	/^namespace service_traits$/;"	n	namespace:ros
service_traits	devel/include/vision_unit/SetGoal.h	/^namespace service_traits$/;"	n	namespace:ros
services_str	build/console/cmake/console-genmsg-context.py	/^services_str = ""$/;"	v
services_str	build/logical_core/cmake/logical_core-genmsg-context.py	/^services_str = "\/home\/ubuntu\/dji_beta\/auto_car\/src\/logical_core\/srv\/SetGoal.srv"$/;"	v
services_str	build/odometry/cmake/odometry-genmsg-context.py	/^services_str = ""$/;"	v
services_str	build/serial_comm/cmake/serial_comm-genmsg-context.py	/^services_str = ""$/;"	v
services_str	build/serial_communication/cmake/ctrl_serial_comm-genmsg-context.py	/^services_str = ""$/;"	v
services_str	build/vision_unit/cmake/vision_unit-genmsg-context.py	/^services_str = "\/home\/ubuntu\/dji_beta\/auto_car\/src\/vision_unit\/srv\/SetGoal.srv"$/;"	v
set	ceres-solver/internal/ceres/gtest/gtest.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:std::tr1::ThreadLocal
set	ceres-solver/internal/ceres/gtest/gtest.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:std::tr1::ThreadLocal
set	src/rplidar_ros/sdk/src/hal/event.h	/^    void set( bool isSignal = true )$/;"	f	class:rp::hal::Event
setClassAttr	src/doc/html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setDTR	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setDTR	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setDTR	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setKeyActions	src/doc/html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
setMotorPWM	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::setMotorPWM(_u16 pwm)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
setParity	src/serial_communication/src/commCtrl.cxx	/^int setParity(int fd,int databits,int stopbits,int parity)$/;"	f
setPriority	src/rplidar_ros/sdk/src/arch/linux/thread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setPriority	src/rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setPriority	src/rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setSpeed	src/serial_communication/src/commCtrl.cxx	/^int setSpeed(int fd, int speed)$/;"	f
set_axes_equal	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^def set_axes_equal(axes):$/;"	f
set_camera_exposure	src/vision_unit/src/detect_factory/util.cpp	/^int set_camera_exposure(std::string id, int val)$/;"	f	namespace:autocar::vision_mul
set_cardinality	ceres-solver/internal/ceres/gmock/gmock.h	/^  void set_cardinality(const Cardinality& a_cardinality) {$/;"	f	class:testing::internal::ExpectationBase
set_catch_exceptions	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }$/;"	f	class:testing::internal::UnitTestImpl	file:
set_child_pid	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }$/;"	f	class:testing::internal::ForkingDeathTest
set_current_test_case	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_current_test_case(TestCase* a_current_test_case) {$/;"	f	class:testing::internal::UnitTestImpl
set_current_test_info	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_current_test_info(TestInfo* a_current_test_info) {$/;"	f	class:testing::internal::UnitTestImpl
set_delta_offset	ceres-solver/internal/ceres/parameter_block.h	/^  void set_delta_offset(int delta_offset) { delta_offset_ = delta_offset; }$/;"	f	class:ceres::internal::ParameterBlock
set_elapsed_time	ceres-solver/internal/ceres/gtest/gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_forwarding_enabled	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }$/;"	f	class:testing::internal::TestEventRepeater
set_image_points	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^void armor_detect_node::set_image_points(cv::RotatedRect rect)$/;"	f	class:autocar::vision_mul::armor_detect_node
set_index	ceres-solver/internal/ceres/parameter_block.h	/^  void set_index(int index) { index_ = index; }$/;"	f	class:ceres::internal::ParameterBlock
set_index	ceres-solver/internal/ceres/residual_block.h	/^  void set_index(int index) { index_ = index; }$/;"	f	class:ceres::internal::ResidualBlock
set_last_death_test_message	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void DeathTest::set_last_death_test_message(const std::string& message) {$/;"	f	class:testing::internal::DeathTest
set_lhs	ceres-solver/internal/ceres/schur_complement_solver.h	/^  void set_lhs(BlockRandomAccessMatrix* lhs) { lhs_.reset(lhs); }$/;"	f	class:ceres::internal::SchurComplementSolver
set_num_cols	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  void set_num_cols(const int num_cols) { num_cols_ = num_cols; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
set_num_nonzeros	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^void TripletSparseMatrix::set_num_nonzeros(int num_nonzeros) {$/;"	f	class:ceres::internal::TripletSparseMatrix
set_num_residuals	ceres-solver/include/ceres/cost_function.h	/^  void set_num_residuals(int num_residuals) {$/;"	f	class:ceres::CostFunction
set_num_rows	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  void set_num_rows(const int num_rows) { num_rows_ = num_rows; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
set_os_stack_trace_getter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void UnitTestImpl::set_os_stack_trace_getter($/;"	f	class:testing::internal::UnitTestImpl
set_outcome	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }$/;"	f	class:testing::internal::DeathTestImpl
set_read_fd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_read_fd(int fd) { read_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
set_rhs	ceres-solver/internal/ceres/schur_complement_solver.h	/^  void set_rhs(double* rhs) { rhs_.reset(rhs); }$/;"	f	class:ceres::internal::SchurComplementSolver
set_should_run	ceres-solver/internal/ceres/gtest/gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestCase
set_spawned	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }$/;"	f	class:testing::internal::DeathTestImpl
set_state_offset	ceres-solver/internal/ceres/parameter_block.h	/^  void set_state_offset(int state_offset) { state_offset_ = state_offset; }$/;"	f	class:ceres::internal::ParameterBlock
set_status	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_status(int a_status) { status_ = a_status; }$/;"	f	class:testing::internal::DeathTestImpl
set_storage_type	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  void set_storage_type(const StorageType storage_type) {$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
set_up_tc_	ceres-solver/internal/ceres/gtest/gtest.h	/^  Test::SetUpTestCaseFunc set_up_tc_;$/;"	m	class:testing::TestCase
set_write_fd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  void set_write_fd(int fd) { write_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
severity	ceres-solver/internal/ceres/gmock/mock-log.h	/^    google::LogSeverity severity;$/;"	m	struct:testing::ScopedMockLog::MessageInfo
severity_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const GTestLogSeverity severity_;$/;"	m	class:std::tr1::GTestLog
severity_	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  int severity_;$/;"	m	class:MessageLogger
should_run	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestCase
should_run	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool should_run_;                 \/\/ True iff this test should run$/;"	m	class:testing::TestInfo
should_run_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestCase
showNode	src/doc/html/navtree.js	/^function showNode(o, node, index, hash)$/;"	f
showRoot	src/doc/html/navtree.js	/^function showRoot()$/;"	f
showSyncOff	src/doc/html/navtree.js	/^function showSyncOff(n,relpath)$/;"	f
showSyncOn	src/doc/html/navtree.js	/^function showSyncOn(n,relpath)$/;"	f
shuffle_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool shuffle_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
sidenav	src/doc/html/resize.js	/^var sidenav,navtree,content,header;$/;"	v
sign_bit	ceres-solver/internal/ceres/gtest/gtest.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signum_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
similarity_penalty_weight	ceres-solver/internal/ceres/canonical_views_clustering.h	/^  double similarity_penalty_weight;$/;"	m	struct:ceres::internal::CanonicalViewsClusteringOptions
simplicial_ldlt_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  scoped_ptr<SimplicialLDLT> simplicial_ldlt_;$/;"	m	class:ceres::internal::SparseSchurComplementSolver
sin	ceres-solver/include/ceres/jet.h	/^Jet<T, N> sin(const Jet<T, N>& f) {$/;"	f	namespace:ceres
sin	ceres-solver/include/ceres/jet.h	/^inline double sin     (double x) { return std::sin(x);      }$/;"	f	namespace:ceres
sinh	ceres-solver/include/ceres/jet.h	/^Jet<T, N> sinh(const Jet<T, N>& f) {$/;"	f	namespace:ceres
sinh	ceres-solver/include/ceres/jet.h	/^inline double sinh    (double x) { return std::sinh(x);     }$/;"	f	namespace:ceres
size	ceres-solver/include/ceres/internal/fixed_array.h	/^  inline size_type size() const { return size_; }$/;"	f	class:ceres::internal::FixedArray
size	ceres-solver/internal/ceres/block_structure.h	/^  BlockSize size;$/;"	m	struct:ceres::internal::Block
size	ceres-solver/internal/ceres/gmock/gmock.h	/^  int size() const { return static_cast<int>(expectations_.size()); }$/;"	f	class:testing::ExpectationSet
size	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestPartResultArray::size() const {$/;"	f	class:testing::TestPartResultArray
size	ceres-solver/internal/ceres/gtest/gtest.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
size	ceres-solver/internal/ceres/schur_eliminator.h	/^    int size;$/;"	m	struct:ceres::internal::SchurEliminator::Chunk
size	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 size;$/;"	m	struct:_rplidar_cmd_packet_t
size_	ceres-solver/examples/fields_of_experts.h	/^  int size_;$/;"	m	class:ceres::examples::FieldsOfExperts
size_	ceres-solver/include/ceres/internal/fixed_array.h	/^  size_type const       size_;$/;"	m	class:ceres::internal::FixedArray
size_	ceres-solver/include/ceres/local_parameterization.h	/^  const int size_;$/;"	m	class:ceres::HomogeneousVectorParameterization
size_	ceres-solver/include/ceres/local_parameterization.h	/^  const int size_;$/;"	m	class:ceres::IdentityParameterization
size_	ceres-solver/internal/ceres/gtest/gtest.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
size_	ceres-solver/internal/ceres/parameter_block.h	/^  int size_;$/;"	m	class:ceres::internal::ParameterBlock
size_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<SizeType> size_matcher_;$/;"	m	class:testing::internal::SizeIsMatcher::Impl
size_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const SizeMatcher size_matcher_;$/;"	m	class:testing::internal::SizeIsMatcher
size_penalty_weight	ceres-solver/internal/ceres/canonical_views_clustering.h	/^  double size_penalty_weight;$/;"	m	struct:ceres::internal::CanonicalViewsClusteringOptions
size_q30_subtype	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u32 size_q30_subtype; \/\/ see _u32 size:30; _u32 subType:2;$/;"	m	struct:_rplidar_ans_header_t
size_type	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef size_t size_type;$/;"	t	class:ceres::internal::FixedArray
slect_final_armor	src/vision_unit/src/detect_factory/armor_detect.cpp	/^void armor_detecter::slect_final_armor(std::vector<armor_info> all_armors)$/;"	f	class:autocar::vision_mul::armor_detecter
socket_writer_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const scoped_ptr<AbstractSocketWriter> socket_writer_;$/;"	m	class:testing::internal::StreamingListener	file:
sockfd_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    int sockfd_;  \/\/ socket file descriptor$/;"	m	class:testing::internal::StreamingListener::SocketWriter	file:
sof	src/serial_comm/include/comm_read.h	/^  uint8_t sof;$/;"	m	struct:autocar::serial_mul::__anon50
sof	src/serial_comm/include/comm_write.h	/^    uint8_t sof;$/;"	m	struct:autocar::serial_mul::__anon49
sof	src/serial_communication/src/commRecv.cxx	/^    uint8_t sof;$/;"	m	struct:__anon48	file:
sof	src/serial_communication/src/commSend.cxx	/^    uint8_t sof;$/;"	m	struct:__anon47	file:
sol	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  Vector sol;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
sol_d	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  Vector sol_d;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
sol_expected	ceres-solver/internal/ceres/schur_eliminator_test.cc	/^  Vector sol_expected;$/;"	m	class:ceres::internal::SchurEliminatorTest	file:
sol_regularized_	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^  scoped_array<double> sol_regularized_;$/;"	m	class:ceres::internal::UnsymmetricLinearSolverTest	file:
sol_unregularized_	ceres-solver/internal/ceres/unsymmetric_linear_solver_test.cc	/^  scoped_array<double> sol_unregularized_;$/;"	m	class:ceres::internal::UnsymmetricLinearSolverTest	file:
solver	src/odometry/src/vel2odom_node.cpp	/^autocar::odom_mul::vel2odom solver;$/;"	v
solver_summary_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Solver::Summary* solver_summary_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
source_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const Matcher<U> source_matcher_;$/;"	m	class:testing::internal::MatcherCastImpl::Impl
source_root_dir	build/catkin_generated/order_packages.py	/^source_root_dir = "\/home\/ubuntu\/dji_beta\/auto_car\/src"$/;"	v
source_suffix	ceres-solver/docs/source/conf.py	/^source_suffix = '.rst'$/;"	v
source_text	ceres-solver/internal/ceres/gmock/gmock.h	/^  const char* source_text() const { return source_text_.c_str(); }$/;"	f	class:testing::internal::ExpectationBase
source_text_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const string source_text_;  \/\/ The EXPECT_CALL(...) source text.$/;"	m	class:testing::internal::ExpectationBase
space	ceres-solver/include/ceres/internal/manual_constructor.h	/^  inline void* space() {$/;"	f	class:ceres::internal::ManualConstructor
space_	ceres-solver/include/ceres/internal/manual_constructor.h	/^  CERES_ALIGNED_CHAR_ARRAY(Type, 1) space_;$/;"	m	class:ceres::internal::ManualConstructor
sparse_linear_algebra_library_type	ceres-solver/include/ceres/covariance.h	/^    SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type;$/;"	m	struct:ceres::Covariance::Options
sparse_linear_algebra_library_type	ceres-solver/include/ceres/solver.h	/^    SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type;$/;"	m	struct:ceres::Solver::Options
sparse_linear_algebra_library_type	ceres-solver/include/ceres/solver.h	/^    SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type;$/;"	m	struct:ceres::Solver::Summary
sparse_linear_algebra_library_type	ceres-solver/internal/ceres/linear_solver.h	/^    SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type;$/;"	m	struct:ceres::internal::LinearSolver::Options
sparse_linear_algebra_library_type	ceres-solver/internal/ceres/preconditioner.h	/^    SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type;$/;"	m	struct:ceres::internal::Preconditioner::Options
sparse_linear_algebra_library_type	ceres-solver/internal/ceres/test_util.h	/^  SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type;$/;"	m	struct:ceres::internal::SolverConfig
spawned	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool spawned() const { return spawned_; }$/;"	f	class:testing::internal::DeathTestImpl
spawned_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool spawned_;$/;"	m	class:testing::internal::DeathTestImpl	file:
speed2pos	src/odometry/src/vel2odom_node.cpp	/^void speed2pos(const odometry::car_speed car_vel)$/;"	f
speed_arr	src/serial_communication/src/commCtrl.cxx	/^int speed_arr[] = { B115200, B38400, B19200, B9600, B4800, B2400, B1200, B300,$/;"	v
speed_test_begin	src/vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	12;"	d
speed_test_end	src/vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	13;"	d
speed_test_reset	src/vision_unit/include/vision_unit/detect_factory/debug_utility.hpp	16;"	d
speed_test_start_begin_time	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  std::chrono::system_clock::time_point speed_test_start_begin_time;$/;"	m	class:autocar::vision_mul::armor_detecter
sphinx_exe	ceres-solver/scripts/make_docs.py	/^  sphinx_exe = 'sphinx-build'$/;"	v
sphinx_exe	ceres-solver/scripts/make_docs.py	/^  sphinx_exe = sys.argv[3]$/;"	v
sqrt	ceres-solver/include/ceres/jet.h	/^Jet<T, N> sqrt(const Jet<T, N>& f) {$/;"	f	namespace:ceres
sqrt	ceres-solver/include/ceres/jet.h	/^inline double sqrt    (double x) { return std::sqrt(x);     }$/;"	f	namespace:ceres
sqrt_information_	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^  const Eigen::Matrix3d sqrt_information_;$/;"	m	class:ceres::examples::PoseGraph2dErrorTerm
sqrt_information_	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^  const Eigen::Matrix<double, 6, 6> sqrt_information_;$/;"	m	class:ceres::examples::PoseGraph3dErrorTerm
sqrt_rho1_	ceres-solver/internal/ceres/corrector.h	/^  double sqrt_rho1_;$/;"	m	class:ceres::internal::Corrector
sqrt_weight_	ceres-solver/examples/ellipse_approximation.cc	/^  const double sqrt_weight_;$/;"	m	struct:EuclideanDistanceFunctor	file:
sqrta_	ceres-solver/examples/denoising.cc	/^  double sqrta_, b_;$/;"	m	class:ceres::examples::QuadraticCostFunction	file:
squaredist	src/vision_unit/src/detect_factory/image_utility.cpp	/^double squaredist(T x1, T y1, T x2, T y2)$/;"	f	namespace:autocar::vision_mul
squaredist	src/vision_unit/src/detect_factory/image_utility.cpp	/^double squaredist(const cv::Point_<T> &point1, const cv::Point_<T> &point2)$/;"	f	namespace:autocar::vision_mul
src_dir	ceres-solver/scripts/make_docs.py	/^src_dir    = sys.argv[1] + '\/docs\/source'$/;"	v
srv	devel/share/gennodejs/ros/logical_core/_index.js	/^  srv: require('.\/srv\/_index.js')$/;"	p	class:module.exports
ss_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ::std::stringstream ss_;$/;"	m	class:testing::StringMatchResultListener
ss_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const internal::scoped_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
ss_	ceres-solver/internal/ceres/schur_complement_solver.h	/^  SuiteSparse ss_;$/;"	m	class:ceres::internal::SparseSchurComplementSolver
ss_	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.h	/^  SuiteSparse ss_;$/;"	m	class:ceres::internal::SparseNormalCholeskySolver
ss_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  SuiteSparse ss_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
ssize_t	ceres-solver/include/ceres/internal/fixed_array.h	/^   typedef __int64      ssize_t;$/;"	t	namespace:ceres::internal
stack_trace_depth_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  internal::Int32 stack_trace_depth_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
standalone	src/rplidar_ros/sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
standalone	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp	file:
standalone	src/rplidar_ros/sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
start	ceres-solver/internal/ceres/schur_eliminator.h	/^    int start;$/;"	m	struct:ceres::internal::SchurEliminator::Chunk
startMotor	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startMotor()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
startScan	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startScan(bool force, bool autoExpressMode)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
startScanExpress	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startScanExpress(bool fixedAngle, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
startScanNormal	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::startScanNormal(bool force, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
start_angle_sync_q6	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16                            start_angle_sync_q6;$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
start_motor	src/rplidar_ros/src/node.cpp	/^bool start_motor(std_srvs::Empty::Request &req,$/;"	f
start_time_	ceres-solver/internal/ceres/execution_summary.h	/^  const double start_time_;$/;"	m	class:ceres::internal::ScopedExecutionTimer
start_time_	ceres-solver/internal/ceres/wall_time.h	/^  const double start_time_;$/;"	m	class:ceres::internal::EventLogger
start_time_in_secs_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double start_time_in_secs_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
start_timestamp	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TimeInMillis start_timestamp() const { return start_timestamp_; }$/;"	f	class:testing::internal::UnitTestImpl
start_timestamp	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^internal::TimeInMillis UnitTest::start_timestamp() const {$/;"	f	class:testing::UnitTest
start_timestamp_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  TimeInMillis start_timestamp_;$/;"	m	class:testing::internal::UnitTestImpl	file:
state	ceres-solver/internal/ceres/parameter_block.h	/^  const double* state() const { return state_; }$/;"	f	class:ceres::internal::ParameterBlock
stateMachine	src/logical_core/src/logical_core.cpp	/^void LogicalCore::stateMachine()$/;"	f	class:LogicalCore
state_	ceres-solver/internal/ceres/gtest/gtest.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
state_	ceres-solver/internal/ceres/parameter_block.h	/^  mutable const double* state_;$/;"	m	class:ceres::internal::ParameterBlock
state_offset	ceres-solver/internal/ceres/parameter_block.h	/^  int state_offset() const { return state_offset_; }$/;"	f	class:ceres::internal::ParameterBlock
state_offset_	ceres-solver/internal/ceres/parameter_block.h	/^  int32 state_offset_;$/;"	m	class:ceres::internal::ParameterBlock
state_updating_callback	ceres-solver/internal/ceres/preprocessor.h	/^  scoped_ptr<IterationCallback> state_updating_callback;$/;"	m	struct:ceres::internal::PreprocessedProblem
statement	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const char* statement() const { return statement_; }$/;"	f	class:testing::internal::DeathTestImpl
statement_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const char* const statement_;$/;"	m	class:testing::internal::DeathTestImpl	file:
states	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  StateMap& states() { return states_; }$/;"	f	class:testing::__anon29::MockObjectRegistry
states_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  StateMap states_;$/;"	m	class:testing::__anon29::MockObjectRegistry	file:
static_value1	devel/include/console/serial_data.h	/^  static const uint64_t static_value1 = 0x79cd2e4a60f8fd7aULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/ctrl_serial_comm/car_speed.h	/^  static const uint64_t static_value1 = 0xf3bb304fafabfb01ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/ctrl_serial_comm/serial_data.h	/^  static const uint64_t static_value1 = 0x79cd2e4a60f8fd7aULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/logical_core/SetGoalRequest.h	/^  static const uint64_t static_value1 = 0x257d089627d7eb71ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/logical_core/SetGoalResponse.h	/^  static const uint64_t static_value1 = 0xdd7058fae6e1bf24ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/odometry/car_speed.h	/^  static const uint64_t static_value1 = 0xf3bb304fafabfb01ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/serial_comm/car_speed.h	/^  static const uint64_t static_value1 = 0xf3bb304fafabfb01ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/serial_comm/serial_data.h	/^  static const uint64_t static_value1 = 0x79cd2e4a60f8fd7aULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/vision_unit/SetGoalRequest.h	/^  static const uint64_t static_value1 = 0x257d089627d7eb71ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/vision_unit/SetGoalResponse.h	/^  static const uint64_t static_value1 = 0xdd7058fae6e1bf24ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/vision_unit/armor_msg.h	/^  static const uint64_t static_value1 = 0xc146d150956b8109ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	devel/include/vision_unit/transformed_scan.h	/^  static const uint64_t static_value1 = 0xd04f633fb6d83003ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/console/serial_data.h	/^  static const uint64_t static_value2 = 0xfcb0476d2ea77fdcULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/ctrl_serial_comm/car_speed.h	/^  static const uint64_t static_value2 = 0x51942ae8ec55cdb1ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/ctrl_serial_comm/serial_data.h	/^  static const uint64_t static_value2 = 0xfcb0476d2ea77fdcULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/logical_core/SetGoalRequest.h	/^  static const uint64_t static_value2 = 0x36c24d3593d05a16ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/logical_core/SetGoalResponse.h	/^  static const uint64_t static_value2 = 0x00513fe092a44c92ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/odometry/car_speed.h	/^  static const uint64_t static_value2 = 0x51942ae8ec55cdb1ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/serial_comm/car_speed.h	/^  static const uint64_t static_value2 = 0x51942ae8ec55cdb1ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/serial_comm/serial_data.h	/^  static const uint64_t static_value2 = 0xfcb0476d2ea77fdcULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/vision_unit/SetGoalRequest.h	/^  static const uint64_t static_value2 = 0x36c24d3593d05a16ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/vision_unit/SetGoalResponse.h	/^  static const uint64_t static_value2 = 0x00513fe092a44c92ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/vision_unit/armor_msg.h	/^  static const uint64_t static_value2 = 0x94d3493ae1029278ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	devel/include/vision_unit/transformed_scan.h	/^  static const uint64_t static_value2 = 0x4a14d1a39c7655c7ULL;$/;"	m	struct:ros::message_traits::MD5Sum
status	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int status() const { return status_; }$/;"	f	class:testing::internal::DeathTestImpl
status	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   status;$/;"	m	struct:_rplidar_response_device_health_t
status_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int status_;$/;"	m	class:testing::internal::DeathTestImpl	file:
std	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace std {$/;"	n
std_sample_duration_us	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u16  std_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
step_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
step_evaluator_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  scoped_ptr<TrustRegionStepEvaluator> step_evaluator_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
step_is_nonmonotonic	ceres-solver/include/ceres/iteration_callback.h	/^  bool step_is_nonmonotonic;$/;"	m	struct:ceres::IterationSummary
step_is_successful	ceres-solver/include/ceres/iteration_callback.h	/^  bool step_is_successful;$/;"	m	struct:ceres::IterationSummary
step_is_valid	ceres-solver/include/ceres/iteration_callback.h	/^  bool step_is_valid;$/;"	m	struct:ceres::IterationSummary
step_norm	ceres-solver/include/ceres/iteration_callback.h	/^  double step_norm;$/;"	m	struct:ceres::IterationSummary
step_size	ceres-solver/include/ceres/iteration_callback.h	/^  double step_size;$/;"	m	struct:ceres::IterationSummary
step_size	ceres-solver/internal/ceres/line_search_minimizer.h	/^    double step_size;$/;"	m	struct:ceres::internal::LineSearchMinimizer::State
step_solver_time_in_seconds	ceres-solver/include/ceres/iteration_callback.h	/^  double step_solver_time_in_seconds;$/;"	m	struct:ceres::IterationSummary
stop	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::stop(_u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
stopMotor	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerialImpl::stopMotor()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
stop_motor	src/rplidar_ros/src/node.cpp	/^bool stop_motor(std_srvs::Empty::Request &req,$/;"	f
storage_type	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  const StorageType storage_type() const { return storage_type_; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
storage_type_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  StorageType storage_type_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
storeLink	src/doc/html/navtree.js	/^function storeLink(link)$/;"	f
str	ceres-solver/internal/ceres/gmock/gmock.h	/^  internal::string str() const { return ss_.str(); }$/;"	f	class:testing::StringMatchResultListener
strategy_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  TrustRegionStrategy* strategy_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
stream	ceres-solver/internal/ceres/gmock/gmock.h	/^  ::std::ostream* stream() { return stream_; }$/;"	f	class:testing::MatchResultListener
stream	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  std::stringstream &stream() { return stream_; }$/;"	f	class:MessageLogger
stream	devel/include/console/serial_data.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::console::serial_data_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/ctrl_serial_comm/car_speed.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ctrl_serial_comm::car_speed_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/ctrl_serial_comm/serial_data.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ctrl_serial_comm::serial_data_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/logical_core/SetGoalRequest.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::logical_core::SetGoalRequest_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/logical_core/SetGoalResponse.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::logical_core::SetGoalResponse_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/odometry/car_speed.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::odometry::car_speed_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/serial_comm/car_speed.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_comm::car_speed_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/serial_comm/serial_data.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_comm::serial_data_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/vision_unit/SetGoalRequest.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_unit::SetGoalRequest_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/vision_unit/SetGoalResponse.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_unit::SetGoalResponse_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/vision_unit/armor_msg.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_unit::armor_msg_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	devel/include/vision_unit/transformed_scan.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_unit::transformed_scan_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream_	ceres-solver/internal/ceres/gmock/gmock.h	/^  ::std::ostream* const stream_;$/;"	m	class:testing::MatchResultListener::std
stream_	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  std::stringstream stream_;$/;"	m	class:MessageLogger
stream_result_to_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::string stream_result_to_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
string	ceres-solver/internal/ceres/gtest/gtest.h	/^  const std::string& string() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
string_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const StringType string_;$/;"	m	class:testing::internal::StrEqualityMatcher
stripPath	src/doc/html/navtree.js	/^function stripPath(uri)$/;"	f
stripPath2	src/doc/html/navtree.js	/^function stripPath2(uri)$/;"	f
structDBoW2_1_1TemplatedDatabase_1_1IFPair	src/doc/html/structDBoW2_1_1TemplatedDatabase_1_1IFPair.js	/^var structDBoW2_1_1TemplatedDatabase_1_1IFPair =$/;"	v
structDBoW2_1_1TemplatedVocabulary_1_1Node	src/doc/html/structDBoW2_1_1TemplatedVocabulary_1_1Node.js	/^var structDBoW2_1_1TemplatedVocabulary_1_1Node =$/;"	v
structDLoopDetector_1_1DetectionResult	src/doc/html/structDLoopDetector_1_1DetectionResult.js	/^var structDLoopDetector_1_1DetectionResult =$/;"	v
structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.js	/^var structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters =$/;"	v
structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999	src/doc/html/navtreeindex5.js	/^"structDLoopDetector_1_1TemplatedLoopDetector_1_1Parameters.html#a50f031c46c0e348676bbac32ed9bd999":[2,0,4,1,0,16],$/;"	p	class:NAVTREEINDEX5
structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland.js	/^var structDLoopDetector_1_1TemplatedLoopDetector_1_1tIsland =$/;"	v
structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow	src/doc/html/structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow.js	/^var structDLoopDetector_1_1TemplatedLoopDetector_1_1tTemporalWindow =$/;"	v
structFourDOFError	src/doc/html/structFourDOFError.js	/^var structFourDOFError =$/;"	v
structFourDOFWeightError	src/doc/html/structFourDOFWeightError.js	/^var structFourDOFWeightError =$/;"	v
structRelativeRTError	src/doc/html/structRelativeRTError.js	/^var structRelativeRTError =$/;"	v
structRelativeTError	src/doc/html/structRelativeTError.js	/^var structRelativeTError =$/;"	v
structReprojectionError3D	src/doc/html/structReprojectionError3D.js	/^var structReprojectionError3D =$/;"	v
structResidualBlockInfo	src/doc/html/structResidualBlockInfo.js	/^var structResidualBlockInfo =$/;"	v
structRetriveData	src/doc/html/structRetriveData.js	/^var structRetriveData =$/;"	v
structSFMFeature	src/doc/html/structSFMFeature.js	/^var structSFMFeature =$/;"	v
structTError	src/doc/html/structTError.js	/^var structTError =$/;"	v
structThreadsStruct	src/doc/html/structThreadsStruct.js	/^var structThreadsStruct =$/;"	v
structautocar_1_1serial__mul_1_1____attribute____	src/doc/html/structautocar_1_1serial__mul_1_1____attribute____.js	/^var structautocar_1_1serial__mul_1_1____attribute____ =$/;"	v
structautocar_1_1vision__mul_1_1vision__param__pkg	src/doc/html/structautocar_1_1vision__mul_1_1vision__param__pkg.js	/^var structautocar_1_1vision__mul_1_1vision__param__pkg =$/;"	v
structcv__bridge_1_1CvtColorForDisplayOptions	src/doc/html/structcv__bridge_1_1CvtColorForDisplayOptions.js	/^var structcv__bridge_1_1CvtColorForDisplayOptions =$/;"	v
sub	src/vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  ros::Subscriber sub;$/;"	m	class:Lidar2Camera
sub_camera_	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  ros::Subscriber sub_camera_;$/;"	m	class:VisionLidarFusion
sub_transformed_scan_	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  ros::Subscriber sub_transformed_scan_;$/;"	m	class:VisionLidarFusion
subdirs	src/doc/html/dir_125e7f126f10d6d82b7727e2eff633b9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_1c86866f58725cbc8a8f650f634c1b21.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_21bdf9efc55dbdf1c7a01a5eabaeccb8.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_22f04675140458f12f752464d75b29ad.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_2bb129e7572810fca886dae68ff69a2d.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_2d88a95eaf792b93d8dec6cb3cf8eb68.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_31eaaf881da50199d59a94e947ea09d5.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_3774b78f742e86463f186103299b33c9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_39903b13293b03099f869299802630f2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_3d75f7bea507c05bdccef4eecb546379.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_42cb5db3f120f5eca9d021e3f70e81f6.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_42e0a74288423937a6d783277b641c4e.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_53ac1b8e7cb4cf6a35b6d485fd55775b.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_5feeefd5aff41c940a705f28e2f7b4d1.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_632d0589b82df931c46f0fd2ca768715.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_76433691e77e9eb1884f75d25ab2ceb7.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_819ee5dbf222308ee69c59d4c1bb6efa.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_8adc25141e02ebb8b2a2682caaec5a6c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_8fa1f859b2f210d40eee8c0b93403892.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_941c1786eb1aa1d366208c95a3435d32.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_97fcdfbdeedbfe8fea1533b76877713c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_9cf2f5a20d4216a00ddbaafe1985cc3f.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_bb6dc18ce3effbc13de7245017d598a9.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_bd6308583a59b667b7c3bf18085fc557.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_c85daa479f1bda18639ed32774ca9257.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subdirs	src/doc/html/dir_e8f682ed1d0bb9523fd3c2d0b01524b6.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
subspace_B	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Matrix subspace_B() const { return subspace_B_; }$/;"	f	class:ceres::internal::DoglegStrategy
subspace_B_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Matrix2d subspace_B_;$/;"	m	class:ceres::internal::DoglegStrategy
subspace_basis	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Matrix subspace_basis() const { return subspace_basis_; }$/;"	f	class:ceres::internal::DoglegStrategy
subspace_basis_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Matrix subspace_basis_;$/;"	m	class:ceres::internal::DoglegStrategy
subspace_g	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector subspace_g() const { return subspace_g_; }$/;"	f	class:ceres::internal::DoglegStrategy
subspace_g_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  Vector2d subspace_g_;$/;"	m	class:ceres::internal::DoglegStrategy
subspace_is_one_dimensional_	ceres-solver/internal/ceres/dogleg_strategy.h	/^  bool subspace_is_one_dimensional_;$/;"	m	class:ceres::internal::DoglegStrategy
substr_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const string substr_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
substring_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const StringType substring_;$/;"	m	class:testing::internal::HasSubstrMatcher
success	ceres-solver/internal/ceres/line_search.h	/^    bool success;$/;"	m	struct:ceres::internal::LineSearch::Summary
success_	ceres-solver/internal/ceres/gtest/gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
successful_test_case_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::successful_test_case_count() const {$/;"	f	class:testing::UnitTest
successful_test_case_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::successful_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
successful_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestCase::successful_test_count() const {$/;"	f	class:testing::TestCase
successful_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::successful_test_count() const {$/;"	f	class:testing::UnitTest
successful_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::successful_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
sufficient_curvature_decrease	ceres-solver/internal/ceres/line_search.h	/^    double sufficient_curvature_decrease;$/;"	m	struct:ceres::internal::LineSearch::Options
sufficient_decrease	ceres-solver/internal/ceres/line_search.h	/^    double sufficient_decrease;$/;"	m	struct:ceres::internal::LineSearch::Options
suffix_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const StringType suffix_;$/;"	m	class:testing::internal::EndsWithMatcher
summary	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	ceres-solver/internal/ceres/execution_summary.h	/^  ExecutionSummary* summary_;$/;"	m	class:ceres::internal::ScopedExecutionTimer
summary_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
support_flag	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u32 support_flag;$/;"	m	struct:_rplidar_response_acc_board_flag_t
swap	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  void swap(scoped_array& p2) {$/;"	f	class:ceres::internal::scoped_array
swap	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  void swap(scoped_ptr& p2) {$/;"	f	class:ceres::internal::scoped_ptr
swap	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline void swap(scoped_array<C>& p1, scoped_array<C>& p2) {$/;"	f	namespace:ceres::internal
swap	ceres-solver/include/ceres/internal/scoped_ptr.h	/^inline void swap(scoped_ptr<C>& p1, scoped_ptr<C>& p2) {$/;"	f	namespace:ceres::internal
swap	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^void AssertionResult::swap(AssertionResult& other) {$/;"	f	class:testing::AssertionResult
swap	ceres-solver/internal/ceres/gtest/gtest.h	/^  friend void swap(scoped_ptr& a, scoped_ptr& b) {$/;"	f	struct:std::tr1::tuple_element
syncByte	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8 syncByte; \/\/must be RPLIDAR_CMD_SYNC_BYTE$/;"	m	struct:_rplidar_cmd_packet_t
syncByte1	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8  syncByte1; \/\/ must be RPLIDAR_ANS_SYNC_BYTE1$/;"	m	struct:_rplidar_ans_header_t
syncByte2	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8  syncByte2; \/\/ must be RPLIDAR_ANS_SYNC_BYTE2$/;"	m	struct:_rplidar_ans_header_t
sync_quality	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8    sync_quality;      \/\/ syncbit:1;syncbit_inverse:1;quality:6;$/;"	m	struct:_rplidar_response_measurement_node_t
system	build/catkin_generated/installspace/_setup_util.py	/^system = platform.system()$/;"	v
system	build/catkin_generated/stamps/Project/_setup_util.py.stamp	/^system = platform.system()$/;"	v
system	devel/_setup_util.py	/^system = platform.system()$/;"	v
t	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  Vec3 t;$/;"	m	struct:__anon38::EuclideanCamera	file:
t1	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double t1 = 0.1;$/;"	m	namespace:ceres::examples	file:
t2	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double t2 = 0.2;$/;"	m	namespace:ceres::examples	file:
t3	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double t3 = 0.3;$/;"	m	namespace:ceres::examples	file:
t_ab_measured_	ceres-solver/examples/slam/pose_graph_3d/pose_graph_3d_error_term.h	/^  const Pose3d t_ab_measured_;$/;"	m	class:ceres::examples::PoseGraph3dErrorTerm
t_be	ceres-solver/examples/slam/pose_graph_3d/types.h	/^  Pose3d t_be;$/;"	m	struct:ceres::examples::Constraint3d
tag_	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  std::string tag_;$/;"	m	class:MessageLogger
tan	ceres-solver/include/ceres/jet.h	/^Jet<T, N> tan(const Jet<T, N>& f) {$/;"	f	namespace:ceres
tan	ceres-solver/include/ceres/jet.h	/^inline double tan     (double x) { return std::tan(x);      }$/;"	f	namespace:ceres
tanh	ceres-solver/include/ceres/jet.h	/^Jet<T, N> tanh(const Jet<T, N>& f) {$/;"	f	namespace:ceres
tanh	ceres-solver/include/ceres/jet.h	/^inline double tanh    (double x) { return std::tanh(x);     }$/;"	f	namespace:ceres
target_length_	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  double  target_length_;$/;"	m	class:ceres::internal::CurveCostFunction	file:
target_pose	devel/include/logical_core/SetGoalRequest.h	/^  _target_pose_type target_pose;$/;"	m	struct:logical_core::SetGoalRequest_
target_pose	devel/include/vision_unit/SetGoalRequest.h	/^  _target_pose_type target_pose;$/;"	m	struct:vision_unit::SetGoalRequest_
target_pose-val	devel/share/common-lisp/ros/logical_core/srv/SetGoal.lisp	/^(cl:defmethod target_pose-val ((m <SetGoal-request>))$/;"	f
target_pose-val	devel/share/common-lisp/ros/vision_unit/srv/SetGoal.lisp	/^(cl:defmethod target_pose-val ((m <SetGoal-request>))$/;"	f
tear_down_tc_	ceres-solver/internal/ceres/gtest/gtest.h	/^  Test::TearDownTestCaseFunc tear_down_tc_;$/;"	m	class:testing::TestCase
templates_path	ceres-solver/docs/source/conf.py	/^templates_path = ['_templates']$/;"	v
terminate	src/rplidar_ros/sdk/src/arch/linux/thread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
terminate	src/rplidar_ros/sdk/src/arch/macOS/thread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
terminate	src/rplidar_ros/sdk/src/arch/win32/winthread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
termination_type	ceres-solver/include/ceres/gradient_problem_solver.h	/^    TerminationType termination_type;$/;"	m	struct:ceres::GradientProblemSolver::Summary
termination_type	ceres-solver/include/ceres/solver.h	/^    TerminationType termination_type;$/;"	m	struct:ceres::Solver::Summary
termination_type	ceres-solver/internal/ceres/linear_solver.h	/^    LinearSolverTerminationType termination_type;$/;"	m	struct:ceres::internal::LinearSolver::Summary
termination_type	ceres-solver/internal/ceres/trust_region_strategy.h	/^    LinearSolverTerminationType termination_type;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Summary
test_	ceres-solver/internal/ceres/gtest/gtest.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_base_name	ceres-solver/internal/ceres/gtest/gtest.h	/^    const string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_base_name	ceres-solver/internal/ceres/gtest/gtest.h	/^    const string test_case_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_indices_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::vector<int> test_case_indices_;$/;"	m	class:testing::internal::UnitTestImpl	file:
test_case_infos_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestCaseInfoContainer test_case_infos_;$/;"	m	class:testing::internal::ParameterizedTestCaseRegistry
test_case_name	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* test_case_name() const { return test_case_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_case_name_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const std::string test_case_name_;     \/\/ Test case name$/;"	m	class:testing::TestInfo
test_case_name_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const string test_case_name_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
test_case_to_run_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::test_case_to_run_count() const {$/;"	f	class:testing::UnitTest
test_case_to_run_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::test_case_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_cases_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  std::vector<TestCase*> test_cases_;$/;"	m	class:testing::internal::UnitTestImpl	file:
test_indices_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestCase
test_info_list	ceres-solver/internal/ceres/gtest/gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestCase
test_info_list	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestCase
test_info_list_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestCase
test_meta_factory	ceres-solver/internal/ceres/gtest/gtest.h	/^    const scoped_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_part_results	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static const std::vector<testing::TestPartResult>& test_part_results($/;"	f	class:testing::internal::TestResultAccessor
test_part_results	ceres-solver/internal/ceres/gtest/gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_properites_mutex_	ceres-solver/internal/ceres/gtest/gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	ceres-solver/internal/ceres/gtest/gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
test_property_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestResult::test_property_count() const {$/;"	f	class:testing::TestResult
test_srcdir	ceres-solver/internal/ceres/test_util.cc	/^DECLARE_string(test_srcdir);$/;"	v
test_to_run_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestCase::test_to_run_count() const {$/;"	f	class:testing::TestCase
test_to_run_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }$/;"	f	class:testing::UnitTest
test_to_run_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::test_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
testing	ceres-solver/internal/ceres/gmock/gmock.h	/^namespace testing {$/;"	n
testing	ceres-solver/internal/ceres/gmock/mock-log.h	/^namespace testing {$/;"	n
testing	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^namespace testing {$/;"	n	file:
testing	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace testing {$/;"	n
testing_internal	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace testing_internal {$/;"	n
tests_	ceres-solver/internal/ceres/gtest/gtest.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
texinfo_documents	ceres-solver/docs/source/conf.py	/^texinfo_documents = [$/;"	v
tf_factory	src/tf_tree/include/tf_tree/tf_factory.h	/^class tf_factory$/;"	c	namespace:autocar::tf_mul
tf_factory	src/tf_tree/src/tf_factory.cpp	/^tf_factory::tf_factory()$/;"	f	class:autocar::tf_mul::tf_factory
tf_mul	src/tf_tree/include/tf_tree/tf_factory.h	/^namespace tf_mul$/;"	n	namespace:autocar
tf_mul	src/tf_tree/include/tf_tree/tf_param.h	/^namespace tf_mul$/;"	n	namespace:autocar
tf_mul	src/tf_tree/src/tf_factory.cpp	/^namespace tf_mul$/;"	n	namespace:autocar	file:
tf_mul	src/tf_tree/src/tf_param.cpp	/^namespace tf_mul$/;"	n	namespace:autocar	file:
tf_param	src/tf_tree/include/tf_tree/tf_param.h	/^class tf_param$/;"	c	namespace:autocar::tf_mul
tf_param	src/tf_tree/src/tf_param.cpp	/^tf_param::tf_param()$/;"	f	class:autocar::tf_mul::tf_param
th	src/odometry/include/odometry/vel2odom.h	/^  double th; \/\/\/< yaw-axis coordinates of the car in map$/;"	m	class:autocar::odom_mul::vel2odom
theta	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T theta = (0.5 \/ M_PI)  * atan(x2 \/ x1) + (x1 > 0.0 ? 0.0 : 0.5);$/;"	m	namespace:ceres::examples	file:
thread_	ceres-solver/internal/ceres/gtest/gtest.h	/^  AutoHandle thread_;$/;"	m	class:std::tr1::ThreadWithParamBase
thread_	ceres-solver/internal/ceres/gtest/gtest.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:std::tr1::ThreadWithParam
thread_can_start_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    Notification* thread_can_start_;$/;"	m	struct:testing::internal::__anon26::ThreadWithParamSupport::ThreadMainParam	file:
thread_can_start_	ceres-solver/internal/ceres/gtest/gtest.h	/^  Notification* const thread_can_start_;$/;"	m	class:std::tr1::ThreadWithParam
thread_map_mutex_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  static Mutex thread_map_mutex_;$/;"	m	class:testing::internal::ThreadLocalRegistryImpl	file:
thread_proc_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef _word_size_t (THREAD_PROC * thread_proc_t ) ( void * );$/;"	t
throw_on_failure_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  bool throw_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
times	ceres-solver/internal/ceres/execution_summary.h	/^  const std::map<std::string, double>& times() const { return times_; }$/;"	f	class:ceres::internal::ExecutionSummary
times_	ceres-solver/internal/ceres/execution_summary.h	/^  std::map<std::string, double> times_;$/;"	m	class:ceres::internal::ExecutionSummary
times_mutex_	ceres-solver/internal/ceres/execution_summary.h	/^  Mutex times_mutex_;$/;"	m	class:ceres::internal::ExecutionSummary
tmp_e_cols_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  mutable Vector tmp_e_cols_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
tmp_e_cols_2_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  mutable Vector tmp_e_cols_2_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
tmp_f_cols_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  mutable Vector tmp_f_cols_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
tmp_rhs_	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  cholmod_dense* tmp_rhs_;$/;"	m	class:ceres::internal::VisibilityBasedPreconditioner
tmp_rows_	ceres-solver/internal/ceres/implicit_schur_complement.h	/^  mutable Vector tmp_rows_;$/;"	m	class:ceres::internal::ImplicitSchurComplement
to_light_rects	src/vision_unit/src/detect_factory/armor_detect.cpp	/^std::vector<cv::RotatedRect> armor_detecter::to_light_rects(const std::vector<std::vector<cv::Point>> &contours_light, const std::vector<std::vector<cv::Point>> &contours_brightness)$/;"	f	class:autocar::vision_mul::armor_detecter
toggleFolder	src/doc/html/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	src/doc/html/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	src/doc/html/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleSyncButton	src/doc/html/navtree.js	/^function toggleSyncButton(relpath)$/;"	f
toggleVisibility	src/doc/html/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
total_part_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestResult::total_part_count() const {$/;"	f	class:testing::TestResult
total_test_case_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::total_test_case_count() const {$/;"	f	class:testing::UnitTest
total_test_case_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::total_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int TestCase::total_test_count() const {$/;"	f	class:testing::TestCase
total_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTest::total_test_count() const { return impl()->total_test_count(); }$/;"	f	class:testing::UnitTest
total_test_count	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^int UnitTestImpl::total_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_time_in_seconds	ceres-solver/include/ceres/gradient_problem_solver.h	/^    double total_time_in_seconds;$/;"	m	struct:ceres::GradientProblemSolver::Summary
total_time_in_seconds	ceres-solver/include/ceres/solver.h	/^    double total_time_in_seconds;$/;"	m	struct:ceres::Solver::Summary
total_time_in_seconds	ceres-solver/internal/ceres/line_search.h	/^    double total_time_in_seconds;$/;"	m	struct:ceres::internal::LineSearch::Summary
tr1	ceres-solver/internal/ceres/gtest/gtest.h	/^namespace tr1 {$/;"	n	namespace:std
track	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  int track;$/;"	m	struct:__anon38::EuclideanPoint	file:
track	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  int track;$/;"	m	struct:__anon38::Marker	file:
trans	src/tf_tree/include/tf_tree/tf_factory.h	/^  tf::Vector3 *trans;$/;"	m	class:autocar::tf_mul::tf_factory
transfData	src/vision_unit/src/vision_lidar_fusion/lidar2camera_node.cpp	/^void Lidar2Camera::transfData(const sensor_msgs::LaserScan::ConstPtr scan)$/;"	f	class:Lidar2Camera
transformed_scan	devel/include/vision_unit/transformed_scan.h	/^typedef ::vision_unit::transformed_scan_<std::allocator<void> > transformed_scan;$/;"	t	namespace:vision_unit
transformed_scan	devel/lib/python2.7/dist-packages/vision_unit/msg/_transformed_scan.py	/^class transformed_scan(genpy.Message):$/;"	c
transformed_scan	devel/share/common-lisp/ros/vision_unit/msg/transformed_scan.lisp	/^(cl:defclass transformed_scan (<transformed_scan>)$/;"	f
transformed_scan	devel/share/gennodejs/ros/vision_unit/msg/_index.js	/^  transformed_scan: transformed_scan,$/;"	p	class:module.exports
transformed_scanConstPtr	devel/include/vision_unit/transformed_scan.h	/^typedef boost::shared_ptr< ::vision_unit::transformed_scan const> transformed_scanConstPtr;$/;"	t	namespace:vision_unit
transformed_scanPtr	devel/include/vision_unit/transformed_scan.h	/^typedef boost::shared_ptr< ::vision_unit::transformed_scan > transformed_scanPtr;$/;"	t	namespace:vision_unit
transformed_scan_	devel/include/vision_unit/transformed_scan.h	/^  transformed_scan_()$/;"	f	struct:vision_unit::transformed_scan_
transformed_scan_	devel/include/vision_unit/transformed_scan.h	/^  transformed_scan_(const ContainerAllocator& _alloc)$/;"	f	struct:vision_unit::transformed_scan_
transformed_scan_	devel/include/vision_unit/transformed_scan.h	/^struct transformed_scan_$/;"	s	namespace:vision_unit
transformed_scan_	src/vision_unit/include/vision_unit/vision_lidar_fusion/lidar2camera_node.h	/^  vision_unit::transformed_scan transformed_scan_;$/;"	m	class:Lidar2Camera
true_type	ceres-solver/internal/ceres/gtest/gtest.h	/^typedef bool_constant<true> true_type;$/;"	t	namespace:std::tr1
trust_region_minimizer_iterations_to_dump	ceres-solver/include/ceres/solver.h	/^    std::vector<int> trust_region_minimizer_iterations_to_dump;$/;"	m	struct:ceres::Solver::Options
trust_region_minimizer_iterations_to_dump	ceres-solver/internal/ceres/minimizer.h	/^    std::vector<int> trust_region_minimizer_iterations_to_dump;$/;"	m	struct:ceres::internal::Minimizer::Options
trust_region_problem_dump_directory	ceres-solver/include/ceres/solver.h	/^    std::string trust_region_problem_dump_directory;$/;"	m	struct:ceres::Solver::Options
trust_region_problem_dump_directory	ceres-solver/internal/ceres/minimizer.h	/^    std::string trust_region_problem_dump_directory;$/;"	m	struct:ceres::internal::Minimizer::Options
trust_region_problem_dump_format_type	ceres-solver/include/ceres/solver.h	/^    DumpFormatType trust_region_problem_dump_format_type;$/;"	m	struct:ceres::Solver::Options
trust_region_problem_dump_format_type	ceres-solver/internal/ceres/minimizer.h	/^    DumpFormatType trust_region_problem_dump_format_type;$/;"	m	struct:ceres::internal::Minimizer::Options
trust_region_radius	ceres-solver/include/ceres/iteration_callback.h	/^  double trust_region_radius;$/;"	m	struct:ceres::IterationSummary
trust_region_step_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector trust_region_step_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
trust_region_strategy	ceres-solver/internal/ceres/minimizer.h	/^    shared_ptr<TrustRegionStrategy> trust_region_strategy;$/;"	m	struct:ceres::internal::Minimizer::Options
trust_region_strategy_type	ceres-solver/include/ceres/solver.h	/^    TrustRegionStrategyType trust_region_strategy_type;$/;"	m	struct:ceres::Solver::Options
trust_region_strategy_type	ceres-solver/include/ceres/solver.h	/^    TrustRegionStrategyType trust_region_strategy_type;$/;"	m	struct:ceres::Solver::Summary
trust_region_strategy_type	ceres-solver/internal/ceres/trust_region_strategy.h	/^    TrustRegionStrategyType trust_region_strategy_type;$/;"	m	struct:ceres::internal::TrustRegionStrategy::Options
tsm	ceres-solver/internal/ceres/compressed_row_sparse_matrix_test.cc	/^  scoped_ptr<TripletSparseMatrix> tsm;$/;"	m	class:ceres::internal::CompressedRowSparseMatrixTest	file:
tsm	ceres-solver/internal/ceres/dense_sparse_matrix_test.cc	/^  scoped_ptr<TripletSparseMatrix> tsm;$/;"	m	class:ceres::internal::DenseSparseMatrixTest	file:
tsm	ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc	/^  scoped_ptr<TripletSparseMatrix> tsm;$/;"	m	class:ceres::internal::DynamicCompressedRowSparseMatrixTest	file:
tsm_	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.h	/^  scoped_ptr<TripletSparseMatrix> tsm_;$/;"	m	class:ceres::internal::BlockRandomAccessDiagonalMatrix
tsm_	ceres-solver/internal/ceres/block_random_access_sparse_matrix.h	/^  scoped_ptr<TripletSparseMatrix> tsm_;$/;"	m	class:ceres::internal::BlockRandomAccessSparseMatrix
tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^  tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(),$/;"	f	class:std::tr1::tuple
tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^  tuple() {}$/;"	f	class:std::tr1::tuple
tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^  tuple(const tuple& \/* t *\/)  {}$/;"	f	class:std::tr1::tuple
tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^  tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_),$/;"	f	class:std::tr1::tuple
tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^class tuple {$/;"	c	namespace:std::tr1
tuple	ceres-solver/internal/ceres/gtest/gtest.h	/^class tuple<> {$/;"	c	namespace:std::tr1
tuple2_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const Tuple2Matcher tuple2_matcher_;$/;"	m	class:testing::internal::BoundSecondMatcher
tuple_element	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct tuple_element : ::std::tr1::tuple_element<I, Tuple> {};$/;"	s	struct:testing::internal::TuplePolicy
tuple_element	ceres-solver/internal/ceres/gtest/gtest.h	/^  struct tuple_element : ::std::tuple_element<I, Tuple> {};$/;"	s	struct:testing::internal::TuplePolicy
tuple_element	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_element {$/;"	s	namespace:std::tr1
tuple_matcher_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const TupleMatcher tuple_matcher_;$/;"	m	class:testing::internal::PointwiseMatcher
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const size_t tuple_size = ::std::tr1::tuple_size<Tuple>::value;$/;"	m	struct:testing::internal::TuplePolicy
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const size_t tuple_size = ::std::tuple_size<Tuple>::value;$/;"	m	struct:testing::internal::TuplePolicy
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^const size_t TuplePolicy< ::std::tuple<Types...> >::tuple_size;$/;"	m	class:testing::internal::TuplePolicy
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^const size_t TuplePolicy<TupleT>::tuple_size;$/;"	m	class:testing::internal::TuplePolicy
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_0_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_10_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_1_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_2_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_3_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_4_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_5_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_6_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_7_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_8_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tuple_size	ceres-solver/internal/ceres/gtest/gtest.h	/^struct tuple_size<GTEST_9_TUPLE_(T) > {$/;"	s	namespace:std::tr1
tvec	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^    cv::Mat tvec;$/;"	m	class:autocar::vision_mul::armor_detect_node
type	ceres-solver/internal/ceres/casts.h	/^  typedef T type;$/;"	t	struct:ceres::identity_
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k1)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k3)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k5)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k7)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      GMOCK_FIELD_TYPE_(Tuple, k9)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      Matcher<A10> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      Matcher<A4> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      Matcher<A5> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      Matcher<A5>, Matcher<A6> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      Matcher<A5>, Matcher<A6>, Matcher<A7> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      Matcher<A5>, Matcher<A6>, Matcher<A7>, Matcher<A8> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^      Matcher<A5>, Matcher<A6>, Matcher<A7>, Matcher<A8>, Matcher<A9> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult10
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult2
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult3
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult4
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult5
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult6
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult7
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult8
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AllOfResult9
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult10
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult2
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult3
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult4
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult5
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult6
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult7
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult8
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  > type;$/;"	t	struct:testing::internal::AnyOfResult9
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple< > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0)> type;$/;"	t	class:testing::internal::TupleFields
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<Matcher<A1> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<Matcher<A1>, Matcher<A2> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3> > type;$/;"	t	struct:testing::internal::MatcherTuple
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef M1 type;$/;"	t	struct:testing::internal::AllOfResult1
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef M1 type;$/;"	t	struct:testing::internal::AnyOfResult1
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef RawContainer type;$/;"	t	class:testing::internal::StlContainerView
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef Result type();$/;"	t	class:testing::internal::SelectArgs
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef T type;$/;"	t	struct:testing::internal::RemoveConstFromKey
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef const T* type;$/;"	t	struct:testing::internal::DecayArray
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef internal::NativeArray<RawElement> type;$/;"	t	class:testing::internal::StlContainerView
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef std::pair<K, V> type;$/;"	t	struct:testing::internal::RemoveConstFromKey
type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef typename Pointer::element_type type;$/;"	t	struct:testing::internal::PointeeOf
type	ceres-solver/internal/ceres/gmock/gmock.h	/^struct PointeeOf<T*> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::PointeeOf
type	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct DecayArray { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::DecayArray
type	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct remove_reference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::remove_reference
type	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct remove_reference<T&> { typedef T type; }; \/\/ NOLINT$/;"	t	struct:testing::internal::remove_reference
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T12> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T26> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T40> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	ceres-solver/internal/ceres/gtest/gtest.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T0 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T1 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T2 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T3 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T4 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T5 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T6 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T7 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T8 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T9 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Types1<T> type;$/;"	t	struct:testing::internal::TypeList
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef bool type;$/;"	t	struct:testing::internal::AssertTypeEq
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef bool_constant<bool_value> type;$/;"	t	struct:std::tr1::bool_constant
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename RemoveConst<T>::type type[N];$/;"	t	struct:testing::internal::RemoveConst
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	ceres-solver/internal/ceres/gtest/gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	ceres-solver/internal/ceres/gtest/gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::EnableIf
type	ceres-solver/internal/ceres/integral_types.h	/^      type;$/;"	t	struct:ceres::internal::Integer
type	ceres-solver/internal/ceres/integral_types.h	/^      type;$/;"	t	struct:ceres::internal::UnsignedInteger
type	ceres-solver/internal/ceres/integral_types.h	/^  typedef kFalseType type;$/;"	t	struct:ceres::internal::Ternary
type	ceres-solver/internal/ceres/integral_types.h	/^  typedef kTrueType type;$/;"	t	struct:ceres::internal::Ternary
type	ceres-solver/internal/ceres/line_search_direction.h	/^    LineSearchDirectionType type;$/;"	m	struct:ceres::internal::LineSearchDirection::Options
type	ceres-solver/internal/ceres/linear_solver.h	/^    LinearSolverType type;$/;"	m	struct:ceres::internal::LinearSolver::Options
type	ceres-solver/internal/ceres/preconditioner.h	/^    PreconditionerType type;$/;"	m	struct:ceres::internal::Preconditioner::Options
type	src/rplidar_ros/sdk/include/rplidar_protocol.h	/^    _u8  type;$/;"	m	struct:_rplidar_ans_header_t
type	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^  int type;$/;"	m	class:autocar::vision_mul::armor_info
type_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  const TestPartResult::Type type_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
type_	ceres-solver/internal/ceres/gtest/gtest.h	/^  MutexType type_;$/;"	m	class:std::tr1::Mutex
type_	ceres-solver/internal/ceres/gtest/gtest.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_	ceres-solver/internal/ceres/line_search_direction.cc	/^  const NonlinearConjugateGradientType type_;$/;"	m	class:ceres::internal::NonlinearConjugateGradient	file:
type_equals	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T1, typename T2> struct type_equals : public false_type {};$/;"	s	namespace:testing::internal
type_equals	ceres-solver/internal/ceres/gmock/gmock.h	/^template <typename T> struct type_equals<T, T> : public true_type {};$/;"	s	namespace:testing::internal
type_param	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestCase
type_param	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestCase
type_param_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
typedef-members	src/doc/html/namespaceDBoW2.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
u	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double u[] = {4.0, 2.0, 1.0, 0.5, 0.25, 0.167, 0.125, 0.1,$/;"	m	namespace:ceres::examples	file:
u	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^    double u;$/;"	m	struct:ceres::internal::BundleAdjustmentProblem::BundlerResidual	file:
u_	ceres-solver/internal/ceres/gtest/gtest.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
u_result	src/rplidar_ros/sdk/include/rptypes.h	/^typedef uint32_t u_result;$/;"	t
uint16	ceres-solver/internal/ceres/integral_types.h	/^typedef UnsignedInteger<16>::type uint16;$/;"	t	namespace:ceres::internal
uint16_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint32	ceres-solver/internal/ceres/integral_types.h	/^typedef UnsignedInteger<32>::type uint32;$/;"	t	namespace:ceres::internal
uint32_t	ceres-solver/examples/libmv_bundle_adjuster.cc	/^typedef unsigned __int32 uint32_t;$/;"	t	file:
uint32_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint64	ceres-solver/internal/ceres/integral_types.h	/^typedef UnsignedInteger<64>::type uint64;$/;"	t	namespace:ceres::internal
uint64_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned __int64  uint64_t;$/;"	t
uint8	ceres-solver/internal/ceres/integral_types.h	/^typedef UnsignedInteger< 8>::type uint8;$/;"	t	namespace:ceres::internal
uint8_t	src/rplidar_ros/sdk/include/rptypes.h	/^typedef unsigned char     uint8_t;$/;"	t
uncaptured_fd_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int uncaptured_fd_;$/;"	m	class:testing::internal::CapturedStream	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem14::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem14	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem18::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem18	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem10::unconstrained_optimal_cost = 87.9458;$/;"	m	class:ceres::examples::TestProblem10	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem11::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem11	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem12::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem12	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem13::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem13	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem15::unconstrained_optimal_cost = 3.07505e-4;$/;"	m	class:ceres::examples::TestProblem15	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem16::unconstrained_optimal_cost = 85822.2;$/;"	m	class:ceres::examples::TestProblem16	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem17::unconstrained_optimal_cost = 5.46489e-5;$/;"	m	class:ceres::examples::TestProblem17	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem19::unconstrained_optimal_cost = 4.01377e-2;$/;"	m	class:ceres::examples::TestProblem19	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem1::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem1	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem2::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem2	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem3::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem3	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem4::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem4	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem5::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem5	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem6::unconstrained_optimal_cost = 124.362;$/;"	m	class:ceres::examples::TestProblem6	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem7::unconstrained_optimal_cost = 0.0;$/;"	m	class:ceres::examples::TestProblem7	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem8::unconstrained_optimal_cost = 8.21487e-3;$/;"	m	class:ceres::examples::TestProblem8	file:
unconstrained_optimal_cost	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem9::unconstrained_optimal_cost = 0.112793e-7;$/;"	m	class:ceres::examples::TestProblem9	file:
underlay_workspaces	build/catkin_generated/order_packages.py	/^underlay_workspaces = "\/home\/ubuntu\/dji_beta\/auto_car\/devel;\/opt\/ros\/kinetic".split(';') if "\/home\/ubuntu\/dji_beta\/auto_car\/devel;\/opt\/ros\/kinetic" != "" else []$/;"	v
uneliminated_row_begins_	ceres-solver/internal/ceres/schur_eliminator.h	/^  int uneliminated_row_begins_;$/;"	m	class:ceres::internal::SchurEliminator
unit_test_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultGlobalTestPartResultReporter	file:
unit_test_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultPerThreadTestPartResultReporter	file:
unlock	src/rplidar_ros/sdk/src/hal/locker.h	/^    void unlock()$/;"	f	class:rp::hal::Locker
untyped_actions_	ceres-solver/internal/ceres/gmock/gmock.h	/^  UntypedActions untyped_actions_;$/;"	m	class:testing::internal::ExpectationBase
untyped_expectations_	ceres-solver/internal/ceres/gmock/gmock.h	/^  UntypedExpectations untyped_expectations_;$/;"	m	class:testing::internal::UntypedFunctionMockerBase
untyped_on_call_specs_	ceres-solver/internal/ceres/gmock/gmock.h	/^  UntypedOnCallSpecs untyped_on_call_specs_;$/;"	m	class:testing::internal::UntypedFunctionMockerBase
updateStripes	src/doc/html/dynsections.js	/^function updateStripes()$/;"	f
update_state_every_iteration	ceres-solver/include/ceres/solver.h	/^    bool update_state_every_iteration;$/;"	m	struct:ceres::Solver::Options
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem14::upper_bounds[] = {0.0, 10.0, 100.0, 100.0};$/;"	m	class:ceres::examples::TestProblem14	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double TestProblem18::upper_bounds[] = {2.0, 8.0, 1.0, 7.0, 5.0, 5.0};$/;"	m	class:ceres::examples::TestProblem18	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem10::upper_bounds[] = {$/;"	m	class:ceres::examples::TestProblem10	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem11::upper_bounds[] = {10.0, 10.0, 10.0};$/;"	m	class:ceres::examples::TestProblem11	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem12::upper_bounds[] = {2.0, 9.5, 20.0};$/;"	m	class:ceres::examples::TestProblem12	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem13::upper_bounds[] = {$/;"	m	class:ceres::examples::TestProblem13	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem15::upper_bounds[] = {$/;"	m	class:ceres::examples::TestProblem15	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem16::upper_bounds[] = {100.0, 15.0, 0.0, 0.2};$/;"	m	class:ceres::examples::TestProblem16	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem17::upper_bounds[] = {$/;"	m	class:ceres::examples::TestProblem17	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem19::upper_bounds[] = {$/;"	m	class:ceres::examples::TestProblem19	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem1::upper_bounds[] = {kDoubleMax, kDoubleMax};$/;"	m	class:ceres::examples::TestProblem1	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem2::upper_bounds[] = {kDoubleMax, kDoubleMax};$/;"	m	class:ceres::examples::TestProblem2	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem3::upper_bounds[] = {1.0, 9.0};$/;"	m	class:ceres::examples::TestProblem3	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem4::upper_bounds[] = {1000000.0, 100.0};$/;"	m	class:ceres::examples::TestProblem4	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem5::upper_bounds[] = {10.0, 100.0};$/;"	m	class:ceres::examples::TestProblem5	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem6::upper_bounds[] = {kDoubleMax, kDoubleMax};$/;"	m	class:ceres::examples::TestProblem6	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem7::upper_bounds[] = {0.8, 1.0, 1.0};$/;"	m	class:ceres::examples::TestProblem7	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem8::upper_bounds[] = {$/;"	m	class:ceres::examples::TestProblem8	file:
upper_bounds	ceres-solver/examples/more_garbow_hillstrom.cc	/^const double TestProblem9::upper_bounds[] = {4.2, 2.0, 0.1};$/;"	m	class:ceres::examples::TestProblem9	file:
upper_bounds_	ceres-solver/internal/ceres/parameter_block.h	/^  scoped_array<double> upper_bounds_;$/;"	m	class:ceres::internal::ParameterBlock
use_approximate_eigenvalue_bfgs_scaling	ceres-solver/include/ceres/gradient_problem_solver.h	/^    bool use_approximate_eigenvalue_bfgs_scaling;$/;"	m	struct:ceres::GradientProblemSolver::Options
use_approximate_eigenvalue_bfgs_scaling	ceres-solver/include/ceres/solver.h	/^    bool use_approximate_eigenvalue_bfgs_scaling;$/;"	m	struct:ceres::Solver::Options
use_approximate_eigenvalue_bfgs_scaling	ceres-solver/internal/ceres/line_search_direction.h	/^    bool use_approximate_eigenvalue_bfgs_scaling;$/;"	m	struct:ceres::internal::LineSearchDirection::Options
use_approximate_eigenvalue_bfgs_scaling	ceres-solver/internal/ceres/minimizer.h	/^    bool use_approximate_eigenvalue_bfgs_scaling;$/;"	m	struct:ceres::internal::Minimizer::Options
use_approximate_eigenvalue_scaling_	ceres-solver/internal/ceres/line_search_direction.cc	/^  const bool use_approximate_eigenvalue_scaling_;$/;"	m	class:ceres::internal::BFGS	file:
use_approximate_eigenvalue_scaling_	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  const bool use_approximate_eigenvalue_scaling_;$/;"	m	class:ceres::internal::LowRankInverseHessian
use_automatic_ordering	ceres-solver/internal/ceres/test_util.h	/^  bool use_automatic_ordering;$/;"	m	struct:ceres::internal::SolverConfig
use_explicit_schur_complement	ceres-solver/include/ceres/solver.h	/^    bool use_explicit_schur_complement;$/;"	m	struct:ceres::Solver::Options
use_explicit_schur_complement	ceres-solver/internal/ceres/linear_solver.h	/^    bool use_explicit_schur_complement;$/;"	m	struct:ceres::internal::LinearSolver::Options
use_inner_iterations	ceres-solver/include/ceres/solver.h	/^    bool use_inner_iterations;$/;"	m	struct:ceres::Solver::Options
use_nonmonotonic_steps	ceres-solver/include/ceres/solver.h	/^    bool use_nonmonotonic_steps;$/;"	m	struct:ceres::Solver::Options
use_nonmonotonic_steps	ceres-solver/internal/ceres/minimizer.h	/^    bool use_nonmonotonic_steps;$/;"	m	struct:ceres::internal::Minimizer::Options
use_postordering	ceres-solver/include/ceres/solver.h	/^    bool use_postordering;$/;"	m	struct:ceres::Solver::Options
use_postordering	ceres-solver/internal/ceres/linear_solver.h	/^    bool use_postordering;$/;"	m	struct:ceres::internal::LinearSolver::Options
use_quaternions_	ceres-solver/examples/bal_problem.h	/^  bool use_quaternions_;$/;"	m	class:ceres::examples::BALProblem
usecols	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^                                     usecols = (1, 2, 3))$/;"	v
usecols	ceres-solver/examples/slam/pose_graph_3d/plot_results.py	/^                                    usecols = (1, 2, 3))$/;"	v
user_data_	ceres-solver/internal/ceres/c_api.cc	/^  void* user_data_;$/;"	m	class:CallbackCostFunction	file:
user_data_	ceres-solver/internal/ceres/c_api.cc	/^  void* user_data_;$/;"	m	class:CallbackLossFunction	file:
user_state	ceres-solver/internal/ceres/parameter_block.h	/^  const double* user_state() const { return user_state_; }$/;"	f	class:ceres::internal::ParameterBlock
user_state_	ceres-solver/internal/ceres/parameter_block.h	/^  double* user_state_;$/;"	m	class:ceres::internal::ParameterBlock
v	ceres-solver/include/ceres/jet.h	/^  Eigen::Matrix<T, N, 1, Eigen::DontAlign> v;$/;"	m	struct:ceres::Jet
v	ceres-solver/include/ceres/jet.h	/^  alignas(kAlignment) Eigen::Matrix<T, N, 1, kAlignOrNot> v;$/;"	m	struct:ceres::Jet
v	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^    double v;$/;"	m	struct:ceres::internal::BundleAdjustmentProblem::BundlerResidual	file:
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray10
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray11
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray12
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray13
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray14
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray15
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray16
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray17
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray18
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray19
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray20
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray21
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray22
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray23
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray24
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray25
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray26
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray27
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray28
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray29
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray30
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray31
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray32
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray33
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray34
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray35
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray36
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray37
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray38
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray39
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray40
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray41
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray42
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray43
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray44
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray45
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray46
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray47
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray48
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray49
v10_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray50
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray11
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray12
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray13
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray14
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray15
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray16
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray17
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray18
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray19
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray20
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray21
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray22
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray23
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray24
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray25
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray26
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray27
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray28
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray29
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray30
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray31
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray32
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray33
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray34
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray35
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray36
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray37
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray38
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray39
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray40
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray41
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray42
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray43
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray44
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray45
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray46
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray47
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray48
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray49
v11_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray50
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray12
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray13
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray14
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray15
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray16
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray17
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray18
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray19
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray20
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray21
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray22
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray23
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray24
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray25
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray26
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray27
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray28
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray29
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray30
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray31
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray32
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray33
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray34
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray35
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray36
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray37
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray38
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray39
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray40
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray41
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray42
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray43
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray44
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray45
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray46
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray47
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray48
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray49
v12_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray50
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray13
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray14
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray15
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray16
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray17
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray18
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray19
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray20
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray21
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray22
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray23
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray24
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray25
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray26
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray27
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray28
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray29
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray30
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray31
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray32
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray33
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray34
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray35
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray36
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray37
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray38
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray39
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray40
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray41
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray42
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray43
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray44
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray45
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray46
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray47
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray48
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray49
v13_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray50
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray14
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray15
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray16
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray17
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray18
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray19
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray20
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray21
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray22
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray23
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray24
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray25
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray26
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray27
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray28
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray29
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray30
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray31
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray32
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray33
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray34
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray35
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray36
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray37
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray38
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray39
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray40
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray41
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray42
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray43
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray44
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray45
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray46
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray47
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray48
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray49
v14_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray50
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray15
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray16
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray17
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray18
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray19
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray20
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray21
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray22
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray23
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray24
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray25
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray26
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray27
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray28
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray29
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray30
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray31
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray32
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray33
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray34
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray35
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray36
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray37
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray38
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray39
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray40
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray41
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray42
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray43
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray44
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray45
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray46
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray47
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray48
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray49
v15_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray50
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray16
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray17
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray18
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray19
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray20
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray21
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray22
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray23
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray24
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray25
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray26
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray27
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray28
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray29
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray30
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray31
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray32
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray33
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray34
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray35
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray36
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray37
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray38
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray39
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray40
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray41
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray42
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray43
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray44
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray45
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray46
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray47
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray48
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray49
v16_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray50
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray17
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray18
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray19
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray20
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray21
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray22
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray23
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray24
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray25
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray26
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray27
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray28
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray29
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray30
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray31
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray32
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray33
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray34
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray35
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray36
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray37
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray38
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray39
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray40
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray41
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray42
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray43
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray44
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray45
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray46
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray47
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray48
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray49
v17_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray50
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray18
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray19
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray20
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray21
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray22
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray23
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray24
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray25
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray26
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray27
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray28
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray29
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray30
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray31
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray32
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray33
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray34
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray35
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray36
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray37
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray38
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray39
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray40
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray41
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray42
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray43
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray44
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray45
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray46
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray47
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray48
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray49
v18_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray50
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray19
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray20
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray21
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray22
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray23
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray24
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray25
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray26
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray27
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray28
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray29
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray30
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray31
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray32
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray33
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray34
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray35
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray36
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray37
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray38
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray39
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray40
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray41
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray42
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray43
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray44
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray45
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray46
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray47
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray48
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray49
v19_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray50
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray1
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray10
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray11
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray12
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray13
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray14
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray15
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray16
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray17
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray18
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray19
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray2
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray20
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray21
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray22
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray23
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray24
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray25
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray26
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray27
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray28
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray29
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray3
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray30
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray31
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray32
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray33
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray34
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray35
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray36
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray37
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray38
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray39
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray4
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray40
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray41
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray42
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray43
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray44
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray45
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray46
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray47
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray48
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray49
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray5
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray50
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray6
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray7
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray8
v1_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray9
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray20
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray21
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray22
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray23
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray24
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray25
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray26
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray27
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray28
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray29
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray30
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray31
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray32
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray33
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray34
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray35
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray36
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray37
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray38
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray39
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray40
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray41
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray42
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray43
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray44
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray45
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray46
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray47
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray48
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray49
v20_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray50
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray21
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray22
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray23
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray24
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray25
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray26
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray27
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray28
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray29
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray30
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray31
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray32
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray33
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray34
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray35
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray36
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray37
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray38
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray39
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray40
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray41
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray42
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray43
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray44
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray45
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray46
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray47
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray48
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray49
v21_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray50
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray22
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray23
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray24
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray25
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray26
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray27
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray28
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray29
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray30
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray31
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray32
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray33
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray34
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray35
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray36
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray37
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray38
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray39
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray40
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray41
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray42
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray43
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray44
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray45
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray46
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray47
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray48
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray49
v22_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray50
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray23
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray24
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray25
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray26
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray27
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray28
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray29
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray30
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray31
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray32
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray33
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray34
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray35
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray36
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray37
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray38
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray39
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray40
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray41
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray42
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray43
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray44
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray45
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray46
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray47
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray48
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray49
v23_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray50
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray24
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray25
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray26
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray27
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray28
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray29
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray30
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray31
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray32
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray33
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray34
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray35
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray36
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray37
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray38
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray39
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray40
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray41
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray42
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray43
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray44
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray45
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray46
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray47
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray48
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray49
v24_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray50
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray25
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray26
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray27
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray28
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray29
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray30
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray31
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray32
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray33
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray34
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray35
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray36
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray37
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray38
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray39
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray40
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray41
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray42
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray43
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray44
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray45
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray46
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray47
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray48
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray49
v25_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray50
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray26
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray27
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray28
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray29
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray30
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray31
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray32
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray33
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray34
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray35
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray36
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray37
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray38
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray39
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray40
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray41
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray42
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray43
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray44
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray45
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray46
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray47
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray48
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray49
v26_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray50
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray27
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray28
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray29
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray30
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray31
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray32
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray33
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray34
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray35
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray36
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray37
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray38
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray39
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray40
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray41
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray42
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray43
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray44
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray45
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray46
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray47
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray48
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray49
v27_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray50
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray28
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray29
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray30
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray31
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray32
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray33
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray34
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray35
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray36
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray37
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray38
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray39
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray40
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray41
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray42
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray43
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray44
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray45
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray46
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray47
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray48
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray49
v28_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray50
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray29
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray30
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray31
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray32
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray33
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray34
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray35
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray36
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray37
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray38
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray39
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray40
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray41
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray42
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray43
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray44
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray45
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray46
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray47
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray48
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray49
v29_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray50
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray10
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray11
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray12
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray13
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray14
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray15
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray16
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray17
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray18
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray19
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray2
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray20
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray21
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray22
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray23
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray24
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray25
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray26
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray27
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray28
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray29
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray3
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray30
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray31
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray32
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray33
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray34
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray35
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray36
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray37
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray38
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray39
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray4
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray40
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray41
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray42
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray43
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray44
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray45
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray46
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray47
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray48
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray49
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray5
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray50
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray6
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray7
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray8
v2_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray9
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray30
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray31
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray32
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray33
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray34
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray35
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray36
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray37
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray38
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray39
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray40
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray41
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray42
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray43
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray44
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray45
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray46
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray47
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray48
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray49
v30_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray50
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray31
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray32
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray33
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray34
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray35
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray36
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray37
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray38
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray39
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray40
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray41
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray42
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray43
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray44
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray45
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray46
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray47
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray48
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray49
v31_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray50
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray32
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray33
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray34
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray35
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray36
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray37
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray38
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray39
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray40
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray41
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray42
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray43
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray44
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray45
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray46
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray47
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray48
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray49
v32_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray50
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray33
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray34
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray35
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray36
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray37
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray38
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray39
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray40
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray41
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray42
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray43
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray44
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray45
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray46
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray47
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray48
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray49
v33_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray50
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray34
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray35
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray36
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray37
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray38
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray39
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray40
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray41
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray42
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray43
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray44
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray45
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray46
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray47
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray48
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray49
v34_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray50
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray35
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray36
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray37
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray38
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray39
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray40
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray41
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray42
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray43
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray44
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray45
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray46
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray47
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray48
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray49
v35_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray50
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray36
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray37
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray38
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray39
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray40
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray41
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray42
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray43
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray44
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray45
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray46
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray47
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray48
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray49
v36_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray50
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray37
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray38
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray39
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray40
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray41
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray42
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray43
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray44
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray45
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray46
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray47
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray48
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray49
v37_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray50
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray38
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray39
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray40
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray41
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray42
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray43
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray44
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray45
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray46
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray47
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray48
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray49
v38_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray50
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray39
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray40
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray41
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray42
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray43
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray44
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray45
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray46
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray47
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray48
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray49
v39_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray50
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray10
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray11
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray12
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray13
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray14
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray15
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray16
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray17
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray18
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray19
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray20
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray21
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray22
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray23
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray24
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray25
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray26
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray27
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray28
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray29
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray3
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray30
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray31
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray32
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray33
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray34
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray35
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray36
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray37
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray38
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray39
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray4
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray40
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray41
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray42
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray43
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray44
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray45
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray46
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray47
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray48
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray49
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray5
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray50
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray6
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray7
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray8
v3_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray9
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray40
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray41
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray42
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray43
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray44
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray45
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray46
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray47
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray48
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray49
v40_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray50
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray41
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray42
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray43
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray44
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray45
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray46
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray47
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray48
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray49
v41_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray50
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray42
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray43
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray44
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray45
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray46
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray47
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray48
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray49
v42_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray50
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray43
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray44
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray45
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray46
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray47
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray48
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray49
v43_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray50
v44_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray44
v44_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray45
v44_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray46
v44_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray47
v44_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray48
v44_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray49
v44_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray50
v45_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray45
v45_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray46
v45_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray47
v45_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray48
v45_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray49
v45_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray50
v46_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray46
v46_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray47
v46_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray48
v46_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray49
v46_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray50
v47_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray47
v47_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray48
v47_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray49
v47_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray50
v48_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray48
v48_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray49
v48_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray50
v49_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray49
v49_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray50
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray10
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray11
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray12
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray13
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray14
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray15
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray16
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray17
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray18
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray19
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray20
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray21
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray22
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray23
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray24
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray25
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray26
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray27
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray28
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray29
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray30
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray31
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray32
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray33
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray34
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray35
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray36
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray37
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray38
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray39
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray4
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray40
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray41
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray42
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray43
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray44
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray45
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray46
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray47
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray48
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray49
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray5
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray50
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray6
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray7
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray8
v4_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray9
v50_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T50 v50_;$/;"	m	class:testing::internal::ValueArray50
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray10
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray11
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray12
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray13
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray14
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray15
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray16
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray17
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray18
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray19
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray20
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray21
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray22
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray23
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray24
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray25
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray26
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray27
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray28
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray29
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray30
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray31
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray32
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray33
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray34
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray35
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray36
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray37
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray38
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray39
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray40
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray41
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray42
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray43
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray44
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray45
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray46
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray47
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray48
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray49
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray5
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray50
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray6
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray7
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray8
v5_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray9
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray10
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray11
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray12
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray13
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray14
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray15
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray16
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray17
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray18
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray19
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray20
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray21
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray22
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray23
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray24
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray25
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray26
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray27
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray28
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray29
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray30
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray31
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray32
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray33
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray34
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray35
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray36
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray37
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray38
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray39
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray40
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray41
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray42
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray43
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray44
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray45
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray46
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray47
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray48
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray49
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray50
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray6
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray7
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray8
v6_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray9
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray10
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray11
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray12
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray13
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray14
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray15
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray16
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray17
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray18
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray19
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray20
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray21
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray22
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray23
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray24
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray25
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray26
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray27
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray28
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray29
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray30
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray31
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray32
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray33
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray34
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray35
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray36
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray37
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray38
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray39
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray40
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray41
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray42
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray43
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray44
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray45
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray46
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray47
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray48
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray49
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray50
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray7
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray8
v7_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray9
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray10
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray11
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray12
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray13
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray14
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray15
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray16
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray17
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray18
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray19
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray20
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray21
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray22
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray23
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray24
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray25
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray26
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray27
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray28
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray29
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray30
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray31
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray32
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray33
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray34
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray35
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray36
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray37
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray38
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray39
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray40
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray41
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray42
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray43
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray44
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray45
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray46
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray47
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray48
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray49
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray50
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray8
v8_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray9
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray10
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray11
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray12
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray13
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray14
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray15
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray16
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray17
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray18
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray19
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray20
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray21
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray22
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray23
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray24
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray25
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray26
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray27
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray28
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray29
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray30
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray31
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray32
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray33
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray34
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray35
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray36
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray37
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray38
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray39
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray40
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray41
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray42
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray43
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray44
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray45
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray46
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray47
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray48
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray49
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray50
v9_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray9
v_r	devel/include/ctrl_serial_comm/car_speed.h	/^  _v_r_type v_r;$/;"	m	struct:ctrl_serial_comm::car_speed_
v_r	devel/include/odometry/car_speed.h	/^  _v_r_type v_r;$/;"	m	struct:odometry::car_speed_
v_r	devel/include/serial_comm/car_speed.h	/^  _v_r_type v_r;$/;"	m	struct:serial_comm::car_speed_
v_r-val	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod v_r-val ((m <car_speed>))$/;"	f
v_r-val	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod v_r-val ((m <car_speed>))$/;"	f
v_r-val	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod v_r-val ((m <car_speed>))$/;"	f
v_w	src/serial_comm/include/comm_read.h	/^  int16_t v_w;$/;"	m	struct:autocar::serial_mul::__anon50
v_w	src/serial_communication/src/commRecv.cxx	/^    int16_t v_w;$/;"	m	struct:__anon48	file:
v_x	devel/include/ctrl_serial_comm/car_speed.h	/^  _v_x_type v_x;$/;"	m	struct:ctrl_serial_comm::car_speed_
v_x	devel/include/odometry/car_speed.h	/^  _v_x_type v_x;$/;"	m	struct:odometry::car_speed_
v_x	devel/include/serial_comm/car_speed.h	/^  _v_x_type v_x;$/;"	m	struct:serial_comm::car_speed_
v_x	src/serial_comm/include/comm_read.h	/^  int16_t v_x;$/;"	m	struct:autocar::serial_mul::__anon50
v_x	src/serial_communication/src/commRecv.cxx	/^    int16_t v_x;$/;"	m	struct:__anon48	file:
v_x-val	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod v_x-val ((m <car_speed>))$/;"	f
v_x-val	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod v_x-val ((m <car_speed>))$/;"	f
v_x-val	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod v_x-val ((m <car_speed>))$/;"	f
v_y	devel/include/ctrl_serial_comm/car_speed.h	/^  _v_y_type v_y;$/;"	m	struct:ctrl_serial_comm::car_speed_
v_y	devel/include/odometry/car_speed.h	/^  _v_y_type v_y;$/;"	m	struct:odometry::car_speed_
v_y	devel/include/serial_comm/car_speed.h	/^  _v_y_type v_y;$/;"	m	struct:serial_comm::car_speed_
v_y	src/serial_comm/include/comm_read.h	/^  int16_t v_y;$/;"	m	struct:autocar::serial_mul::__anon50
v_y	src/serial_communication/src/commRecv.cxx	/^    int16_t v_y;$/;"	m	struct:__anon48	file:
v_y-val	devel/share/common-lisp/ros/ctrl_serial_comm/msg/car_speed.lisp	/^(cl:defmethod v_y-val ((m <car_speed>))$/;"	f
v_y-val	devel/share/common-lisp/ros/odometry/msg/car_speed.lisp	/^(cl:defmethod v_y-val ((m <car_speed>))$/;"	f
v_y-val	devel/share/common-lisp/ros/serial_comm/msg/car_speed.lisp	/^(cl:defmethod v_y-val ((m <car_speed>))$/;"	f
va_copy	ceres-solver/internal/ceres/stringprintf.cc	59;"	d	file:
value	ceres-solver/internal/ceres/gmock/gmock.h	/^  enum { value = kOther };  \/\/ The default kind.$/;"	e	enum:testing::internal::KindOf::__anon5
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const bool value = __is_convertible(From, To);$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const bool value = bool_value;$/;"	m	struct:std::tr1::bool_constant
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const bool value =$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 0;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 10;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 1;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 2;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 3;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 4;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 5;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 6;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 7;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 8;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^  static const int value = 9;$/;"	m	struct:std::tr1::tuple_size
value	ceres-solver/internal/ceres/gtest/gtest.h	/^const bool ImplicitlyConvertible<From, To>::value;$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ceres-solver/internal/ceres/gtest/gtest.h	/^template <bool bool_value> const bool bool_constant<bool_value>::value;$/;"	m	class:std::tr1::bool_constant
value	ceres-solver/internal/ceres/polynomial.h	/^  double value;      \/\/ value = f(x)$/;"	m	struct:ceres::internal::FunctionSample
value	devel/include/console/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/console/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/console/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/console/serial_data.h	/^  static const char* value(const ::console::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/console/serial_data.h	/^  static const char* value(const ::console::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/console/serial_data.h	/^  static const char* value(const ::console::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/ctrl_serial_comm/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/ctrl_serial_comm/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/ctrl_serial_comm/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/ctrl_serial_comm/car_speed.h	/^  static const char* value(const ::ctrl_serial_comm::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/ctrl_serial_comm/car_speed.h	/^  static const char* value(const ::ctrl_serial_comm::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/ctrl_serial_comm/car_speed.h	/^  static const char* value(const ::ctrl_serial_comm::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/ctrl_serial_comm/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/ctrl_serial_comm/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/ctrl_serial_comm/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/ctrl_serial_comm/serial_data.h	/^  static const char* value(const ::ctrl_serial_comm::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/ctrl_serial_comm/serial_data.h	/^  static const char* value(const ::ctrl_serial_comm::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/ctrl_serial_comm/serial_data.h	/^  static const char* value(const ::ctrl_serial_comm::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/logical_core/SetGoal.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	devel/include/logical_core/SetGoal.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/logical_core/SetGoal.h	/^  static const char* value(const ::logical_core::SetGoal&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	devel/include/logical_core/SetGoal.h	/^  static const char* value(const ::logical_core::SetGoal&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/logical_core/SetGoal.h	/^  static const char* value(const ::logical_core::SetGoalRequest&)$/;"	f	struct:ros::service_traits::DataType
value	devel/include/logical_core/SetGoal.h	/^  static const char* value(const ::logical_core::SetGoalRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/logical_core/SetGoal.h	/^  static const char* value(const ::logical_core::SetGoalResponse&)$/;"	f	struct:ros::service_traits::DataType
value	devel/include/logical_core/SetGoal.h	/^  static const char* value(const ::logical_core::SetGoalResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/logical_core/SetGoalRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/logical_core/SetGoalRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/logical_core/SetGoalRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/logical_core/SetGoalRequest.h	/^  static const char* value(const ::logical_core::SetGoalRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/logical_core/SetGoalRequest.h	/^  static const char* value(const ::logical_core::SetGoalRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/logical_core/SetGoalRequest.h	/^  static const char* value(const ::logical_core::SetGoalRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/logical_core/SetGoalResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/logical_core/SetGoalResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/logical_core/SetGoalResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/logical_core/SetGoalResponse.h	/^  static const char* value(const ::logical_core::SetGoalResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/logical_core/SetGoalResponse.h	/^  static const char* value(const ::logical_core::SetGoalResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/logical_core/SetGoalResponse.h	/^  static const char* value(const ::logical_core::SetGoalResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/odometry/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/odometry/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/odometry/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/odometry/car_speed.h	/^  static const char* value(const ::odometry::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/odometry/car_speed.h	/^  static const char* value(const ::odometry::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/odometry/car_speed.h	/^  static const char* value(const ::odometry::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/serial_comm/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/serial_comm/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/serial_comm/car_speed.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/serial_comm/car_speed.h	/^  static const char* value(const ::serial_comm::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/serial_comm/car_speed.h	/^  static const char* value(const ::serial_comm::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/serial_comm/car_speed.h	/^  static const char* value(const ::serial_comm::car_speed_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/serial_comm/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/serial_comm/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/serial_comm/serial_data.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/serial_comm/serial_data.h	/^  static const char* value(const ::serial_comm::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/serial_comm/serial_data.h	/^  static const char* value(const ::serial_comm::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/serial_comm/serial_data.h	/^  static const char* value(const ::serial_comm::serial_data_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value(const ::vision_unit::SetGoal&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value(const ::vision_unit::SetGoal&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value(const ::vision_unit::SetGoalRequest&)$/;"	f	struct:ros::service_traits::DataType
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value(const ::vision_unit::SetGoalRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value(const ::vision_unit::SetGoalResponse&)$/;"	f	struct:ros::service_traits::DataType
value	devel/include/vision_unit/SetGoal.h	/^  static const char* value(const ::vision_unit::SetGoalResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	devel/include/vision_unit/SetGoalRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/SetGoalRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/SetGoalRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/SetGoalRequest.h	/^  static const char* value(const ::vision_unit::SetGoalRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/SetGoalRequest.h	/^  static const char* value(const ::vision_unit::SetGoalRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/SetGoalRequest.h	/^  static const char* value(const ::vision_unit::SetGoalRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/SetGoalResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/SetGoalResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/SetGoalResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/SetGoalResponse.h	/^  static const char* value(const ::vision_unit::SetGoalResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/SetGoalResponse.h	/^  static const char* value(const ::vision_unit::SetGoalResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/SetGoalResponse.h	/^  static const char* value(const ::vision_unit::SetGoalResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/armor_msg.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/armor_msg.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/armor_msg.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/armor_msg.h	/^  static const char* value(const ::vision_unit::armor_msg_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/armor_msg.h	/^  static const char* value(const ::vision_unit::armor_msg_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/armor_msg.h	/^  static const char* value(const ::vision_unit::armor_msg_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/transformed_scan.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/transformed_scan.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/transformed_scan.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	devel/include/vision_unit/transformed_scan.h	/^  static const char* value(const ::vision_unit::transformed_scan_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	devel/include/vision_unit/transformed_scan.h	/^  static const char* value(const ::vision_unit::transformed_scan_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	devel/include/vision_unit/transformed_scan.h	/^  static const char* value(const ::vision_unit::transformed_scan_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^    Result value_;$/;"	m	class:testing::internal::ReturnAction::Impl
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^    T value_;$/;"	m	class:testing::internal::ReturnRefOfCopyAction::Impl
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const T value_;$/;"	m	class:testing::DefaultValue::FixedValueProducer
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^  T value_;$/;"	m	class:testing::internal::ReferenceOrValueWrapper
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const A value_;$/;"	m	class:testing::internal::SetArgumentPointeeAction
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const T value_;$/;"	m	class:testing::internal::ReturnRefOfCopyAction
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const T2 value_;$/;"	m	class:testing::internal::AssignAction
value_	ceres-solver/internal/ceres/gmock/gmock.h	/^  const linked_ptr<R> value_;$/;"	m	class:testing::internal::ReturnAction
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    T value_;$/;"	m	class:std::tr1::ThreadLocal::ValueHolder
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    const T value_;  \/\/ The value for each thread.$/;"	m	class:std::tr1::ThreadLocal::InstanceValueHolderFactory
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^    mutable scoped_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T value_;$/;"	m	class:std::tr1::ThreadLocal
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^  T* value_;$/;"	m	class:testing::internal::linked_ptr
value_	ceres-solver/internal/ceres/gtest/gtest.h	/^  std::string value_;$/;"	m	class:testing::TestProperty
value_before_cast_	ceres-solver/internal/ceres/gmock/gmock.h	/^    R value_before_cast_;$/;"	m	class:testing::internal::ReturnAction::Impl
value_is_valid	ceres-solver/internal/ceres/polynomial.h	/^  bool value_is_valid;$/;"	m	struct:ceres::internal::FunctionSample
value_param	ceres-solver/internal/ceres/gtest/gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	ceres-solver/internal/ceres/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_ptr_	ceres-solver/internal/ceres/gmock/gmock.h	/^  T* value_ptr_;$/;"	m	class:testing::internal::ReferenceOrValueWrapper
value_type	ceres-solver/include/ceres/internal/fixed_array.h	/^  typedef T value_type;$/;"	t	class:ceres::internal::FixedArray
value_type	ceres-solver/internal/ceres/gmock/gmock.h	/^  typedef Expectation::Set::value_type value_type;$/;"	t	class:testing::ExpectationSet
value_type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef T value_type;$/;"	t	struct:std::tr1::IteratorTraits
value_type	ceres-solver/internal/ceres/gtest/gtest.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	struct:std::tr1::IteratorTraits
values	ceres-solver/include/ceres/crs_matrix.h	/^  std::vector<double> values;$/;"	m	struct:ceres::CRSMatrix
values	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  const double* values() const { return values_.get(); }$/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
values	ceres-solver/internal/ceres/block_random_access_matrix.h	/^  double* values;$/;"	m	struct:ceres::internal::CellInfo
values	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  virtual const double* values() const { return values_.get(); }$/;"	f	class:ceres::internal::BlockSparseMatrix
values	ceres-solver/internal/ceres/compressed_col_sparse_matrix_utils_test.cc	/^  vector<double> values;$/;"	m	class:ceres::internal::SolveUpperTriangularTest	file:
values	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  virtual const double* values() const { return &values_[0]; }$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
values	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^  virtual const double* values() const { return m_.data(); }$/;"	f	class:ceres::internal::DenseSparseMatrix
values	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  virtual const double* values()  const { return values_.get(); }$/;"	f	class:ceres::internal::TripletSparseMatrix
values_	ceres-solver/internal/ceres/block_random_access_dense_matrix.h	/^  scoped_array<double> values_;$/;"	m	class:ceres::internal::BlockRandomAccessDenseMatrix
values_	ceres-solver/internal/ceres/block_sparse_matrix.h	/^  scoped_array<double> values_;$/;"	m	class:ceres::internal::BlockSparseMatrix
values_	ceres-solver/internal/ceres/compressed_row_sparse_matrix.h	/^  std::vector<double> values_;$/;"	m	class:ceres::internal::CompressedRowSparseMatrix
values_	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  scoped_array<double> values_;$/;"	m	class:ceres::internal::BiCubicInterpolatorTest	file:
values_	ceres-solver/internal/ceres/cubic_interpolation_test.cc	/^  scoped_array<double> values_;$/;"	m	class:ceres::internal::CubicInterpolatorTest	file:
values_	ceres-solver/internal/ceres/triplet_sparse_matrix.h	/^  scoped_array<double> values_;$/;"	m	class:ceres::internal::TripletSparseMatrix
variable_	ceres-solver/internal/ceres/c_api_test.cc	/^  T* variable_;$/;"	m	class:ceres::internal::ScopedSetValue	file:
vel2odom	src/odometry/include/odometry/vel2odom.h	/^class vel2odom$/;"	c	namespace:autocar::odom_mul
vel2odom	src/odometry/src/vel2odom.cpp	/^vel2odom::vel2odom():x(0.0), y(0.0), th(0.0), vx(0.0), vy(0.0), vth(0.0)$/;"	f	class:autocar::odom_mul::vel2odom
vel_callback	src/serial_comm/src/comm_write_node.cpp	/^void vel_callback(const geometry_msgs::Twist& vel_data)$/;"	f
vel_callback	src/serial_communication/src/commSend.cxx	/^void vel_callback(const geometry_msgs::Twist& vel_data)$/;"	f
version	ceres-solver/docs/source/conf.py	/^version = '1.12'$/;"	v
vertex_weights_	ceres-solver/internal/ceres/graph.h	/^  HashMap<Vertex, double> vertex_weights_;$/;"	m	class:ceres::internal::WeightedGraph
vertices	ceres-solver/internal/ceres/graph.h	/^  const HashSet<Vertex>& vertices() const {$/;"	f	class:ceres::internal::Graph
vertices	ceres-solver/internal/ceres/graph.h	/^  const HashSet<Vertex>& vertices() const {$/;"	f	class:ceres::internal::WeightedGraph
vertices_	ceres-solver/internal/ceres/graph.h	/^  HashSet<Vertex> vertices_;$/;"	m	class:ceres::internal::Graph
vertices_	ceres-solver/internal/ceres/graph.h	/^  HashSet<Vertex> vertices_;$/;"	m	class:ceres::internal::WeightedGraph
video_recoder	src/vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^    class video_recoder {$/;"	c	namespace:autocar::vision_mul
video_recoder	src/vision_unit/src/detect_factory/video_recoder.cpp	/^video_recoder::video_recoder(std::string video_dir_, int cols_, int rows_)$/;"	f	class:autocar::vision_mul::video_recoder
view_score_weight	ceres-solver/internal/ceres/canonical_views_clustering.h	/^  double view_score_weight;$/;"	m	struct:ceres::internal::CanonicalViewsClusteringOptions
view_to_canonical_view_	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^  IntMap view_to_canonical_view_;$/;"	m	class:ceres::internal::CanonicalViewsClustering	file:
view_to_canonical_view_similarity_	ceres-solver/internal/ceres/canonical_views_clustering.cc	/^  HashMap<int, double> view_to_canonical_view_similarity_;$/;"	m	class:ceres::internal::CanonicalViewsClustering	file:
visibility_clustering_type	ceres-solver/include/ceres/solver.h	/^    VisibilityClusteringType visibility_clustering_type;$/;"	m	struct:ceres::Solver::Options
visibility_clustering_type	ceres-solver/include/ceres/solver.h	/^    VisibilityClusteringType visibility_clustering_type;$/;"	m	struct:ceres::Solver::Summary
visibility_clustering_type	ceres-solver/internal/ceres/linear_solver.h	/^    VisibilityClusteringType visibility_clustering_type;$/;"	m	struct:ceres::internal::LinearSolver::Options
visibility_clustering_type	ceres-solver/internal/ceres/preconditioner.h	/^    VisibilityClusteringType visibility_clustering_type;$/;"	m	struct:ceres::internal::Preconditioner::Options
visionLidar_fusion	src/vision_unit/src/vision_lidar_fusion/vision_lidar_fusion.cpp	/^VisionLidarFusion::visionLidar_fusion()$/;"	f	class:VisionLidarFusion
vision_callback	src/serial_comm/src/comm_write_node.cpp	/^void vision_callback(const vision_unit::armor_msg& vision_data)$/;"	f
vision_callback	src/serial_communication/src/commSend.cxx	/^void vision_callback(const vision_unit::armor_msg& vision_data)$/;"	f
vision_data_d	src/serial_comm/include/comm_write.h	/^    int16_t vision_data_d;$/;"	m	struct:autocar::serial_mul::__anon49
vision_data_d	src/serial_communication/src/commSend.cxx	/^    int16_t vision_data_d;$/;"	m	struct:__anon47	file:
vision_data_status	src/serial_comm/include/comm_write.h	/^    uint8_t vision_data_status;$/;"	m	struct:autocar::serial_mul::__anon49
vision_data_status	src/serial_communication/src/commSend.cxx	/^    uint8_t vision_data_status;$/;"	m	struct:__anon47	file:
vision_data_x	src/serial_comm/include/comm_write.h	/^    int16_t vision_data_x;$/;"	m	struct:autocar::serial_mul::__anon49
vision_data_x	src/serial_communication/src/commSend.cxx	/^    int16_t vision_data_x;$/;"	m	struct:__anon47	file:
vision_data_y	src/serial_comm/include/comm_write.h	/^    int16_t vision_data_y;$/;"	m	struct:autocar::serial_mul::__anon49
vision_data_y	src/serial_communication/src/commSend.cxx	/^    int16_t vision_data_y;$/;"	m	struct:__anon47	file:
vision_mul	src/vision_unit/include/vision_unit/detect_factory/armor_detect.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	src/vision_unit/include/vision_unit/detect_factory/armor_detect_node.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	src/vision_unit/include/vision_unit/detect_factory/detect_factory.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	src/vision_unit/include/vision_unit/detect_factory/image_utility.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	src/vision_unit/include/vision_unit/detect_factory/labeler.h	/^namespace vision_mul {$/;"	n	namespace:autocar
vision_mul	src/vision_unit/include/vision_unit/detect_factory/rune_detect.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	src/vision_unit/include/vision_unit/detect_factory/util.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	src/vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^namespace vision_mul$/;"	n	namespace:autocar
vision_mul	src/vision_unit/src/detect_factory/armor_detect.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	src/vision_unit/src/detect_factory/image_utility.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	src/vision_unit/src/detect_factory/labeler.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	src/vision_unit/src/detect_factory/rune_detect.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	src/vision_unit/src/detect_factory/util.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	src/vision_unit/src/detect_factory/video_recoder.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_mul	src/vision_unit/src/detect_factory/vision_param.cpp	/^namespace vision_mul$/;"	n	namespace:autocar	file:
vision_param	src/vision_unit/src/detect_factory/vision_param.cpp	/^vision_param::vision_param()$/;"	f	class:autocar::vision_mul::vision_param
vision_unit	devel/include/vision_unit/SetGoal.h	/^namespace vision_unit$/;"	n
vision_unit	devel/include/vision_unit/SetGoalRequest.h	/^namespace vision_unit$/;"	n
vision_unit	devel/include/vision_unit/SetGoalResponse.h	/^namespace vision_unit$/;"	n
vision_unit	devel/include/vision_unit/armor_msg.h	/^namespace vision_unit$/;"	n
vision_unit	devel/include/vision_unit/transformed_scan.h	/^namespace vision_unit$/;"	n
vision_unit-msg	devel/share/common-lisp/ros/vision_unit/msg/_package.lisp	/^(cl:defpackage vision_unit-msg$/;"	f
vision_unit-srv	devel/share/common-lisp/ros/vision_unit/srv/_package.lisp	/^(cl:defpackage vision_unit-srv$/;"	f
vision_unit::SetGoal	devel/share/roseus/ros/vision_unit/srv/SetGoal.l	/^(defclass vision_unit::SetGoal$/;"	f
vision_unit::SetGoalRequest	devel/share/roseus/ros/vision_unit/srv/SetGoal.l	/^(defclass vision_unit::SetGoalRequest$/;"	f
vision_unit::SetGoalRequest	devel/share/roseus/ros/vision_unit/srv/SetGoal.l	/^(defmethod vision_unit::SetGoalRequest$/;"	f
vision_unit::SetGoalResponse	devel/share/roseus/ros/vision_unit/srv/SetGoal.l	/^(defclass vision_unit::SetGoalResponse$/;"	f
vision_unit::SetGoalResponse	devel/share/roseus/ros/vision_unit/srv/SetGoal.l	/^(defmethod vision_unit::SetGoalResponse$/;"	f
vision_unit::armor_msg	devel/share/roseus/ros/vision_unit/msg/armor_msg.l	/^(defclass vision_unit::armor_msg$/;"	f
vision_unit::armor_msg	devel/share/roseus/ros/vision_unit/msg/armor_msg.l	/^(defmethod vision_unit::armor_msg$/;"	f
vision_unit::transformed_scan	devel/share/roseus/ros/vision_unit/msg/transformed_scan.l	/^(defclass vision_unit::transformed_scan$/;"	f
vision_unit::transformed_scan	devel/share/roseus/ros/vision_unit/msg/transformed_scan.l	/^(defmethod vision_unit::transformed_scan$/;"	f
vsnprintf	ceres-solver/internal/ceres/gmock_gtest_all.cc	1594;"	d	file:
vth	src/odometry/include/odometry/vel2odom.h	/^  double vth;\/\/\/< yaw-axis velocity of the car$/;"	m	class:autocar::odom_mul::vel2odom
vx	src/odometry/include/odometry/vel2odom.h	/^  double vx; \/\/\/< x-axis velocity of the car$/;"	m	class:autocar::odom_mul::vel2odom
vy	src/odometry/include/odometry/vel2odom.h	/^  double vy; \/\/\/< y-axis velocity of the car$/;"	m	class:autocar::odom_mul::vel2odom
w	ceres-solver/internal/ceres/problem_test.cc	/^  double y[4], z[5], w[3];$/;"	m	struct:ceres::internal::DynamicProblem	file:
w_	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^  double x_[3], y_[4], z_[5], w_[6];$/;"	m	class:ceres::internal::SchurOrderingTest	file:
wait	src/rplidar_ros/sdk/src/hal/event.h	/^    unsigned long wait( unsigned long timeout = 0xFFFFFFFF )$/;"	f	class:rp::hal::Event
waitfordata	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitfordata(size_t data_count, _u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitfordata	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitfordata(_word_size_t data_count, _u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitfordata	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitfordata(size_t data_count, _u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
whitelisted_packages	build/catkin_generated/order_packages.py	/^whitelisted_packages = "".split(';') if "" != "" else []$/;"	v
width	ceres-solver/examples/pgm_image.h	/^int PGMImage<Real>::width() const {$/;"	f	class:ceres::examples::PGMImage
width_	ceres-solver/examples/pgm_image.h	/^  int height_, width_;$/;"	m	class:ceres::examples::PGMImage
work_	ceres-solver/internal/ceres/dense_qr_solver.h	/^  Vector work_;$/;"	m	class:ceres::internal::DenseQRSolver
working_mode	src/rplidar_ros/sdk/include/rplidar_cmd.h	/^    _u8   working_mode;$/;"	m	struct:_rplidar_payload_express_scan_t
wrapped_cost_function_	ceres-solver/include/ceres/conditioned_cost_function.h	/^  internal::scoped_ptr<CostFunction> wrapped_cost_function_;$/;"	m	class:ceres::ConditionedCostFunction
wrapper_	ceres-solver/internal/ceres/gmock/gmock.h	/^    const linked_ptr<R> wrapper_;$/;"	m	class:testing::internal::ReturnAction::Impl
writeCookie	src/doc/html/resize.js	/^function writeCookie(cookie, val, expiration) $/;"	f
write_data	src/serial_comm/src/comm_write.cpp	/^void comm_write::write_data(autocar::serial_mul::data_t data_to_write)$/;"	f	class:autocar::serial_mul::comm_write
write_fd	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
write_fd	ceres-solver/internal/ceres/gtest/gtest.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  int write_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
write_fd_	ceres-solver/internal/ceres/gtest/gtest.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_handle_	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  AutoHandle write_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
write_setup	src/serial_comm/src/comm_write.cpp	/^bool comm_write::write_setup()$/;"	f	class:autocar::serial_mul::comm_write
writer	src/vision_unit/include/vision_unit/detect_factory/video_recoder.h	/^        cv::VideoWriter writer;$/;"	m	class:autocar::vision_mul::video_recoder
x	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  double x, y;$/;"	m	struct:__anon38::Marker	file:
x	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  double x;$/;"	m	struct:ceres::examples::Constraint2d
x	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  double x;$/;"	m	struct:ceres::examples::Pose2d
x	ceres-solver/internal/ceres/evaluator_test.cc	/^  double x[2];$/;"	m	struct:ceres::internal::EvaluatorTest	file:
x	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^  scoped_array<double> x;$/;"	m	struct:ceres::internal::LinearLeastSquaresProblem
x	ceres-solver/internal/ceres/polynomial.h	/^  double x;$/;"	m	struct:ceres::internal::FunctionSample
x	ceres-solver/internal/ceres/schur_complement_solver_test.cc	/^  Vector x;$/;"	m	class:ceres::internal::SchurComplementSolverTest	file:
x	ceres-solver/internal/ceres/solver_test.cc	/^  double *x;$/;"	m	struct:ceres::internal::RememberingCallback	file:
x	devel/include/vision_unit/armor_msg.h	/^  _x_type x;$/;"	m	struct:vision_unit::armor_msg_
x	src/odometry/include/odometry/vel2odom.h	/^  double x;  \/\/\/< X-axis coordinates of the car in map$/;"	m	class:autocar::odom_mul::vel2odom
x	src/serial_comm/include/comm_read.h	/^  uint32_t x;$/;"	m	struct:autocar::serial_mul::__anon50
x	src/serial_communication/src/commRecv.cxx	/^    uint32_t x;$/;"	m	struct:__anon48	file:
x	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double x;$/;"	m	struct:AbsPos
x	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double x;$/;"	m	struct:RelPos
x-val	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod x-val ((m <armor_msg>))$/;"	f
x0_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  double x0_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
x1	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x1 = x[0];$/;"	m	namespace:ceres::examples	file:
x10	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x10 = x[9];$/;"	m	namespace:ceres::examples	file:
x11	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x11 = x[10];$/;"	m	namespace:ceres::examples	file:
x1_	ceres-solver/examples/libmv_homography.cc	/^  const Mat &x1_;$/;"	m	class:__anon41::TerminationCheckingCallback	file:
x1_	ceres-solver/examples/nist.cc	/^  double x1_;$/;"	m	struct:ceres::examples::Nelson	file:
x2	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x2 = x[1];$/;"	m	namespace:ceres::examples	file:
x2_	ceres-solver/examples/libmv_homography.cc	/^  const Mat &x2_;$/;"	m	class:__anon41::TerminationCheckingCallback	file:
x2_	ceres-solver/examples/nist.cc	/^  double x2_;$/;"	m	struct:ceres::examples::Nelson	file:
x3	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x3 = x[2];$/;"	m	namespace:ceres::examples	file:
x4	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x4 = x[3];$/;"	m	namespace:ceres::examples	file:
x5	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x5 = x[4];$/;"	m	namespace:ceres::examples	file:
x6	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x6 = x[5];$/;"	m	namespace:ceres::examples	file:
x7	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x7 = x[6];$/;"	m	namespace:ceres::examples	file:
x8	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x8 = x[7];$/;"	m	namespace:ceres::examples	file:
x9	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const T x9 = x[8];$/;"	m	namespace:ceres::examples	file:
x_	ceres-solver/examples/curve_fitting.cc	/^  const double x_;$/;"	m	struct:ExponentialResidual	file:
x_	ceres-solver/examples/libmv_homography.cc	/^  const Vec2 x_;$/;"	m	class:__anon41::HomographySymmetricGeometricCostFunctor	file:
x_	ceres-solver/examples/robust_curve_fitting.cc	/^  const double x_;$/;"	m	struct:ExponentialResidual	file:
x_	ceres-solver/internal/ceres/dogleg_strategy_test.cc	/^  Vector x_;$/;"	m	class:ceres::internal::__anon36::Fixture	file:
x_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> x_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
x_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double> x_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
x_	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^  double x_[3], y_[4], z_[5], w_[6];$/;"	m	class:ceres::internal::SchurOrderingTest	file:
x_	ceres-solver/internal/ceres/reorder_program_test.cc	/^  double x_;$/;"	m	class:ceres::internal::ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest	file:
x_	ceres-solver/internal/ceres/system_test.cc	/^  double x_[4];$/;"	m	class:ceres::internal::PowellsFunction	file:
x_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  Vector x_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
x_	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  double x_;$/;"	m	class:ceres::internal::LinearSolverAndEvaluatorCreationTest	file:
x_D	ceres-solver/internal/ceres/linear_least_squares_problems.h	/^  scoped_array<double> x_D;$/;"	m	struct:ceres::internal::LinearLeastSquaresProblem
x_cost_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double x_cost_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
x_delta_indices_	ceres-solver/examples/fields_of_experts.h	/^  std::vector<int> x_delta_indices_, y_delta_indices_;$/;"	m	class:ceres::examples::FieldsOfExperts
x_norm_	ceres-solver/internal/ceres/trust_region_minimizer.h	/^  double x_norm_;$/;"	m	class:ceres::internal::TrustRegionMinimizer
x_values	ceres-solver/internal/ceres/solver_test.cc	/^  std::vector<double> x_values;$/;"	m	struct:ceres::internal::RememberingCallback	file:
xx_	ceres-solver/examples/circle_fit.cc	/^  double xx_, yy_;$/;"	m	class:DistanceFromCircleCost	file:
y	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  double x, y;$/;"	m	struct:__anon38::Marker	file:
y	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double y[] = {0.0009, 0.0044, 0.0175, 0.0540, 0.1295, 0.2420, 0.3521,$/;"	m	namespace:ceres::examples	file:
y	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double y[] = {0.1957, 0.1947, 0.1735, 0.1600, 0.0844, 0.0627,$/;"	m	namespace:ceres::examples	file:
y	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double y[] = {0.844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.850, 0.818,$/;"	m	namespace:ceres::examples	file:
y	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double y[] = {1.366, 1.191, 1.112, 1.013, 0.991,$/;"	m	namespace:ceres::examples	file:
y	ceres-solver/examples/more_garbow_hillstrom.cc	/^  const double y[] = {34780, 28610, 23650, 19630, 16370, 13720, 11540, 9744,$/;"	m	namespace:ceres::examples	file:
y	ceres-solver/examples/more_garbow_hillstrom.cc	/^  double y[] = {0.14, 0.18, 0.22, 0.25,$/;"	m	namespace:ceres::examples	file:
y	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  double y;$/;"	m	struct:ceres::examples::Constraint2d
y	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  double y;$/;"	m	struct:ceres::examples::Pose2d
y	ceres-solver/internal/ceres/evaluator_test.cc	/^  double y[3];$/;"	m	struct:ceres::internal::EvaluatorTest	file:
y	ceres-solver/internal/ceres/problem_test.cc	/^  double y[4], z[5], w[3];$/;"	m	struct:ceres::internal::DynamicProblem	file:
y	devel/include/vision_unit/armor_msg.h	/^  _y_type y;$/;"	m	struct:vision_unit::armor_msg_
y	src/odometry/include/odometry/vel2odom.h	/^  double y;  \/\/\/< y-axis coordinates of the car in map$/;"	m	class:autocar::odom_mul::vel2odom
y	src/serial_comm/include/comm_read.h	/^  uint32_t y;$/;"	m	struct:autocar::serial_mul::__anon50
y	src/serial_communication/src/commRecv.cxx	/^    uint32_t y;$/;"	m	struct:__anon48	file:
y	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double y;$/;"	m	struct:AbsPos
y	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double y;$/;"	m	struct:RelPos
y-val	devel/share/common-lisp/ros/vision_unit/msg/armor_msg.lisp	/^(cl:defmethod y-val ((m <armor_msg>))$/;"	f
y0_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  double y0_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
y1_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  double y1_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
y_	ceres-solver/examples/curve_fitting.cc	/^  const double y_;$/;"	m	struct:ExponentialResidual	file:
y_	ceres-solver/examples/ellipse_approximation.cc	/^  const Eigen::Vector2d y_;$/;"	m	class:PointToLineSegmentContourCostFunction	file:
y_	ceres-solver/examples/libmv_homography.cc	/^  const Vec2 y_;$/;"	m	class:__anon41::HomographySymmetricGeometricCostFunctor	file:
y_	ceres-solver/examples/nist.cc	/^  double y_;$/;"	m	struct:ceres::examples::Nelson	file:
y_	ceres-solver/examples/robust_curve_fitting.cc	/^  const double y_;$/;"	m	struct:ExponentialResidual	file:
y_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> y_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
y_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double> y_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
y_	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^  double x_[3], y_[4], z_[5], w_[6];$/;"	m	class:ceres::internal::SchurOrderingTest	file:
y_	ceres-solver/internal/ceres/reorder_program_test.cc	/^  double y_;$/;"	m	class:ceres::internal::ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest	file:
y_	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  double y_;$/;"	m	class:ceres::internal::LinearSolverAndEvaluatorCreationTest	file:
y_delta_indices_	ceres-solver/examples/fields_of_experts.h	/^  std::vector<int> x_delta_indices_, y_delta_indices_;$/;"	m	class:ceres::examples::FieldsOfExperts
yaw_ab_radians_	ceres-solver/examples/slam/pose_graph_2d/pose_graph_2d_error_term.h	/^  const double yaw_ab_radians_;$/;"	m	class:ceres::examples::PoseGraph2dErrorTerm
yaw_radians	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  double yaw_radians;$/;"	m	struct:ceres::examples::Constraint2d
yaw_radians	ceres-solver/examples/slam/pose_graph_2d/types.h	/^  double yaw_radians;$/;"	m	struct:ceres::examples::Pose2d
yy_	ceres-solver/examples/circle_fit.cc	/^  double xx_, yy_;$/;"	m	class:DistanceFromCircleCost	file:
z	ceres-solver/internal/ceres/evaluator_test.cc	/^  double z[4];$/;"	m	struct:ceres::internal::EvaluatorTest	file:
z	ceres-solver/internal/ceres/problem_test.cc	/^  double y[4], z[5], w[3];$/;"	m	struct:ceres::internal::DynamicProblem	file:
z	src/serial_comm/include/comm_read.h	/^  uint32_t z;$/;"	m	struct:autocar::serial_mul::__anon50
z	src/serial_communication/src/commRecv.cxx	/^    uint32_t z;$/;"	m	struct:__anon48	file:
z	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double z;$/;"	m	struct:AbsPos
z	src/vision_unit/include/vision_unit/vision_lidar_fusion/vision_lidar_fusion.h	/^  double z;$/;"	m	struct:RelPos
z0_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  double z0_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
z1_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  double z1_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
z2_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  double z2_;$/;"	m	class:ceres::internal::SixParameterCostFunctorTest	file:
z_	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  scoped_array<double> z_;$/;"	m	class:ceres::internal::CgnrLinearOperator
z_	ceres-solver/internal/ceres/dynamic_autodiff_cost_function_test.cc	/^  vector<double> z_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
z_	ceres-solver/internal/ceres/dynamic_numeric_diff_cost_function_test.cc	/^  vector<double> z_;$/;"	m	class:ceres::internal::ThreeParameterCostFunctorTest	file:
z_	ceres-solver/internal/ceres/parameter_block_ordering_test.cc	/^  double x_[3], y_[4], z_[5], w_[6];$/;"	m	class:ceres::internal::SchurOrderingTest	file:
z_	ceres-solver/internal/ceres/reorder_program_test.cc	/^  double z_;$/;"	m	class:ceres::internal::ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest	file:
z_	ceres-solver/internal/ceres/trust_region_preprocessor_test.cc	/^  double z_;$/;"	m	class:ceres::internal::LinearSolverAndEvaluatorCreationTest	file:
~AbortingIterationCallback	ceres-solver/internal/ceres/minimizer_test.cc	/^  virtual ~AbortingIterationCallback() {}$/;"	f	class:ceres::internal::AbortingIterationCallback
~AbstractSocketWriter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    virtual ~AbstractSocketWriter() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
~ActionInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~ActionInterface() {}$/;"	f	class:testing::ActionInterface
~Arguments	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ~Arguments() {$/;"	f	class:testing::internal::Arguments
~ArmijoLineSearch	ceres-solver/internal/ceres/line_search.h	/^  virtual ~ArmijoLineSearch() {}$/;"	f	class:ceres::internal::ArmijoLineSearch
~AssertHelper	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AssertHelper::~AssertHelper() {$/;"	f	class:testing::internal::AssertHelper
~AutoDiffCostFunction	ceres-solver/include/ceres/autodiff_cost_function.h	/^  virtual ~AutoDiffCostFunction() {}$/;"	f	class:ceres::AutoDiffCostFunction
~AutoDiffLocalParameterization	ceres-solver/include/ceres/autodiff_local_parameterization.h	/^  virtual ~AutoDiffLocalParameterization() {}$/;"	f	class:ceres::AutoDiffLocalParameterization
~AutoHandle	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^AutoHandle::~AutoHandle() {$/;"	f	class:testing::internal::AutoHandle
~AutoLocker	src/rplidar_ros/sdk/src/hal/locker.h	/^    ~AutoLocker() {_binded.unlock();}$/;"	f	class:rp::hal::AutoLocker
~BALProblem	ceres-solver/examples/bal_problem.cc	/^BALProblem::~BALProblem() {$/;"	f	class:ceres::examples::BALProblem
~BALProblem	ceres-solver/examples/simple_bundle_adjuster.cc	/^  ~BALProblem() {$/;"	f	class:BALProblem
~BFGS	ceres-solver/internal/ceres/line_search_direction.cc	/^  virtual ~BFGS() {}$/;"	f	class:ceres::internal::BFGS
~BadLocalParameterization	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual ~BadLocalParameterization() {}$/;"	f	class:ceres::internal::BadLocalParameterization
~BlockJacobiPreconditioner	ceres-solver/internal/ceres/block_jacobi_preconditioner.cc	/^BlockJacobiPreconditioner::~BlockJacobiPreconditioner() {}$/;"	f	class:ceres::internal::BlockJacobiPreconditioner
~BlockRandomAccessDenseMatrix	ceres-solver/internal/ceres/block_random_access_dense_matrix.cc	/^BlockRandomAccessDenseMatrix::~BlockRandomAccessDenseMatrix() {$/;"	f	class:ceres::internal::BlockRandomAccessDenseMatrix
~BlockRandomAccessDiagonalMatrix	ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc	/^BlockRandomAccessDiagonalMatrix::~BlockRandomAccessDiagonalMatrix() {$/;"	f	class:ceres::internal::BlockRandomAccessDiagonalMatrix
~BlockRandomAccessDiagonalMatrixAdapter	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual ~BlockRandomAccessDiagonalMatrixAdapter() {}$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessDiagonalMatrixAdapter
~BlockRandomAccessMatrix	ceres-solver/internal/ceres/block_random_access_matrix.cc	/^BlockRandomAccessMatrix::~BlockRandomAccessMatrix() {$/;"	f	class:ceres::internal::BlockRandomAccessMatrix
~BlockRandomAccessSparseMatrix	ceres-solver/internal/ceres/block_random_access_sparse_matrix.cc	/^BlockRandomAccessSparseMatrix::~BlockRandomAccessSparseMatrix() {$/;"	f	class:ceres::internal::BlockRandomAccessSparseMatrix
~BlockRandomAccessSparseMatrixAdapter	ceres-solver/internal/ceres/schur_complement_solver.cc	/^  virtual ~BlockRandomAccessSparseMatrixAdapter() {}$/;"	f	class:ceres::internal::__anon12::BlockRandomAccessSparseMatrixAdapter
~BlockSparseMatrix	ceres-solver/internal/ceres/block_sparse_matrix.cc	/^BlockSparseMatrix::~BlockSparseMatrix() {}$/;"	f	class:ceres::internal::BlockSparseMatrix
~BundleAdjustmentProblem	ceres-solver/internal/ceres/bundle_adjustment_test.cc	/^  ~BundleAdjustmentProblem() {$/;"	f	class:ceres::internal::BundleAdjustmentProblem
~CXSparse	ceres-solver/internal/ceres/cxsparse.cc	/^CXSparse::~CXSparse() {$/;"	f	class:ceres::internal::CXSparse
~CallbackCostFunction	ceres-solver/internal/ceres/c_api.cc	/^  virtual ~CallbackCostFunction() {}$/;"	f	class:CallbackCostFunction
~CapturedStream	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ~CapturedStream() {$/;"	f	class:testing::internal::CapturedStream
~CardinalityInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~CardinalityInterface() {}$/;"	f	class:testing::CardinalityInterface
~CartesianProductGenerator10	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator10() {}$/;"	f	class:testing::internal::CartesianProductGenerator10
~CartesianProductGenerator2	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator2() {}$/;"	f	class:testing::internal::CartesianProductGenerator2
~CartesianProductGenerator3	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator3() {}$/;"	f	class:testing::internal::CartesianProductGenerator3
~CartesianProductGenerator4	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator4() {}$/;"	f	class:testing::internal::CartesianProductGenerator4
~CartesianProductGenerator5	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator5() {}$/;"	f	class:testing::internal::CartesianProductGenerator5
~CartesianProductGenerator6	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator6() {}$/;"	f	class:testing::internal::CartesianProductGenerator6
~CartesianProductGenerator7	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator7() {}$/;"	f	class:testing::internal::CartesianProductGenerator7
~CartesianProductGenerator8	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator8() {}$/;"	f	class:testing::internal::CartesianProductGenerator8
~CartesianProductGenerator9	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~CartesianProductGenerator9() {}$/;"	f	class:testing::internal::CartesianProductGenerator9
~CeresMutexLock	ceres-solver/internal/ceres/mutex.h	/^  ~CeresMutexLock() { mu_->Unlock(); }$/;"	f	class:ceres::internal::CeresMutexLock
~CeresReaderMutexLock	ceres-solver/internal/ceres/mutex.h	/^  ~CeresReaderMutexLock() { mu_->ReaderUnlock(); }$/;"	f	class:ceres::internal::CeresReaderMutexLock
~CeresWriterMutexLock	ceres-solver/internal/ceres/mutex.h	/^  ~CeresWriterMutexLock() { mu_->WriterUnlock(); }$/;"	f	class:ceres::internal::CeresWriterMutexLock
~CgnrLinearOperator	ceres-solver/internal/ceres/cgnr_linear_operator.h	/^  virtual ~CgnrLinearOperator() {}$/;"	f	class:ceres::internal::CgnrLinearOperator
~ComposedLoss	ceres-solver/internal/ceres/loss_function.cc	/^ComposedLoss::~ComposedLoss() {$/;"	f	class:ceres::ComposedLoss
~CompressedRowSparseMatrix	ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc	/^CompressedRowSparseMatrix::~CompressedRowSparseMatrix() {}$/;"	f	class:ceres::internal::CompressedRowSparseMatrix
~ConditionedCostFunction	ceres-solver/internal/ceres/conditioned_cost_function.cc	/^ConditionedCostFunction::~ConditionedCostFunction() {$/;"	f	class:ceres::ConditionedCostFunction
~CoordinateDescentMinimizer	ceres-solver/internal/ceres/coordinate_descent_minimizer.cc	/^CoordinateDescentMinimizer::~CoordinateDescentMinimizer() {$/;"	f	class:ceres::internal::CoordinateDescentMinimizer
~CostFunction	ceres-solver/include/ceres/cost_function.h	/^  virtual ~CostFunction() {}$/;"	f	class:ceres::CostFunction
~Covariance	ceres-solver/internal/ceres/covariance.cc	/^Covariance::~Covariance() {$/;"	f	class:ceres::Covariance
~CovarianceImpl	ceres-solver/internal/ceres/covariance_impl.cc	/^CovarianceImpl::~CovarianceImpl() {$/;"	f	class:ceres::internal::CovarianceImpl
~DeathTest	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DeathTestImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }$/;"	f	class:testing::internal::DeathTestImpl
~DenseSchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.h	/^  virtual ~DenseSchurComplementSolver() {}$/;"	f	class:ceres::internal::DenseSchurComplementSolver
~DenseSparseMatrix	ceres-solver/internal/ceres/dense_sparse_matrix.h	/^  virtual ~DenseSparseMatrix() {}$/;"	f	class:ceres::internal::DenseSparseMatrix
~DestructorCountingCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^  virtual ~DestructorCountingCostFunction() {$/;"	f	class:ceres::internal::DestructorCountingCostFunction
~DoglegStrategy	ceres-solver/internal/ceres/dogleg_strategy.h	/^  virtual ~DoglegStrategy() {}$/;"	f	class:ceres::internal::DoglegStrategy
~DynamicAutoDiffCostFunction	ceres-solver/include/ceres/dynamic_autodiff_cost_function.h	/^  virtual ~DynamicAutoDiffCostFunction() {}$/;"	f	class:ceres::DynamicAutoDiffCostFunction
~DynamicCostFunction	ceres-solver/include/ceres/dynamic_cost_function.h	/^  ~DynamicCostFunction() {}$/;"	f	class:ceres::DynamicCostFunction
~DynamicNumericDiffCostFunction	ceres-solver/include/ceres/dynamic_numeric_diff_cost_function.h	/^  virtual ~DynamicNumericDiffCostFunction() {$/;"	f	class:ceres::DynamicNumericDiffCostFunction
~DynamicSparseNormalCholeskySolver	ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.h	/^  virtual ~DynamicSparseNormalCholeskySolver() {}$/;"	f	class:ceres::internal::DynamicSparseNormalCholeskySolver
~EigenQuaternionParameterization	ceres-solver/include/ceres/local_parameterization.h	/^  virtual ~EigenQuaternionParameterization() {}$/;"	f	class:ceres::EigenQuaternionParameterization
~EndianAwareFileReader	ceres-solver/examples/libmv_bundle_adjuster.cc	/^  ~EndianAwareFileReader(void) {$/;"	f	class:__anon38::EndianAwareFileReader
~Environment	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~Evaluator	ceres-solver/internal/ceres/evaluator.cc	/^Evaluator::~Evaluator() {}$/;"	f	class:ceres::internal::Evaluator
~Event	src/rplidar_ros/sdk/src/hal/event.h	/^    ~ Event()$/;"	f	class:rp::hal::Event
~EventLogger	ceres-solver/internal/ceres/wall_time.cc	/^EventLogger::~EventLogger() {$/;"	f	class:ceres::internal::EventLogger
~Expectation	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Expectation::~Expectation() {}$/;"	f	class:testing::Expectation
~ExpectationBase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ExpectationBase::~ExpectationBase() {}$/;"	f	class:testing::internal::ExpectationBase
~FakeIterationCallback	ceres-solver/internal/ceres/minimizer_test.cc	/^  virtual ~FakeIterationCallback() {}$/;"	f	class:ceres::internal::FakeIterationCallback
~FirstOrderFunction	ceres-solver/include/ceres/gradient_problem.h	/^  virtual ~FirstOrderFunction() {}$/;"	f	class:ceres::FirstOrderFunction
~FixedArray	ceres-solver/include/ceres/internal/fixed_array.h	/^inline FixedArray<T, S>::~FixedArray() {$/;"	f	class:ceres::internal::FixedArray
~GTestFlagSaver	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ~GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
~GTestLog	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^GTestLog::~GTestLog() {$/;"	f	class:testing::internal::GTestLog
~GTestMutexLock	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:std::tr1::GTestMutexLock
~GradientCheckingCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function.cc	/^  virtual ~GradientCheckingCostFunction() { }$/;"	f	class:ceres::internal::__anon8::GradientCheckingCostFunction
~GradientProblemEvaluator	ceres-solver/internal/ceres/gradient_problem_evaluator.h	/^  virtual ~GradientProblemEvaluator() {}$/;"	f	class:ceres::internal::GradientProblemEvaluator
~GradientProblemSolver	ceres-solver/internal/ceres/gradient_problem_solver.cc	/^GradientProblemSolver::~GradientProblemSolver() {$/;"	f	class:ceres::GradientProblemSolver
~HasNewFatalFailureHelper	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {$/;"	f	class:testing::internal::HasNewFatalFailureHelper
~HomogeneousVectorParameterization	ceres-solver/include/ceres/local_parameterization.h	/^  virtual ~HomogeneousVectorParameterization() {}$/;"	f	class:ceres::HomogeneousVectorParameterization
~IdentityParameterization	ceres-solver/include/ceres/local_parameterization.h	/^  virtual ~IdentityParameterization() {}$/;"	f	class:ceres::IdentityParameterization
~ImplicitSchurComplement	ceres-solver/internal/ceres/implicit_schur_complement.cc	/^ImplicitSchurComplement::~ImplicitSchurComplement() {$/;"	f	class:ceres::internal::ImplicitSchurComplement
~InSequence	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^InSequence::~InSequence() {$/;"	f	class:testing::InSequence
~InternalRunDeathTestFlag	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~IterationCallback	ceres-solver/include/ceres/iteration_callback.h	/^  virtual ~IterationCallback() {}$/;"	f	class:ceres::IterationCallback
~IterativeSchurComplementSolver	ceres-solver/internal/ceres/iterative_schur_complement_solver.cc	/^IterativeSchurComplementSolver::~IterativeSchurComplementSolver() {$/;"	f	class:ceres::internal::IterativeSchurComplementSolver
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::RangeGenerator::Iterator
~Iterator	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
~LBFGS	ceres-solver/internal/ceres/line_search_direction.cc	/^  virtual ~LBFGS() {}$/;"	f	class:ceres::internal::LBFGS
~LevenbergMarquardtStrategy	ceres-solver/internal/ceres/levenberg_marquardt_strategy.cc	/^LevenbergMarquardtStrategy::~LevenbergMarquardtStrategy() {$/;"	f	class:ceres::internal::LevenbergMarquardtStrategy
~LineSearch	ceres-solver/internal/ceres/line_search.h	/^  virtual ~LineSearch() {}$/;"	f	class:ceres::internal::LineSearch
~LineSearchDirection	ceres-solver/internal/ceres/line_search_direction.h	/^  virtual ~LineSearchDirection() {}$/;"	f	class:ceres::internal::LineSearchDirection
~LineSearchMinimizer	ceres-solver/internal/ceres/line_search_minimizer.h	/^  ~LineSearchMinimizer() {}$/;"	f	class:ceres::internal::LineSearchMinimizer
~LineSearchPreprocessor	ceres-solver/internal/ceres/line_search_preprocessor.cc	/^LineSearchPreprocessor::~LineSearchPreprocessor() {$/;"	f	class:ceres::internal::LineSearchPreprocessor
~LinearOperator	ceres-solver/internal/ceres/linear_operator.cc	/^LinearOperator::~LinearOperator() {$/;"	f	class:ceres::internal::LinearOperator
~LinearSolver	ceres-solver/internal/ceres/linear_solver.cc	/^LinearSolver::~LinearSolver() {$/;"	f	class:ceres::internal::LinearSolver
~LocalParameterization	ceres-solver/internal/ceres/local_parameterization.cc	/^LocalParameterization::~LocalParameterization() {$/;"	f	class:ceres::LocalParameterization
~Locker	src/rplidar_ros/sdk/src/hal/locker.h	/^    ~Locker()$/;"	f	class:rp::hal::Locker
~LogSink	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  virtual ~LogSink() {}$/;"	f	class:google::LogSink
~LoggingCallback	ceres-solver/internal/ceres/callbacks.cc	/^LoggingCallback::~LoggingCallback() {}$/;"	f	class:ceres::internal::LoggingCallback
~LossFunction	ceres-solver/include/ceres/loss_function.h	/^  virtual ~LossFunction() {}$/;"	f	class:ceres::LossFunction
~LossFunctionWrapper	ceres-solver/include/ceres/loss_function.h	/^  virtual ~LossFunctionWrapper() {$/;"	f	class:ceres::LossFunctionWrapper
~LowRankInverseHessian	ceres-solver/internal/ceres/low_rank_inverse_hessian.h	/^  virtual ~LowRankInverseHessian() {}$/;"	f	class:ceres::internal::LowRankInverseHessian
~MatchResultListener	ceres-solver/internal/ceres/gmock/gmock.h	/^inline MatchResultListener::~MatchResultListener() {$/;"	f	class:testing::MatchResultListener
~MatcherBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~MatcherBase() {}$/;"	f	class:testing::internal::MatcherBase
~MatcherDescriberInterface	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~MatcherDescriberInterface() {}$/;"	f	class:testing::MatcherDescriberInterface
~MessageLogger	ceres-solver/internal/ceres/miniglog/glog/logging.h	/^  ~MessageLogger() {$/;"	f	class:MessageLogger
~Minimizer	ceres-solver/internal/ceres/minimizer.cc	/^Minimizer::~Minimizer() {}$/;"	f	class:ceres::internal::Minimizer
~MockObjectRegistry	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ~MockObjectRegistry() {$/;"	f	class:testing::__anon29::MockObjectRegistry
~Mutex	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Mutex::~Mutex() {$/;"	f	class:testing::internal::Mutex
~Mutex	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~Mutex() {$/;"	f	class:std::tr1::Mutex
~Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::~Mutex()            { CERES_SAFE_PTHREAD(pthread_mutex_destroy); }$/;"	f	class:ceres::internal::Mutex
~Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::~Mutex()            { CERES_SAFE_PTHREAD(pthread_rwlock_destroy); }$/;"	f	class:ceres::internal::Mutex
~Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::~Mutex()            { DeleteCriticalSection(&mutex_); }$/;"	f	class:ceres::internal::Mutex
~Mutex	ceres-solver/internal/ceres/mutex.h	/^Mutex::~Mutex()            { assert(mutex_ == 0); }$/;"	f	class:ceres::internal::Mutex
~NaggyMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~NaggyMock() {$/;"	f	class:testing::NaggyMock
~NativeArray	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~NiceMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~NiceMock() {$/;"	f	class:testing::NiceMock
~Notification	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~Notification() {$/;"	f	class:std::tr1::Notification
~NumParameterBlocksCostFunction	ceres-solver/internal/ceres/program_test.cc	/^  virtual ~NumParameterBlocksCostFunction() {$/;"	f	class:ceres::internal::NumParameterBlocksCostFunction
~NumericDiffCostFunction	ceres-solver/include/ceres/numeric_diff_cost_function.h	/^  ~NumericDiffCostFunction() {$/;"	f	class:ceres::NumericDiffCostFunction
~OsStackTraceGetterInterface	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  virtual ~OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
~ParamGeneratorInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestCaseInfoBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
~ParameterizedTestCaseRegistry	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~ParameterizedTestCaseRegistry() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
~PartitionedMatrixView	ceres-solver/internal/ceres/partitioned_matrix_view_impl.h	/^~PartitionedMatrixView() {$/;"	f	class:ceres::internal::PartitionedMatrixView
~PartitionedMatrixViewBase	ceres-solver/internal/ceres/partitioned_matrix_view.h	/^  virtual ~PartitionedMatrixViewBase() {}$/;"	f	class:ceres::internal::PartitionedMatrixViewBase
~PolynomialParameterization	ceres-solver/internal/ceres/covariance_test.cc	/^  virtual ~PolynomialParameterization() {}$/;"	f	class:ceres::internal::PolynomialParameterization
~PowellEvaluator2	ceres-solver/internal/ceres/trust_region_minimizer_test.cc	/^  virtual ~PowellEvaluator2() {}$/;"	f	class:ceres::internal::PowellEvaluator2
~Preconditioner	ceres-solver/internal/ceres/preconditioner.cc	/^Preconditioner::~Preconditioner() {$/;"	f	class:ceres::internal::Preconditioner
~Preprocessor	ceres-solver/internal/ceres/preprocessor.cc	/^Preprocessor::~Preprocessor() {$/;"	f	class:ceres::internal::Preprocessor
~Problem	ceres-solver/internal/ceres/problem.cc	/^Problem::~Problem() {}$/;"	f	class:ceres::Problem
~ProblemImpl	ceres-solver/internal/ceres/problem_impl.cc	/^ProblemImpl::~ProblemImpl() {$/;"	f	class:ceres::internal::ProblemImpl
~ProductParameterization	ceres-solver/internal/ceres/local_parameterization.cc	/^ProductParameterization::~ProductParameterization() {$/;"	f	class:ceres::ProductParameterization
~QuadraticCostFunction	ceres-solver/examples/helloworld_analytic_diff.cc	/^  virtual ~QuadraticCostFunction() {}$/;"	f	class:QuadraticCostFunction
~QuadraticTestFunction	ceres-solver/internal/ceres/gradient_problem_test.cc	/^  virtual ~QuadraticTestFunction() {$/;"	f	class:ceres::internal::QuadraticTestFunction
~QuaternionParameterization	ceres-solver/include/ceres/local_parameterization.h	/^  virtual ~QuaternionParameterization() {}$/;"	f	class:ceres::QuaternionParameterization
~RE	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^RE::~RE() {$/;"	f	class:testing::internal::RE
~RPlidarDriver	src/rplidar_ros/sdk/include/rplidar_driver.h	/^    virtual ~RPlidarDriver() {}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
~RPlidarDriverSerialImpl	src/rplidar_ros/sdk/src/rplidar_driver.cpp	/^RPlidarDriverSerialImpl::~RPlidarDriverSerialImpl()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerialImpl
~RangeGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~RangeGenerator() {}$/;"	f	class:testing::internal::RangeGenerator
~RegularizationCheckingLinearSolver	ceres-solver/internal/ceres/levenberg_marquardt_strategy_test.cc	/^  virtual ~RegularizationCheckingLinearSolver() {}$/;"	f	class:ceres::internal::RegularizationCheckingLinearSolver
~RememberingCallback	ceres-solver/internal/ceres/solver_test.cc	/^  virtual ~RememberingCallback() {}$/;"	f	struct:ceres::internal::RememberingCallback
~ReturnSentinel	ceres-solver/internal/ceres/gtest/gtest.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~Rosenbrock	ceres-solver/examples/rosenbrock.cc	/^  virtual ~Rosenbrock() {}$/;"	f	class:Rosenbrock
~Rosenbrock	ceres-solver/internal/ceres/gradient_problem_solver_test.cc	/^  virtual ~Rosenbrock() {}$/;"	f	class:ceres::internal::Rosenbrock
~Runnable	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~Runnable() {}$/;"	f	class:std::tr1::ThreadWithParamBase::Runnable
~RunnableImpl	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~RunnableImpl() {}$/;"	f	class:std::tr1::ThreadWithParam::RunnableImpl
~ScaledLoss	ceres-solver/include/ceres/loss_function.h	/^  virtual ~ScaledLoss() {$/;"	f	class:ceres::ScaledLoss
~SchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.h	/^  virtual ~SchurComplementSolver() {}$/;"	f	class:ceres::internal::SchurComplementSolver
~SchurEliminator	ceres-solver/internal/ceres/schur_eliminator_impl.h	/^SchurEliminator<kRowBlockSize, kEBlockSize, kFBlockSize>::~SchurEliminator() {$/;"	f	class:ceres::internal::SchurEliminator
~SchurEliminatorBase	ceres-solver/internal/ceres/schur_eliminator.h	/^  virtual ~SchurEliminatorBase() {}$/;"	f	class:ceres::internal::SchurEliminatorBase
~SchurJacobiPreconditioner	ceres-solver/internal/ceres/schur_jacobi_preconditioner.cc	/^SchurJacobiPreconditioner::~SchurJacobiPreconditioner() {$/;"	f	class:ceres::internal::SchurJacobiPreconditioner
~ScopedExecutionTimer	ceres-solver/internal/ceres/execution_summary.h	/^  ~ScopedExecutionTimer() {$/;"	f	class:ceres::internal::ScopedExecutionTimer
~ScopedFakeTestPartResultReporter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
~ScopedMockLog	ceres-solver/internal/ceres/gmock/mock-log.h	/^  virtual ~ScopedMockLog() { RemoveLogSink(this); }$/;"	f	class:testing::ScopedMockLog
~ScopedPrematureExitFile	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^  ~ScopedPrematureExitFile() {$/;"	f	class:testing::internal::ScopedPrematureExitFile
~ScopedSetValue	ceres-solver/internal/ceres/c_api_test.cc	/^  ~ScopedSetValue() {$/;"	f	class:ceres::internal::ScopedSetValue
~SingleFailureChecker	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^SingleFailureChecker::~SingleFailureChecker() {$/;"	f	class:testing::internal::SingleFailureChecker
~SizedCostFunction	ceres-solver/include/ceres/sized_cost_function.h	/^  virtual ~SizedCostFunction() { }$/;"	f	class:ceres::SizedCostFunction
~SocketWriter	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^    virtual ~SocketWriter() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
~Solver	ceres-solver/internal/ceres/solver.cc	/^Solver::~Solver() {}$/;"	f	class:ceres::Solver
~SparseMatrix	ceres-solver/internal/ceres/sparse_matrix.cc	/^SparseMatrix::~SparseMatrix() {$/;"	f	class:ceres::internal::SparseMatrix
~SparseMatrixPreconditionerWrapper	ceres-solver/internal/ceres/preconditioner.cc	/^SparseMatrixPreconditionerWrapper::~SparseMatrixPreconditionerWrapper() {$/;"	f	class:ceres::internal::SparseMatrixPreconditionerWrapper
~SparseNormalCholeskySolver	ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc	/^SparseNormalCholeskySolver::~SparseNormalCholeskySolver() {$/;"	f	class:ceres::internal::SparseNormalCholeskySolver
~SparseSchurComplementSolver	ceres-solver/internal/ceres/schur_complement_solver.cc	/^SparseSchurComplementSolver::~SparseSchurComplementSolver() {$/;"	f	class:ceres::internal::SparseSchurComplementSolver
~StateUpdatingCallback	ceres-solver/internal/ceres/callbacks.cc	/^StateUpdatingCallback::~StateUpdatingCallback() {}$/;"	f	class:ceres::internal::StateUpdatingCallback
~SteepestDescent	ceres-solver/internal/ceres/line_search_direction.cc	/^  virtual ~SteepestDescent() {}$/;"	f	class:ceres::internal::SteepestDescent
~StrictMock	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~StrictMock() {$/;"	f	class:testing::StrictMock
~SubsetParameterization	ceres-solver/include/ceres/local_parameterization.h	/^  virtual ~SubsetParameterization() {}$/;"	f	class:ceres::SubsetParameterization
~SucceedingIterationCallback	ceres-solver/internal/ceres/minimizer_test.cc	/^  virtual ~SucceedingIterationCallback() {}$/;"	f	class:ceres::internal::SucceedingIterationCallback
~SuiteSparse	ceres-solver/internal/ceres/suitesparse.cc	/^SuiteSparse::~SuiteSparse() {$/;"	f	class:ceres::internal::SuiteSparse
~Test	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^Test::~Test() {$/;"	f	class:testing::Test
~TestCase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestCase::~TestCase() {$/;"	f	class:testing::TestCase
~TestEventListener	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestEventListeners	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestEventListeners::~TestEventListeners() { delete repeater_; }$/;"	f	class:testing::TestEventListeners
~TestEventRepeater	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestEventRepeater::~TestEventRepeater() {$/;"	f	class:testing::internal::TestEventRepeater
~TestFactoryBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestInfo	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestInfo::~TestInfo() { delete factory_; }$/;"	f	class:testing::TestInfo
~TestMetaFactoryBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestParameterization	ceres-solver/internal/ceres/parameter_block_test.cc	/^  virtual ~TestParameterization() {}$/;"	f	struct:ceres::internal::TestParameterization
~TestPartResultReporterInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~TestResult	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^TestResult::~TestResult() {$/;"	f	class:testing::TestResult
~Thread	src/rplidar_ros/sdk/src/hal/thread.h	/^    ~Thread() { }$/;"	f	class:rp::hal::Thread
~ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocal	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~ThreadLocal() {$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocalBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ThreadLocalBase() {}$/;"	f	class:std::tr1::ThreadLocalBase
~ThreadLocalValueHolderBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:std::tr1::ThreadLocalValueHolderBase
~ThreadWithParam	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ThreadWithParam() {}$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParam	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~ThreadWithParam() { Join(); }$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParamBase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^ThreadWithParamBase::~ThreadWithParamBase() {$/;"	f	class:testing::internal::ThreadWithParamBase
~ThreadWithParamBase	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:std::tr1::ThreadWithParamBase
~TripletSparseMatrix	ceres-solver/internal/ceres/triplet_sparse_matrix.cc	/^TripletSparseMatrix::~TripletSparseMatrix() {}$/;"	f	class:ceres::internal::TripletSparseMatrix
~TrustRegionMinimizer	ceres-solver/internal/ceres/trust_region_minimizer.cc	/^TrustRegionMinimizer::~TrustRegionMinimizer() {}$/;"	f	class:ceres::internal::TrustRegionMinimizer
~TrustRegionPreprocessor	ceres-solver/internal/ceres/trust_region_preprocessor.cc	/^TrustRegionPreprocessor::~TrustRegionPreprocessor() {$/;"	f	class:ceres::internal::TrustRegionPreprocessor
~TrustRegionStrategy	ceres-solver/internal/ceres/trust_region_strategy.cc	/^TrustRegionStrategy::~TrustRegionStrategy() {}$/;"	f	class:ceres::internal::TrustRegionStrategy
~TypedExpectation	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~TypedExpectation() {$/;"	f	class:testing::internal::TypedExpectation
~TypedLinearSolver	ceres-solver/internal/ceres/linear_solver.h	/^  virtual ~TypedLinearSolver() {}$/;"	f	class:ceres::internal::TypedLinearSolver
~TypedPreconditioner	ceres-solver/internal/ceres/preconditioner.h	/^  virtual ~TypedPreconditioner() {}$/;"	f	class:ceres::internal::TypedPreconditioner
~UnaryCostFunction	ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc	/^  virtual ~UnaryCostFunction() {}$/;"	f	class:ceres::internal::UnaryCostFunction
~UnaryCostFunction	ceres-solver/internal/ceres/problem_test.cc	/^  virtual ~UnaryCostFunction() {}$/;"	f	class:ceres::internal::UnaryCostFunction
~UnitTest	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UnitTest::~UnitTest() {$/;"	f	class:testing::UnitTest
~UnitTestImpl	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UnitTestImpl::~UnitTestImpl() {$/;"	f	class:testing::internal::UnitTestImpl
~UntypedActionResultHolderBase	ceres-solver/internal/ceres/gmock/gmock.h	/^  virtual ~UntypedActionResultHolderBase() {}$/;"	f	class:testing::internal::UntypedActionResultHolderBase
~UntypedFunctionMockerBase	ceres-solver/internal/ceres/gmock_gtest_all.cc	/^UntypedFunctionMockerBase::~UntypedFunctionMockerBase() {}$/;"	f	class:testing::internal::UntypedFunctionMockerBase
~ValueHolderFactory	ceres-solver/internal/ceres/gtest/gtest.h	/^    virtual ~ValueHolderFactory() {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolderFactory
~ValueProducer	ceres-solver/internal/ceres/gmock/gmock.h	/^    virtual ~ValueProducer() {}$/;"	f	class:testing::DefaultValue::ValueProducer
~ValuesInIteratorRangeGenerator	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~ValuesInIteratorRangeGenerator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
~VisibilityBasedPreconditioner	ceres-solver/internal/ceres/visibility_based_preconditioner.cc	/^VisibilityBasedPreconditioner::~VisibilityBasedPreconditioner() {$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
~VisibilityBasedPreconditioner	ceres-solver/internal/ceres/visibility_based_preconditioner.h	/^  virtual ~VisibilityBasedPreconditioner() {}$/;"	f	class:ceres::internal::VisibilityBasedPreconditioner
~WithParamInterface	ceres-solver/internal/ceres/gtest/gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
~WolfeLineSearch	ceres-solver/internal/ceres/line_search.h	/^  virtual ~WolfeLineSearch() {}$/;"	f	class:ceres::internal::WolfeLineSearch
~armor_detect_node	src/vision_unit/src/detect_factory/armor_detect_node.cpp	/^armor_detect_node::~armor_detect_node(void)$/;"	f	class:autocar::vision_mul::armor_detect_node
~comm_read	src/serial_comm/src/comm_read.cpp	/^comm_read::~comm_read()$/;"	f	class:autocar::serial_mul::comm_read
~comm_write	src/serial_comm/src/comm_write.cpp	/^comm_write::~comm_write()$/;"	f	class:autocar::serial_mul::comm_write
~labeler	src/vision_unit/src/detect_factory/labeler.cpp	/^labeler::~labeler() {$/;"	f	class:autocar::vision_mul::labeler
~linked_ptr	ceres-solver/internal/ceres/gtest/gtest.h	/^  ~linked_ptr() { depart(); }$/;"	f	class:testing::internal::linked_ptr
~raw_serial	src/rplidar_ros/sdk/src/arch/linux/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~raw_serial	src/rplidar_ros/sdk/src/arch/macOS/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~raw_serial	src/rplidar_ros/sdk/src/arch/win32/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~scoped_array	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  ~scoped_array() {$/;"	f	class:ceres::internal::scoped_array
~scoped_ptr	ceres-solver/include/ceres/internal/scoped_ptr.h	/^  ~scoped_ptr() {$/;"	f	class:ceres::internal::scoped_ptr
~serial_rxtx	src/rplidar_ros/sdk/src/hal/abs_rxtx.h	/^    virtual ~serial_rxtx(){}$/;"	f	class:rp::hal::serial_rxtx
~video_recoder	src/vision_unit/src/detect_factory/video_recoder.cpp	/^video_recoder::~video_recoder()$/;"	f	class:autocar::vision_mul::video_recoder
